
heartbeat4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800228c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000060  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000070  20000070  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   000083aa  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001353  00000000  00000000  000283ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000938  00000000  00000000  00029740  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000890  00000000  00000000  0002a078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003869  00000000  00000000  0002a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002edc  00000000  00000000  0002e171  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003104d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002634  00000000  00000000  000310cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002254 	.word	0x08002254

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002254 	.word	0x08002254

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f929 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f001 fd74 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f941 	bl	80007e6 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f909 	bl	8000792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	2000002c 	.word	0x2000002c

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <__NVIC_EnableIRQ+0x38>)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	095b      	lsrs	r3, r3, #5
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	f002 021f 	and.w	r2, r2, #31
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	490d      	ldr	r1, [pc, #52]	; (80006cc <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	4909      	ldr	r1, [pc, #36]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	2201      	movs	r2, #1
 800070a:	69bb      	ldr	r3, [r7, #24]
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	401a      	ands	r2, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071a:	2101      	movs	r1, #1
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	1e59      	subs	r1, r3, #1
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800075c:	f7ff ff90 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff2b 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff40 	bl	8000628 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff90 	bl	80006d4 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5f 	bl	8000680 <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff33 	bl	8000644 <__NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffa2 	bl	8000738 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e177      	b.n	8000b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	429a      	cmp	r2, r3
 8000836:	f040 8166 	bne.w	8000b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d003      	beq.n	800084a <HAL_GPIO_Init+0x4a>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b12      	cmp	r3, #18
 8000848:	d123      	bne.n	8000892 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	08da      	lsrs	r2, r3, #3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3208      	adds	r2, #8
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	220f      	movs	r2, #15
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	08da      	lsrs	r2, r3, #3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3208      	adds	r2, #8
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4013      	ands	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0203 	and.w	r2, r3, #3
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4313      	orrs	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d00b      	beq.n	80008e6 <HAL_GPIO_Init+0xe6>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d007      	beq.n	80008e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	2b11      	cmp	r3, #17
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d130      	bne.n	8000948 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4313      	orrs	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800091c:	2201      	movs	r2, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 80c0 	beq.w	8000b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4a65      	ldr	r2, [pc, #404]	; (8000b20 <HAL_GPIO_Init+0x320>)
 800098c:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <HAL_GPIO_Init+0x320>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a2:	4a60      	ldr	r2, [pc, #384]	; (8000b24 <HAL_GPIO_Init+0x324>)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a57      	ldr	r2, [pc, #348]	; (8000b28 <HAL_GPIO_Init+0x328>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d037      	beq.n	8000a3e <HAL_GPIO_Init+0x23e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a56      	ldr	r2, [pc, #344]	; (8000b2c <HAL_GPIO_Init+0x32c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d031      	beq.n	8000a3a <HAL_GPIO_Init+0x23a>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <HAL_GPIO_Init+0x330>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d02b      	beq.n	8000a36 <HAL_GPIO_Init+0x236>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a54      	ldr	r2, [pc, #336]	; (8000b34 <HAL_GPIO_Init+0x334>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d025      	beq.n	8000a32 <HAL_GPIO_Init+0x232>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a53      	ldr	r2, [pc, #332]	; (8000b38 <HAL_GPIO_Init+0x338>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d01f      	beq.n	8000a2e <HAL_GPIO_Init+0x22e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <HAL_GPIO_Init+0x33c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d019      	beq.n	8000a2a <HAL_GPIO_Init+0x22a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a51      	ldr	r2, [pc, #324]	; (8000b40 <HAL_GPIO_Init+0x340>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0x226>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_GPIO_Init+0x344>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00d      	beq.n	8000a22 <HAL_GPIO_Init+0x222>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <HAL_GPIO_Init+0x348>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d007      	beq.n	8000a1e <HAL_GPIO_Init+0x21e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x34c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_GPIO_Init+0x21a>
 8000a16:	2309      	movs	r3, #9
 8000a18:	e012      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	e010      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00e      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a22:	2307      	movs	r3, #7
 8000a24:	e00c      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a26:	2306      	movs	r3, #6
 8000a28:	e00a      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	e008      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x240>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	f002 0203 	and.w	r2, r2, #3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a50:	4934      	ldr	r1, [pc, #208]	; (8000b24 <HAL_GPIO_Init+0x324>)
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4013      	ands	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aac:	4a28      	ldr	r2, [pc, #160]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_GPIO_Init+0x350>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	f67f ae84 	bls.w	800081c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40013800 	.word	0x40013800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40021c00 	.word	0x40021c00
 8000b48:	40022000 	.word	0x40022000
 8000b4c:	40022400 	.word	0x40022400
 8000b50:	40013c00 	.word	0x40013c00

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b70:	e003      	b.n	8000b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	401a      	ands	r2, r3
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d104      	bne.n	8000baa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	041a      	lsls	r2, r3, #16
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ba8:	e002      	b.n	8000bb0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	619a      	str	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 ffcc 	bl	8001b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40013c00 	.word	0x40013c00

08000bec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e22d      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d075      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c0a:	4ba3      	ldr	r3, [pc, #652]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d00c      	beq.n	8000c30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c16:	4ba0      	ldr	r3, [pc, #640]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d112      	bne.n	8000c48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c22:	4b9d      	ldr	r3, [pc, #628]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c2e:	d10b      	bne.n	8000c48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	4b99      	ldr	r3, [pc, #612]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d05b      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x108>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d157      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e208      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d106      	bne.n	8000c60 <HAL_RCC_OscConfig+0x74>
 8000c52:	4a91      	ldr	r2, [pc, #580]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	4b90      	ldr	r3, [pc, #576]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e01d      	b.n	8000c9c <HAL_RCC_OscConfig+0xb0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c68:	d10c      	bne.n	8000c84 <HAL_RCC_OscConfig+0x98>
 8000c6a:	4a8b      	ldr	r2, [pc, #556]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	4b8a      	ldr	r3, [pc, #552]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4a88      	ldr	r2, [pc, #544]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	4b87      	ldr	r3, [pc, #540]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e00b      	b.n	8000c9c <HAL_RCC_OscConfig+0xb0>
 8000c84:	4a84      	ldr	r2, [pc, #528]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c86:	4b84      	ldr	r3, [pc, #528]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4a81      	ldr	r2, [pc, #516]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c92:	4b81      	ldr	r3, [pc, #516]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d013      	beq.n	8000ccc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc90 	bl	80005c8 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fc8c 	bl	80005c8 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e1cd      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f0      	beq.n	8000cac <HAL_RCC_OscConfig+0xc0>
 8000cca:	e014      	b.n	8000cf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc7c 	bl	80005c8 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fc78 	bl	80005c8 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1b9      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f0      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xe8>
 8000cf2:	e000      	b.n	8000cf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d063      	beq.n	8000dca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d02:	4b65      	ldr	r3, [pc, #404]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00b      	beq.n	8000d26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d0e:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d11c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1a:	4b5f      	ldr	r3, [pc, #380]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d116      	bne.n	8000d54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d26:	4b5c      	ldr	r3, [pc, #368]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <HAL_RCC_OscConfig+0x152>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d001      	beq.n	8000d3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e18d      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3e:	4956      	ldr	r1, [pc, #344]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d52:	e03a      	b.n	8000dca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d020      	beq.n	8000d9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d5c:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <HAL_RCC_OscConfig+0x2b0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc31 	bl	80005c8 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fc2d 	bl	80005c8 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e16e      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d88:	4943      	ldr	r1, [pc, #268]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	600b      	str	r3, [r1, #0]
 8000d9c:	e015      	b.n	8000dca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <HAL_RCC_OscConfig+0x2b0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc10 	bl	80005c8 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc0c 	bl	80005c8 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e14d      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d030      	beq.n	8000e38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d016      	beq.n	8000e0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_RCC_OscConfig+0x2b4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000de4:	f7ff fbf0 	bl	80005c8 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fbec 	bl	80005c8 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e12d      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0x200>
 8000e0a:	e015      	b.n	8000e38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_RCC_OscConfig+0x2b4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbd9 	bl	80005c8 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e18:	e008      	b.n	8000e2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fbd5 	bl	80005c8 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d901      	bls.n	8000e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e116      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f0      	bne.n	8000e1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a0 	beq.w	8000f86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10f      	bne.n	8000e76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_RCC_OscConfig+0x2b8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d121      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_RCC_OscConfig+0x2b8>)
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_RCC_OscConfig+0x2b8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fb9b 	bl	80005c8 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	e011      	b.n	8000eba <HAL_RCC_OscConfig+0x2ce>
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	42470000 	.word	0x42470000
 8000ea0:	42470e80 	.word	0x42470e80
 8000ea4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea8:	f7ff fb8e 	bl	80005c8 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e0cf      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	4b6a      	ldr	r3, [pc, #424]	; (8001064 <HAL_RCC_OscConfig+0x478>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x2f0>
 8000ece:	4a66      	ldr	r2, [pc, #408]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ed0:	4b65      	ldr	r3, [pc, #404]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eda:	e01c      	b.n	8000f16 <HAL_RCC_OscConfig+0x32a>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x312>
 8000ee4:	4a60      	ldr	r2, [pc, #384]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ee6:	4b60      	ldr	r3, [pc, #384]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef0:	4a5d      	ldr	r2, [pc, #372]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6713      	str	r3, [r2, #112]	; 0x70
 8000efc:	e00b      	b.n	8000f16 <HAL_RCC_OscConfig+0x32a>
 8000efe:	4a5a      	ldr	r2, [pc, #360]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f00:	4b59      	ldr	r3, [pc, #356]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6713      	str	r3, [r2, #112]	; 0x70
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f0c:	4b56      	ldr	r3, [pc, #344]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fb53 	bl	80005c8 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	e00a      	b.n	8000f3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff fb4f 	bl	80005c8 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e08e      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ee      	beq.n	8000f26 <HAL_RCC_OscConfig+0x33a>
 8000f48:	e014      	b.n	8000f74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb3d 	bl	80005c8 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb39 	bl	80005c8 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e078      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1ee      	bne.n	8000f52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7a:	4a3b      	ldr	r2, [pc, #236]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d064      	beq.n	8001058 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d05c      	beq.n	8001054 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d141      	bne.n	8001026 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa2:	4b32      	ldr	r3, [pc, #200]	; (800106c <HAL_RCC_OscConfig+0x480>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb0e 	bl	80005c8 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff fb0a 	bl	80005c8 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e04b      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fce:	4926      	ldr	r1, [pc, #152]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	019b      	lsls	r3, r3, #6
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	085b      	lsrs	r3, r3, #1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	061b      	lsls	r3, r3, #24
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_RCC_OscConfig+0x480>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fae3 	bl	80005c8 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff fadf 	bl	80005c8 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e020      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x41a>
 8001024:	e018      	b.n	8001058 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_RCC_OscConfig+0x480>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff facc 	bl	80005c8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001034:	f7ff fac8 	bl	80005c8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e009      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_RCC_OscConfig+0x47c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x448>
 8001052:	e001      	b.n	8001058 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40007000 	.word	0x40007000
 8001068:	40023800 	.word	0x40023800
 800106c:	42470060 	.word	0x42470060

08001070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0ca      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001084:	4b67      	ldr	r3, [pc, #412]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 020f 	and.w	r2, r3, #15
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d20c      	bcs.n	80010ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b62      	ldr	r3, [pc, #392]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 020f 	and.w	r2, r3, #15
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0b6      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c4:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	494f      	ldr	r1, [pc, #316]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010ea:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d044      	beq.n	8001190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d119      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e07d      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d003      	beq.n	800112e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112a:	2b03      	cmp	r3, #3
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06d      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e065      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114e:	4936      	ldr	r1, [pc, #216]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 0203 	bic.w	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fa32 	bl	80005c8 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	e00a      	b.n	800117e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fa2e 	bl	80005c8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e04d      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 020c 	and.w	r2, r3, #12
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	429a      	cmp	r2, r3
 800118e:	d1eb      	bne.n	8001168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 020f 	and.w	r2, r3, #15
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d90c      	bls.n	80011b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_RCC_ClockConfig+0x1b4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 020f 	and.w	r2, r3, #15
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e030      	b.n	800121a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c4:	4918      	ldr	r1, [pc, #96]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e2:	4911      	ldr	r1, [pc, #68]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f6:	f000 f81d 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011fa:	4601      	mov	r1, r0
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	fa21 f303 	lsr.w	r3, r1, r3
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff f994 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023c00 	.word	0x40023c00
 8001228:	40023800 	.word	0x40023800
 800122c:	0800226c 	.word	0x0800226c
 8001230:	2000000c 	.word	0x2000000c

08001234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001238:	b08f      	sub	sp, #60	; 0x3c
 800123a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800124c:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b04      	cmp	r3, #4
 8001256:	d007      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x34>
 8001258:	2b08      	cmp	r3, #8
 800125a:	d008      	beq.n	800126e <HAL_RCC_GetSysClockFreq+0x3a>
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 80b2 	bne.w	80013c6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001262:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001266:	e0b1      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800126c:	e0ae      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126e:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001278:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d04e      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001284:	4b54      	ldr	r3, [pc, #336]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	f04f 0400 	mov.w	r4, #0
 800128e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	ea01 0103 	and.w	r1, r1, r3
 800129a:	ea02 0204 	and.w	r2, r2, r4
 800129e:	460b      	mov	r3, r1
 80012a0:	4614      	mov	r4, r2
 80012a2:	0160      	lsls	r0, r4, #5
 80012a4:	6278      	str	r0, [r7, #36]	; 0x24
 80012a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012a8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80012ac:	6278      	str	r0, [r7, #36]	; 0x24
 80012ae:	015b      	lsls	r3, r3, #5
 80012b0:	623b      	str	r3, [r7, #32]
 80012b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	eb64 0402 	sbc.w	r4, r4, r2
 80012bc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80012c0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80012c4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80012c8:	ebb8 0803 	subs.w	r8, r8, r3
 80012cc:	eb69 0904 	sbc.w	r9, r9, r4
 80012d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80012e8:	eb18 0801 	adds.w	r8, r8, r1
 80012ec:	eb49 0902 	adc.w	r9, r9, r2
 80012f0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001308:	4640      	mov	r0, r8
 800130a:	4649      	mov	r1, r9
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	f04f 0400 	mov.w	r4, #0
 8001312:	461a      	mov	r2, r3
 8001314:	4623      	mov	r3, r4
 8001316:	f7fe ff69 	bl	80001ec <__aeabi_uldivmod>
 800131a:	4603      	mov	r3, r0
 800131c:	460c      	mov	r4, r1
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
 8001320:	e043      	b.n	80013aa <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	f04f 0400 	mov.w	r4, #0
 800132c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	ea01 0103 	and.w	r1, r1, r3
 8001338:	ea02 0204 	and.w	r2, r2, r4
 800133c:	460b      	mov	r3, r1
 800133e:	4614      	mov	r4, r2
 8001340:	0160      	lsls	r0, r4, #5
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001354:	1a5b      	subs	r3, r3, r1
 8001356:	eb64 0402 	sbc.w	r4, r4, r2
 800135a:	01a6      	lsls	r6, r4, #6
 800135c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001360:	019d      	lsls	r5, r3, #6
 8001362:	1aed      	subs	r5, r5, r3
 8001364:	eb66 0604 	sbc.w	r6, r6, r4
 8001368:	00f3      	lsls	r3, r6, #3
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	00eb      	lsls	r3, r5, #3
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	e897 0060 	ldmia.w	r7, {r5, r6}
 800137c:	186d      	adds	r5, r5, r1
 800137e:	eb46 0602 	adc.w	r6, r6, r2
 8001382:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001386:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800138a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800138e:	4655      	mov	r5, sl
 8001390:	465e      	mov	r6, fp
 8001392:	4628      	mov	r0, r5
 8001394:	4631      	mov	r1, r6
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	f04f 0400 	mov.w	r4, #0
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	f7fe ff24 	bl	80001ec <__aeabi_uldivmod>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	3301      	adds	r3, #1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80013ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013c4:	e002      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	373c      	adds	r7, #60	; 0x3c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	00f42400 	.word	0x00f42400
 80013e0:	007a1200 	.word	0x007a1200

080013e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01d      	b.n	8001432 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fe2e 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3304      	adds	r3, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4610      	mov	r0, r2
 8001424:	f000 fa14 	bl	8001850 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	68d2      	ldr	r2, [r2, #12]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d007      	beq.n	8001474 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b02      	cmp	r3, #2
 8001496:	d122      	bne.n	80014de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d11b      	bne.n	80014de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0202 	mvn.w	r2, #2
 80014ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f9a5 	bl	8001814 <HAL_TIM_IC_CaptureCallback>
 80014ca:	e005      	b.n	80014d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f997 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f9a8 	bl	8001828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d122      	bne.n	8001532 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d11b      	bne.n	8001532 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f06f 0204 	mvn.w	r2, #4
 8001502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f97b 	bl	8001814 <HAL_TIM_IC_CaptureCallback>
 800151e:	e005      	b.n	800152c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f96d 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f97e 	bl	8001828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b08      	cmp	r3, #8
 800153e:	d122      	bne.n	8001586 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11b      	bne.n	8001586 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0208 	mvn.w	r2, #8
 8001556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2204      	movs	r2, #4
 800155c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f951 	bl	8001814 <HAL_TIM_IC_CaptureCallback>
 8001572:	e005      	b.n	8001580 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f943 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f954 	bl	8001828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b10      	cmp	r3, #16
 8001592:	d122      	bne.n	80015da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0210 	mvn.w	r2, #16
 80015aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2208      	movs	r2, #8
 80015b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f927 	bl	8001814 <HAL_TIM_IC_CaptureCallback>
 80015c6:	e005      	b.n	80015d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f919 	bl	8001800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f92a 	bl	8001828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d10e      	bne.n	8001606 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0201 	mvn.w	r2, #1
 80015fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fad5 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001610:	2b80      	cmp	r3, #128	; 0x80
 8001612:	d10e      	bne.n	8001632 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	d107      	bne.n	8001632 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800162a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fa98 	bl	8001b62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d10e      	bne.n	800165e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	2b40      	cmp	r3, #64	; 0x40
 800164c:	d107      	bne.n	800165e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8ef 	bl	800183c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10e      	bne.n	800168a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b20      	cmp	r3, #32
 8001678:	d107      	bne.n	800168a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0220 	mvn.w	r2, #32
 8001682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fa62 	bl	8001b4e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_ConfigClockSource+0x18>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0a6      	b.n	80017f8 <HAL_TIM_ConfigClockSource+0x166>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80016c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b40      	cmp	r3, #64	; 0x40
 80016e0:	d067      	beq.n	80017b2 <HAL_TIM_ConfigClockSource+0x120>
 80016e2:	2b40      	cmp	r3, #64	; 0x40
 80016e4:	d80b      	bhi.n	80016fe <HAL_TIM_ConfigClockSource+0x6c>
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d073      	beq.n	80017d2 <HAL_TIM_ConfigClockSource+0x140>
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d802      	bhi.n	80016f4 <HAL_TIM_ConfigClockSource+0x62>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06f      	beq.n	80017d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80016f2:	e078      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d06c      	beq.n	80017d2 <HAL_TIM_ConfigClockSource+0x140>
 80016f8:	2b30      	cmp	r3, #48	; 0x30
 80016fa:	d06a      	beq.n	80017d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80016fc:	e073      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016fe:	2b70      	cmp	r3, #112	; 0x70
 8001700:	d00d      	beq.n	800171e <HAL_TIM_ConfigClockSource+0x8c>
 8001702:	2b70      	cmp	r3, #112	; 0x70
 8001704:	d804      	bhi.n	8001710 <HAL_TIM_ConfigClockSource+0x7e>
 8001706:	2b50      	cmp	r3, #80	; 0x50
 8001708:	d033      	beq.n	8001772 <HAL_TIM_ConfigClockSource+0xe0>
 800170a:	2b60      	cmp	r3, #96	; 0x60
 800170c:	d041      	beq.n	8001792 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800170e:	e06a      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001714:	d066      	beq.n	80017e4 <HAL_TIM_ConfigClockSource+0x152>
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171a:	d017      	beq.n	800174c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800171c:	e063      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f000 f9a9 	bl	8001a84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001740:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	609a      	str	r2, [r3, #8]
      break;
 800174a:	e04c      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6899      	ldr	r1, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f000 f992 	bl	8001a84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	6892      	ldr	r2, [r2, #8]
 800176a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800176e:	609a      	str	r2, [r3, #8]
      break;
 8001770:	e039      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	461a      	mov	r2, r3
 8001780:	f000 f906 	bl	8001990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2150      	movs	r1, #80	; 0x50
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f95f 	bl	8001a4e <TIM_ITRx_SetConfig>
      break;
 8001790:	e029      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	461a      	mov	r2, r3
 80017a0:	f000 f925 	bl	80019ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2160      	movs	r1, #96	; 0x60
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f94f 	bl	8001a4e <TIM_ITRx_SetConfig>
      break;
 80017b0:	e019      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	461a      	mov	r2, r3
 80017c0:	f000 f8e6 	bl	8001990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f93f 	bl	8001a4e <TIM_ITRx_SetConfig>
      break;
 80017d0:	e009      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f000 f936 	bl	8001a4e <TIM_ITRx_SetConfig>
      break;
 80017e2:	e000      	b.n	80017e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80017e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a40      	ldr	r2, [pc, #256]	; (8001964 <TIM_Base_SetConfig+0x114>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <TIM_Base_SetConfig+0x40>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186e:	d00f      	beq.n	8001890 <TIM_Base_SetConfig+0x40>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <TIM_Base_SetConfig+0x118>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00b      	beq.n	8001890 <TIM_Base_SetConfig+0x40>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3c      	ldr	r2, [pc, #240]	; (800196c <TIM_Base_SetConfig+0x11c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d007      	beq.n	8001890 <TIM_Base_SetConfig+0x40>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <TIM_Base_SetConfig+0x120>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d003      	beq.n	8001890 <TIM_Base_SetConfig+0x40>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <TIM_Base_SetConfig+0x124>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d108      	bne.n	80018a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <TIM_Base_SetConfig+0x114>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d02b      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d027      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <TIM_Base_SetConfig+0x118>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d023      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a2b      	ldr	r2, [pc, #172]	; (800196c <TIM_Base_SetConfig+0x11c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <TIM_Base_SetConfig+0x120>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01b      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a29      	ldr	r2, [pc, #164]	; (8001974 <TIM_Base_SetConfig+0x124>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d017      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a28      	ldr	r2, [pc, #160]	; (8001978 <TIM_Base_SetConfig+0x128>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <TIM_Base_SetConfig+0x12c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00f      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a26      	ldr	r2, [pc, #152]	; (8001980 <TIM_Base_SetConfig+0x130>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00b      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a25      	ldr	r2, [pc, #148]	; (8001984 <TIM_Base_SetConfig+0x134>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a24      	ldr	r2, [pc, #144]	; (8001988 <TIM_Base_SetConfig+0x138>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d003      	beq.n	8001902 <TIM_Base_SetConfig+0xb2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <TIM_Base_SetConfig+0x13c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d108      	bne.n	8001914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <TIM_Base_SetConfig+0x114>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d003      	beq.n	8001948 <TIM_Base_SetConfig+0xf8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <TIM_Base_SetConfig+0x124>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d103      	bne.n	8001950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	615a      	str	r2, [r3, #20]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40010000 	.word	0x40010000
 8001968:	40000400 	.word	0x40000400
 800196c:	40000800 	.word	0x40000800
 8001970:	40000c00 	.word	0x40000c00
 8001974:	40010400 	.word	0x40010400
 8001978:	40014000 	.word	0x40014000
 800197c:	40014400 	.word	0x40014400
 8001980:	40014800 	.word	0x40014800
 8001984:	40001800 	.word	0x40001800
 8001988:	40001c00 	.word	0x40001c00
 800198c:	40002000 	.word	0x40002000

08001990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	f023 0201 	bic.w	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f023 030a 	bic.w	r3, r3, #10
 80019cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	621a      	str	r2, [r3, #32]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b087      	sub	sp, #28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f023 0210 	bic.w	r2, r3, #16
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	031b      	lsls	r3, r3, #12
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	621a      	str	r2, [r3, #32]
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f043 0307 	orr.w	r3, r3, #7
 8001a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	609a      	str	r2, [r3, #8]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	021a      	lsls	r2, r3, #8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e032      	b.n	8001b42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b14:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == USER_Btn_Pin)
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b88:	d10a      	bne.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x28>
  {
	  if (!blink)
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_GPIO_EXTI_Callback+0x34>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x22>
		  blink = 1;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_GPIO_EXTI_Callback+0x34>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	801a      	strh	r2, [r3, #0]
	  else
		  blink = 0;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_EXTI_Callback+0x28>
		  blink = 0;
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_GPIO_EXTI_Callback+0x34>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	801a      	strh	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000006 	.word	0x20000006

08001bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  Toggle_LED = 1;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	801a      	strh	r2, [r3, #0]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f7fe fc92 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f834 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f000 f8ea 	bl	8001db4 <MX_GPIO_Init>
  MX_GFXSIMULATOR_Init();
 8001be0:	f000 f890 	bl	8001d04 <MX_GFXSIMULATOR_Init>
  MX_TIM3_Init();
 8001be4:	f000 f896 	bl	8001d14 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	4812      	ldr	r0, [pc, #72]	; (8001c38 <main+0x68>)
 8001bee:	f7fe ffb1 	bl	8000b54 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (blink)
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <main+0x6c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d011      	beq.n	8001c1e <main+0x4e>
	  {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <main+0x68>)
 8001c02:	f7fe ffa7 	bl	8000b54 <HAL_GPIO_WritePin>
	  	  if (Toggle_LED)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <main+0x70>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f1      	beq.n	8001bf2 <main+0x22>
	  	  {
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <main+0x68>)
 8001c12:	f7fe ffb8 	bl	8000b86 <HAL_GPIO_TogglePin>
	  		  Toggle_LED = 0;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <main+0x70>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e7e9      	b.n	8001bf2 <main+0x22>
	  	  }
		  // HAL_Delay(5000);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <main+0x68>)
 8001c26:	f7fe ff95 	bl	8000b54 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	4802      	ldr	r0, [pc, #8]	; (8001c38 <main+0x68>)
 8001c30:	f7fe ff90 	bl	8000b54 <HAL_GPIO_WritePin>
	  if (blink)
 8001c34:	e7dd      	b.n	8001bf2 <main+0x22>
 8001c36:	bf00      	nop
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	20000006 	.word	0x20000006
 8001c40:	20000008 	.word	0x20000008

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	; 0x50
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2230      	movs	r2, #48	; 0x30
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 faf6 	bl	8002244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <SystemClock_Config+0xb8>)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <SystemClock_Config+0xb8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <SystemClock_Config+0xb8>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <SystemClock_Config+0xbc>)
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <SystemClock_Config+0xbc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <SystemClock_Config+0xbc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cac:	2310      	movs	r3, #16
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ff97 	bl	8000bec <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001cc4:	f000 f9a2 	bl	800200c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc8:	230f      	movs	r3, #15
 8001cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f9c3 	bl	8001070 <HAL_RCC_ClockConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001cf0:	f000 f98c 	bl	800200c <Error_Handler>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3750      	adds	r7, #80	; 0x50
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000

08001d04 <MX_GFXSIMULATOR_Init>:
  * @brief GFXSIMULATOR Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXSIMULATOR_Init(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END GFXSIMULATOR_Init 1 */
  /* USER CODE BEGIN GFXSIMULATOR_Init 2 */

  /* USER CODE END GFXSIMULATOR_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <MX_TIM3_Init+0x9c>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d46:	22c8      	movs	r2, #200	; 0xc8
 8001d48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d56:	4815      	ldr	r0, [pc, #84]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d58:	f7ff fb44 	bl	80013e4 <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 f953 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	4619      	mov	r1, r3
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d74:	f7ff fc8d 	bl	8001692 <HAL_TIM_ConfigClockSource>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f000 f945 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <MX_TIM3_Init+0x98>)
 8001d90:	f7ff fe98 	bl	8001ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d9a:	f000 f937 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001d9e:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_TIM3_Init+0x98>)
 8001da0:	f7ff fb4b 	bl	800143a <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000030 	.word	0x20000030
 8001db0:	40000400 	.word	0x40000400

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4a88      	ldr	r2, [pc, #544]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001dd0:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4a81      	ldr	r2, [pc, #516]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001dec:	4b80      	ldr	r3, [pc, #512]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4a73      	ldr	r2, [pc, #460]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e24:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4a6c      	ldr	r2, [pc, #432]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e40:	4b6b      	ldr	r3, [pc, #428]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b62      	ldr	r3, [pc, #392]	; (8001ff0 <MX_GPIO_Init+0x23c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e78:	485e      	ldr	r0, [pc, #376]	; (8001ff4 <MX_GPIO_Init+0x240>)
 8001e7a:	f7fe fe6b 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2140      	movs	r1, #64	; 0x40
 8001e82:	485d      	ldr	r0, [pc, #372]	; (8001ff8 <MX_GPIO_Init+0x244>)
 8001e84:	f7fe fe66 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <MX_GPIO_Init+0x248>)
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4858      	ldr	r0, [pc, #352]	; (8002000 <MX_GPIO_Init+0x24c>)
 8001e9e:	f7fe fcaf 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ea2:	2332      	movs	r3, #50	; 0x32
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb2:	230b      	movs	r3, #11
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4850      	ldr	r0, [pc, #320]	; (8002000 <MX_GPIO_Init+0x24c>)
 8001ebe:	f7fe fc9f 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ec2:	2386      	movs	r3, #134	; 0x86
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed2:	230b      	movs	r3, #11
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4849      	ldr	r0, [pc, #292]	; (8002004 <MX_GPIO_Init+0x250>)
 8001ede:	f7fe fc8f 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ee2:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	483e      	ldr	r0, [pc, #248]	; (8001ff4 <MX_GPIO_Init+0x240>)
 8001efc:	f7fe fc80 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f12:	230b      	movs	r3, #11
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4835      	ldr	r0, [pc, #212]	; (8001ff4 <MX_GPIO_Init+0x240>)
 8001f1e:	f7fe fc6f 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f34:	2307      	movs	r3, #7
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4832      	ldr	r0, [pc, #200]	; (8002008 <MX_GPIO_Init+0x254>)
 8001f40:	f7fe fc5e 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4827      	ldr	r0, [pc, #156]	; (8001ff8 <MX_GPIO_Init+0x244>)
 8001f5c:	f7fe fc50 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <MX_GPIO_Init+0x244>)
 8001f74:	f7fe fc44 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	481b      	ldr	r0, [pc, #108]	; (8002004 <MX_GPIO_Init+0x250>)
 8001f96:	f7fe fc33 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4619      	mov	r1, r3
 8001fae:	4815      	ldr	r0, [pc, #84]	; (8002004 <MX_GPIO_Init+0x250>)
 8001fb0:	f7fe fc26 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fc6:	230b      	movs	r3, #11
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <MX_GPIO_Init+0x244>)
 8001fd2:	f7fe fc15 	bl	8000800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2028      	movs	r0, #40	; 0x28
 8001fdc:	f7fe fbd9 	bl	8000792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fe0:	2028      	movs	r0, #40	; 0x28
 8001fe2:	f7fe fbf2 	bl	80007ca <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	10110000 	.word	0x10110000
 8002000:	40020800 	.word	0x40020800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020c00 	.word	0x40020c00

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_MspInit+0x4c>)
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_MspInit+0x4c>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_MspInit+0x4c>)
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_MspInit+0x4c>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_TIM_Base_MspInit+0x48>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d115      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	201d      	movs	r0, #29
 80020a0:	f7fe fb77 	bl	8000792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020a4:	201d      	movs	r0, #29
 80020a6:	f7fe fb90 	bl	80007ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40023800 	.word	0x40023800

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <MemManage_Handler+0x4>

080020d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002110:	f7fe fa46 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <TIM3_IRQHandler+0x10>)
 800211e:	f7ff f9b0 	bl	8001482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000030 	.word	0x20000030

0800212c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002134:	f7fe fd42 	bl	8000bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002140:	4a16      	ldr	r2, [pc, #88]	; (800219c <SystemInit+0x60>)
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <SystemInit+0x60>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <SystemInit+0x64>)
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <SystemInit+0x64>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <SystemInit+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <SystemInit+0x64>)
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <SystemInit+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <SystemInit+0x64>)
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <SystemInit+0x68>)
 8002176:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002178:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <SystemInit+0x64>)
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <SystemInit+0x64>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <SystemInit+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SystemInit+0x60>)
 800218c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002190:	609a      	str	r2, [r3, #8]
#endif
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	24003010 	.word	0x24003010

080021a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ae:	e003      	b.n	80021b8 <LoopCopyDataInit>

080021b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021b6:	3104      	adds	r1, #4

080021b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021c0:	d3f6      	bcc.n	80021b0 <CopyDataInit>
  ldr  r2, =_sbss
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021c4:	e002      	b.n	80021cc <LoopFillZerobss>

080021c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021c8:	f842 3b04 	str.w	r3, [r2], #4

080021cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021d0:	d3f9      	bcc.n	80021c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021d2:	f7ff ffb3 	bl	800213c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021d6:	f000 f811 	bl	80021fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021da:	f7ff fcf9 	bl	8001bd0 <main>
  bx  lr    
 80021de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021e0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80021e4:	0800228c 	.word	0x0800228c
  ldr  r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021ec:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80021f0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80021f4:	20000070 	.word	0x20000070

080021f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC_IRQHandler>
	...

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	4e0d      	ldr	r6, [pc, #52]	; (8002234 <__libc_init_array+0x38>)
 8002200:	4c0d      	ldr	r4, [pc, #52]	; (8002238 <__libc_init_array+0x3c>)
 8002202:	1ba4      	subs	r4, r4, r6
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	2500      	movs	r5, #0
 8002208:	42a5      	cmp	r5, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	4e0b      	ldr	r6, [pc, #44]	; (800223c <__libc_init_array+0x40>)
 800220e:	4c0c      	ldr	r4, [pc, #48]	; (8002240 <__libc_init_array+0x44>)
 8002210:	f000 f820 	bl	8002254 <_init>
 8002214:	1ba4      	subs	r4, r4, r6
 8002216:	10a4      	asrs	r4, r4, #2
 8002218:	2500      	movs	r5, #0
 800221a:	42a5      	cmp	r5, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002224:	4798      	blx	r3
 8002226:	3501      	adds	r5, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800222e:	4798      	blx	r3
 8002230:	3501      	adds	r5, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	08002284 	.word	0x08002284
 8002238:	08002284 	.word	0x08002284
 800223c:	08002284 	.word	0x08002284
 8002240:	08002288 	.word	0x08002288

08002244 <memset>:
 8002244:	4402      	add	r2, r0
 8002246:	4603      	mov	r3, r0
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <memset+0xa>
 800224c:	4770      	bx	lr
 800224e:	f803 1b01 	strb.w	r1, [r3], #1
 8002252:	e7f9      	b.n	8002248 <memset+0x4>

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
