
heartbeat3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f98  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001144  08001144  00011144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800115c  0800115c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001160  08001160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08001164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000030  20000030  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   000043f2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000f6d  00000000  00000000  00024432  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000dd5  00000000  00000000  0002539f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000378  00000000  00000000  00026178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000448  00000000  00000000  000264f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000019be  00000000  00000000  00026938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001746  00000000  00000000  000282f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00029a3c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000007a4  00000000  00000000  00029ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800112c 	.word	0x0800112c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	0800112c 	.word	0x0800112c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f8aa 	bl	800066c <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000528:	f000 f85e 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	2000000c 	.word	0x2000000c
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f82f 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f000 fd38 	bl	8000fe0 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf1c      	itt	ne
 80005a8:	4b05      	ldrne	r3, [pc, #20]	; (80005c0 <HAL_Delay+0x24>)
 80005aa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf18      	it	ne
 80005b0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	f7ff ffed 	bl	8000590 <HAL_GetTick>
 80005b6:	1b40      	subs	r0, r0, r5
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d8fa      	bhi.n	80005b2 <HAL_Delay+0x16>
  {
  }
}
 80005bc:	bd38      	pop	{r3, r4, r5, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d4:	0200      	lsls	r0, r0, #8
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	bf28      	it	cs
 80005fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 0501 	mov.w	r5, #1
 8000604:	fa05 f303 	lsl.w	r3, r5, r3
 8000608:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060c:	bf8c      	ite	hi
 800060e:	3c03      	subhi	r4, #3
 8000610:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000612:	4019      	ands	r1, r3
 8000614:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000616:	fa05 f404 	lsl.w	r4, r5, r4
 800061a:	3c01      	subs	r4, #1
 800061c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800061e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	ea42 0201 	orr.w	r2, r2, r1
 8000624:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfad      	iteet	ge
 800062a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f000 000f 	andlt.w	r0, r0, #15
 8000632:	4b06      	ldrlt	r3, [pc, #24]	; (800064c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	bfb5      	itete	lt
 800063a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000ed14 	.word	0xe000ed14

08000650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000650:	2800      	cmp	r0, #0
 8000652:	db08      	blt.n	8000666 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000654:	0942      	lsrs	r2, r0, #5
 8000656:	2301      	movs	r3, #1
 8000658:	f000 001f 	and.w	r0, r0, #31
 800065c:	fa03 f000 	lsl.w	r0, r3, r0
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <HAL_NVIC_EnableIRQ+0x18>)
 8000662:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000672:	d20a      	bcs.n	800068a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	21f0      	movs	r1, #240	; 0xf0
 800067c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000868 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a4:	4a6e      	ldr	r2, [pc, #440]	; (8000860 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800086c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006b4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006bc:	45b6      	cmp	lr, r6
 80006be:	f040 80b6 	bne.w	800082e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c2:	684c      	ldr	r4, [r1, #4]
 80006c4:	f024 0710 	bic.w	r7, r4, #16
 80006c8:	2f02      	cmp	r7, #2
 80006ca:	d116      	bne.n	80006fa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006cc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006d0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006d4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006d8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006e0:	f04f 0c0f 	mov.w	ip, #15
 80006e4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006e8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006ec:	690d      	ldr	r5, [r1, #16]
 80006ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80006f2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006f6:	f8ca 5020 	str.w	r5, [sl, #32]
 80006fa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006fe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000700:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000704:	fa05 f50a 	lsl.w	r5, r5, sl
 8000708:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800070a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000712:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000716:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000718:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800071e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000722:	d811      	bhi.n	8000748 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000724:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000726:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800072a:	68cf      	ldr	r7, [r1, #12]
 800072c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000730:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000734:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000736:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000738:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800073c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000740:	409f      	lsls	r7, r3
 8000742:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000746:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000748:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800074a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800074c:	688f      	ldr	r7, [r1, #8]
 800074e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000752:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000754:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000756:	00e5      	lsls	r5, r4, #3
 8000758:	d569      	bpl.n	800082e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	f04f 0b00 	mov.w	fp, #0
 800075e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000762:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000766:	4d3f      	ldr	r5, [pc, #252]	; (8000864 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000768:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800076c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000770:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000774:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000778:	9703      	str	r7, [sp, #12]
 800077a:	9f03      	ldr	r7, [sp, #12]
 800077c:	f023 0703 	bic.w	r7, r3, #3
 8000780:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000784:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000788:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800078c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000790:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000794:	f04f 0e0f 	mov.w	lr, #15
 8000798:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	d04b      	beq.n	800083c <HAL_GPIO_Init+0x1a4>
 80007a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	d049      	beq.n	8000840 <HAL_GPIO_Init+0x1a8>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d047      	beq.n	8000844 <HAL_GPIO_Init+0x1ac>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d045      	beq.n	8000848 <HAL_GPIO_Init+0x1b0>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d043      	beq.n	800084c <HAL_GPIO_Init+0x1b4>
 80007c4:	4548      	cmp	r0, r9
 80007c6:	d043      	beq.n	8000850 <HAL_GPIO_Init+0x1b8>
 80007c8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	d041      	beq.n	8000854 <HAL_GPIO_Init+0x1bc>
 80007d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d03f      	beq.n	8000858 <HAL_GPIO_Init+0x1c0>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d03d      	beq.n	800085c <HAL_GPIO_Init+0x1c4>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	bf14      	ite	ne
 80007e8:	250a      	movne	r5, #10
 80007ea:	2509      	moveq	r5, #9
 80007ec:	fa05 f50c 	lsl.w	r5, r5, ip
 80007f0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007f6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007fa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007fe:	bf0c      	ite	eq
 8000800:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000802:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000804:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000806:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000808:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800080c:	bf0c      	ite	eq
 800080e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000810:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000812:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000814:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000816:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800081a:	bf0c      	ite	eq
 800081c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800081e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000820:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000822:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000824:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000826:	bf54      	ite	pl
 8000828:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800082a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800082c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	3301      	adds	r3, #1
 8000830:	2b10      	cmp	r3, #16
 8000832:	f47f af3c 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000836:	b005      	add	sp, #20
 8000838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083c:	465d      	mov	r5, fp
 800083e:	e7d5      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000840:	2501      	movs	r5, #1
 8000842:	e7d3      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000844:	2502      	movs	r5, #2
 8000846:	e7d1      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000848:	2503      	movs	r5, #3
 800084a:	e7cf      	b.n	80007ec <HAL_GPIO_Init+0x154>
 800084c:	2504      	movs	r5, #4
 800084e:	e7cd      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000850:	2505      	movs	r5, #5
 8000852:	e7cb      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000854:	2506      	movs	r5, #6
 8000856:	e7c9      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000858:	2507      	movs	r5, #7
 800085a:	e7c7      	b.n	80007ec <HAL_GPIO_Init+0x154>
 800085c:	2508      	movs	r5, #8
 800085e:	e7c5      	b.n	80007ec <HAL_GPIO_Init+0x154>
 8000860:	40013c00 	.word	0x40013c00
 8000864:	40020000 	.word	0x40020000
 8000868:	40023800 	.word	0x40023800
 800086c:	40021400 	.word	0x40021400

08000870 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000870:	b10a      	cbz	r2, 8000876 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000872:	6181      	str	r1, [r0, #24]
 8000874:	4770      	bx	lr
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	e7fb      	b.n	8000872 <HAL_GPIO_WritePin+0x2>

0800087a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800087a:	6943      	ldr	r3, [r0, #20]
 800087c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000880:	bf08      	it	eq
 8000882:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000884:	6181      	str	r1, [r0, #24]
 8000886:	4770      	bx	lr

08000888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000888:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800088c:	6959      	ldr	r1, [r3, #20]
 800088e:	4201      	tst	r1, r0
 8000890:	d002      	beq.n	8000898 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000892:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000894:	f000 fa4e 	bl	8000d34 <HAL_GPIO_EXTI_Callback>
 8000898:	bd08      	pop	{r3, pc}
 800089a:	bf00      	nop
 800089c:	40013c00 	.word	0x40013c00

080008a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008a4:	4604      	mov	r4, r0
 80008a6:	b918      	cbnz	r0, 80008b0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008a8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008aa:	b002      	add	sp, #8
 80008ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b0:	6803      	ldr	r3, [r0, #0]
 80008b2:	07dd      	lsls	r5, r3, #31
 80008b4:	d410      	bmi.n	80008d8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	0798      	lsls	r0, r3, #30
 80008ba:	d458      	bmi.n	800096e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	071a      	lsls	r2, r3, #28
 80008c0:	f100 809a 	bmi.w	80009f8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	075b      	lsls	r3, r3, #29
 80008c8:	f100 80b8 	bmi.w	8000a3c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008cc:	69a2      	ldr	r2, [r4, #24]
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	f040 8119 	bne.w	8000b06 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008d4:	2000      	movs	r0, #0
 80008d6:	e7e8      	b.n	80008aa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008d8:	4ba6      	ldr	r3, [pc, #664]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	f002 020c 	and.w	r2, r2, #12
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d007      	beq.n	80008f4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ea:	2a08      	cmp	r2, #8
 80008ec:	d10a      	bne.n	8000904 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	0259      	lsls	r1, r3, #9
 80008f2:	d507      	bpl.n	8000904 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008f4:	4b9f      	ldr	r3, [pc, #636]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	039a      	lsls	r2, r3, #14
 80008fa:	d5dc      	bpl.n	80008b6 <HAL_RCC_OscConfig+0x16>
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1d9      	bne.n	80008b6 <HAL_RCC_OscConfig+0x16>
 8000902:	e7d1      	b.n	80008a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	4d9b      	ldr	r5, [pc, #620]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800090c:	d111      	bne.n	8000932 <HAL_RCC_OscConfig+0x92>
 800090e:	682b      	ldr	r3, [r5, #0]
 8000910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000914:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000916:	f7ff fe3b 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091a:	4d96      	ldr	r5, [pc, #600]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800091c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	039b      	lsls	r3, r3, #14
 8000922:	d4c8      	bmi.n	80008b6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fe34 	bl	8000590 <HAL_GetTick>
 8000928:	1b80      	subs	r0, r0, r6
 800092a:	2864      	cmp	r0, #100	; 0x64
 800092c:	d9f7      	bls.n	800091e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800092e:	2003      	movs	r0, #3
 8000930:	e7bb      	b.n	80008aa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000936:	d104      	bne.n	8000942 <HAL_RCC_OscConfig+0xa2>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	602b      	str	r3, [r5, #0]
 8000940:	e7e5      	b.n	800090e <HAL_RCC_OscConfig+0x6e>
 8000942:	682a      	ldr	r2, [r5, #0]
 8000944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	682a      	ldr	r2, [r5, #0]
 800094c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000950:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1df      	bne.n	8000916 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000956:	f7ff fe1b 	bl	8000590 <HAL_GetTick>
 800095a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	039f      	lsls	r7, r3, #14
 8000960:	d5a9      	bpl.n	80008b6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000962:	f7ff fe15 	bl	8000590 <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2864      	cmp	r0, #100	; 0x64
 800096a:	d9f7      	bls.n	800095c <HAL_RCC_OscConfig+0xbc>
 800096c:	e7df      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800096e:	4b81      	ldr	r3, [pc, #516]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	f012 0f0c 	tst.w	r2, #12
 8000976:	d007      	beq.n	8000988 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800097e:	2a08      	cmp	r2, #8
 8000980:	d111      	bne.n	80009a6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	025e      	lsls	r6, r3, #9
 8000986:	d40e      	bmi.n	80009a6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	4b7a      	ldr	r3, [pc, #488]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	0795      	lsls	r5, r2, #30
 800098e:	d502      	bpl.n	8000996 <HAL_RCC_OscConfig+0xf6>
 8000990:	68e2      	ldr	r2, [r4, #12]
 8000992:	2a01      	cmp	r2, #1
 8000994:	d188      	bne.n	80008a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	6921      	ldr	r1, [r4, #16]
 800099a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800099e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e78a      	b.n	80008bc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009a6:	68e2      	ldr	r2, [r4, #12]
 80009a8:	4b73      	ldr	r3, [pc, #460]	; (8000b78 <HAL_RCC_OscConfig+0x2d8>)
 80009aa:	b1b2      	cbz	r2, 80009da <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fdee 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	4d6f      	ldr	r5, [pc, #444]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	0798      	lsls	r0, r3, #30
 80009bc:	d507      	bpl.n	80009ce <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	6922      	ldr	r2, [r4, #16]
 80009c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	e776      	b.n	80008bc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fddf 	bl	8000590 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9ef      	bls.n	80009b8 <HAL_RCC_OscConfig+0x118>
 80009d8:	e7a9      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009dc:	f7ff fdd8 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	4d64      	ldr	r5, [pc, #400]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	0799      	lsls	r1, r3, #30
 80009e8:	f57f af68 	bpl.w	80008bc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ec:	f7ff fdd0 	bl	8000590 <HAL_GetTick>
 80009f0:	1b80      	subs	r0, r0, r6
 80009f2:	2802      	cmp	r0, #2
 80009f4:	d9f6      	bls.n	80009e4 <HAL_RCC_OscConfig+0x144>
 80009f6:	e79a      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009f8:	6962      	ldr	r2, [r4, #20]
 80009fa:	4b60      	ldr	r3, [pc, #384]	; (8000b7c <HAL_RCC_OscConfig+0x2dc>)
 80009fc:	b17a      	cbz	r2, 8000a1e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a02:	f7ff fdc5 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a06:	4d5b      	ldr	r5, [pc, #364]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a08:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0c:	079f      	lsls	r7, r3, #30
 8000a0e:	f53f af59 	bmi.w	80008c4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a12:	f7ff fdbd 	bl	8000590 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d9f6      	bls.n	8000a0a <HAL_RCC_OscConfig+0x16a>
 8000a1c:	e787      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a20:	f7ff fdb6 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a24:	4d53      	ldr	r5, [pc, #332]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a2a:	0798      	lsls	r0, r3, #30
 8000a2c:	f57f af4a 	bpl.w	80008c4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fdae 	bl	8000590 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f6      	bls.n	8000a28 <HAL_RCC_OscConfig+0x188>
 8000a3a:	e778      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a40:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a44:	d128      	bne.n	8000a98 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a5a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	4d48      	ldr	r5, [pc, #288]	; (8000b80 <HAL_RCC_OscConfig+0x2e0>)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	05d9      	lsls	r1, r3, #23
 8000a62:	d51b      	bpl.n	8000a9c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a64:	68a3      	ldr	r3, [r4, #8]
 8000a66:	4d43      	ldr	r5, [pc, #268]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d127      	bne.n	8000abc <HAL_RCC_OscConfig+0x21c>
 8000a6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a74:	f7ff fd8c 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a78:	4d3e      	ldr	r5, [pc, #248]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a7a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a82:	079b      	lsls	r3, r3, #30
 8000a84:	d539      	bpl.n	8000afa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	f43f af20 	beq.w	80008cc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a8c:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000a8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	e719      	b.n	80008cc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e7df      	b.n	8000a5c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fd74 	bl	8000590 <HAL_GetTick>
 8000aa8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	05da      	lsls	r2, r3, #23
 8000aae:	d4d9      	bmi.n	8000a64 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab0:	f7ff fd6e 	bl	8000590 <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9f7      	bls.n	8000aaa <HAL_RCC_OscConfig+0x20a>
 8000aba:	e738      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d104      	bne.n	8000aca <HAL_RCC_OscConfig+0x22a>
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	672b      	str	r3, [r5, #112]	; 0x70
 8000ac8:	e7d0      	b.n	8000a6c <HAL_RCC_OscConfig+0x1cc>
 8000aca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000acc:	f022 0201 	bic.w	r2, r2, #1
 8000ad0:	672a      	str	r2, [r5, #112]	; 0x70
 8000ad2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ad4:	f022 0204 	bic.w	r2, r2, #4
 8000ad8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ca      	bne.n	8000a74 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ade:	f7ff fd57 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ae6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aea:	0798      	lsls	r0, r3, #30
 8000aec:	d5cb      	bpl.n	8000a86 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aee:	f7ff fd4f 	bl	8000590 <HAL_GetTick>
 8000af2:	1bc0      	subs	r0, r0, r7
 8000af4:	4540      	cmp	r0, r8
 8000af6:	d9f7      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x248>
 8000af8:	e719      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afa:	f7ff fd49 	bl	8000590 <HAL_GetTick>
 8000afe:	1bc0      	subs	r0, r0, r7
 8000b00:	4540      	cmp	r0, r8
 8000b02:	d9bd      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1e0>
 8000b04:	e713      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b06:	4d1b      	ldr	r5, [pc, #108]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
 8000b08:	68ab      	ldr	r3, [r5, #8]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	f43f aeca 	beq.w	80008a8 <HAL_RCC_OscConfig+0x8>
 8000b14:	4e1b      	ldr	r6, [pc, #108]	; (8000b84 <HAL_RCC_OscConfig+0x2e4>)
 8000b16:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b18:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b1a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b1c:	d134      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fd37 	bl	8000590 <HAL_GetTick>
 8000b22:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	0199      	lsls	r1, r3, #6
 8000b28:	d41e      	bmi.n	8000b68 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b2a:	6a22      	ldr	r2, [r4, #32]
 8000b2c:	69e3      	ldr	r3, [r4, #28]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b32:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3e:	4c0d      	ldr	r4, [pc, #52]	; (8000b74 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b40:	0852      	lsrs	r2, r2, #1
 8000b42:	3a01      	subs	r2, #1
 8000b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b48:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fd1f 	bl	8000590 <HAL_GetTick>
 8000b52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b54:	6823      	ldr	r3, [r4, #0]
 8000b56:	019a      	lsls	r2, r3, #6
 8000b58:	f53f aebc 	bmi.w	80008d4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b5c:	f7ff fd18 	bl	8000590 <HAL_GetTick>
 8000b60:	1b40      	subs	r0, r0, r5
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d9f6      	bls.n	8000b54 <HAL_RCC_OscConfig+0x2b4>
 8000b66:	e6e2      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b68:	f7ff fd12 	bl	8000590 <HAL_GetTick>
 8000b6c:	1bc0      	subs	r0, r0, r7
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9d8      	bls.n	8000b24 <HAL_RCC_OscConfig+0x284>
 8000b72:	e6dc      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
 8000b74:	40023800 	.word	0x40023800
 8000b78:	42470000 	.word	0x42470000
 8000b7c:	42470e80 	.word	0x42470e80
 8000b80:	40007000 	.word	0x40007000
 8000b84:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd02 	bl	8000590 <HAL_GetTick>
 8000b8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	f57f ae9f 	bpl.w	80008d4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fcfb 	bl	8000590 <HAL_GetTick>
 8000b9a:	1b00      	subs	r0, r0, r4
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x2ee>
 8000ba0:	e6c5      	b.n	800092e <HAL_RCC_OscConfig+0x8e>
 8000ba2:	bf00      	nop

08000ba4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba4:	4913      	ldr	r1, [pc, #76]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ba6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	688b      	ldr	r3, [r1, #8]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d003      	beq.n	8000bba <HAL_RCC_GetSysClockFreq+0x16>
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d003      	beq.n	8000bbe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb6:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bb8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x58>)
 8000bbc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bbe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc8:	bf14      	ite	ne
 8000bca:	480c      	ldrne	r0, [pc, #48]	; (8000bfc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bcc:	480a      	ldreq	r0, [pc, #40]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bd2:	bf18      	it	ne
 8000bd4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bda:	fba1 0100 	umull	r0, r1, r1, r0
 8000bde:	f7ff fb05 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x50>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bea:	3301      	adds	r3, #1
 8000bec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	00f42400 	.word	0x00f42400
 8000bfc:	007a1200 	.word	0x007a1200

08000c00 <HAL_RCC_ClockConfig>:
{
 8000c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c04:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c06:	4604      	mov	r4, r0
 8000c08:	b910      	cbnz	r0, 8000c10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c10:	4b44      	ldr	r3, [pc, #272]	; (8000d24 <HAL_RCC_ClockConfig+0x124>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f002 020f 	and.w	r2, r2, #15
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	d328      	bcc.n	8000c6e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	078f      	lsls	r7, r1, #30
 8000c20:	d42d      	bmi.n	8000c7e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c22:	07c8      	lsls	r0, r1, #31
 8000c24:	d440      	bmi.n	8000ca8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <HAL_RCC_ClockConfig+0x124>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f002 020f 	and.w	r2, r2, #15
 8000c2e:	4295      	cmp	r5, r2
 8000c30:	d366      	bcc.n	8000d00 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c32:	6822      	ldr	r2, [r4, #0]
 8000c34:	0751      	lsls	r1, r2, #29
 8000c36:	d46c      	bmi.n	8000d12 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c38:	0713      	lsls	r3, r2, #28
 8000c3a:	d507      	bpl.n	8000c4c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c3c:	4a3a      	ldr	r2, [pc, #232]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000c3e:	6921      	ldr	r1, [r4, #16]
 8000c40:	6893      	ldr	r3, [r2, #8]
 8000c42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c4c:	f7ff ffaa 	bl	8000ba4 <HAL_RCC_GetSysClockFreq>
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <HAL_RCC_ClockConfig+0x12c>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_RCC_ClockConfig+0x130>)
 8000c60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fc4a 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d1c6      	bne.n	8000c0a <HAL_RCC_ClockConfig+0xa>
 8000c7c:	e7ce      	b.n	8000c1c <HAL_RCC_ClockConfig+0x1c>
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c80:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c84:	bf1e      	ittt	ne
 8000c86:	689a      	ldrne	r2, [r3, #8]
 8000c88:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c8c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c8e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c90:	bf42      	ittt	mi
 8000c92:	689a      	ldrmi	r2, [r3, #8]
 8000c94:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c98:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	68a0      	ldr	r0, [r4, #8]
 8000c9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ca2:	4302      	orrs	r2, r0
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	e7bc      	b.n	8000c22 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca8:	6862      	ldr	r2, [r4, #4]
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000cac:	2a01      	cmp	r2, #1
 8000cae:	d11d      	bne.n	8000cec <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb6:	d0a8      	beq.n	8000c0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb8:	4e1b      	ldr	r6, [pc, #108]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000cba:	68b3      	ldr	r3, [r6, #8]
 8000cbc:	f023 0303 	bic.w	r3, r3, #3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cc4:	f7ff fc64 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ccc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cce:	68b3      	ldr	r3, [r6, #8]
 8000cd0:	6862      	ldr	r2, [r4, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cda:	d0a4      	beq.n	8000c26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cdc:	f7ff fc58 	bl	8000590 <HAL_GetTick>
 8000ce0:	1bc0      	subs	r0, r0, r7
 8000ce2:	4540      	cmp	r0, r8
 8000ce4:	d9f3      	bls.n	8000cce <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000ce6:	2003      	movs	r0, #3
}
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cec:	1e91      	subs	r1, r2, #2
 8000cee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf2:	d802      	bhi.n	8000cfa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cf8:	e7dd      	b.n	8000cb6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	f013 0f02 	tst.w	r3, #2
 8000cfe:	e7da      	b.n	8000cb6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d00:	b2ea      	uxtb	r2, r5
 8000d02:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	429d      	cmp	r5, r3
 8000d0c:	f47f af7d 	bne.w	8000c0a <HAL_RCC_ClockConfig+0xa>
 8000d10:	e78f      	b.n	8000c32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d12:	4905      	ldr	r1, [pc, #20]	; (8000d28 <HAL_RCC_ClockConfig+0x128>)
 8000d14:	68e0      	ldr	r0, [r4, #12]
 8000d16:	688b      	ldr	r3, [r1, #8]
 8000d18:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d1c:	4303      	orrs	r3, r0
 8000d1e:	608b      	str	r3, [r1, #8]
 8000d20:	e78a      	b.n	8000c38 <HAL_RCC_ClockConfig+0x38>
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	08001144 	.word	0x08001144
 8000d30:	2000000c 	.word	0x2000000c

08000d34 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == USER_Btn_Pin)
 8000d34:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000d38:	d104      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x10>
  {
	  if (!blink)
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x18>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	b912      	cbnz	r2, 8000d46 <HAL_GPIO_EXTI_Callback+0x12>
		  blink = 1;
 8000d40:	2201      	movs	r2, #1
	  else
		  blink = 0;
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	4770      	bx	lr
 8000d46:	2200      	movs	r2, #0
 8000d48:	e7fb      	b.n	8000d42 <HAL_GPIO_EXTI_Callback+0xe>
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d54:	2230      	movs	r2, #48	; 0x30
 8000d56:	2100      	movs	r1, #0
 8000d58:	a808      	add	r0, sp, #32
 8000d5a:	f000 f9df 	bl	800111c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2214      	movs	r2, #20
 8000d62:	a803      	add	r0, sp, #12
 8000d64:	f000 f9da 	bl	800111c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	2400      	movs	r4, #0
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <SystemClock_Config+0x7c>)
 8000d6c:	9401      	str	r4, [sp, #4]
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d78:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <SystemClock_Config+0x80>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d82:	9402      	str	r4, [sp, #8]
 8000d84:	6813      	ldr	r3, [r2, #0]
 8000d86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d92:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	9302      	str	r3, [sp, #8]
 8000d9a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da6:	2310      	movs	r3, #16
 8000da8:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f7ff fd79 	bl	80008a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db2:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dba:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dbe:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	f7ff ff1d 	bl	8000c00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000dc6:	b014      	add	sp, #80	; 0x50
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <main>:
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000dd8:	f7ff fbb4 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 8000ddc:	f7ff ffb8 	bl	8000d50 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	2214      	movs	r2, #20
 8000de2:	2100      	movs	r1, #0
 8000de4:	a807      	add	r0, sp, #28
 8000de6:	f000 f999 	bl	800111c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2400      	movs	r4, #0
 8000dec:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <main+0x1ec>)
 8000dee:	9401      	str	r4, [sp, #4]
 8000df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000df2:	4874      	ldr	r0, [pc, #464]	; (8000fc4 <main+0x1f0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	f042 0204 	orr.w	r2, r2, #4
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	f002 0204 	and.w	r2, r2, #4
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e04:	9402      	str	r4, [sp, #8]
 8000e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e10:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e14:	9202      	str	r2, [sp, #8]
 8000e16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	9403      	str	r4, [sp, #12]
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1c:	f042 0201 	orr.w	r2, r2, #1
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e24:	f002 0201 	and.w	r2, r2, #1
 8000e28:	9203      	str	r2, [sp, #12]
 8000e2a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	9404      	str	r4, [sp, #16]
 8000e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e30:	f042 0202 	orr.w	r2, r2, #2
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
 8000e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e38:	f002 0202 	and.w	r2, r2, #2
 8000e3c:	9204      	str	r2, [sp, #16]
 8000e3e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	9405      	str	r4, [sp, #20]
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	f042 0208 	orr.w	r2, r2, #8
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4c:	f002 0208 	and.w	r2, r2, #8
 8000e50:	9205      	str	r2, [sp, #20]
 8000e52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e54:	9406      	str	r4, [sp, #24]
 8000e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e64:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e68:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e6e:	f7ff fcff 	bl	8000870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e72:	4622      	mov	r2, r4
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4854      	ldr	r0, [pc, #336]	; (8000fc8 <main+0x1f4>)
 8000e78:	f7ff fcfa 	bl	8000870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e7c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <main+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e82:	4853      	ldr	r0, [pc, #332]	; (8000fd0 <main+0x1fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e86:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	270b      	movs	r7, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e90:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f7ff fc00 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e98:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	a907      	add	r1, sp, #28
 8000e9c:	484c      	ldr	r0, [pc, #304]	; (8000fd0 <main+0x1fc>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e9e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f7ff fbf6 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eac:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	a907      	add	r1, sp, #28
 8000eb0:	4848      	ldr	r0, [pc, #288]	; (8000fd4 <main+0x200>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eb2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ebe:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f7ff fbea 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ec4:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	a907      	add	r1, sp, #28
 8000eca:	483e      	ldr	r0, [pc, #248]	; (8000fc4 <main+0x1f0>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ecc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f7ff fbdf 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eda:	a907      	add	r1, sp, #28
 8000edc:	4839      	ldr	r0, [pc, #228]	; (8000fc4 <main+0x1f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ee2:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f7ff fbd5 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef6:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	4837      	ldr	r0, [pc, #220]	; (8000fd8 <main+0x204>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000efe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f7ff fbc9 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f06:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f08:	a907      	add	r1, sp, #28
 8000f0a:	482f      	ldr	r0, [pc, #188]	; (8000fc8 <main+0x1f4>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f0c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f7ff fbbf 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f1a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	a907      	add	r1, sp, #28
 8000f1e:	482a      	ldr	r0, [pc, #168]	; (8000fc8 <main+0x1f4>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f20:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f7ff fbb7 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f2a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f2e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f32:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <main+0x200>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f7ff fbab 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f42:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f46:	a907      	add	r1, sp, #28
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <main+0x200>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f4a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f7ff fba2 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	a907      	add	r1, sp, #28
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <main+0x1f4>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f5c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f64:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f7ff fb97 	bl	8000698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	2028      	movs	r0, #40	; 0x28
 8000f70:	f7ff fb3a 	bl	80005e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f74:	2028      	movs	r0, #40	; 0x28
 8000f76:	f7ff fb6b 	bl	8000650 <HAL_NVIC_EnableIRQ>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f7a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	  if (blink)
 8000f7e:	4e17      	ldr	r6, [pc, #92]	; (8000fdc <main+0x208>)
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f80:	f504 3401 	add.w	r4, r4, #132096	; 0x20400
	  if (blink)
 8000f84:	6835      	ldr	r5, [r6, #0]
 8000f86:	b175      	cbz	r5, 8000fa6 <main+0x1d2>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	f7ff fc6e 	bl	8000870 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f94:	4620      	mov	r0, r4
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	f7ff fc6f 	bl	800087a <HAL_GPIO_TogglePin>
		  HAL_Delay(5000);
 8000f9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fa0:	f7ff fafc 	bl	800059c <HAL_Delay>
 8000fa4:	e7ee      	b.n	8000f84 <main+0x1b0>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fae:	f7ff fc5f 	bl	8000870 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	462a      	mov	r2, r5
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff fc5a 	bl	8000870 <HAL_GPIO_WritePin>
 8000fbc:	e7e2      	b.n	8000f84 <main+0x1b0>
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x34>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	9100      	str	r1, [sp, #0]
 8000fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
 8000ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	9101      	str	r1, [sp, #4]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	b002      	add	sp, #8
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <NMI_Handler>:
 8001018:	4770      	bx	lr

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	e7fe      	b.n	800101a <HardFault_Handler>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	e7fe      	b.n	800101c <MemManage_Handler>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	e7fe      	b.n	800101e <BusFault_Handler>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler>

08001022 <SVC_Handler>:
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f7ff baa6 	b.w	8000578 <HAL_IncTick>

0800102c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800102c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001030:	f7ff bc2a 	b.w	8000888 <HAL_GPIO_EXTI_IRQHandler>

08001034 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	490f      	ldr	r1, [pc, #60]	; (8001074 <SystemInit+0x40>)
 8001036:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800103a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <SystemInit+0x44>)
 8001044:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001046:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001048:	f042 0201 	orr.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800104e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001056:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800105a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <SystemInit+0x48>)
 800105e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001066:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001068:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800106a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800106e:	608b      	str	r3, [r1, #8]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	40023800 	.word	0x40023800
 800107c:	24003010 	.word	0x24003010

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
  ldr  r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffc3 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f000 f811 	bl	80010d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fe8f 	bl	8000dd4 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010bc:	08001164 	.word	0x08001164
  ldr  r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80010c8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010cc:	20000030 	.word	0x20000030

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <__libc_init_array>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	4e0d      	ldr	r6, [pc, #52]	; (800110c <__libc_init_array+0x38>)
 80010d8:	4c0d      	ldr	r4, [pc, #52]	; (8001110 <__libc_init_array+0x3c>)
 80010da:	1ba4      	subs	r4, r4, r6
 80010dc:	10a4      	asrs	r4, r4, #2
 80010de:	2500      	movs	r5, #0
 80010e0:	42a5      	cmp	r5, r4
 80010e2:	d109      	bne.n	80010f8 <__libc_init_array+0x24>
 80010e4:	4e0b      	ldr	r6, [pc, #44]	; (8001114 <__libc_init_array+0x40>)
 80010e6:	4c0c      	ldr	r4, [pc, #48]	; (8001118 <__libc_init_array+0x44>)
 80010e8:	f000 f820 	bl	800112c <_init>
 80010ec:	1ba4      	subs	r4, r4, r6
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	2500      	movs	r5, #0
 80010f2:	42a5      	cmp	r5, r4
 80010f4:	d105      	bne.n	8001102 <__libc_init_array+0x2e>
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
 80010f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010fc:	4798      	blx	r3
 80010fe:	3501      	adds	r5, #1
 8001100:	e7ee      	b.n	80010e0 <__libc_init_array+0xc>
 8001102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001106:	4798      	blx	r3
 8001108:	3501      	adds	r5, #1
 800110a:	e7f2      	b.n	80010f2 <__libc_init_array+0x1e>
 800110c:	0800115c 	.word	0x0800115c
 8001110:	0800115c 	.word	0x0800115c
 8001114:	0800115c 	.word	0x0800115c
 8001118:	08001160 	.word	0x08001160

0800111c <memset>:
 800111c:	4402      	add	r2, r0
 800111e:	4603      	mov	r3, r0
 8001120:	4293      	cmp	r3, r2
 8001122:	d100      	bne.n	8001126 <memset+0xa>
 8001124:	4770      	bx	lr
 8001126:	f803 1b01 	strb.w	r1, [r3], #1
 800112a:	e7f9      	b.n	8001120 <memset+0x4>

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
