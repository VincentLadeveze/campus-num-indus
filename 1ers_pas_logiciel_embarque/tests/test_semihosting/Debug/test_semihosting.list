
test_semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000680  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800082c  0800082c  0001082c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000844  08000844  00010844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000848  08000848  00010848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0001084c  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001084c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002dd9  00000000  00000000  0001087c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000801  00000000  00000000  00013655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000200  00000000  00000000  00013e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a8  00000000  00000000  00014058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c9f  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000bce  00000000  00000000  00014e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015a6d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000075c  00000000  00000000  00015aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000814 	.word	0x08000814

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000814 	.word	0x08000814

080001ec <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  int i = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
  int printf_result = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	603b      	str	r3, [r7, #0]
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  printf_result = printf("J'aime le Grand Veymont");
 80001fa:	4804      	ldr	r0, [pc, #16]	; (800020c <main+0x20>)
 80001fc:	f000 fa9c 	bl	8000738 <iprintf>
 8000200:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  while (1)
  {
	i++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3301      	adds	r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	e7fb      	b.n	8000202 <main+0x16>
 800020a:	bf00      	nop
 800020c:	0800082c 	.word	0x0800082c

08000210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000248 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000216:	e003      	b.n	8000220 <LoopCopyDataInit>

08000218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800021a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800021c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800021e:	3104      	adds	r1, #4

08000220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000220:	480b      	ldr	r0, [pc, #44]	; (8000250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000228:	d3f6      	bcc.n	8000218 <CopyDataInit>
  ldr  r2, =_sbss
 800022a:	4a0b      	ldr	r2, [pc, #44]	; (8000258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800022c:	e002      	b.n	8000234 <LoopFillZerobss>

0800022e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800022e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000230:	f842 3b04 	str.w	r3, [r2], #4

08000234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000238:	d3f9      	bcc.n	800022e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800023a:	f000 f855 	bl	80002e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800023e:	f000 fac5 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000242:	f7ff ffd3 	bl	80001ec <main>
  bx  lr    
 8000246:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000248:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800024c:	0800084c 	.word	0x0800084c
  ldr  r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000254:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800025c:	20000020 	.word	0x20000020

08000260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC_IRQHandler>

08000262 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000274:	e7fe      	b.n	8000274 <HardFault_Handler+0x4>

08000276 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800027a:	e7fe      	b.n	800027a <MemManage_Handler+0x4>

0800027c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000280:	e7fe      	b.n	8000280 <BusFault_Handler+0x4>

08000282 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000286:	e7fe      	b.n	8000286 <UsageFault_Handler+0x4>

08000288 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	
	errno = ENOSYS;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <_write+0x24>)
 80002ce:	2258      	movs	r2, #88	; 0x58
 80002d0:	601a      	str	r2, [r3, #0]
	return -1;
 80002d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4a16      	ldr	r2, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <SystemInit+0x64>)
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <SystemInit+0x64>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <SystemInit+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <SystemInit+0x64>)
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SystemInit+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800031c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <SystemInit+0x64>)
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <SystemInit+0x68>)
 8000322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800032e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <SystemInit+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000336:	f000 f80d 	bl	8000354 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <SystemInit+0x60>)
 800033c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000340:	609a      	str	r2, [r3, #8]
#endif
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	40023800 	.word	0x40023800
 8000350:	24003010 	.word	0x24003010

08000354 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000362:	4a36      	ldr	r2, [pc, #216]	; (800043c <SetSysClock+0xe8>)
 8000364:	4b35      	ldr	r3, [pc, #212]	; (800043c <SetSysClock+0xe8>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800036e:	4b33      	ldr	r3, [pc, #204]	; (800043c <SetSysClock+0xe8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d103      	bne.n	800038c <SetSysClock+0x38>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800038a:	d1f0      	bne.n	800036e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <SetSysClock+0xe8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d002      	beq.n	800039e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000398:	2301      	movs	r3, #1
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	e001      	b.n	80003a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d142      	bne.n	800042e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a8:	4a24      	ldr	r2, [pc, #144]	; (800043c <SetSysClock+0xe8>)
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <SetSysClock+0xe8>)
 80003ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003b4:	4a22      	ldr	r2, [pc, #136]	; (8000440 <SetSysClock+0xec>)
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <SetSysClock+0xec>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <SetSysClock+0xe8>)
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <SetSysClock+0xe8>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003c8:	4a1c      	ldr	r2, [pc, #112]	; (800043c <SetSysClock+0xe8>)
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <SetSysClock+0xe8>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <SetSysClock+0xe8>)
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <SetSysClock+0xe8>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003de:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <SetSysClock+0xe8>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <SetSysClock+0xf0>)
 80003e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003e6:	4a15      	ldr	r2, [pc, #84]	; (800043c <SetSysClock+0xe8>)
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <SetSysClock+0xe8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003f2:	bf00      	nop
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <SetSysClock+0xe8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f9      	beq.n	80003f4 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <SetSysClock+0xf4>)
 8000402:	f240 7205 	movw	r2, #1797	; 0x705
 8000406:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <SetSysClock+0xe8>)
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <SetSysClock+0xe8>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <SetSysClock+0xe8>)
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <SetSysClock+0xe8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000420:	bf00      	nop
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <SetSysClock+0xe8>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f003 030c 	and.w	r3, r3, #12
 800042a:	2b08      	cmp	r3, #8
 800042c:	d1f9      	bne.n	8000422 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40023800 	.word	0x40023800
 8000440:	40007000 	.word	0x40007000
 8000444:	07405a19 	.word	0x07405a19
 8000448:	40023c00 	.word	0x40023c00

0800044c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800044c:	b480      	push	{r7}
 800044e:	b087      	sub	sp, #28
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000458:	2301      	movs	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800045c:	e004      	b.n	8000468 <ts_itoa+0x1c>
		div *= base;
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	d2f3      	bcs.n	800045e <ts_itoa+0x12>

	while (div != 0)
 8000476:	e029      	b.n	80004cc <ts_itoa+0x80>
	{
		int num = d/div;
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000480:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000482:	697a      	ldr	r2, [r7, #20]
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	fbb3 f1f2 	udiv	r1, r3, r2
 800048a:	fb02 f201 	mul.w	r2, r2, r1
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	fb92 f3f3 	sdiv	r3, r2, r3
 800049a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	2b09      	cmp	r3, #9
 80004a0:	dd0a      	ble.n	80004b8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	1c59      	adds	r1, r3, #1
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	6011      	str	r1, [r2, #0]
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	b2d2      	uxtb	r2, r2
 80004b0:	3237      	adds	r2, #55	; 0x37
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	e009      	b.n	80004cc <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	1c59      	adds	r1, r3, #1
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	6011      	str	r1, [r2, #0]
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	3230      	adds	r2, #48	; 0x30
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d1d2      	bne.n	8000478 <ts_itoa+0x2c>
	}
}
 80004d2:	bf00      	nop
 80004d4:	371c      	adds	r7, #28
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b088      	sub	sp, #32
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80004ee:	e07d      	b.n	80005ec <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b25      	cmp	r3, #37	; 0x25
 80004f6:	d171      	bne.n	80005dc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b64      	cmp	r3, #100	; 0x64
 8000504:	d01e      	beq.n	8000544 <ts_formatstring+0x66>
 8000506:	2b64      	cmp	r3, #100	; 0x64
 8000508:	dc06      	bgt.n	8000518 <ts_formatstring+0x3a>
 800050a:	2b58      	cmp	r3, #88	; 0x58
 800050c:	d050      	beq.n	80005b0 <ts_formatstring+0xd2>
 800050e:	2b63      	cmp	r3, #99	; 0x63
 8000510:	d00e      	beq.n	8000530 <ts_formatstring+0x52>
 8000512:	2b25      	cmp	r3, #37	; 0x25
 8000514:	d058      	beq.n	80005c8 <ts_formatstring+0xea>
 8000516:	e05d      	b.n	80005d4 <ts_formatstring+0xf6>
 8000518:	2b73      	cmp	r3, #115	; 0x73
 800051a:	d02b      	beq.n	8000574 <ts_formatstring+0x96>
 800051c:	2b73      	cmp	r3, #115	; 0x73
 800051e:	dc02      	bgt.n	8000526 <ts_formatstring+0x48>
 8000520:	2b69      	cmp	r3, #105	; 0x69
 8000522:	d00f      	beq.n	8000544 <ts_formatstring+0x66>
 8000524:	e056      	b.n	80005d4 <ts_formatstring+0xf6>
 8000526:	2b75      	cmp	r3, #117	; 0x75
 8000528:	d037      	beq.n	800059a <ts_formatstring+0xbc>
 800052a:	2b78      	cmp	r3, #120	; 0x78
 800052c:	d040      	beq.n	80005b0 <ts_formatstring+0xd2>
 800052e:	e051      	b.n	80005d4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60fa      	str	r2, [r7, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	1d11      	adds	r1, r2, #4
 800053a:	6079      	str	r1, [r7, #4]
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	701a      	strb	r2, [r3, #0]
				break;
 8000542:	e047      	b.n	80005d4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	1d1a      	adds	r2, r3, #4
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	2b00      	cmp	r3, #0
 8000552:	da07      	bge.n	8000564 <ts_formatstring+0x86>
					{
						val *= -1;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	425b      	negs	r3, r3
 8000558:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	60fa      	str	r2, [r7, #12]
 8000560:	222d      	movs	r2, #45	; 0x2d
 8000562:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000564:	69f9      	ldr	r1, [r7, #28]
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	220a      	movs	r2, #10
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff6d 	bl	800044c <ts_itoa>
				}
				break;
 8000572:	e02f      	b.n	80005d4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	1d1a      	adds	r2, r3, #4
 8000578:	607a      	str	r2, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800057e:	e007      	b.n	8000590 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60fa      	str	r2, [r7, #12]
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	1c51      	adds	r1, r2, #1
 800058a:	61b9      	str	r1, [r7, #24]
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f3      	bne.n	8000580 <ts_formatstring+0xa2>
					}
				}
				break;
 8000598:	e01c      	b.n	80005d4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	1d1a      	adds	r2, r3, #4
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	220a      	movs	r2, #10
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff4f 	bl	800044c <ts_itoa>
				break;
 80005ae:	e011      	b.n	80005d4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	1d1a      	adds	r2, r3, #4
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2210      	movs	r2, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff43 	bl	800044c <ts_itoa>
				break;
 80005c6:	e005      	b.n	80005d4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60fa      	str	r2, [r7, #12]
 80005ce:	2225      	movs	r2, #37	; 0x25
 80005d0:	701a      	strb	r2, [r3, #0]
				  break;
 80005d2:	bf00      	nop
			}
			fmt++;
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	e007      	b.n	80005ec <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60fa      	str	r2, [r7, #12]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	1c51      	adds	r1, r2, #1
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f47f af7d 	bne.w	80004f0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	461a      	mov	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	1ad3      	subs	r3, r2, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	int length = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800061a:	e081      	b.n	8000720 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b25      	cmp	r3, #37	; 0x25
 8000622:	d177      	bne.n	8000714 <ts_formatlength+0x108>
		{
			++fmt;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	3b58      	subs	r3, #88	; 0x58
 8000630:	2b20      	cmp	r3, #32
 8000632:	d86a      	bhi.n	800070a <ts_formatlength+0xfe>
 8000634:	a201      	add	r2, pc, #4	; (adr r2, 800063c <ts_formatlength+0x30>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	080006fd 	.word	0x080006fd
 8000640:	0800070b 	.word	0x0800070b
 8000644:	0800070b 	.word	0x0800070b
 8000648:	0800070b 	.word	0x0800070b
 800064c:	0800070b 	.word	0x0800070b
 8000650:	0800070b 	.word	0x0800070b
 8000654:	0800070b 	.word	0x0800070b
 8000658:	0800070b 	.word	0x0800070b
 800065c:	0800070b 	.word	0x0800070b
 8000660:	0800070b 	.word	0x0800070b
 8000664:	0800070b 	.word	0x0800070b
 8000668:	080006c1 	.word	0x080006c1
 800066c:	080006cf 	.word	0x080006cf
 8000670:	0800070b 	.word	0x0800070b
 8000674:	0800070b 	.word	0x0800070b
 8000678:	0800070b 	.word	0x0800070b
 800067c:	0800070b 	.word	0x0800070b
 8000680:	080006cf 	.word	0x080006cf
 8000684:	0800070b 	.word	0x0800070b
 8000688:	0800070b 	.word	0x0800070b
 800068c:	0800070b 	.word	0x0800070b
 8000690:	0800070b 	.word	0x0800070b
 8000694:	0800070b 	.word	0x0800070b
 8000698:	0800070b 	.word	0x0800070b
 800069c:	0800070b 	.word	0x0800070b
 80006a0:	0800070b 	.word	0x0800070b
 80006a4:	0800070b 	.word	0x0800070b
 80006a8:	080006dd 	.word	0x080006dd
 80006ac:	0800070b 	.word	0x0800070b
 80006b0:	080006cf 	.word	0x080006cf
 80006b4:	0800070b 	.word	0x0800070b
 80006b8:	0800070b 	.word	0x0800070b
 80006bc:	080006fd 	.word	0x080006fd
			{
			  case 'c':
		  		  va_arg(va, int);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	3304      	adds	r3, #4
 80006c4:	603b      	str	r3, [r7, #0]
				  ++length;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3301      	adds	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
				  break;
 80006cc:	e025      	b.n	800071a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	330b      	adds	r3, #11
 80006d2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	3304      	adds	r3, #4
 80006d8:	603b      	str	r3, [r7, #0]
				  break;
 80006da:	e01e      	b.n	800071a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	603a      	str	r2, [r7, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80006e6:	e002      	b.n	80006ee <ts_formatlength+0xe2>
			  			  ++length;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f6      	bne.n	80006e8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80006fa:	e00e      	b.n	800071a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3308      	adds	r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	3304      	adds	r3, #4
 8000706:	603b      	str	r3, [r7, #0]
				  break;
 8000708:	e007      	b.n	800071a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
				  break;
 8000710:	bf00      	nop
 8000712:	e002      	b.n	800071a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f47f af79 	bne.w	800061c <ts_formatlength+0x10>
	}
	return length;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8000738:	b40f      	push	{r0, r1, r2, r3}
 800073a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
	int length = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8000746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800074c:	6839      	ldr	r1, [r7, #0]
 800074e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000750:	f7ff ff5c 	bl	800060c <ts_formatlength>
 8000754:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8000756:	466b      	mov	r3, sp
 8000758:	461e      	mov	r6, r3
		char buf[length];
 800075a:	68f9      	ldr	r1, [r7, #12]
 800075c:	1e4b      	subs	r3, r1, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	460b      	mov	r3, r1
 8000762:	461a      	mov	r2, r3
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800076c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8000770:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8000774:	460b      	mov	r3, r1
 8000776:	461a      	mov	r2, r3
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	00dd      	lsls	r5, r3, #3
 800077e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8000782:	00d4      	lsls	r4, r2, #3
 8000784:	460b      	mov	r3, r1
 8000786:	3307      	adds	r3, #7
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	ebad 0d03 	sub.w	sp, sp, r3
 8000790:	466b      	mov	r3, sp
 8000792:	3300      	adds	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8000796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800079a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fe9b 	bl	80004de <ts_formatstring>
 80007a8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	4619      	mov	r1, r3
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fd85 	bl	80002c0 <_write>
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007c6:	b004      	add	sp, #16
 80007c8:	4770      	bx	lr
	...

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4e0d      	ldr	r6, [pc, #52]	; (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	; (8000808 <__libc_init_array+0x3c>)
 80007d2:	1ba4      	subs	r4, r4, r6
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2500      	movs	r5, #0
 80007d8:	42a5      	cmp	r5, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4e0b      	ldr	r6, [pc, #44]	; (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 f818 	bl	8000814 <_init>
 80007e4:	1ba4      	subs	r4, r4, r6
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2500      	movs	r5, #0
 80007ea:	42a5      	cmp	r5, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007f4:	4798      	blx	r3
 80007f6:	3501      	adds	r5, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007fe:	4798      	blx	r3
 8000800:	3501      	adds	r5, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	08000844 	.word	0x08000844
 8000808:	08000844 	.word	0x08000844
 800080c:	08000844 	.word	0x08000844
 8000810:	08000848 	.word	0x08000848

08000814 <_init>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	bf00      	nop
 8000818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081a:	bc08      	pop	{r3}
 800081c:	469e      	mov	lr, r3
 800081e:	4770      	bx	lr

08000820 <_fini>:
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	bf00      	nop
 8000824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000826:	bc08      	pop	{r3}
 8000828:	469e      	mov	lr, r3
 800082a:	4770      	bx	lr
