
NUCLEO-F429ZI-SOCKET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015248  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cd0  080153f8  080153f8  000253f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080180c8  080180c8  000280c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080180d0  080180d0  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080180d4  080180d4  000280d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  080180d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
  8 .bss          0000acb4  2000007c  2000007c  0003007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ad30  2000ad30  0003007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000401ce  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000076d2  00000000  00000000  0007027a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002270  00000000  00000000  00077950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002058  00000000  00000000  00079bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000149e8  00000000  00000000  0007bc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000ac65  00000000  00000000  00090600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009b265  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009368  00000000  00000000  0009b2e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080153e0 	.word	0x080153e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080153e0 	.word	0x080153e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f8f8 	bl	80007be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f013 fe44 	bl	801425c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f013 fd74 	bl	80140c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20003fdc 	.word	0x20003fdc

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20003fdc 	.word	0x20003fdc

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_Delay+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f7      	bcc.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	f002 021f 	and.w	r2, r2, #31
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	2201      	movs	r2, #1
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	401a      	ands	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a2:	2101      	movs	r1, #1
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	1e59      	subs	r1, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff4e 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e6:	f7ff ff63 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	6978      	ldr	r0, [r7, #20]
 80007f2:	f7ff ffb3 	bl	800075c <NVIC_EncodePriority>
 80007f6:	4602      	mov	r2, r0
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff82 	bl	8000708 <__NVIC_SetPriority>
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff56 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000838:	4baa      	ldr	r3, [pc, #680]	; (8000ae4 <HAL_ETH_Init+0x2bc>)
 800083a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e185      	b.n	8000b5a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f012 fcdc 	bl	8013220 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4a9e      	ldr	r2, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800086e:	4b9e      	ldr	r3, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6453      	str	r3, [r2, #68]	; 0x44
 8000878:	4b9b      	ldr	r3, [pc, #620]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000884:	4a99      	ldr	r2, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000886:	4b99      	ldr	r3, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800088e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000890:	4996      	ldr	r1, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000892:	4b96      	ldr	r3, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	4313      	orrs	r3, r2
 800089c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	f042 0201 	orr.w	r2, r2, #1
 80008b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008b6:	f7ff fea9 	bl	800060c <HAL_GetTick>
 80008ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008bc:	e011      	b.n	80008e2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008be:	f7ff fea5 	bl	800060c <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008cc:	d909      	bls.n	80008e2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2203      	movs	r2, #3
 80008d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80008de:	2303      	movs	r3, #3
 80008e0:	e13b      	b.n	8000b5a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e4      	bne.n	80008be <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f023 031c 	bic.w	r3, r3, #28
 8000902:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000904:	f001 fe70 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8000908:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4a78      	ldr	r2, [pc, #480]	; (8000af0 <HAL_ETH_Init+0x2c8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d908      	bls.n	8000924 <HAL_ETH_Init+0xfc>
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4a77      	ldr	r2, [pc, #476]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d804      	bhi.n	8000924 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	e027      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	4a73      	ldr	r2, [pc, #460]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d908      	bls.n	800093e <HAL_ETH_Init+0x116>
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4a72      	ldr	r2, [pc, #456]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d804      	bhi.n	800093e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f043 030c 	orr.w	r3, r3, #12
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e01a      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4a6d      	ldr	r2, [pc, #436]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d903      	bls.n	800094e <HAL_ETH_Init+0x126>
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4a6c      	ldr	r2, [pc, #432]	; (8000afc <HAL_ETH_Init+0x2d4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d911      	bls.n	8000972 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	4a6a      	ldr	r2, [pc, #424]	; (8000afc <HAL_ETH_Init+0x2d4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d908      	bls.n	8000968 <HAL_ETH_Init+0x140>
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4a69      	ldr	r2, [pc, #420]	; (8000b00 <HAL_ETH_Init+0x2d8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d804      	bhi.n	8000968 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e005      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	e000      	b.n	8000974 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000972:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800097c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fc19 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 fca5 	bl	80012e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e0d9      	b.n	8000b5a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	f7ff fe3c 	bl	8000624 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a7 	beq.w	8000b04 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009b6:	f7ff fe29 	bl	800060c <HAL_GetTick>
 80009ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	461a      	mov	r2, r3
 80009c2:	2101      	movs	r1, #1
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fb90 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009ca:	f7ff fe1f 	bl	800060c <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d8:	4293      	cmp	r3, r2
 80009da:	d90f      	bls.n	80009fc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009e0:	6939      	ldr	r1, [r7, #16]
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fc7e 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e0ae      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0da      	beq.n	80009bc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fbd4 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fc60 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e094      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a30:	f7ff fdec 	bl	800060c <HAL_GetTick>
 8000a34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 fb53 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a44:	f7ff fde2 	bl	800060c <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d90f      	bls.n	8000a76 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a5a:	6939      	ldr	r1, [r7, #16]
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fc41 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e071      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0da      	beq.n	8000a36 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	461a      	mov	r2, r3
 8000a86:	211f      	movs	r1, #31
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fb2e 	bl	80010ea <HAL_ETH_ReadPHYRegister>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fc22 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e056      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	e002      	b.n	8000ac6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	e037      	b.n	8000b48 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	e032      	b.n	8000b48 <HAL_ETH_Init+0x320>
 8000ae2:	bf00      	nop
 8000ae4:	03938700 	.word	0x03938700
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40013800 	.word	0x40013800
 8000af0:	01312cff 	.word	0x01312cff
 8000af4:	02160ebf 	.word	0x02160ebf
 8000af8:	039386ff 	.word	0x039386ff
 8000afc:	05f5e0ff 	.word	0x05f5e0ff
 8000b00:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb4c 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fbd8 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e00c      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b40:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b44:	f7ff fd6e 	bl	8000624 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 fbca 	bl	80012e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop

08000b64 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_ETH_DMATxDescListInit+0x20>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e052      	b.n	8000c2a <HAL_ETH_DMATxDescListInit+0xc6>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e030      	b.n	8000c02 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d908      	bls.n	8000bf6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	e002      	b.n	8000bfc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3ca      	bcc.n	8000ba0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c14:	3310      	adds	r3, #16
 8000c16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b087      	sub	sp, #28
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ETH_DMARxDescListInit+0x20>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e056      	b.n	8000d04 <HAL_ETH_DMARxDescListInit+0xce>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2202      	movs	r2, #2
 8000c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e034      	b.n	8000cdc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	4413      	add	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c82:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000c8a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d908      	bls.n	8000cd0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	e002      	b.n	8000cd6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3c6      	bcc.n	8000c72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cee:	330c      	adds	r3, #12
 8000cf0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ETH_TransmitFrame+0x24>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e0cd      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0b8      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da09      	bge.n	8000d7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2212      	movs	r2, #18
 8000d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e0a9      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d915      	bls.n	8000db2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0a9b      	lsrs	r3, r3, #10
 8000d90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	0a9b      	lsrs	r3, r3, #10
 8000d9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e001      	b.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d11c      	bne.n	8000df6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000dca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000dd6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000de6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	e04b      	b.n	8000e8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e044      	b.n	8000e86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d116      	bne.n	8000e64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_ETH_TransmitFrame+0x1d0>)
 8000e4a:	fb02 f203 	mul.w	r2, r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000e56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3b6      	bcc.n	8000dfc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e96:	3314      	adds	r3, #20
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00d      	beq.n	8000ebe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eaa:	3314      	adds	r3, #20
 8000eac:	2204      	movs	r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	ac02b00b 	.word	0xac02b00b
 8000ee0:	fffffa0c 	.word	0xfffffa0c

08000ee4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e074      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000f0e:	e05a      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d10d      	bne.n	8000f42 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f40:	e041      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
 8000f66:	e02e      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d103      	bne.n	8000f8a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f96:	1f1a      	subs	r2, r3, #4
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e010      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db02      	blt.n	8000fd6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d99c      	bls.n	8000f10 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001004:	3314      	adds	r3, #20
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100c:	2b40      	cmp	r3, #64	; 0x40
 800100e:	d112      	bne.n	8001036 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f012 f9cb 	bl	80133ac <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800101e:	3314      	adds	r3, #20
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001034:	e01b      	b.n	800106e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103e:	3314      	adds	r3, #20
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d111      	bne.n	800106e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f839 	bl	80010c2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001058:	3314      	adds	r3, #20
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001076:	3314      	adds	r3, #20
 8001078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001086:	3314      	adds	r3, #20
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001092:	d112      	bne.n	80010ba <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f81e 	bl	80010d6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a2:	3314      	adds	r3, #20
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	460b      	mov	r3, r1
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b82      	cmp	r3, #130	; 0x82
 800110a:	d101      	bne.n	8001110 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800110c:	2302      	movs	r3, #2
 800110e:	e050      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2282      	movs	r2, #130	; 0x82
 8001114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 031c 	and.w	r3, r3, #28
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8a1b      	ldrh	r3, [r3, #16]
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	b29b      	uxth	r3, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fa56 	bl	800060c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001162:	e015      	b.n	8001190 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001164:	f7ff fa52 	bl	800060c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d309      	bcc.n	8001188 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e014      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	460b      	mov	r3, r1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b42      	cmp	r3, #66	; 0x42
 80011da:	d101      	bne.n	80011e0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80011dc:	2302      	movs	r3, #2
 80011de:	e04e      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2242      	movs	r2, #66	; 0x42
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 031c 	and.w	r3, r3, #28
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8a1b      	ldrh	r3, [r3, #16]
 80011fc:	02db      	lsls	r3, r3, #11
 80011fe:	b29b      	uxth	r3, r3
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	b292      	uxth	r2, r2
 800122c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001236:	f7ff f9e9 	bl	800060c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800123c:	e015      	b.n	800126a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800123e:	f7ff f9e5 	bl	800060c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d309      	bcc.n	8001262 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00d      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e4      	bne.n	800123e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ETH_Start+0x16>
 8001298:	2302      	movs	r3, #2
 800129a:	e01f      	b.n	80012dc <HAL_ETH_Start+0x56>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fa19 	bl	80016e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fa33 	bl	800171e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fa7d 	bl	80017b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fa4a 	bl	8001758 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa5f 	bl	8001788 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	; 0xc0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001300:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001308:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001312:	2300      	movs	r3, #0
 8001314:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	663b      	str	r3, [r7, #96]	; 0x60
 8001330:	e001      	b.n	8001336 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001340:	2300      	movs	r3, #0
 8001342:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013bc:	4bab      	ldr	r3, [pc, #684]	; (800166c <ETH_MACDMAConfig+0x388>)
 80013be:	4013      	ands	r3, r2
 80013c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80013c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80013ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80013cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80013ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80013d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80013d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80013da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80013dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80013de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80013e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80013e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80013e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80013ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80013ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80013ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80013f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80013f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80013f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80013f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80013f8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff f903 	bl	8000624 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001426:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800142e:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001430:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001434:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800143a:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 800143c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001440:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001442:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001446:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001448:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800144c:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 800144e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001452:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001454:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff f8df 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001478:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001482:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800148e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001492:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001496:	4013      	ands	r3, r2
 8001498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a0:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80014a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014a6:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80014a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80014ac:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80014b2:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80014b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80014b8:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80014ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80014be:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c4:	4313      	orrs	r3, r2
 80014c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d2:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff f8a0 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80014f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff f88b 	bl	8000624 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001516:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800151c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001520:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800152a:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800153c:	2304      	movs	r3, #4
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	3318      	adds	r3, #24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ETH_MACDMAConfig+0x38c>)
 800157a:	4013      	ands	r3, r2
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001580:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001582:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001584:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001586:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001588:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800158a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800158c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800158e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001590:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001592:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001594:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001596:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001598:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800159c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80015a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	3318      	adds	r3, #24
 80015b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	3318      	adds	r3, #24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff f829 	bl	8000624 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	3318      	adds	r3, #24
 80015dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015e0:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80015e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ea:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80015ee:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80015f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015f2:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80015f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80015f6:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 80015f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015fa:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80015fc:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001600:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001602:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff f802 	bl	8000624 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800162c:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10f      	bne.n	8001656 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	331c      	adds	r3, #28
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001652:	331c      	adds	r3, #28
 8001654:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	461a      	mov	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f808 	bl	8001674 <ETH_MACAddressConfig>
}
 8001664:	bf00      	nop
 8001666:	37c0      	adds	r7, #192	; 0xc0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	ff20810f 	.word	0xff20810f
 8001670:	f8de3f23 	.word	0xf8de3f23

08001674 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3305      	adds	r3, #5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	3204      	adds	r2, #4
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <ETH_MACAddressConfig+0x68>)
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3303      	adds	r3, #3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <ETH_MACAddressConfig+0x6c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40028040 	.word	0x40028040
 80016e0:	40028044 	.word	0x40028044

080016e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 f87f 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f042 0204 	orr.w	r2, r2, #4
 8001738:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f862 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	3318      	adds	r3, #24
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001774:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001778:	3318      	adds	r3, #24
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	3318      	adds	r3, #24
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017a8:	3318      	adds	r3, #24
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	3318      	adds	r3, #24
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017dc:	3318      	adds	r3, #24
 80017de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	3318      	adds	r3, #24
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 f80c 	bl	800180c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	3318      	adds	r3, #24
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <ETH_Delay+0x34>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <ETH_Delay+0x38>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a5b      	lsrs	r3, r3, #9
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001828:	bf00      	nop
  } 
  while (Delay --);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	60fa      	str	r2, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <ETH_Delay+0x1c>
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000014 	.word	0x20000014
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e177      	b.n	8001b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8166 	bne.w	8001b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x4a>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d00b      	beq.n	800192e <HAL_GPIO_Init+0xe6>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80c0 	beq.w	8001b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x324>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x328>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a5e:	2309      	movs	r3, #9
 8001a60:	e012      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a62:	230a      	movs	r3, #10
 8001a64:	e010      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae84 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022400 	.word	0x40022400
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd0:	b08f      	sub	sp, #60	; 0x3c
 8001bd2:	af0a      	add	r7, sp, #40	; 0x28
 8001bd4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e103      	b.n	8001de8 <HAL_PCD_Init+0x21a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f012 fad7 	bl	80141a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f001 fa4b 	bl	80030a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	687e      	ldr	r6, [r7, #4]
 8001c14:	466d      	mov	r5, sp
 8001c16:	f106 0410 	add.w	r4, r6, #16
 8001c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c2a:	1d33      	adds	r3, r6, #4
 8001c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f001 f9d6 	bl	8002fe0 <USB_CoreInit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0d0      	b.n	8001de8 <HAL_PCD_Init+0x21a>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 fa39 	bl	80030c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e04a      	b.n	8001cee <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	333d      	adds	r3, #61	; 0x3d
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	333c      	adds	r3, #60	; 0x3c
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b298      	uxth	r0, r3
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	4602      	mov	r2, r0
 8001c96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	333f      	adds	r3, #63	; 0x3f
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3344      	adds	r3, #68	; 0x44
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3348      	adds	r3, #72	; 0x48
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3350      	adds	r3, #80	; 0x50
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3af      	bcc.n	8001c58 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e044      	b.n	8001d88 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	3301      	adds	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3b5      	bcc.n	8001cfe <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	687e      	ldr	r6, [r7, #4]
 8001d9a:	466d      	mov	r5, sp
 8001d9c:	f106 0410 	add.w	r4, r6, #16
 8001da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db0:	1d33      	adds	r3, r6, #4
 8001db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f001 f9af 	bl	8003118 <USB_DevInit>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e00d      	b.n	8001de8 <HAL_PCD_Init+0x21a>
  }

  hpcd->USB_Address = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 fb6d 	bl	80034c0 <USB_DevDisconnect>

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e22d      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d075      	beq.n	8001efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0e:	4ba3      	ldr	r3, [pc, #652]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4ba0      	ldr	r3, [pc, #640]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d112      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b9d      	ldr	r3, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	4b99      	ldr	r3, [pc, #612]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d05b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d157      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e208      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x74>
 8001e56:	4a91      	ldr	r2, [pc, #580]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	4b90      	ldr	r3, [pc, #576]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4a8b      	ldr	r2, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	4b8a      	ldr	r3, [pc, #552]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4a88      	ldr	r2, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	4b87      	ldr	r3, [pc, #540]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e88:	4a84      	ldr	r2, [pc, #528]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	4b84      	ldr	r3, [pc, #528]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4a81      	ldr	r2, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fbb0 	bl	800060c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fbac 	bl	800060c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1cd      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xc0>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fb9c 	bl	800060c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe fb98 	bl	800060c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1b9      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xe8>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e18d      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4956      	ldr	r1, [pc, #344]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCC_OscConfig+0x2b0>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fb51 	bl	800060c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7fe fb4d 	bl	800060c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e16e      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4943      	ldr	r1, [pc, #268]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	4b43      	ldr	r3, [pc, #268]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x2b0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fb30 	bl	800060c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fb2c 	bl	800060c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e14d      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d030      	beq.n	800203c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_RCC_OscConfig+0x2b4>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe fb10 	bl	800060c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe fb0c 	bl	800060c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e12d      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x200>
 800200e:	e015      	b.n	800203c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x2b4>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe faf9 	bl	800060c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe faf5 	bl	800060c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e116      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fabb 	bl	800060c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x2ce>
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470000 	.word	0x42470000
 80020a4:	42470e80 	.word	0x42470e80
 80020a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe faae 	bl	800060c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0cf      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
 80020d2:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020d4:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	e01c      	b.n	800211a <HAL_RCC_OscConfig+0x32a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x312>
 80020e8:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020ea:	4b60      	ldr	r3, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
 80020f4:	4a5d      	ldr	r2, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x32a>
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002110:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe fa73 	bl	800060c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fa6f 	bl	800060c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e08e      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCC_OscConfig+0x33a>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7fe fa5d 	bl	800060c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe fa59 	bl	800060c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e078      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4a3b      	ldr	r2, [pc, #236]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d064      	beq.n	800225c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d05c      	beq.n	8002258 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d141      	bne.n	800222a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <HAL_RCC_OscConfig+0x480>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fa2e 	bl	800060c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fa2a 	bl	800060c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e04b      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d2:	4926      	ldr	r1, [pc, #152]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	019b      	lsls	r3, r3, #6
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_RCC_OscConfig+0x480>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe fa03 	bl	800060c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe f9ff 	bl	800060c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e020      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x41a>
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_OscConfig+0x480>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe f9ec 	bl	800060c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe f9e8 	bl	800060c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e009      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_RCC_OscConfig+0x47c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x448>
 8002256:	e001      	b.n	800225c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	40023800 	.word	0x40023800
 8002270:	42470060 	.word	0x42470060

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0ca      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d20c      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b6      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	494f      	ldr	r1, [pc, #316]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07d      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06d      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e065      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4936      	ldr	r1, [pc, #216]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 0203 	bic.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe f952 	bl	800060c <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe f94e 	bl	800060c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04d      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 020f 	and.w	r2, r3, #15
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d90c      	bls.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_RCC_ClockConfig+0x1b4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e030      	b.n	800241e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4918      	ldr	r1, [pc, #96]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4911      	ldr	r1, [pc, #68]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f81d 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	fa21 f303 	lsr.w	r3, r1, r3
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002416:	2000      	movs	r0, #0
 8002418:	f011 ff20 	bl	801425c <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00
 800242c:	40023800 	.word	0x40023800
 8002430:	08018018 	.word	0x08018018
 8002434:	20000014 	.word	0x20000014

08002438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800243c:	b08f      	sub	sp, #60	; 0x3c
 800243e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b04      	cmp	r3, #4
 800245a:	d007      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x34>
 800245c:	2b08      	cmp	r3, #8
 800245e:	d008      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x3a>
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 80b2 	bne.w	80025ca <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800246a:	e0b1      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800246c:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002470:	e0ae      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d04e      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002488:	4b54      	ldr	r3, [pc, #336]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	ea01 0103 	and.w	r1, r1, r3
 800249e:	ea02 0204 	and.w	r2, r2, r4
 80024a2:	460b      	mov	r3, r1
 80024a4:	4614      	mov	r4, r2
 80024a6:	0160      	lsls	r0, r4, #5
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24
 80024aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ac:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	623b      	str	r3, [r7, #32]
 80024b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024ba:	1a5b      	subs	r3, r3, r1
 80024bc:	eb64 0402 	sbc.w	r4, r4, r2
 80024c0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80024c4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80024c8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80024cc:	ebb8 0803 	subs.w	r8, r8, r3
 80024d0:	eb69 0904 	sbc.w	r9, r9, r4
 80024d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80024ec:	eb18 0801 	adds.w	r8, r8, r1
 80024f0:	eb49 0902 	adc.w	r9, r9, r2
 80024f4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800250c:	4640      	mov	r0, r8
 800250e:	4649      	mov	r1, r9
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	f04f 0400 	mov.w	r4, #0
 8002516:	461a      	mov	r2, r3
 8002518:	4623      	mov	r3, r4
 800251a:	f7fd feb9 	bl	8000290 <__aeabi_uldivmod>
 800251e:	4603      	mov	r3, r0
 8002520:	460c      	mov	r4, r1
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
 8002524:	e043      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	f04f 0400 	mov.w	r4, #0
 8002530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	ea01 0103 	and.w	r1, r1, r3
 800253c:	ea02 0204 	and.w	r2, r2, r4
 8002540:	460b      	mov	r3, r1
 8002542:	4614      	mov	r4, r2
 8002544:	0160      	lsls	r0, r4, #5
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	015b      	lsls	r3, r3, #5
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002558:	1a5b      	subs	r3, r3, r1
 800255a:	eb64 0402 	sbc.w	r4, r4, r2
 800255e:	01a6      	lsls	r6, r4, #6
 8002560:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002564:	019d      	lsls	r5, r3, #6
 8002566:	1aed      	subs	r5, r5, r3
 8002568:	eb66 0604 	sbc.w	r6, r6, r4
 800256c:	00f3      	lsls	r3, r6, #3
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	00eb      	lsls	r3, r5, #3
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002580:	186d      	adds	r5, r5, r1
 8002582:	eb46 0602 	adc.w	r6, r6, r2
 8002586:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800258a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800258e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002592:	4655      	mov	r5, sl
 8002594:	465e      	mov	r6, fp
 8002596:	4628      	mov	r0, r5
 8002598:	4631      	mov	r1, r6
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	f7fd fe74 	bl	8000290 <__aeabi_uldivmod>
 80025a8:	4603      	mov	r3, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	3301      	adds	r3, #1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80025be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025c8:	e002      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	373c      	adds	r7, #60	; 0x3c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000014 	.word	0x20000014

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4601      	mov	r1, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4a03      	ldr	r2, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08018028 	.word	0x08018028

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4601      	mov	r1, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	08018028 	.word	0x08018028

08002650 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	220f      	movs	r2, #15
 800265e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0203 	and.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <HAL_RCC_GetClockConfig+0x60>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 020f 	and.w	r2, r3, #15
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e01d      	b.n	8002702 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f815 	bl	800270a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 f968 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	68d2      	ldr	r2, [r2, #12]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d007      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d122      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d11b      	bne.n	80027c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0202 	mvn.w	r2, #2
 8002792:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f8ee 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80027ae:	e005      	b.n	80027bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f8e0 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8f1 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d122      	bne.n	8002816 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d11b      	bne.n	8002816 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f06f 0204 	mvn.w	r2, #4
 80027e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8c4 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002802:	e005      	b.n	8002810 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8b6 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8c7 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d122      	bne.n	800286a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11b      	bne.n	800286a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0208 	mvn.w	r2, #8
 800283a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2204      	movs	r2, #4
 8002840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f89a 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002856:	e005      	b.n	8002864 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f88c 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f89d 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d122      	bne.n	80028be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d11b      	bne.n	80028be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0210 	mvn.w	r2, #16
 800288e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2208      	movs	r2, #8
 8002894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f870 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80028aa:	e005      	b.n	80028b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f862 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f873 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10e      	bne.n	80028ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f06f 0201 	mvn.w	r2, #1
 80028e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f011 fbd1 	bl	801408c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d10e      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d107      	bne.n	8002916 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f903 	bl	8002b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d10e      	bne.n	8002942 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d107      	bne.n	8002942 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800293a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f838 	bl	80029b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d10e      	bne.n	800296e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	d107      	bne.n	800296e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0220 	mvn.w	r2, #32
 8002966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f8cd 	bl	8002b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a40      	ldr	r2, [pc, #256]	; (8002adc <TIM_Base_SetConfig+0x114>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d00f      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <TIM_Base_SetConfig+0x118>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3c      	ldr	r2, [pc, #240]	; (8002ae4 <TIM_Base_SetConfig+0x11c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <TIM_Base_SetConfig+0x120>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d108      	bne.n	8002a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <TIM_Base_SetConfig+0x114>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d027      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <TIM_Base_SetConfig+0x118>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d023      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <TIM_Base_SetConfig+0x11c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <TIM_Base_SetConfig+0x120>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a29      	ldr	r2, [pc, #164]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d017      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <TIM_Base_SetConfig+0x128>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <TIM_Base_SetConfig+0x12c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00f      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <TIM_Base_SetConfig+0x130>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <TIM_Base_SetConfig+0x134>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <TIM_Base_SetConfig+0x138>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <TIM_Base_SetConfig+0x13c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d108      	bne.n	8002a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <TIM_Base_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0xf8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800
 8002afc:	40001800 	.word	0x40001800
 8002b00:	40001c00 	.word	0x40001c00
 8002b04:	40002000 	.word	0x40002000

08002b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e03f      	b.n	8002bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f011 fade 	bl	8014118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f829 	bl	8002bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	6912      	ldr	r2, [r2, #16]
 8002b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	6952      	ldr	r2, [r2, #20]
 8002b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	68d2      	ldr	r2, [r2, #12]
 8002ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	6912      	ldr	r2, [r2, #16]
 8002bde:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c10:	f023 030c 	bic.w	r3, r3, #12
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	430b      	orrs	r3, r1
 8002c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	6952      	ldr	r2, [r2, #20]
 8002c24:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6992      	ldr	r2, [r2, #24]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c38:	f040 80e4 	bne.w	8002e04 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4aab      	ldr	r2, [pc, #684]	; (8002ef0 <UART_SetConfig+0x324>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <UART_SetConfig+0x84>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4aaa      	ldr	r2, [pc, #680]	; (8002ef4 <UART_SetConfig+0x328>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d16c      	bne.n	8002d2a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	f7ff fce8 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4aa2      	ldr	r2, [pc, #648]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	011d      	lsls	r5, r3, #4
 8002c78:	f7ff fcd6 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c92:	f7ff fcc9 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	4a92      	ldr	r2, [pc, #584]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2264      	movs	r2, #100	; 0x64
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	1af3      	subs	r3, r6, r3
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a8d      	ldr	r2, [pc, #564]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cce:	441d      	add	r5, r3
 8002cd0:	f7ff fcaa 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cea:	f7ff fc9d 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	4a7c      	ldr	r2, [pc, #496]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2264      	movs	r2, #100	; 0x64
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	1af3      	subs	r3, r6, r3
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a77      	ldr	r2, [pc, #476]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	442b      	add	r3, r5
 8002d26:	60a3      	str	r3, [r4, #8]
 8002d28:	e154      	b.n	8002fd4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681c      	ldr	r4, [r3, #0]
 8002d2e:	f7ff fc67 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	011d      	lsls	r5, r3, #4
 8002d52:	f7ff fc55 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009a      	lsls	r2, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d6c:	f7ff fc48 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009a      	lsls	r2, r3, #2
 8002d7a:	441a      	add	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4a5c      	ldr	r2, [pc, #368]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2264      	movs	r2, #100	; 0x64
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	1af3      	subs	r3, r6, r3
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a57      	ldr	r2, [pc, #348]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002da8:	441d      	add	r5, r3
 8002daa:	f7ff fc29 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009a      	lsls	r2, r3, #2
 8002db8:	441a      	add	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dc4:	f7ff fc1c 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009a      	lsls	r2, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4a46      	ldr	r2, [pc, #280]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	2264      	movs	r2, #100	; 0x64
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	1af3      	subs	r3, r6, r3
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	3332      	adds	r3, #50	; 0x32
 8002df2:	4a41      	ldr	r2, [pc, #260]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	442b      	add	r3, r5
 8002e00:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e02:	e0e7      	b.n	8002fd4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <UART_SetConfig+0x324>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <UART_SetConfig+0x24c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <UART_SetConfig+0x328>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d171      	bne.n	8002efc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681c      	ldr	r4, [r3, #0]
 8002e1c:	f7ff fc04 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	011d      	lsls	r5, r3, #4
 8002e40:	f7ff fbf2 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009a      	lsls	r2, r3, #2
 8002e4e:	441a      	add	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e5a:	f7ff fbe5 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1af3      	subs	r3, r6, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	441d      	add	r5, r3
 8002e96:	f7ff fbc7 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009a      	lsls	r2, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8002eb0:	f7ff fbba 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2264      	movs	r2, #100	; 0x64
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	1af3      	subs	r3, r6, r3
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	3332      	adds	r3, #50	; 0x32
 8002ede:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <UART_SetConfig+0x32c>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	442b      	add	r3, r5
 8002eec:	60a3      	str	r3, [r4, #8]
 8002eee:	e071      	b.n	8002fd4 <UART_SetConfig+0x408>
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681c      	ldr	r4, [r3, #0]
 8002f00:	f7ff fb7e 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009a      	lsls	r2, r3, #2
 8002f0e:	441a      	add	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <UART_SetConfig+0x410>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	011d      	lsls	r5, r3, #4
 8002f24:	f7ff fb6c 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f3e:	f7ff fb5f 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	441a      	add	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <UART_SetConfig+0x410>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2264      	movs	r2, #100	; 0x64
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	1af3      	subs	r3, r6, r3
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	3332      	adds	r3, #50	; 0x32
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <UART_SetConfig+0x410>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f78:	441d      	add	r5, r3
 8002f7a:	f7ff fb41 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009a      	lsls	r2, r3, #2
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f94:	f7ff fb34 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009a      	lsls	r2, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <UART_SetConfig+0x410>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	2264      	movs	r2, #100	; 0x64
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	1af3      	subs	r3, r6, r3
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	3332      	adds	r3, #50	; 0x32
 8002fc2:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <UART_SetConfig+0x410>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	442b      	add	r3, r5
 8002fd0:	60a3      	str	r3, [r4, #8]
}
 8002fd2:	e7ff      	b.n	8002fd4 <UART_SetConfig+0x408>
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fdc:	51eb851f 	.word	0x51eb851f

08002fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	f107 001c 	add.w	r0, r7, #28
 8002fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d122      	bne.n	800303e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800300c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa5e 	bl	80034f4 <USB_CoreReset>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e01a      	b.n	8003074 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa52 	bl	80034f4 <USB_CoreReset>
 8003050:	4603      	mov	r3, r0
 8003052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
 8003066:	e005      	b.n	8003074 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10b      	bne.n	8003092 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f043 0206 	orr.w	r2, r3, #6
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800309e:	b004      	add	sp, #16
 80030a0:	4770      	bx	lr

080030a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d106      	bne.n	80030f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e00b      	b.n	8003108 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	e001      	b.n	8003108 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e003      	b.n	8003110 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003108:	2032      	movs	r0, #50	; 0x32
 800310a:	f7fd fa8b 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003118:	b084      	sub	sp, #16
 800311a:	b580      	push	{r7, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	e009      	b.n	800314c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	3340      	adds	r3, #64	; 0x40
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	2200      	movs	r2, #0
 8003144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	3301      	adds	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0e      	cmp	r3, #14
 8003150:	d9f2      	bls.n	8003138 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
 800317c:	e00b      	b.n	8003196 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800319c:	461a      	mov	r2, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10c      	bne.n	80031d4 <USB_DevInit+0xbc>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d104      	bne.n	80031ca <USB_DevInit+0xb2>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031c0:	2100      	movs	r1, #0
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f962 	bl	800348c <USB_SetDevSpeed>
 80031c8:	e008      	b.n	80031dc <USB_DevInit+0xc4>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031ca:	2101      	movs	r1, #1
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f95d 	bl	800348c <USB_SetDevSpeed>
 80031d2:	e003      	b.n	80031dc <USB_DevInit+0xc4>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031d4:	2103      	movs	r1, #3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f958 	bl	800348c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031dc:	2110      	movs	r1, #16
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f90c 	bl	80033fc <USB_FlushTxFifo>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <USB_DevInit+0xd6>
  {
    ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f92a 	bl	8003448 <USB_FlushRxFifo>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <USB_DevInit+0xe6>
  {
    ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	461a      	mov	r2, r3
 8003206:	2300      	movs	r3, #0
 8003208:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	461a      	mov	r2, r3
 8003212:	2300      	movs	r3, #0
 8003214:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321c:	461a      	mov	r2, r3
 800321e:	2300      	movs	r3, #0
 8003220:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e043      	b.n	80032b0 <USB_DevInit+0x198>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323e:	d118      	bne.n	8003272 <USB_DevInit+0x15a>
    {
      if (i == 0U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <USB_DevInit+0x144>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003252:	461a      	mov	r2, r3
 8003254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e013      	b.n	8003284 <USB_DevInit+0x16c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e008      	b.n	8003284 <USB_DevInit+0x16c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	2300      	movs	r3, #0
 8003282:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a2:	461a      	mov	r2, r3
 80032a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3301      	adds	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d8b7      	bhi.n	8003228 <USB_DevInit+0x110>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e043      	b.n	8003346 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d4:	d118      	bne.n	8003308 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	461a      	mov	r2, r3
 80032ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e013      	b.n	800331a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	461a      	mov	r2, r3
 8003300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e008      	b.n	800331a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	2300      	movs	r3, #0
 8003318:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	3301      	adds	r3, #1
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	429a      	cmp	r2, r3
 800334c:	d8b7      	bhi.n	80032be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003362:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	2b01      	cmp	r3, #1
 8003368:	d112      	bne.n	8003390 <USB_DevInit+0x278>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003370:	461a      	mov	r2, r3
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <USB_DevInit+0x2dc>)
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	461a      	mov	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	f043 0303 	orr.w	r3, r3, #3
 800338e:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800339c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <USB_DevInit+0x298>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <USB_DevInit+0x2e0>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f043 0208 	orr.w	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033f0:	b004      	add	sp, #16
 80033f2:	4770      	bx	lr
 80033f4:	00800100 	.word	0x00800100
 80033f8:	803c3800 	.word	0x803c3800

080033fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3301      	adds	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <USB_FlushTxFifo+0x48>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d0f0      	beq.n	8003416 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	00030d40 	.word	0x00030d40

08003448 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2210      	movs	r2, #16
 8003458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a09      	ldr	r2, [pc, #36]	; (8003488 <USB_FlushRxFifo+0x40>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e006      	b.n	800347a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d0f0      	beq.n	800345a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	00030d40 	.word	0x00030d40

0800348c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a2:	4619      	mov	r1, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80034e2:	2003      	movs	r0, #3
 80034e4:	f7fd f89e 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <USB_CoreReset+0x64>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e01b      	b.n	800354a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	daf2      	bge.n	8003500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3301      	adds	r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <USB_CoreReset+0x64>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e006      	b.n	800354a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d0f0      	beq.n	800352a <USB_CoreReset+0x36>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	00030d40 	.word	0x00030d40

0800355c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	2b84      	cmp	r3, #132	; 0x84
 8003570:	d005      	beq.n	800357e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4413      	add	r3, r2
 800357a:	3303      	adds	r3, #3
 800357c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003592:	f3ef 8305 	mrs	r3, IPSR
 8003596:	607b      	str	r3, [r7, #4]
  return(result);
 8003598:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035b4:	f001 ff78 	bl	80054a8 <vTaskStartScheduler>
  
  return osOK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	bd80      	pop	{r7, pc}

080035be <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80035c2:	f7ff ffe3 	bl	800358c <inHandlerMode>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80035cc:	f002 f85e 	bl	800568c <xTaskGetTickCountFromISR>
 80035d0:	4603      	mov	r3, r0
 80035d2:	e002      	b.n	80035da <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80035d4:	f002 f84a 	bl	800566c <xTaskGetTickCount>
 80035d8:	4603      	mov	r3, r0
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}

080035de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af02      	add	r7, sp, #8
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685c      	ldr	r4, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f4:	b29e      	uxth	r6, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ffad 	bl	800355c <makeFreeRtosPriority>
 8003602:	4602      	mov	r2, r0
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	9200      	str	r2, [sp, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4632      	mov	r2, r6
 8003610:	4629      	mov	r1, r5
 8003612:	4620      	mov	r0, r4
 8003614:	f001 fdf8 	bl	8005208 <xTaskCreate>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003622:	68fb      	ldr	r3, [r7, #12]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800362c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <osDelay+0x16>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	e000      	b.n	8003644 <osDelay+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fefb 	bl	8005440 <vTaskDelay>
  
  return osOK;
 800364a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800365c:	2001      	movs	r0, #1
 800365e:	f000 ffc9 	bl	80045f4 <xQueueCreateMutex>
 8003662:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <osMutexWait+0x18>
    return osErrorParameter;
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	e03a      	b.n	80036fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368e:	d103      	bne.n	8003698 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e009      	b.n	80036ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <osMutexWait+0x40>
      ticks = 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80036ac:	f7ff ff6e 	bl	800358c <inHandlerMode>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d017      	beq.n	80036e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	461a      	mov	r2, r3
 80036bc:	2100      	movs	r1, #0
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f001 fb7e 	bl	8004dc0 <xQueueReceiveFromISR>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d001      	beq.n	80036ce <osMutexWait+0x62>
      return osErrorOS;
 80036ca:	23ff      	movs	r3, #255	; 0xff
 80036cc:	e015      	b.n	80036fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d011      	beq.n	80036f8 <osMutexWait+0x8c>
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <osMutexWait+0x98>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	e008      	b.n	80036f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f001 fa6d 	bl	8004bc8 <xQueueSemaphoreTake>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <osMutexWait+0x8c>
    return osErrorOS;
 80036f4:	23ff      	movs	r3, #255	; 0xff
 80036f6:	e000      	b.n	80036fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000ed04 	.word	0xe000ed04

08003708 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003718:	f7ff ff38 	bl	800358c <inHandlerMode>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f001 f8f1 	bl	8004910 <xQueueGiveFromISR>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <osMutexRelease+0x30>
      return osErrorOS;
 8003734:	23ff      	movs	r3, #255	; 0xff
 8003736:	e017      	b.n	8003768 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d013      	beq.n	8003766 <osMutexRelease+0x5e>
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <osMutexRelease+0x68>)
 8003740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	e00a      	b.n	8003766 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003750:	2300      	movs	r3, #0
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 ff64 	bl	8004624 <xQueueGenericSend>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003762:	23ff      	movs	r3, #255	; 0xff
 8003764:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d110      	bne.n	80037a6 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8003784:	2203      	movs	r2, #3
 8003786:	2100      	movs	r1, #0
 8003788:	2001      	movs	r0, #1
 800378a:	f000 fec1 	bl	8004510 <xQueueGenericCreate>
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <osSemaphoreCreate+0x2e>
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 ff41 	bl	8004624 <xQueueGenericSend>
    return sema;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	e000      	b.n	80037a8 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80037a6:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	e03a      	b.n	800383e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d2:	d103      	bne.n	80037dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e009      	b.n	80037f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80037ec:	2301      	movs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80037f0:	f7ff fecc 	bl	800358c <inHandlerMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d017      	beq.n	800382a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	461a      	mov	r2, r3
 8003800:	2100      	movs	r1, #0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f001 fadc 	bl	8004dc0 <xQueueReceiveFromISR>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <osSemaphoreWait+0x62>
      return osErrorOS;
 800380e:	23ff      	movs	r3, #255	; 0xff
 8003810:	e015      	b.n	800383e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d011      	beq.n	800383c <osSemaphoreWait+0x8c>
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <osSemaphoreWait+0x98>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	e008      	b.n	800383c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f9cb 	bl	8004bc8 <xQueueSemaphoreTake>
 8003832:	4603      	mov	r3, r0
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003838:	23ff      	movs	r3, #255	; 0xff
 800383a:	e000      	b.n	800383e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800385c:	f7ff fe96 	bl	800358c <inHandlerMode>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d016      	beq.n	8003894 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 f84f 	bl	8004910 <xQueueGiveFromISR>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003878:	23ff      	movs	r3, #255	; 0xff
 800387a:	e017      	b.n	80038ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d013      	beq.n	80038aa <osSemaphoreRelease+0x5e>
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <osSemaphoreRelease+0x68>)
 8003884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	e00a      	b.n	80038aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003894:	2300      	movs	r3, #0
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fec2 	bl	8004624 <xQueueGenericSend>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80038a6:	23ff      	movs	r3, #255	; 0xff
 80038a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80038c0:	f7ff fe64 	bl	800358c <inHandlerMode>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <osSemaphoreDelete+0x16>
    return osErrorISR;
 80038ca:	2382      	movs	r3, #130	; 0x82
 80038cc:	e003      	b.n	80038d6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 fb2b 	bl	8004f2a <vQueueDelete>

  return osOK; 
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	4619      	mov	r1, r3
 80038f4:	f000 fe0c 	bl	8004510 <xQueueGenericCreate>
 80038f8:	4603      	mov	r3, r0
#endif
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <osMessagePut+0x1e>
    ticks = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003922:	f7ff fe33 	bl	800358c <inHandlerMode>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d018      	beq.n	800395e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800392c:	f107 0210 	add.w	r2, r7, #16
 8003930:	f107 0108 	add.w	r1, r7, #8
 8003934:	2300      	movs	r3, #0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 ff56 	bl	80047e8 <xQueueGenericSendFromISR>
 800393c:	4603      	mov	r3, r0
 800393e:	2b01      	cmp	r3, #1
 8003940:	d001      	beq.n	8003946 <osMessagePut+0x42>
      return osErrorOS;
 8003942:	23ff      	movs	r3, #255	; 0xff
 8003944:	e018      	b.n	8003978 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d014      	beq.n	8003976 <osMessagePut+0x72>
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <osMessagePut+0x7c>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	e00b      	b.n	8003976 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800395e:	f107 0108 	add.w	r1, r7, #8
 8003962:	2300      	movs	r3, #0
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fe5c 	bl	8004624 <xQueueGenericSend>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <osMessagePut+0x72>
      return osErrorOS;
 8003972:	23ff      	movs	r3, #255	; 0xff
 8003974:	e000      	b.n	8003978 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b08b      	sub	sp, #44	; 0x2c
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	617b      	str	r3, [r7, #20]
    return event;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	461c      	mov	r4, r3
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039b2:	e054      	b.n	8003a5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c2:	d103      	bne.n	80039cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e009      	b.n	80039e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <osMessageGet+0x5c>
      ticks = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80039e0:	f7ff fdd4 	bl	800358c <inHandlerMode>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01c      	beq.n	8003a24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80039ea:	f107 0220 	add.w	r2, r7, #32
 80039ee:	f107 0314 	add.w	r3, r7, #20
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	68b8      	ldr	r0, [r7, #8]
 80039f8:	f001 f9e2 	bl	8004dc0 <xQueueReceiveFromISR>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003a02:	2310      	movs	r3, #16
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e001      	b.n	8003a0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01d      	beq.n	8003a4e <osMessageGet+0xca>
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <osMessageGet+0xe4>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	e014      	b.n	8003a4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	3304      	adds	r3, #4
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68b8      	ldr	r0, [r7, #8]
 8003a30:	f000 fff8 	bl	8004a24 <xQueueReceive>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e006      	b.n	8003a4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <osMessageGet+0xc6>
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <osMessageGet+0xc8>
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	461c      	mov	r4, r3
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	372c      	adds	r7, #44	; 0x2c
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd90      	pop	{r4, r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003a74:	f7ff fd8a 	bl	800358c <inHandlerMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 fa38 	bl	8004ef4 <uxQueueMessagesWaitingFromISR>
 8003a84:	4603      	mov	r3, r0
 8003a86:	e003      	b.n	8003a90 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f001 fa16 	bl	8004eba <uxQueueMessagesWaiting>
 8003a8e:	4603      	mov	r3, r0
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003aa0:	f7ff fd74 	bl	800358c <inHandlerMode>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <osMessageDelete+0x16>
    return osErrorISR;
 8003aaa:	2382      	movs	r3, #130	; 0x82
 8003aac:	e003      	b.n	8003ab6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 fa3b 	bl	8004f2a <vQueueDelete>

  return osOK; 
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f103 0208 	add.w	r2, r3, #8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f103 0208 	add.w	r2, r3, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f103 0208 	add.w	r2, r3, #8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b76:	d103      	bne.n	8003b80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e00c      	b.n	8003b9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3308      	adds	r3, #8
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	e002      	b.n	8003b8e <vListInsert+0x2e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d9f6      	bls.n	8003b88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6852      	ldr	r2, [r2, #4]
 8003bf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d103      	bne.n	8003c06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c58:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <pxPortInitialiseStack+0x64>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b14      	subs	r3, #20
 8003c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f06f 0202 	mvn.w	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b20      	subs	r3, #32
 8003c7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	08003c91 	.word	0x08003c91

08003c90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <prvTaskExitError+0x50>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d009      	beq.n	8003cb8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e7fe      	b.n	8003cb6 <prvTaskExitError+0x26>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cca:	bf00      	nop
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0fc      	beq.n	8003ccc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000004 	.word	0x20000004
	...

08003cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <pxCurrentTCBConst2>)
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	6808      	ldr	r0, [r1, #0]
 8003cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	f380 8809 	msr	PSP, r0
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8811 	msr	BASEPRI, r0
 8003d0a:	4770      	bx	lr
 8003d0c:	f3af 8000 	nop.w

08003d10 <pxCurrentTCBConst2>:
 8003d10:	20003cb8 	.word	0x20003cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop

08003d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d18:	4808      	ldr	r0, [pc, #32]	; (8003d3c <prvPortStartFirstTask+0x24>)
 8003d1a:	6800      	ldr	r0, [r0, #0]
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	f380 8808 	msr	MSP, r0
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f380 8814 	msr	CONTROL, r0
 8003d2a:	b662      	cpsie	i
 8003d2c:	b661      	cpsie	f
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	df00      	svc	0
 8003d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d3a:	bf00      	nop
 8003d3c:	e000ed08 	.word	0xe000ed08

08003d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <xPortStartScheduler+0x118>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a44      	ldr	r2, [pc, #272]	; (8003e5c <xPortStartScheduler+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d109      	bne.n	8003d64 <xPortStartScheduler+0x24>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e7fe      	b.n	8003d62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d64:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <xPortStartScheduler+0x118>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <xPortStartScheduler+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d109      	bne.n	8003d82 <xPortStartScheduler+0x42>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e7fe      	b.n	8003d80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <xPortStartScheduler+0x124>)
 8003d84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <xPortStartScheduler+0x128>)
 8003da8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003daa:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003dac:	2207      	movs	r2, #7
 8003dae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003db0:	e009      	b.n	8003dc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003db2:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003dba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d0ef      	beq.n	8003db2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dd2:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d009      	beq.n	8003df2 <xPortStartScheduler+0xb2>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	e7fe      	b.n	8003df0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003df2:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003dfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003e06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e10:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <xPortStartScheduler+0x130>)
 8003e12:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <xPortStartScheduler+0x130>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <xPortStartScheduler+0x130>)
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <xPortStartScheduler+0x130>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e28:	f000 f8d6 	bl	8003fd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <xPortStartScheduler+0x134>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e32:	f000 f8f5 	bl	8004020 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e36:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e42:	f7ff ff69 	bl	8003d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e46:	f001 fccd 	bl	80057e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003e4a:	f7ff ff21 	bl	8003c90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed00 	.word	0xe000ed00
 8003e5c:	410fc271 	.word	0x410fc271
 8003e60:	410fc270 	.word	0x410fc270
 8003e64:	e000e400 	.word	0xe000e400
 8003e68:	20000098 	.word	0x20000098
 8003e6c:	2000009c 	.word	0x2000009c
 8003e70:	e000ed20 	.word	0xe000ed20
 8003e74:	20000004 	.word	0x20000004
 8003e78:	e000ef34 	.word	0xe000ef34

08003e7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <vPortEnterCritical+0x54>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <vPortEnterCritical+0x54>)
 8003e9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <vPortEnterCritical+0x54>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10e      	bne.n	8003ec4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <vPortEnterCritical+0x58>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <vPortEnterCritical+0x48>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	e7fe      	b.n	8003ec2 <vPortEnterCritical+0x46>
	}
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000004 	.word	0x20000004
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <vPortExitCritical+0x4c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <vPortExitCritical+0x22>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e7fe      	b.n	8003ef8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <vPortExitCritical+0x4c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <vPortExitCritical+0x4c>)
 8003f02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <vPortExitCritical+0x4c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <vPortExitCritical+0x3e>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000004 	.word	0x20000004
	...

08003f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f30:	f3ef 8009 	mrs	r0, PSP
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <pxCurrentTCBConst>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	f01e 0f10 	tst.w	lr, #16
 8003f40:	bf08      	it	eq
 8003f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4a:	6010      	str	r0, [r2, #0]
 8003f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f54:	f380 8811 	msr	BASEPRI, r0
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f001 fc40 	bl	80057e4 <vTaskSwitchContext>
 8003f64:	f04f 0000 	mov.w	r0, #0
 8003f68:	f380 8811 	msr	BASEPRI, r0
 8003f6c:	bc09      	pop	{r0, r3}
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	6808      	ldr	r0, [r1, #0]
 8003f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f76:	f01e 0f10 	tst.w	lr, #16
 8003f7a:	bf08      	it	eq
 8003f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f80:	f380 8809 	msr	PSP, r0
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst>:
 8003f90:	20003cb8 	.word	0x20003cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop

08003f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fb0:	f001 fb7e 	bl	80056b0 <xTaskIncrementTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <SysTick_Handler+0x3c>)
 8003fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <vPortSetupTimerInterrupt+0x34>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <vPortSetupTimerInterrupt+0x38>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <vPortSetupTimerInterrupt+0x3c>)
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <vPortSetupTimerInterrupt+0x40>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	490b      	ldr	r1, [pc, #44]	; (800401c <vPortSetupTimerInterrupt+0x44>)
 8003ff0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ffa:	4b04      	ldr	r3, [pc, #16]	; (800400c <vPortSetupTimerInterrupt+0x34>)
 8003ffc:	2207      	movs	r2, #7
 8003ffe:	601a      	str	r2, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	e000e010 	.word	0xe000e010
 8004010:	e000e018 	.word	0xe000e018
 8004014:	e000e014 	.word	0xe000e014
 8004018:	20000014 	.word	0x20000014
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004020:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004030 <vPortEnableVFP+0x10>
 8004024:	6801      	ldr	r1, [r0, #0]
 8004026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800402a:	6001      	str	r1, [r0, #0]
 800402c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800402e:	bf00      	nop
 8004030:	e000ed88 	.word	0xe000ed88

08004034 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800403a:	f3ef 8305 	mrs	r3, IPSR
 800403e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d913      	bls.n	800406e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004046:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <vPortValidateInterruptPriority+0x6c>)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <vPortValidateInterruptPriority+0x70>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	7afa      	ldrb	r2, [r7, #11]
 8004056:	429a      	cmp	r2, r3
 8004058:	d209      	bcs.n	800406e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	e7fe      	b.n	800406c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <vPortValidateInterruptPriority+0x74>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <vPortValidateInterruptPriority+0x78>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d909      	bls.n	8004092 <vPortValidateInterruptPriority+0x5e>
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	e7fe      	b.n	8004090 <vPortValidateInterruptPriority+0x5c>
	}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e3f0 	.word	0xe000e3f0
 80040a4:	20000098 	.word	0x20000098
 80040a8:	e000ed0c 	.word	0xe000ed0c
 80040ac:	2000009c 	.word	0x2000009c

080040b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040bc:	f001 fa3a 	bl	8005534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040c0:	4b57      	ldr	r3, [pc, #348]	; (8004220 <pvPortMalloc+0x170>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040c8:	f000 f90c 	bl	80042e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <pvPortMalloc+0x174>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 808c 	bne.w	80041f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01c      	beq.n	800411a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80040e0:	2208      	movs	r2, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f023 0307 	bic.w	r3, r3, #7
 80040f8:	3308      	adds	r3, #8
 80040fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <pvPortMalloc+0x6a>
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e7fe      	b.n	8004118 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d068      	beq.n	80041f2 <pvPortMalloc+0x142>
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <pvPortMalloc+0x178>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d863      	bhi.n	80041f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <pvPortMalloc+0x17c>)
 800412c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800412e:	4b3f      	ldr	r3, [pc, #252]	; (800422c <pvPortMalloc+0x17c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004134:	e004      	b.n	8004140 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d203      	bcs.n	8004152 <pvPortMalloc+0xa2>
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f1      	bne.n	8004136 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <pvPortMalloc+0x170>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	429a      	cmp	r2, r3
 800415a:	d04a      	beq.n	80041f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	4413      	add	r3, r2
 8004164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad2      	subs	r2, r2, r3
 8004176:	2308      	movs	r3, #8
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	429a      	cmp	r2, r3
 800417c:	d91e      	bls.n	80041bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <pvPortMalloc+0xf4>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e7fe      	b.n	80041a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041b6:	69b8      	ldr	r0, [r7, #24]
 80041b8:	f000 f8f6 	bl	80043a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041bc:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <pvPortMalloc+0x178>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <pvPortMalloc+0x178>)
 80041c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <pvPortMalloc+0x178>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b18      	ldr	r3, [pc, #96]	; (8004230 <pvPortMalloc+0x180>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d203      	bcs.n	80041de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <pvPortMalloc+0x178>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <pvPortMalloc+0x180>)
 80041dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <pvPortMalloc+0x174>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041f2:	f001 f9ad 	bl	8005550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <pvPortMalloc+0x164>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e7fe      	b.n	8004212 <pvPortMalloc+0x162>
	return pvReturn;
 8004214:	69fb      	ldr	r3, [r7, #28]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20003ca8 	.word	0x20003ca8
 8004224:	20003cb4 	.word	0x20003cb4
 8004228:	20003cac 	.word	0x20003cac
 800422c:	20003ca0 	.word	0x20003ca0
 8004230:	20003cb0 	.word	0x20003cb0

08004234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d046      	beq.n	80042d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004246:	2308      	movs	r3, #8
 8004248:	425b      	negs	r3, r3
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4413      	add	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <vPortFree+0xa8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <vPortFree+0x42>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e7fe      	b.n	8004274 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <vPortFree+0x5e>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	e7fe      	b.n	8004290 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <vPortFree+0xa8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d019      	beq.n	80042d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d115      	bne.n	80042d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <vPortFree+0xa8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042b8:	f001 f93c 	bl	8005534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <vPortFree+0xac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	4a06      	ldr	r2, [pc, #24]	; (80042e0 <vPortFree+0xac>)
 80042c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042ca:	6938      	ldr	r0, [r7, #16]
 80042cc:	f000 f86c 	bl	80043a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80042d0:	f001 f93e 	bl	8005550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20003cb4 	.word	0x20003cb4
 80042e0:	20003cac 	.word	0x20003cac

080042e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80042ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042f0:	4b27      	ldr	r3, [pc, #156]	; (8004390 <prvHeapInit+0xac>)
 80042f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3307      	adds	r3, #7
 8004302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <prvHeapInit+0xac>)
 8004314:	4413      	add	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800431c:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <prvHeapInit+0xb0>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <prvHeapInit+0xb0>)
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4413      	add	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004330:	2208      	movs	r2, #8
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a15      	ldr	r2, [pc, #84]	; (8004398 <prvHeapInit+0xb4>)
 8004344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <prvHeapInit+0xb4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <prvHeapInit+0xb4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <prvHeapInit+0xb4>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <prvHeapInit+0xb8>)
 8004372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <prvHeapInit+0xbc>)
 800437a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <prvHeapInit+0xc0>)
 800437e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004382:	601a      	str	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	200000a0 	.word	0x200000a0
 8004394:	20003ca0 	.word	0x20003ca0
 8004398:	20003ca8 	.word	0x20003ca8
 800439c:	20003cb0 	.word	0x20003cb0
 80043a0:	20003cac 	.word	0x20003cac
 80043a4:	20003cb4 	.word	0x20003cb4

080043a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <prvInsertBlockIntoFreeList+0xac>)
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e002      	b.n	80043bc <prvInsertBlockIntoFreeList+0x14>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d3f7      	bcc.n	80043b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d108      	bne.n	80043ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	441a      	add	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	441a      	add	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d118      	bne.n	8004430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <prvInsertBlockIntoFreeList+0xb0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d00d      	beq.n	8004426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e008      	b.n	8004438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <prvInsertBlockIntoFreeList+0xb0>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e003      	b.n	8004438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d002      	beq.n	8004446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20003ca0 	.word	0x20003ca0
 8004458:	20003ca8 	.word	0x20003ca8

0800445c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <xQueueGenericReset+0x28>
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	e7fe      	b.n	8004482 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004484:	f7ff fcfa 	bl	8003e7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	3b01      	subs	r3, #1
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	441a      	add	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	22ff      	movs	r2, #255	; 0xff
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00f      	beq.n	8004502 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3310      	adds	r3, #16
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f9fa 	bl	80058e0 <xTaskRemoveFromEventList>
 80044ec:	e009      	b.n	8004502 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3310      	adds	r3, #16
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff fae3 	bl	8003abe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3324      	adds	r3, #36	; 0x24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fade 	bl	8003abe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004502:	f7ff fce9 	bl	8003ed8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004506:	2301      	movs	r3, #1
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <xQueueGenericCreate+0x28>
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e7fe      	b.n	8004536 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e004      	b.n	800454e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3348      	adds	r3, #72	; 0x48
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fdac 	bl	80040b0 <pvPortMalloc>
 8004558:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3348      	adds	r3, #72	; 0x48
 8004564:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004566:	79fa      	ldrb	r2, [r7, #7]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f805 	bl	8004582 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004578:	69bb      	ldr	r3, [r7, #24]
	}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e002      	b.n	80045a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045b0:	2101      	movs	r1, #1
 80045b2:	69b8      	ldr	r0, [r7, #24]
 80045b4:	f7ff ff52 	bl	800445c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045e0:	2300      	movs	r3, #0
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f81c 	bl	8004624 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045fe:	2301      	movs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	461a      	mov	r2, r3
 800460a:	6939      	ldr	r1, [r7, #16]
 800460c:	6978      	ldr	r0, [r7, #20]
 800460e:	f7ff ff7f 	bl	8004510 <xQueueGenericCreate>
 8004612:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff ffd3 	bl	80045c0 <prvInitialiseMutex>

		return pxNewQueue;
 800461a:	68fb      	ldr	r3, [r7, #12]
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	; 0x38
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <xQueueGenericSend+0x30>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	62bb      	str	r3, [r7, #40]	; 0x28
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <xQueueGenericSend+0x3e>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <xQueueGenericSend+0x42>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSend+0x44>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <xQueueGenericSend+0x5c>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	e7fe      	b.n	800467e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d103      	bne.n	800468e <xQueueGenericSend+0x6a>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <xQueueGenericSend+0x6e>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <xQueueGenericSend+0x70>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <xQueueGenericSend+0x88>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	e7fe      	b.n	80046aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ac:	f001 fab0 	bl	8005c10 <xTaskGetSchedulerState>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <xQueueGenericSend+0x98>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <xQueueGenericSend+0x9c>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <xQueueGenericSend+0x9e>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <xQueueGenericSend+0xb6>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e7fe      	b.n	80046d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046da:	f7ff fbcf 	bl	8003e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <xQueueGenericSend+0xcc>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d112      	bne.n	8004716 <xQueueGenericSend+0xf2>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	f000 fc4d 	bl	8004f94 <prvCopyDataToQueue>
 80046fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <xQueueGenericSend+0xea>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f8e9 	bl	80058e0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800470e:	f7ff fbe3 	bl	8003ed8 <vPortExitCritical>
				return pdPASS;
 8004712:	2301      	movs	r3, #1
 8004714:	e062      	b.n	80047dc <xQueueGenericSend+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <xQueueGenericSend+0x100>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471c:	f7ff fbdc 	bl	8003ed8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004720:	2300      	movs	r3, #0
 8004722:	e05b      	b.n	80047dc <xQueueGenericSend+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <xQueueGenericSend+0x114>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f938 	bl	80059a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004738:	f7ff fbce 	bl	8003ed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473c:	f000 fefa 	bl	8005534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004740:	f7ff fb9c 	bl	8003e7c <vPortEnterCritical>
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004750:	d103      	bne.n	800475a <xQueueGenericSend+0x136>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004760:	b25b      	sxtb	r3, r3
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004766:	d103      	bne.n	8004770 <xQueueGenericSend+0x14c>
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004770:	f7ff fbb2 	bl	8003ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004774:	1d3a      	adds	r2, r7, #4
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f001 f927 	bl	80059d0 <xTaskCheckForTimeOut>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d123      	bne.n	80047d0 <xQueueGenericSend+0x1ac>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478a:	f000 fcfb 	bl	8005184 <prvIsQueueFull>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <xQueueGenericSend+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	3310      	adds	r3, #16
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f87b 	bl	8005898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a4:	f000 fc86 	bl	80050b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047a8:	f000 fed2 	bl	8005550 <xTaskResumeAll>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d193      	bne.n	80046da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <xQueueGenericSend+0x1c0>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e78a      	b.n	80046da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c6:	f000 fc75 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ca:	f000 fec1 	bl	8005550 <xTaskResumeAll>
 80047ce:	e784      	b.n	80046da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d2:	f000 fc6f 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d6:	f000 febb 	bl	8005550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047da:	2300      	movs	r3, #0
		}
	}
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	; 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08e      	sub	sp, #56	; 0x38
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <xQueueGenericSendFromISR+0x2c>
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	e7fe      	b.n	8004812 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <xQueueGenericSendFromISR+0x3a>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <xQueueGenericSendFromISR+0x3e>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <xQueueGenericSendFromISR+0x40>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <xQueueGenericSendFromISR+0x58>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	623b      	str	r3, [r7, #32]
 800483e:	e7fe      	b.n	800483e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d103      	bne.n	800484e <xQueueGenericSendFromISR+0x66>
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <xQueueGenericSendFromISR+0x6a>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <xQueueGenericSendFromISR+0x6c>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <xQueueGenericSendFromISR+0x84>
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	e7fe      	b.n	800486a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800486c:	f7ff fbe2 	bl	8004034 <vPortValidateInterruptPriority>
	__asm volatile
 8004870:	f3ef 8211 	mrs	r2, BASEPRI
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	61ba      	str	r2, [r7, #24]
 8004886:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004888:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <xQueueGenericSendFromISR+0xb6>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d12c      	bne.n	80048f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ae:	f000 fb71 	bl	8004f94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ba:	d112      	bne.n	80048e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d016      	beq.n	80048f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 f809 	bl	80058e0 <xTaskRemoveFromEventList>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00e      	beq.n	80048f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e007      	b.n	80048f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048e6:	3301      	adds	r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	b25a      	sxtb	r2, r3
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048f2:	2301      	movs	r3, #1
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048f6:	e001      	b.n	80048fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004908:	4618      	mov	r0, r3
 800490a:	3738      	adds	r7, #56	; 0x38
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	; 0x38
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e7fe      	b.n	8004936 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <xQueueGiveFromISR+0x44>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e7fe      	b.n	8004952 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueGiveFromISR+0x54>
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueGiveFromISR+0x58>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueGiveFromISR+0x5a>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <xQueueGiveFromISR+0x72>
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e7fe      	b.n	8004980 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004982:	f7ff fb57 	bl	8004034 <vPortValidateInterruptPriority>
	__asm volatile
 8004986:	f3ef 8211 	mrs	r2, BASEPRI
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	617a      	str	r2, [r7, #20]
 800499c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800499e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d92b      	bls.n	8004a0a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049cc:	d112      	bne.n	80049f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 ff80 	bl	80058e0 <xTaskRemoveFromEventList>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e007      	b.n	8004a04 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f8:	3301      	adds	r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	b25a      	sxtb	r2, r3
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a04:	2301      	movs	r3, #1
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
 8004a08:	e001      	b.n	8004a0e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3738      	adds	r7, #56	; 0x38
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	; 0x30
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <xQueueReceive+0x2e>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	e7fe      	b.n	8004a50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <xQueueReceive+0x3c>
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <xQueueReceive+0x40>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <xQueueReceive+0x42>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <xQueueReceive+0x5a>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e7fe      	b.n	8004a7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a7e:	f001 f8c7 	bl	8005c10 <xTaskGetSchedulerState>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <xQueueReceive+0x6a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <xQueueReceive+0x6e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <xQueueReceive+0x70>
 8004a92:	2300      	movs	r3, #0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <xQueueReceive+0x88>
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e7fe      	b.n	8004aaa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aac:	f7ff f9e6 	bl	8003e7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d014      	beq.n	8004ae6 <xQueueReceive+0xc2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac0:	f000 fad2 	bl	8005068 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <xQueueReceive+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 ff01 	bl	80058e0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ade:	f7ff f9fb 	bl	8003ed8 <vPortExitCritical>
				return pdPASS;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e069      	b.n	8004bba <xQueueReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <xQueueReceive+0xd0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aec:	f7ff f9f4 	bl	8003ed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e062      	b.n	8004bba <xQueueReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <xQueueReceive+0xe4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004afa:	f107 0310 	add.w	r3, r7, #16
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ff50 	bl	80059a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b08:	f7ff f9e6 	bl	8003ed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0c:	f000 fd12 	bl	8005534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b10:	f7ff f9b4 	bl	8003e7c <vPortEnterCritical>
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b20:	d103      	bne.n	8004b2a <xQueueReceive+0x106>
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b36:	d103      	bne.n	8004b40 <xQueueReceive+0x11c>
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b40:	f7ff f9ca 	bl	8003ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b44:	1d3a      	adds	r2, r7, #4
 8004b46:	f107 0310 	add.w	r3, r7, #16
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 ff3f 	bl	80059d0 <xTaskCheckForTimeOut>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d123      	bne.n	8004ba0 <xQueueReceive+0x17c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5a:	f000 fafd 	bl	8005158 <prvIsQueueEmpty>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <xQueueReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	3324      	adds	r3, #36	; 0x24
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fe93 	bl	8005898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b74:	f000 fa9e 	bl	80050b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b78:	f000 fcea 	bl	8005550 <xTaskResumeAll>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d194      	bne.n	8004aac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <xQueueReceive+0x1a0>)
 8004b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	e78b      	b.n	8004aac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b96:	f000 fa8d 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b9a:	f000 fcd9 	bl	8005550 <xTaskResumeAll>
 8004b9e:	e785      	b.n	8004aac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba2:	f000 fa87 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba6:	f000 fcd3 	bl	8005550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bac:	f000 fad4 	bl	8005158 <prvIsQueueEmpty>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f43f af7a 	beq.w	8004aac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3730      	adds	r7, #48	; 0x30
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	; 0x38
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <xQueueSemaphoreTake+0x30>
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <xQueueSemaphoreTake+0x4c>
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e7fe      	b.n	8004c12 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c14:	f000 fffc 	bl	8005c10 <xTaskGetSchedulerState>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <xQueueSemaphoreTake+0x5c>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <xQueueSemaphoreTake+0x60>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <xQueueSemaphoreTake+0x62>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <xQueueSemaphoreTake+0x7a>
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	e7fe      	b.n	8004c40 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c42:	f7ff f91b 	bl	8003e7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <xQueueSemaphoreTake+0xbe>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004c62:	f001 f99b 	bl	8005f9c <pvTaskIncrementMutexHeldCount>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <xQueueSemaphoreTake+0xb6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	3310      	adds	r3, #16
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fe31 	bl	80058e0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c7e:	f7ff f92b 	bl	8003ed8 <vPortExitCritical>
				return pdPASS;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e096      	b.n	8004db4 <xQueueSemaphoreTake+0x1ec>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <xQueueSemaphoreTake+0xe6>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <xQueueSemaphoreTake+0xde>
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueSemaphoreTake+0xdc>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ca6:	f7ff f917 	bl	8003ed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e082      	b.n	8004db4 <xQueueSemaphoreTake+0x1ec>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d106      	bne.n	8004cc2 <xQueueSemaphoreTake+0xfa>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fe73 	bl	80059a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cc2:	f7ff f909 	bl	8003ed8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cc6:	f000 fc35 	bl	8005534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cca:	f7ff f8d7 	bl	8003e7c <vPortEnterCritical>
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cda:	d103      	bne.n	8004ce4 <xQueueSemaphoreTake+0x11c>
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cea:	b25b      	sxtb	r3, r3
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf0:	d103      	bne.n	8004cfa <xQueueSemaphoreTake+0x132>
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cfa:	f7ff f8ed 	bl	8003ed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cfe:	463a      	mov	r2, r7
 8004d00:	f107 030c 	add.w	r3, r7, #12
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fe62 	bl	80059d0 <xTaskCheckForTimeOut>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d132      	bne.n	8004d78 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d14:	f000 fa20 	bl	8005158 <prvIsQueueEmpty>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d026      	beq.n	8004d6c <xQueueSemaphoreTake+0x1a4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <xQueueSemaphoreTake+0x172>
					{
						taskENTER_CRITICAL();
 8004d26:	f7ff f8a9 	bl	8003e7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff8c 	bl	8005c4c <xTaskPriorityInherit>
 8004d34:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004d36:	f7ff f8cf 	bl	8003ed8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	3324      	adds	r3, #36	; 0x24
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fda8 	bl	8005898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d4a:	f000 f9b3 	bl	80050b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d4e:	f000 fbff 	bl	8005550 <xTaskResumeAll>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f af74 	bne.w	8004c42 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004d5a:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <xQueueSemaphoreTake+0x1f4>)
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	e76a      	b.n	8004c42 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d6e:	f000 f9a1 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d72:	f000 fbed 	bl	8005550 <xTaskResumeAll>
 8004d76:	e764      	b.n	8004c42 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d7a:	f000 f99b 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d7e:	f000 fbe7 	bl	8005550 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d84:	f000 f9e8 	bl	8005158 <prvIsQueueEmpty>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f43f af59 	beq.w	8004c42 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <xQueueSemaphoreTake+0x1ea>
					{
						taskENTER_CRITICAL();
 8004d96:	f7ff f871 	bl	8003e7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d9c:	f000 f8e2 	bl	8004f64 <prvGetDisinheritPriorityAfterTimeout>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 f859 	bl	8005e60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004dae:	f7ff f893 	bl	8003ed8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004db2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3738      	adds	r7, #56	; 0x38
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	; 0x38
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <xQueueReceiveFromISR+0x2a>
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	e7fe      	b.n	8004de8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <xQueueReceiveFromISR+0x38>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <xQueueReceiveFromISR+0x3c>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <xQueueReceiveFromISR+0x3e>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <xQueueReceiveFromISR+0x56>
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	e7fe      	b.n	8004e14 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e16:	f7ff f90d 	bl	8004034 <vPortValidateInterruptPriority>
	__asm volatile
 8004e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	61ba      	str	r2, [r7, #24]
 8004e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02f      	beq.n	8004ea2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e50:	f000 f90a 	bl	8005068 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e64:	d112      	bne.n	8004e8c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	3310      	adds	r3, #16
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd34 	bl	80058e0 <xTaskRemoveFromEventList>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00e      	beq.n	8004e9c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e007      	b.n	8004e9c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e90:	3301      	adds	r3, #1
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	b25a      	sxtb	r2, r3
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	e001      	b.n	8004ea6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3738      	adds	r7, #56	; 0x38
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	e7fe      	b.n	8004eda <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004edc:	f7fe ffce 	bl	8003e7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004ee6:	f7fe fff7 	bl	8003ed8 <vPortExitCritical>

	return uxReturn;
 8004eea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <uxQueueMessagesWaitingFromISR+0x22>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	e7fe      	b.n	8004f14 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <vQueueDelete+0x26>
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e7fe      	b.n	8004f4e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f92f 	bl	80051b4 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff f96c 	bl	8004234 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e001      	b.n	8004f86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f86:	68fb      	ldr	r3, [r7, #12]
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d14d      	bne.n	8005056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 feca 	bl	8005d58 <xTaskPriorityDisinherit>
 8004fc4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	e043      	b.n	8005056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d119      	bne.n	8005008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6898      	ldr	r0, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	f00f faf3 	bl	80145ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d32b      	bcc.n	8005056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	e026      	b.n	8005056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68d8      	ldr	r0, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	461a      	mov	r2, r3
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	f00f fad9 	bl	80145ca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	425b      	negs	r3, r3
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d207      	bcs.n	8005044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	425b      	negs	r3, r3
 800503e:	441a      	add	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d105      	bne.n	8005056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3b01      	subs	r3, #1
 8005054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	441a      	add	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d303      	bcc.n	800509c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68d9      	ldr	r1, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	461a      	mov	r2, r3
 80050a6:	6838      	ldr	r0, [r7, #0]
 80050a8:	f00f fa8f 	bl	80145ca <memcpy>
	}
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050bc:	f7fe fede 	bl	8003e7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c8:	e011      	b.n	80050ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d012      	beq.n	80050f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc02 	bl	80058e0 <xTaskRemoveFromEventList>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050e2:	f000 fcd5 	bl	8005a90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dce9      	bgt.n	80050ca <prvUnlockQueue+0x16>
 80050f6:	e000      	b.n	80050fa <prvUnlockQueue+0x46>
					break;
 80050f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	22ff      	movs	r2, #255	; 0xff
 80050fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005102:	f7fe fee9 	bl	8003ed8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005106:	f7fe feb9 	bl	8003e7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005112:	e011      	b.n	8005138 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3310      	adds	r3, #16
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fbdd 	bl	80058e0 <xTaskRemoveFromEventList>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800512c:	f000 fcb0 	bl	8005a90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	3b01      	subs	r3, #1
 8005134:	b2db      	uxtb	r3, r3
 8005136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dce9      	bgt.n	8005114 <prvUnlockQueue+0x60>
 8005140:	e000      	b.n	8005144 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	22ff      	movs	r2, #255	; 0xff
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800514c:	f7fe fec4 	bl	8003ed8 <vPortExitCritical>
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005160:	f7fe fe8c 	bl	8003e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e001      	b.n	8005176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005176:	f7fe feaf 	bl	8003ed8 <vPortExitCritical>

	return xReturn;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800518c:	f7fe fe76 	bl	8003e7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	429a      	cmp	r2, r3
 800519a:	d102      	bne.n	80051a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e001      	b.n	80051a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f7fe fe97 	bl	8003ed8 <vPortExitCritical>

	return xReturn;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e016      	b.n	80051f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <vQueueUnregisterQueue+0x50>)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d10b      	bne.n	80051ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80051d2:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <vQueueUnregisterQueue+0x50>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2100      	movs	r1, #0
 80051d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80051dc:	4a09      	ldr	r2, [pc, #36]	; (8005204 <vQueueUnregisterQueue+0x50>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]
				break;
 80051e8:	e005      	b.n	80051f6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b07      	cmp	r3, #7
 80051f4:	d9e5      	bls.n	80051c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20003fe0 	.word	0x20003fe0

08005208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af04      	add	r7, sp, #16
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4618      	mov	r0, r3
 800521e:	f7fe ff47 	bl	80040b0 <pvPortMalloc>
 8005222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800522a:	2054      	movs	r0, #84	; 0x54
 800522c:	f7fe ff40 	bl	80040b0 <pvPortMalloc>
 8005230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
 800523e:	e005      	b.n	800524c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7fe fff7 	bl	8004234 <vPortFree>
 8005246:	e001      	b.n	800524c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	2300      	movs	r3, #0
 8005256:	9303      	str	r3, [sp, #12]
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	9302      	str	r3, [sp, #8]
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f80e 	bl	800528a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800526e:	69f8      	ldr	r0, [r7, #28]
 8005270:	f000 f88a 	bl	8005388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e002      	b.n	8005280 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800527a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800527e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005280:	69bb      	ldr	r3, [r7, #24]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b088      	sub	sp, #32
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	3b01      	subs	r3, #1
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <prvInitialiseNewTask+0x46>
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e7fe      	b.n	80052ce <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e012      	b.n	80052fc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	7819      	ldrb	r1, [r3, #0]
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	3334      	adds	r3, #52	; 0x34
 80052e6:	460a      	mov	r2, r1
 80052e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b0f      	cmp	r3, #15
 8005300:	d9e9      	bls.n	80052d6 <prvInitialiseNewTask+0x4c>
 8005302:	e000      	b.n	8005306 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005304:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	2b06      	cmp	r3, #6
 8005312:	d901      	bls.n	8005318 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005314:	2306      	movs	r3, #6
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2200      	movs	r2, #0
 8005328:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	3304      	adds	r3, #4
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe fbe5 	bl	8003afe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	3318      	adds	r3, #24
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fbe0 	bl	8003afe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f1c3 0207 	rsb	r2, r3, #7
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	69b8      	ldr	r0, [r7, #24]
 8005368:	f7fe fc5e 	bl	8003c28 <pxPortInitialiseStack>
 800536c:	4602      	mov	r2, r0
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005390:	f7fe fd74 	bl	8003e7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <prvAddNewTaskToReadyList+0xa0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a23      	ldr	r2, [pc, #140]	; (8005428 <prvAddNewTaskToReadyList+0xa0>)
 800539c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800539e:	4b23      	ldr	r3, [pc, #140]	; (800542c <prvAddNewTaskToReadyList+0xa4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053a6:	4a21      	ldr	r2, [pc, #132]	; (800542c <prvAddNewTaskToReadyList+0xa4>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053ac:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <prvAddNewTaskToReadyList+0xa0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d110      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053b4:	f000 fb8a 	bl	8005acc <prvInitialiseTaskLists>
 80053b8:	e00d      	b.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ba:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <prvAddNewTaskToReadyList+0xa8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <prvAddNewTaskToReadyList+0xa4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d802      	bhi.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <prvAddNewTaskToReadyList+0xa4>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <prvAddNewTaskToReadyList+0xac>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a15      	ldr	r2, [pc, #84]	; (8005434 <prvAddNewTaskToReadyList+0xac>)
 80053de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <prvAddNewTaskToReadyList+0xb0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <prvAddNewTaskToReadyList+0xb0>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a0f      	ldr	r2, [pc, #60]	; (800543c <prvAddNewTaskToReadyList+0xb4>)
 8005400:	441a      	add	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f7fe fb85 	bl	8003b18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800540e:	f7fe fd63 	bl	8003ed8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <prvAddNewTaskToReadyList+0xa8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <prvAddNewTaskToReadyList+0xa4>)
 800541c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20003db8 	.word	0x20003db8
 800542c:	20003cb8 	.word	0x20003cb8
 8005430:	20003dc4 	.word	0x20003dc4
 8005434:	20003dd4 	.word	0x20003dd4
 8005438:	20003dc0 	.word	0x20003dc0
 800543c:	20003cbc 	.word	0x20003cbc

08005440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005452:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <vTaskDelay+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <vTaskDelay+0x2e>
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	e7fe      	b.n	800546c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800546e:	f000 f861 	bl	8005534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005472:	2100      	movs	r1, #0
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fda5 	bl	8005fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800547a:	f000 f869 	bl	8005550 <xTaskResumeAll>
 800547e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d107      	bne.n	8005496 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <vTaskDelay+0x64>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20003de0 	.word	0x20003de0
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80054ae:	4b1b      	ldr	r3, [pc, #108]	; (800551c <vTaskStartScheduler+0x74>)
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	4919      	ldr	r1, [pc, #100]	; (8005520 <vTaskStartScheduler+0x78>)
 80054bc:	4819      	ldr	r0, [pc, #100]	; (8005524 <vTaskStartScheduler+0x7c>)
 80054be:	f7ff fea3 	bl	8005208 <xTaskCreate>
 80054c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d115      	bne.n	80054f6 <vTaskStartScheduler+0x4e>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <vTaskStartScheduler+0x80>)
 80054de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e4:	4b11      	ldr	r3, [pc, #68]	; (800552c <vTaskStartScheduler+0x84>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <vTaskStartScheduler+0x88>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f0:	f7fe fc26 	bl	8003d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054f4:	e00d      	b.n	8005512 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fc:	d109      	bne.n	8005512 <vTaskStartScheduler+0x6a>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	607b      	str	r3, [r7, #4]
 8005510:	e7fe      	b.n	8005510 <vTaskStartScheduler+0x68>
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20003ddc 	.word	0x20003ddc
 8005520:	080153f8 	.word	0x080153f8
 8005524:	08005aa9 	.word	0x08005aa9
 8005528:	20003dd8 	.word	0x20003dd8
 800552c:	20003dc4 	.word	0x20003dc4
 8005530:	20003dbc 	.word	0x20003dbc

08005534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005538:	4b04      	ldr	r3, [pc, #16]	; (800554c <vTaskSuspendAll+0x18>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a03      	ldr	r2, [pc, #12]	; (800554c <vTaskSuspendAll+0x18>)
 8005540:	6013      	str	r3, [r2, #0]
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20003de0 	.word	0x20003de0

08005550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800555e:	4b3b      	ldr	r3, [pc, #236]	; (800564c <xTaskResumeAll+0xfc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <xTaskResumeAll+0x2a>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	e7fe      	b.n	8005578 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800557a:	f7fe fc7f 	bl	8003e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800557e:	4b33      	ldr	r3, [pc, #204]	; (800564c <xTaskResumeAll+0xfc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	4a31      	ldr	r2, [pc, #196]	; (800564c <xTaskResumeAll+0xfc>)
 8005586:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <xTaskResumeAll+0xfc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d155      	bne.n	800563c <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <xTaskResumeAll+0x100>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d051      	beq.n	800563c <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005598:	e02e      	b.n	80055f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <xTaskResumeAll+0x104>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fb13 	bl	8003bd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe fb0e 	bl	8003bd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	2201      	movs	r2, #1
 80055bc:	409a      	lsls	r2, r3
 80055be:	4b26      	ldr	r3, [pc, #152]	; (8005658 <xTaskResumeAll+0x108>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	4a24      	ldr	r2, [pc, #144]	; (8005658 <xTaskResumeAll+0x108>)
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <xTaskResumeAll+0x10c>)
 80055d6:	441a      	add	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fa9a 	bl	8003b18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <xTaskResumeAll+0x110>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <xTaskResumeAll+0x114>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f8:	4b16      	ldr	r3, [pc, #88]	; (8005654 <xTaskResumeAll+0x104>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1cc      	bne.n	800559a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005606:	f000 fadd 	bl	8005bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <xTaskResumeAll+0x118>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005616:	f000 f84b 	bl	80056b0 <xTaskIncrementTick>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005620:	4b10      	ldr	r3, [pc, #64]	; (8005664 <xTaskResumeAll+0x114>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	3b01      	subs	r3, #1
 800562a:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f1      	bne.n	8005616 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <xTaskResumeAll+0x118>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <xTaskResumeAll+0x114>)
 800563a:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800563c:	f7fe fc4c 	bl	8003ed8 <vPortExitCritical>

	return xAlreadyYielded;
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20003de0 	.word	0x20003de0
 8005650:	20003db8 	.word	0x20003db8
 8005654:	20003d78 	.word	0x20003d78
 8005658:	20003dc0 	.word	0x20003dc0
 800565c:	20003cbc 	.word	0x20003cbc
 8005660:	20003cb8 	.word	0x20003cb8
 8005664:	20003dcc 	.word	0x20003dcc
 8005668:	20003dc8 	.word	0x20003dc8

0800566c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <xTaskGetTickCount+0x1c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005678:	687b      	ldr	r3, [r7, #4]
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20003dbc 	.word	0x20003dbc

0800568c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005692:	f7fe fccf 	bl	8004034 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <xTaskGetTickCountFromISR+0x20>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056a0:	683b      	ldr	r3, [r7, #0]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20003dbc 	.word	0x20003dbc

080056b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	4b41      	ldr	r3, [pc, #260]	; (80057c0 <xTaskIncrementTick+0x110>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d173      	bne.n	80057aa <xTaskIncrementTick+0xfa>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c2:	4b40      	ldr	r3, [pc, #256]	; (80057c4 <xTaskIncrementTick+0x114>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056ca:	4a3e      	ldr	r2, [pc, #248]	; (80057c4 <xTaskIncrementTick+0x114>)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11f      	bne.n	8005716 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d6:	4b3c      	ldr	r3, [pc, #240]	; (80057c8 <xTaskIncrementTick+0x118>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <xTaskIncrementTick+0x44>
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	e7fe      	b.n	80056f2 <xTaskIncrementTick+0x42>
 80056f4:	4b34      	ldr	r3, [pc, #208]	; (80057c8 <xTaskIncrementTick+0x118>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	4b34      	ldr	r3, [pc, #208]	; (80057cc <xTaskIncrementTick+0x11c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a32      	ldr	r2, [pc, #200]	; (80057c8 <xTaskIncrementTick+0x118>)
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4a32      	ldr	r2, [pc, #200]	; (80057cc <xTaskIncrementTick+0x11c>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <xTaskIncrementTick+0x120>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	4a30      	ldr	r2, [pc, #192]	; (80057d0 <xTaskIncrementTick+0x120>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	f000 fa57 	bl	8005bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005716:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <xTaskIncrementTick+0x124>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d349      	bcc.n	80057b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005720:	4b29      	ldr	r3, [pc, #164]	; (80057c8 <xTaskIncrementTick+0x118>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <xTaskIncrementTick+0x7e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xTaskIncrementTick+0x80>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <xTaskIncrementTick+0x124>)
 8005736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800573a:	601a      	str	r2, [r3, #0]
					break;
 800573c:	e03a      	b.n	80057b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <xTaskIncrementTick+0x118>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d203      	bcs.n	800575e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005756:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <xTaskIncrementTick+0x124>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6013      	str	r3, [r2, #0]
						break;
 800575c:	e02a      	b.n	80057b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fa35 	bl	8003bd2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fa2c 	bl	8003bd2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <xTaskIncrementTick+0x128>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <xTaskIncrementTick+0x128>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a10      	ldr	r2, [pc, #64]	; (80057dc <xTaskIncrementTick+0x12c>)
 800579a:	441a      	add	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe f9b8 	bl	8003b18 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a8:	e7ba      	b.n	8005720 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <xTaskIncrementTick+0x130>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	4a0b      	ldr	r2, [pc, #44]	; (80057e0 <xTaskIncrementTick+0x130>)
 80057b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057b4:	697b      	ldr	r3, [r7, #20]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20003de0 	.word	0x20003de0
 80057c4:	20003dbc 	.word	0x20003dbc
 80057c8:	20003d70 	.word	0x20003d70
 80057cc:	20003d74 	.word	0x20003d74
 80057d0:	20003dd0 	.word	0x20003dd0
 80057d4:	20003dd8 	.word	0x20003dd8
 80057d8:	20003dc0 	.word	0x20003dc0
 80057dc:	20003cbc 	.word	0x20003cbc
 80057e0:	20003dc8 	.word	0x20003dc8

080057e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ea:	4b26      	ldr	r3, [pc, #152]	; (8005884 <vTaskSwitchContext+0xa0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057f2:	4b25      	ldr	r3, [pc, #148]	; (8005888 <vTaskSwitchContext+0xa4>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f8:	e03e      	b.n	8005878 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <vTaskSwitchContext+0xa4>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <vTaskSwitchContext+0xa8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	f1c3 031f 	rsb	r3, r3, #31
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	491e      	ldr	r1, [pc, #120]	; (8005890 <vTaskSwitchContext+0xac>)
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <vTaskSwitchContext+0x5a>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	e7fe      	b.n	800583c <vTaskSwitchContext+0x58>
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4a11      	ldr	r2, [pc, #68]	; (8005890 <vTaskSwitchContext+0xac>)
 800584a:	4413      	add	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	3308      	adds	r3, #8
 8005860:	429a      	cmp	r2, r3
 8005862:	d104      	bne.n	800586e <vTaskSwitchContext+0x8a>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a07      	ldr	r2, [pc, #28]	; (8005894 <vTaskSwitchContext+0xb0>)
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20003de0 	.word	0x20003de0
 8005888:	20003dcc 	.word	0x20003dcc
 800588c:	20003dc0 	.word	0x20003dc0
 8005890:	20003cbc 	.word	0x20003cbc
 8005894:	20003cb8 	.word	0x20003cb8

08005898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <vTaskPlaceOnEventList+0x24>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e7fe      	b.n	80058ba <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058bc:	4b07      	ldr	r3, [pc, #28]	; (80058dc <vTaskPlaceOnEventList+0x44>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3318      	adds	r3, #24
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fe f94b 	bl	8003b60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ca:	2101      	movs	r1, #1
 80058cc:	6838      	ldr	r0, [r7, #0]
 80058ce:	f000 fb79 	bl	8005fc4 <prvAddCurrentTaskToDelayedList>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20003cb8 	.word	0x20003cb8

080058e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <xTaskRemoveFromEventList+0x2a>
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e7fe      	b.n	8005908 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe f95f 	bl	8003bd2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <xTaskRemoveFromEventList+0xac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d11c      	bne.n	8005956 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	3304      	adds	r3, #4
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe f956 	bl	8003bd2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	2201      	movs	r2, #1
 800592c:	409a      	lsls	r2, r3
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <xTaskRemoveFromEventList+0xb0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	4a16      	ldr	r2, [pc, #88]	; (8005990 <xTaskRemoveFromEventList+0xb0>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <xTaskRemoveFromEventList+0xb4>)
 8005946:	441a      	add	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7fe f8e2 	bl	8003b18 <vListInsertEnd>
 8005954:	e005      	b.n	8005962 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3318      	adds	r3, #24
 800595a:	4619      	mov	r1, r3
 800595c:	480e      	ldr	r0, [pc, #56]	; (8005998 <xTaskRemoveFromEventList+0xb8>)
 800595e:	f7fe f8db 	bl	8003b18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <xTaskRemoveFromEventList+0xbc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	429a      	cmp	r2, r3
 800596e:	d905      	bls.n	800597c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <xTaskRemoveFromEventList+0xc0>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e001      	b.n	8005980 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005980:	697b      	ldr	r3, [r7, #20]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20003de0 	.word	0x20003de0
 8005990:	20003dc0 	.word	0x20003dc0
 8005994:	20003cbc 	.word	0x20003cbc
 8005998:	20003d78 	.word	0x20003d78
 800599c:	20003cb8 	.word	0x20003cb8
 80059a0:	20003dcc 	.word	0x20003dcc

080059a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <vTaskInternalSetTimeOutState+0x24>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <vTaskInternalSetTimeOutState+0x28>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	20003dd0 	.word	0x20003dd0
 80059cc:	20003dbc 	.word	0x20003dbc

080059d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <xTaskCheckForTimeOut+0x24>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e7fe      	b.n	80059f2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <xTaskCheckForTimeOut+0x3e>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e7fe      	b.n	8005a0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a0e:	f7fe fa35 	bl	8003e7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <xTaskCheckForTimeOut+0xb8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a2a:	d102      	bne.n	8005a32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	e023      	b.n	8005a7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <xTaskCheckForTimeOut+0xbc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d007      	beq.n	8005a4e <xTaskCheckForTimeOut+0x7e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d802      	bhi.n	8005a4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e015      	b.n	8005a7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d90b      	bls.n	8005a70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ff9d 	bl	80059a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e004      	b.n	8005a7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a7a:	f7fe fa2d 	bl	8003ed8 <vPortExitCritical>

	return xReturn;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20003dbc 	.word	0x20003dbc
 8005a8c:	20003dd0 	.word	0x20003dd0

08005a90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <vTaskMissedYield+0x14>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20003dcc 	.word	0x20003dcc

08005aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ab0:	f000 f84c 	bl	8005b4c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005ab4:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <prvIdleTask+0x20>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ac4:	e7f4      	b.n	8005ab0 <prvIdleTask+0x8>
 8005ac6:	bf00      	nop
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e00c      	b.n	8005af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <prvInitialiseTaskLists+0x60>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fd ffe9 	bl	8003abe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3301      	adds	r3, #1
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d9ef      	bls.n	8005ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005af8:	480d      	ldr	r0, [pc, #52]	; (8005b30 <prvInitialiseTaskLists+0x64>)
 8005afa:	f7fd ffe0 	bl	8003abe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005afe:	480d      	ldr	r0, [pc, #52]	; (8005b34 <prvInitialiseTaskLists+0x68>)
 8005b00:	f7fd ffdd 	bl	8003abe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b04:	480c      	ldr	r0, [pc, #48]	; (8005b38 <prvInitialiseTaskLists+0x6c>)
 8005b06:	f7fd ffda 	bl	8003abe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b0a:	480c      	ldr	r0, [pc, #48]	; (8005b3c <prvInitialiseTaskLists+0x70>)
 8005b0c:	f7fd ffd7 	bl	8003abe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b10:	480b      	ldr	r0, [pc, #44]	; (8005b40 <prvInitialiseTaskLists+0x74>)
 8005b12:	f7fd ffd4 	bl	8003abe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <prvInitialiseTaskLists+0x78>)
 8005b18:	4a05      	ldr	r2, [pc, #20]	; (8005b30 <prvInitialiseTaskLists+0x64>)
 8005b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <prvInitialiseTaskLists+0x7c>)
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <prvInitialiseTaskLists+0x68>)
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20003cbc 	.word	0x20003cbc
 8005b30:	20003d48 	.word	0x20003d48
 8005b34:	20003d5c 	.word	0x20003d5c
 8005b38:	20003d78 	.word	0x20003d78
 8005b3c:	20003d8c 	.word	0x20003d8c
 8005b40:	20003da4 	.word	0x20003da4
 8005b44:	20003d70 	.word	0x20003d70
 8005b48:	20003d74 	.word	0x20003d74

08005b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b52:	e019      	b.n	8005b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b54:	f7fe f992 	bl	8003e7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <prvCheckTasksWaitingTermination+0x4c>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe f834 	bl	8003bd2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <prvCheckTasksWaitingTermination+0x50>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <prvCheckTasksWaitingTermination+0x50>)
 8005b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b7e:	f7fe f9ab 	bl	8003ed8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f80e 	bl	8005ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <prvCheckTasksWaitingTermination+0x54>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e1      	bne.n	8005b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20003d8c 	.word	0x20003d8c
 8005b9c:	20003db8 	.word	0x20003db8
 8005ba0:	20003da0 	.word	0x20003da0

08005ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fb3f 	bl	8004234 <vPortFree>
			vPortFree( pxTCB );
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fe fb3c 	bl	8004234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <prvResetNextTaskUnblockTime+0x44>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <prvResetNextTaskUnblockTime+0x14>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <prvResetNextTaskUnblockTime+0x16>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvResetNextTaskUnblockTime+0x48>)
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005be4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be6:	e008      	b.n	8005bfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <prvResetNextTaskUnblockTime+0x44>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <prvResetNextTaskUnblockTime+0x48>)
 8005bf8:	6013      	str	r3, [r2, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20003d70 	.word	0x20003d70
 8005c0c:	20003dd8 	.word	0x20003dd8

08005c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <xTaskGetSchedulerState+0x34>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e008      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <xTaskGetSchedulerState+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c36:	687b      	ldr	r3, [r7, #4]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20003dc4 	.word	0x20003dc4
 8005c48:	20003de0 	.word	0x20003de0

08005c4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d06e      	beq.n	8005d40 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c66:	4b39      	ldr	r3, [pc, #228]	; (8005d4c <xTaskPriorityInherit+0x100>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d25e      	bcs.n	8005d2e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db06      	blt.n	8005c86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c78:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <xTaskPriorityInherit+0x100>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f1c3 0207 	rsb	r2, r3, #7
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6959      	ldr	r1, [r3, #20]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4a2e      	ldr	r2, [pc, #184]	; (8005d50 <xTaskPriorityInherit+0x104>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	d101      	bne.n	8005ca2 <xTaskPriorityInherit+0x56>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xTaskPriorityInherit+0x58>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d03a      	beq.n	8005d1e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fd ff90 	bl	8003bd2 <uxListRemove>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d115      	bne.n	8005ce4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4924      	ldr	r1, [pc, #144]	; (8005d50 <xTaskPriorityInherit+0x104>)
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskPriorityInherit+0x98>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43da      	mvns	r2, r3
 8005cda:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <xTaskPriorityInherit+0x108>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <xTaskPriorityInherit+0x108>)
 8005ce2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <xTaskPriorityInherit+0x100>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <xTaskPriorityInherit+0x108>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <xTaskPriorityInherit+0x108>)
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <xTaskPriorityInherit+0x104>)
 8005d0e:	441a      	add	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7fd fefe 	bl	8003b18 <vListInsertEnd>
 8005d1c:	e004      	b.n	8005d28 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <xTaskPriorityInherit+0x100>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e008      	b.n	8005d40 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <xTaskPriorityInherit+0x100>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d201      	bcs.n	8005d40 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d40:	68fb      	ldr	r3, [r7, #12]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20003cb8 	.word	0x20003cb8
 8005d50:	20003cbc 	.word	0x20003cbc
 8005d54:	20003dc0 	.word	0x20003dc0

08005d58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d06c      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d6e:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <xTaskPriorityDisinherit+0xfc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d009      	beq.n	8005d8c <xTaskPriorityDisinherit+0x34>
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e7fe      	b.n	8005d8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <xTaskPriorityDisinherit+0x50>
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	e7fe      	b.n	8005da6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d044      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d140      	bne.n	8005e48 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fd ff01 	bl	8003bd2 <uxListRemove>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d115      	bne.n	8005e02 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	491f      	ldr	r1, [pc, #124]	; (8005e58 <xTaskPriorityDisinherit+0x100>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xTaskPriorityDisinherit+0xaa>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <xTaskPriorityDisinherit+0x104>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <xTaskPriorityDisinherit+0x104>)
 8005e00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f1c3 0207 	rsb	r2, r3, #7
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskPriorityDisinherit+0x104>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <xTaskPriorityDisinherit+0x104>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <xTaskPriorityDisinherit+0x100>)
 8005e36:	441a      	add	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fd fe6a 	bl	8003b18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20003cb8 	.word	0x20003cb8
 8005e58:	20003cbc 	.word	0x20003cbc
 8005e5c:	20003dc0 	.word	0x20003dc0

08005e60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8086 	beq.w	8005f86 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e7fe      	b.n	8005e94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d202      	bcs.n	8005ea6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e002      	b.n	8005eac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d067      	beq.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d162      	bne.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ec0:	4b33      	ldr	r3, [pc, #204]	; (8005f90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d109      	bne.n	8005ede <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	e7fe      	b.n	8005edc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db04      	blt.n	8005efc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f1c3 0207 	rsb	r2, r3, #7
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	6959      	ldr	r1, [r3, #20]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4299      	cmp	r1, r3
 8005f10:	d101      	bne.n	8005f16 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d034      	beq.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd fe56 	bl	8003bd2 <uxListRemove>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d115      	bne.n	8005f58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4918      	ldr	r1, [pc, #96]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	2201      	movs	r2, #1
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	43da      	mvns	r2, r3
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4013      	ands	r3, r2
 8005f54:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f56:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a07      	ldr	r2, [pc, #28]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f78:	441a      	add	r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fd fdc9 	bl	8003b18 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f86:	bf00      	nop
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20003cb8 	.word	0x20003cb8
 8005f94:	20003cbc 	.word	0x20003cbc
 8005f98:	20003dc0 	.word	0x20003dc0

08005f9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fae:	3201      	adds	r2, #1
 8005fb0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005fb2:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
	}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20003cb8 	.word	0x20003cb8

08005fc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fce:	4b29      	ldr	r3, [pc, #164]	; (8006074 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd4:	4b28      	ldr	r3, [pc, #160]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fd fdf9 	bl	8003bd2 <uxListRemove>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005fe6:	4b24      	ldr	r3, [pc, #144]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	2201      	movs	r2, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	4a20      	ldr	r2, [pc, #128]	; (800607c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ffc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006004:	d10a      	bne.n	800601c <prvAddCurrentTaskToDelayedList+0x58>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600c:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	481a      	ldr	r0, [pc, #104]	; (8006080 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006016:	f7fd fd7f 	bl	8003b18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800601a:	e026      	b.n	800606a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006024:	4b14      	ldr	r3, [pc, #80]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	429a      	cmp	r2, r3
 8006032:	d209      	bcs.n	8006048 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7fd fd8d 	bl	8003b60 <vListInsert>
}
 8006046:	e010      	b.n	800606a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <prvAddCurrentTaskToDelayedList+0xc4>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fd fd83 	bl	8003b60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <prvAddCurrentTaskToDelayedList+0xc8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	429a      	cmp	r2, r3
 8006062:	d202      	bcs.n	800606a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6013      	str	r3, [r2, #0]
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20003dbc 	.word	0x20003dbc
 8006078:	20003cb8 	.word	0x20003cb8
 800607c:	20003dc0 	.word	0x20003dc0
 8006080:	20003da4 	.word	0x20003da4
 8006084:	20003d74 	.word	0x20003d74
 8006088:	20003d70 	.word	0x20003d70
 800608c:	20003dd8 	.word	0x20003dd8

08006090 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	461a      	mov	r2, r3
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 ff8f 	bl	8008fc8 <tcpip_send_msg_wait_sem>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <netconn_apimsg+0x2e>
    return apimsg->err;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80060bc:	e001      	b.n	80060c2 <netconn_apimsg+0x32>
  }
  return err;
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	603a      	str	r2, [r7, #0]
 80060d6:	71fb      	strb	r3, [r7, #7]
 80060d8:	460b      	mov	r3, r1
 80060da:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fef9 	bl	8006ed8 <netconn_alloc>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d054      	beq.n	8006198 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80060ee:	79bb      	ldrb	r3, [r7, #6]
 80060f0:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80060f6:	f107 030c 	add.w	r3, r7, #12
 80060fa:	4619      	mov	r1, r3
 80060fc:	4829      	ldr	r0, [pc, #164]	; (80061a4 <netconn_new_with_proto_and_callback+0xd8>)
 80060fe:	f7ff ffc7 	bl	8006090 <netconn_apimsg>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8006108:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800610c:	2b00      	cmp	r3, #0
 800610e:	d043      	beq.n	8006198 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <netconn_new_with_proto_and_callback+0x58>
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <netconn_new_with_proto_and_callback+0xdc>)
 800611a:	2289      	movs	r2, #137	; 0x89
 800611c:	4923      	ldr	r1, [pc, #140]	; (80061ac <netconn_new_with_proto_and_callback+0xe0>)
 800611e:	4824      	ldr	r0, [pc, #144]	; (80061b0 <netconn_new_with_proto_and_callback+0xe4>)
 8006120:	f00e fa66 	bl	80145f0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	3310      	adds	r3, #16
 8006128:	4618      	mov	r0, r3
 800612a:	f00c ff4b 	bl	8012fc4 <sys_mbox_valid>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <netconn_new_with_proto_and_callback+0x74>
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <netconn_new_with_proto_and_callback+0xdc>)
 8006136:	228a      	movs	r2, #138	; 0x8a
 8006138:	491e      	ldr	r1, [pc, #120]	; (80061b4 <netconn_new_with_proto_and_callback+0xe8>)
 800613a:	481d      	ldr	r0, [pc, #116]	; (80061b0 <netconn_new_with_proto_and_callback+0xe4>)
 800613c:	f00e fa58 	bl	80145f0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	3314      	adds	r3, #20
 8006144:	4618      	mov	r0, r3
 8006146:	f00c ff3d 	bl	8012fc4 <sys_mbox_valid>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <netconn_new_with_proto_and_callback+0x90>
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <netconn_new_with_proto_and_callback+0xdc>)
 8006152:	228c      	movs	r2, #140	; 0x8c
 8006154:	4918      	ldr	r1, [pc, #96]	; (80061b8 <netconn_new_with_proto_and_callback+0xec>)
 8006156:	4816      	ldr	r0, [pc, #88]	; (80061b0 <netconn_new_with_proto_and_callback+0xe4>)
 8006158:	f00e fa4a 	bl	80145f0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	330c      	adds	r3, #12
 8006160:	4618      	mov	r0, r3
 8006162:	f00c ffbe 	bl	80130e2 <sys_sem_valid>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <netconn_new_with_proto_and_callback+0xac>
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <netconn_new_with_proto_and_callback+0xdc>)
 800616e:	228f      	movs	r2, #143	; 0x8f
 8006170:	4912      	ldr	r1, [pc, #72]	; (80061bc <netconn_new_with_proto_and_callback+0xf0>)
 8006172:	480f      	ldr	r0, [pc, #60]	; (80061b0 <netconn_new_with_proto_and_callback+0xe4>)
 8006174:	f00e fa3c 	bl	80145f0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	330c      	adds	r3, #12
 800617c:	4618      	mov	r0, r3
 800617e:	f00c ffa3 	bl	80130c8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	3310      	adds	r3, #16
 8006186:	4618      	mov	r0, r3
 8006188:	f00c fe80 	bl	8012e8c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800618c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800618e:	2007      	movs	r0, #7
 8006190:	f005 fe4a 	bl	800be28 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800619a:	4618      	mov	r0, r3
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	08006e75 	.word	0x08006e75
 80061a8:	08015400 	.word	0x08015400
 80061ac:	08015434 	.word	0x08015434
 80061b0:	08015458 	.word	0x08015458
 80061b4:	08015480 	.word	0x08015480
 80061b8:	08015498 	.word	0x08015498
 80061bc:	080154bc 	.word	0x080154bc

080061c0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <netconn_delete+0x12>
    return ERR_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e016      	b.n	8006200 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80061d6:	2329      	movs	r3, #41	; 0x29
 80061d8:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4619      	mov	r1, r3
 80061e0:	4809      	ldr	r0, [pc, #36]	; (8006208 <netconn_delete+0x48>)
 80061e2:	f7ff ff55 	bl	8006090 <netconn_apimsg>
 80061e6:	4603      	mov	r3, r0
 80061e8:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80061ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <netconn_delete+0x38>
    return err;
 80061f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061f6:	e003      	b.n	8006200 <netconn_delete+0x40>
  }

  netconn_free(conn);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fedd 	bl	8006fb8 <netconn_free>

  return ERR_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08007431 	.word	0x08007431

0800620c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	; 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d108      	bne.n	8006232 <netconn_getaddr+0x26>
 8006220:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <netconn_getaddr+0x88>)
 8006222:	22d9      	movs	r2, #217	; 0xd9
 8006224:	491c      	ldr	r1, [pc, #112]	; (8006298 <netconn_getaddr+0x8c>)
 8006226:	481d      	ldr	r0, [pc, #116]	; (800629c <netconn_getaddr+0x90>)
 8006228:	f00e f9e2 	bl	80145f0 <iprintf>
 800622c:	f06f 030f 	mvn.w	r3, #15
 8006230:	e02b      	b.n	800628a <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <netconn_getaddr+0x3e>
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <netconn_getaddr+0x88>)
 800623a:	22da      	movs	r2, #218	; 0xda
 800623c:	4918      	ldr	r1, [pc, #96]	; (80062a0 <netconn_getaddr+0x94>)
 800623e:	4817      	ldr	r0, [pc, #92]	; (800629c <netconn_getaddr+0x90>)
 8006240:	f00e f9d6 	bl	80145f0 <iprintf>
 8006244:	f06f 030f 	mvn.w	r3, #15
 8006248:	e01f      	b.n	800628a <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <netconn_getaddr+0x56>
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <netconn_getaddr+0x88>)
 8006252:	22db      	movs	r2, #219	; 0xdb
 8006254:	4913      	ldr	r1, [pc, #76]	; (80062a4 <netconn_getaddr+0x98>)
 8006256:	4811      	ldr	r0, [pc, #68]	; (800629c <netconn_getaddr+0x90>)
 8006258:	f00e f9ca 	bl	80145f0 <iprintf>
 800625c:	f06f 030f 	mvn.w	r3, #15
 8006260:	e013      	b.n	800628a <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f887 3020 	strb.w	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	61bb      	str	r3, [r7, #24]
  msg.msg.ad.port = port;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	61fb      	str	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	4619      	mov	r1, r3
 800627a:	480b      	ldr	r0, [pc, #44]	; (80062a8 <netconn_getaddr+0x9c>)
 800627c:	f7ff ff08 	bl	8006090 <netconn_apimsg>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8006286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800628a:	4618      	mov	r0, r3
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	08015400 	.word	0x08015400
 8006298:	080154d8 	.word	0x080154d8
 800629c:	08015458 	.word	0x08015458
 80062a0:	080154f8 	.word	0x080154f8
 80062a4:	08015518 	.word	0x08015518
 80062a8:	08007ec9 	.word	0x08007ec9

080062ac <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <netconn_connect+0x28>
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <netconn_connect+0x5c>)
 80062c2:	f240 122b 	movw	r2, #299	; 0x12b
 80062c6:	4911      	ldr	r1, [pc, #68]	; (800630c <netconn_connect+0x60>)
 80062c8:	4811      	ldr	r0, [pc, #68]	; (8006310 <netconn_connect+0x64>)
 80062ca:	f00e f991 	bl	80145f0 <iprintf>
 80062ce:	f06f 030f 	mvn.w	r3, #15
 80062d2:	e015      	b.n	8006300 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <netconn_connect+0x68>)
 80062dc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80062ea:	f107 0310 	add.w	r3, r7, #16
 80062ee:	4619      	mov	r1, r3
 80062f0:	4809      	ldr	r0, [pc, #36]	; (8006318 <netconn_connect+0x6c>)
 80062f2:	f7ff fecd 	bl	8006090 <netconn_apimsg>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 80062fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006300:	4618      	mov	r0, r3
 8006302:	3728      	adds	r7, #40	; 0x28
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	08015400 	.word	0x08015400
 800630c:	08015554 	.word	0x08015554
 8006310:	08015458 	.word	0x08015458
 8006314:	08017ef0 	.word	0x08017ef0
 8006318:	08007729 	.word	0x08007729

0800631c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <netconn_disconnect+0x22>
 800632a:	4b0d      	ldr	r3, [pc, #52]	; (8006360 <netconn_disconnect+0x44>)
 800632c:	f240 124b 	movw	r2, #331	; 0x14b
 8006330:	490c      	ldr	r1, [pc, #48]	; (8006364 <netconn_disconnect+0x48>)
 8006332:	480d      	ldr	r0, [pc, #52]	; (8006368 <netconn_disconnect+0x4c>)
 8006334:	f00e f95c 	bl	80145f0 <iprintf>
 8006338:	f06f 030f 	mvn.w	r3, #15
 800633c:	e00b      	b.n	8006356 <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	4619      	mov	r1, r3
 8006348:	4808      	ldr	r0, [pc, #32]	; (800636c <netconn_disconnect+0x50>)
 800634a:	f7ff fea1 	bl	8006090 <netconn_apimsg>
 800634e:	4603      	mov	r3, r0
 8006350:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006352:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	08015400 	.word	0x08015400
 8006364:	08015574 	.word	0x08015574
 8006368:	08015458 	.word	0x08015458
 800636c:	08007895 	.word	0x08007895

08006370 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <netconn_recv_data+0x28>
 8006384:	4b5c      	ldr	r3, [pc, #368]	; (80064f8 <netconn_recv_data+0x188>)
 8006386:	f240 12e7 	movw	r2, #487	; 0x1e7
 800638a:	495c      	ldr	r1, [pc, #368]	; (80064fc <netconn_recv_data+0x18c>)
 800638c:	485c      	ldr	r0, [pc, #368]	; (8006500 <netconn_recv_data+0x190>)
 800638e:	f00e f92f 	bl	80145f0 <iprintf>
 8006392:	f06f 030f 	mvn.w	r3, #15
 8006396:	e0aa      	b.n	80064ee <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <netconn_recv_data+0x48>
 80063a4:	4b54      	ldr	r3, [pc, #336]	; (80064f8 <netconn_recv_data+0x188>)
 80063a6:	f240 12e9 	movw	r2, #489	; 0x1e9
 80063aa:	4956      	ldr	r1, [pc, #344]	; (8006504 <netconn_recv_data+0x194>)
 80063ac:	4854      	ldr	r0, [pc, #336]	; (8006500 <netconn_recv_data+0x190>)
 80063ae:	f00e f91f 	bl	80145f0 <iprintf>
 80063b2:	f06f 030f 	mvn.w	r3, #15
 80063b6:	e09a      	b.n	80064ee <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d115      	bne.n	80063f0 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3310      	adds	r3, #16
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00c fdfb 	bl	8012fc4 <sys_mbox_valid>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10d      	bne.n	80063f0 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3314      	adds	r3, #20
 80063d8:	4618      	mov	r0, r3
 80063da:	f00c fdf3 	bl	8012fc4 <sys_mbox_valid>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <netconn_recv_data+0x7a>
 80063e4:	f06f 030a 	mvn.w	r3, #10
 80063e8:	e081      	b.n	80064ee <netconn_recv_data+0x17e>
 80063ea:	f06f 030e 	mvn.w	r3, #14
 80063ee:	e07e      	b.n	80064ee <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3310      	adds	r3, #16
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00c fde5 	bl	8012fc4 <sys_mbox_valid>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <netconn_recv_data+0xa4>
 8006400:	4b3d      	ldr	r3, [pc, #244]	; (80064f8 <netconn_recv_data+0x188>)
 8006402:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006406:	4940      	ldr	r1, [pc, #256]	; (8006508 <netconn_recv_data+0x198>)
 8006408:	483d      	ldr	r0, [pc, #244]	; (8006500 <netconn_recv_data+0x190>)
 800640a:	f00e f8f1 	bl	80145f0 <iprintf>
 800640e:	f06f 030a 	mvn.w	r3, #10
 8006412:	e06c      	b.n	80064ee <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800641a:	f113 0f0c 	cmn.w	r3, #12
 800641e:	da03      	bge.n	8006428 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006426:	e062      	b.n	80064ee <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3310      	adds	r3, #16
 800642c:	f107 0120 	add.w	r1, r7, #32
 8006430:	2200      	movs	r2, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f00c fd6b 	bl	8012f0e <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006440:	2b10      	cmp	r3, #16
 8006442:	d138      	bne.n	80064b6 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	891b      	ldrh	r3, [r3, #8]
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e001      	b.n	800645a <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8006456:	2301      	movs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4619      	mov	r1, r3
 8006460:	482a      	ldr	r0, [pc, #168]	; (800650c <netconn_recv_data+0x19c>)
 8006462:	f7ff fe15 	bl	8006090 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d120      	bne.n	80064ae <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <netconn_recv_data+0x110>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	2200      	movs	r2, #0
 800647a:	2101      	movs	r1, #1
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <netconn_recv_data+0x12a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006498:	e029      	b.n	80064ee <netconn_recv_data+0x17e>
 800649a:	f06f 030d 	mvn.w	r3, #13
 800649e:	e026      	b.n	80064ee <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80064a0:	2101      	movs	r1, #1
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f97a 	bl	800679c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80064a8:	f06f 030e 	mvn.w	r3, #14
 80064ac:	e01f      	b.n	80064ee <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	891b      	ldrh	r3, [r3, #8]
 80064b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064b4:	e00d      	b.n	80064d2 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <netconn_recv_data+0x15a>
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <netconn_recv_data+0x188>)
 80064be:	f240 223e 	movw	r2, #574	; 0x23e
 80064c2:	4913      	ldr	r1, [pc, #76]	; (8006510 <netconn_recv_data+0x1a0>)
 80064c4:	480e      	ldr	r0, [pc, #56]	; (8006500 <netconn_recv_data+0x190>)
 80064c6:	f00e f893 	bl	80145f0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	891b      	ldrh	r3, [r3, #8]
 80064d0:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <netconn_recv_data+0x176>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064e0:	2101      	movs	r1, #1
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	08015400 	.word	0x08015400
 80064fc:	080155f8 	.word	0x080155f8
 8006500:	08015458 	.word	0x08015458
 8006504:	08015618 	.word	0x08015618
 8006508:	08015634 	.word	0x08015634
 800650c:	080079e5 	.word	0x080079e5
 8006510:	08015654 	.word	0x08015654

08006514 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <netconn_recv_tcp_pbuf+0x1c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652c:	2b10      	cmp	r3, #16
 800652e:	d009      	beq.n	8006544 <netconn_recv_tcp_pbuf+0x30>
 8006530:	4b09      	ldr	r3, [pc, #36]	; (8006558 <netconn_recv_tcp_pbuf+0x44>)
 8006532:	f240 225e 	movw	r2, #606	; 0x25e
 8006536:	4909      	ldr	r1, [pc, #36]	; (800655c <netconn_recv_tcp_pbuf+0x48>)
 8006538:	4809      	ldr	r0, [pc, #36]	; (8006560 <netconn_recv_tcp_pbuf+0x4c>)
 800653a:	f00e f859 	bl	80145f0 <iprintf>
 800653e:	f06f 030f 	mvn.w	r3, #15
 8006542:	e004      	b.n	800654e <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff ff12 	bl	8006370 <netconn_recv_data>
 800654c:	4603      	mov	r3, r0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	08015400 	.word	0x08015400
 800655c:	08015618 	.word	0x08015618
 8006560:	08015458 	.word	0x08015458

08006564 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <netconn_recv+0x28>
 8006578:	4b31      	ldr	r3, [pc, #196]	; (8006640 <netconn_recv+0xdc>)
 800657a:	f44f 721d 	mov.w	r2, #628	; 0x274
 800657e:	4931      	ldr	r1, [pc, #196]	; (8006644 <netconn_recv+0xe0>)
 8006580:	4831      	ldr	r0, [pc, #196]	; (8006648 <netconn_recv+0xe4>)
 8006582:	f00e f835 	bl	80145f0 <iprintf>
 8006586:	f06f 030f 	mvn.w	r3, #15
 800658a:	e054      	b.n	8006636 <netconn_recv+0xd2>
  *new_buf = NULL;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <netconn_recv+0x48>
 8006598:	4b29      	ldr	r3, [pc, #164]	; (8006640 <netconn_recv+0xdc>)
 800659a:	f240 2276 	movw	r2, #630	; 0x276
 800659e:	492b      	ldr	r1, [pc, #172]	; (800664c <netconn_recv+0xe8>)
 80065a0:	4829      	ldr	r0, [pc, #164]	; (8006648 <netconn_recv+0xe4>)
 80065a2:	f00e f825 	bl	80145f0 <iprintf>
 80065a6:	f06f 030f 	mvn.w	r3, #15
 80065aa:	e044      	b.n	8006636 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d139      	bne.n	800662c <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80065bc:	2006      	movs	r0, #6
 80065be:	f005 fbe1 	bl	800bd84 <memp_malloc>
 80065c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <netconn_recv+0x6c>
      return ERR_MEM;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ce:	e032      	b.n	8006636 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 80065d0:	f107 030c 	add.w	r3, r7, #12
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff feca 	bl	8006370 <netconn_recv_data>
 80065dc:	4603      	mov	r3, r0
 80065de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80065e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	2006      	movs	r0, #6
 80065ec:	f005 fc1c 	bl	800be28 <memp_free>
      return err;
 80065f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065f4:	e01f      	b.n	8006636 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <netconn_recv+0xa6>
 80065fc:	4b10      	ldr	r3, [pc, #64]	; (8006640 <netconn_recv+0xdc>)
 80065fe:	f240 228a 	movw	r2, #650	; 0x28a
 8006602:	4913      	ldr	r1, [pc, #76]	; (8006650 <netconn_recv+0xec>)
 8006604:	4810      	ldr	r0, [pc, #64]	; (8006648 <netconn_recv+0xe4>)
 8006606:	f00d fff3 	bl	80145f0 <iprintf>

    buf->p = p;
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2200      	movs	r2, #0
 8006620:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e004      	b.n	8006636 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fe9e 	bl	8006370 <netconn_recv_data>
 8006634:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	08015400 	.word	0x08015400
 8006644:	080155f8 	.word	0x080155f8
 8006648:	08015458 	.word	0x08015458
 800664c:	08015618 	.word	0x08015618
 8006650:	08015660 	.word	0x08015660

08006654 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <netconn_send+0x24>
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <netconn_send+0x48>)
 8006666:	f240 22c3 	movw	r2, #707	; 0x2c3
 800666a:	490d      	ldr	r1, [pc, #52]	; (80066a0 <netconn_send+0x4c>)
 800666c:	480d      	ldr	r0, [pc, #52]	; (80066a4 <netconn_send+0x50>)
 800666e:	f00d ffbf 	bl	80145f0 <iprintf>
 8006672:	f06f 030f 	mvn.w	r3, #15
 8006676:	e00d      	b.n	8006694 <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	4619      	mov	r1, r3
 8006686:	4808      	ldr	r0, [pc, #32]	; (80066a8 <netconn_send+0x54>)
 8006688:	f7ff fd02 	bl	8006090 <netconn_apimsg>
 800668c:	4603      	mov	r3, r0
 800668e:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006690:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	08015400 	.word	0x08015400
 80066a0:	0801566c 	.word	0x0801566c
 80066a4:	08015458 	.word	0x08015458
 80066a8:	0800790b 	.word	0x0800790b

080066ac <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d109      	bne.n	80066d4 <netconn_write_partly+0x28>
 80066c0:	4b31      	ldr	r3, [pc, #196]	; (8006788 <netconn_write_partly+0xdc>)
 80066c2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80066c6:	4931      	ldr	r1, [pc, #196]	; (800678c <netconn_write_partly+0xe0>)
 80066c8:	4831      	ldr	r0, [pc, #196]	; (8006790 <netconn_write_partly+0xe4>)
 80066ca:	f00d ff91 	bl	80145f0 <iprintf>
 80066ce:	f06f 030f 	mvn.w	r3, #15
 80066d2:	e054      	b.n	800677e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d009      	beq.n	80066f4 <netconn_write_partly+0x48>
 80066e0:	4b29      	ldr	r3, [pc, #164]	; (8006788 <netconn_write_partly+0xdc>)
 80066e2:	f240 22e7 	movw	r2, #743	; 0x2e7
 80066e6:	492b      	ldr	r1, [pc, #172]	; (8006794 <netconn_write_partly+0xe8>)
 80066e8:	4829      	ldr	r0, [pc, #164]	; (8006790 <netconn_write_partly+0xe4>)
 80066ea:	f00d ff81 	bl	80145f0 <iprintf>
 80066ee:	f06f 0305 	mvn.w	r3, #5
 80066f2:	e044      	b.n	800677e <netconn_write_partly+0xd2>
  if (size == 0) {
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <netconn_write_partly+0x52>
    return ERR_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e03f      	b.n	800677e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	7f1b      	ldrb	r3, [r3, #28]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <netconn_write_partly+0x68>
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <netconn_write_partly+0x6c>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <netconn_write_partly+0x6e>
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800671e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <netconn_write_partly+0x86>
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800672c:	f06f 0305 	mvn.w	r3, #5
 8006730:	e025      	b.n	800677e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	4619      	mov	r1, r3
 800674a:	4813      	ldr	r0, [pc, #76]	; (8006798 <netconn_write_partly+0xec>)
 800674c:	f7ff fca0 	bl	8006090 <netconn_apimsg>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8006756:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10d      	bne.n	800677a <netconn_write_partly+0xce>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <netconn_write_partly+0xce>
    if (dontblock) {
 8006764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e002      	b.n	800677a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800677a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800677e:	4618      	mov	r0, r3
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	08015400 	.word	0x08015400
 800678c:	08015688 	.word	0x08015688
 8006790:	08015458 	.word	0x08015458
 8006794:	080156a4 	.word	0x080156a4
 8006798:	08007dbd 	.word	0x08007dbd

0800679c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <netconn_close_shutdown+0x26>
 80067ae:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <netconn_close_shutdown+0x50>)
 80067b0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80067b4:	490e      	ldr	r1, [pc, #56]	; (80067f0 <netconn_close_shutdown+0x54>)
 80067b6:	480f      	ldr	r0, [pc, #60]	; (80067f4 <netconn_close_shutdown+0x58>)
 80067b8:	f00d ff1a 	bl	80145f0 <iprintf>
 80067bc:	f06f 030f 	mvn.w	r3, #15
 80067c0:	e00f      	b.n	80067e2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80067ca:	2329      	movs	r3, #41	; 0x29
 80067cc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	4619      	mov	r1, r3
 80067d4:	4808      	ldr	r0, [pc, #32]	; (80067f8 <netconn_close_shutdown+0x5c>)
 80067d6:	f7ff fc5b 	bl	8006090 <netconn_apimsg>
 80067da:	4603      	mov	r3, r0
 80067dc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80067de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	08015400 	.word	0x08015400
 80067f0:	080156c8 	.word	0x080156c8
 80067f4:	08015458 	.word	0x08015458
 80067f8:	0800800d 	.word	0x0800800d

080067fc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <recv_udp+0x20>
 8006810:	4b34      	ldr	r3, [pc, #208]	; (80068e4 <recv_udp+0xe8>)
 8006812:	22b1      	movs	r2, #177	; 0xb1
 8006814:	4934      	ldr	r1, [pc, #208]	; (80068e8 <recv_udp+0xec>)
 8006816:	4835      	ldr	r0, [pc, #212]	; (80068ec <recv_udp+0xf0>)
 8006818:	f00d feea 	bl	80145f0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <recv_udp+0x32>
 8006822:	4b30      	ldr	r3, [pc, #192]	; (80068e4 <recv_udp+0xe8>)
 8006824:	22b2      	movs	r2, #178	; 0xb2
 8006826:	4932      	ldr	r1, [pc, #200]	; (80068f0 <recv_udp+0xf4>)
 8006828:	4830      	ldr	r0, [pc, #192]	; (80068ec <recv_udp+0xf0>)
 800682a:	f00d fee1 	bl	80145f0 <iprintf>
  conn = (struct netconn *)arg;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <recv_udp+0x44>
    pbuf_free(p);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f006 f84f 	bl	800c8dc <pbuf_free>
    return;
 800683e:	e04d      	b.n	80068dc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	d005      	beq.n	8006856 <recv_udp+0x5a>
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <recv_udp+0xe8>)
 800684c:	22ba      	movs	r2, #186	; 0xba
 800684e:	4929      	ldr	r1, [pc, #164]	; (80068f4 <recv_udp+0xf8>)
 8006850:	4826      	ldr	r0, [pc, #152]	; (80068ec <recv_udp+0xf0>)
 8006852:	f00d fecd 	bl	80145f0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3310      	adds	r3, #16
 800685a:	4618      	mov	r0, r3
 800685c:	f00c fbb2 	bl	8012fc4 <sys_mbox_valid>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f006 f838 	bl	800c8dc <pbuf_free>
    return;
 800686c:	e036      	b.n	80068dc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800686e:	2006      	movs	r0, #6
 8006870:	f005 fa88 	bl	800bd84 <memp_malloc>
 8006874:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <recv_udp+0x88>
    pbuf_free(p);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f006 f82d 	bl	800c8dc <pbuf_free>
    return;
 8006882:	e02b      	b.n	80068dc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <recv_udp+0xa0>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	e000      	b.n	800689e <recv_udp+0xa2>
 800689c:	2300      	movs	r3, #0
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068a6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	891b      	ldrh	r3, [r3, #8]
 80068ac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3310      	adds	r3, #16
 80068b2:	69b9      	ldr	r1, [r7, #24]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f00c fb10 	bl	8012eda <sys_mbox_trypost>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80068c0:	69b8      	ldr	r0, [r7, #24]
 80068c2:	f001 fc3f 	bl	8008144 <netbuf_delete>
    return;
 80068c6:	e009      	b.n	80068dc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <recv_udp+0xe0>
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	8afa      	ldrh	r2, [r7, #22]
 80068d6:	2100      	movs	r1, #0
 80068d8:	69f8      	ldr	r0, [r7, #28]
 80068da:	4798      	blx	r3
  }
}
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	080156e4 	.word	0x080156e4
 80068e8:	08015718 	.word	0x08015718
 80068ec:	0801573c 	.word	0x0801573c
 80068f0:	08015764 	.word	0x08015764
 80068f4:	08015784 	.word	0x08015784

080068f8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <recv_tcp+0x20>
 800690c:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <recv_tcp+0xfc>)
 800690e:	22f9      	movs	r2, #249	; 0xf9
 8006910:	4939      	ldr	r1, [pc, #228]	; (80069f8 <recv_tcp+0x100>)
 8006912:	483a      	ldr	r0, [pc, #232]	; (80069fc <recv_tcp+0x104>)
 8006914:	f00d fe6c 	bl	80145f0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d105      	bne.n	800692a <recv_tcp+0x32>
 800691e:	4b35      	ldr	r3, [pc, #212]	; (80069f4 <recv_tcp+0xfc>)
 8006920:	22fa      	movs	r2, #250	; 0xfa
 8006922:	4937      	ldr	r1, [pc, #220]	; (8006a00 <recv_tcp+0x108>)
 8006924:	4835      	ldr	r0, [pc, #212]	; (80069fc <recv_tcp+0x104>)
 8006926:	f00d fe63 	bl	80145f0 <iprintf>
  conn = (struct netconn *)arg;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <recv_tcp+0x42>
    return ERR_VAL;
 8006934:	f06f 0305 	mvn.w	r3, #5
 8006938:	e057      	b.n	80069ea <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d006      	beq.n	8006952 <recv_tcp+0x5a>
 8006944:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <recv_tcp+0xfc>)
 8006946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800694a:	492e      	ldr	r1, [pc, #184]	; (8006a04 <recv_tcp+0x10c>)
 800694c:	482b      	ldr	r0, [pc, #172]	; (80069fc <recv_tcp+0x104>)
 800694e:	f00d fe4f 	bl	80145f0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	3310      	adds	r3, #16
 8006956:	4618      	mov	r0, r3
 8006958:	f00c fb34 	bl	8012fc4 <sys_mbox_valid>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10d      	bne.n	800697e <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	891b      	ldrh	r3, [r3, #8]
 800696c:	4619      	mov	r1, r3
 800696e:	68b8      	ldr	r0, [r7, #8]
 8006970:	f006 fd66 	bl	800d440 <tcp_recved>
      pbuf_free(p);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f005 ffb1 	bl	800c8dc <pbuf_free>
    }
    return ERR_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	e035      	b.n	80069ea <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800697e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d011      	beq.n	80069aa <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <recv_tcp+0xb2>
 800698c:	f00c fc2a 	bl	80131e4 <sys_arch_protect>
 8006990:	6178      	str	r0, [r7, #20]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006998:	f113 0f0c 	cmn.w	r3, #12
 800699c:	db02      	blt.n	80069a4 <recv_tcp+0xac>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	721a      	strb	r2, [r3, #8]
 80069a4:	6978      	ldr	r0, [r7, #20]
 80069a6:	f00c fc2b 	bl	8013200 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <recv_tcp+0xc0>
    len = p->tot_len;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	891b      	ldrh	r3, [r3, #8]
 80069b4:	83fb      	strh	r3, [r7, #30]
 80069b6:	e001      	b.n	80069bc <recv_tcp+0xc4>
  } else {
    len = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	3310      	adds	r3, #16
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f00c fa89 	bl	8012eda <sys_mbox_trypost>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d2:	e00a      	b.n	80069ea <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <recv_tcp+0xf0>
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	8bfa      	ldrh	r2, [r7, #30]
 80069e2:	2100      	movs	r1, #0
 80069e4:	69b8      	ldr	r0, [r7, #24]
 80069e6:	4798      	blx	r3
  }

  return ERR_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	080156e4 	.word	0x080156e4
 80069f8:	080157a4 	.word	0x080157a4
 80069fc:	0801573c 	.word	0x0801573c
 8006a00:	080157c8 	.word	0x080157c8
 8006a04:	080157e8 	.word	0x080157e8

08006a08 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <poll_tcp+0x22>
 8006a1c:	4b28      	ldr	r3, [pc, #160]	; (8006ac0 <poll_tcp+0xb8>)
 8006a1e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006a22:	4928      	ldr	r1, [pc, #160]	; (8006ac4 <poll_tcp+0xbc>)
 8006a24:	4828      	ldr	r0, [pc, #160]	; (8006ac8 <poll_tcp+0xc0>)
 8006a26:	f00d fde3 	bl	80145f0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d103      	bne.n	8006a3a <poll_tcp+0x32>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f001 f828 	bl	8007a88 <lwip_netconn_do_writemore>
 8006a38:	e015      	b.n	8006a66 <poll_tcp+0x5e>
  } else if (conn->state == NETCONN_CLOSE) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d111      	bne.n	8006a66 <poll_tcp+0x5e>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <poll_tcp+0x58>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	7a5b      	ldrb	r3, [r3, #9]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <poll_tcp+0x58>
      conn->current_msg->msg.sd.polls_left--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	7a5a      	ldrb	r2, [r3, #9]
 8006a5a:	3a01      	subs	r2, #1
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fb73 	bl	800714c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	7f1b      	ldrb	r3, [r3, #28]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d021      	beq.n	8006ab6 <poll_tcp+0xae>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01d      	beq.n	8006ab6 <poll_tcp+0xae>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006a86:	d316      	bcc.n	8006ab6 <poll_tcp+0xae>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d810      	bhi.n	8006ab6 <poll_tcp+0xae>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	7f1b      	ldrb	r3, [r3, #28]
 8006a98:	f023 0310 	bic.w	r3, r3, #16
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <poll_tcp+0xae>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	080156e4 	.word	0x080156e4
 8006ac4:	08015808 	.word	0x08015808
 8006ac8:	0801573c 	.word	0x0801573c

08006acc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <sent_tcp+0x26>
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <sent_tcp+0x98>)
 8006ae6:	f240 1261 	movw	r2, #353	; 0x161
 8006aea:	491f      	ldr	r1, [pc, #124]	; (8006b68 <sent_tcp+0x9c>)
 8006aec:	481f      	ldr	r0, [pc, #124]	; (8006b6c <sent_tcp+0xa0>)
 8006aee:	f00d fd7f 	bl	80145f0 <iprintf>

  if (conn) {
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d030      	beq.n	8006b5a <sent_tcp+0x8e>
    if (conn->state == NETCONN_WRITE) {
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d103      	bne.n	8006b08 <sent_tcp+0x3c>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006b00:	6978      	ldr	r0, [r7, #20]
 8006b02:	f000 ffc1 	bl	8007a88 <lwip_netconn_do_writemore>
 8006b06:	e006      	b.n	8006b16 <sent_tcp+0x4a>
    } else if (conn->state == NETCONN_CLOSE) {
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d102      	bne.n	8006b16 <sent_tcp+0x4a>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f000 fb1b 	bl	800714c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01d      	beq.n	8006b5a <sent_tcp+0x8e>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b26:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006b2a:	d316      	bcc.n	8006b5a <sent_tcp+0x8e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d810      	bhi.n	8006b5a <sent_tcp+0x8e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	7f1b      	ldrb	r3, [r3, #28]
 8006b3c:	f023 0310 	bic.w	r3, r3, #16
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <sent_tcp+0x8e>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	2102      	movs	r1, #2
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	080156e4 	.word	0x080156e4
 8006b68:	08015808 	.word	0x08015808
 8006b6c:	0801573c 	.word	0x0801573c

08006b70 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <err_tcp+0x24>
 8006b86:	4b6c      	ldr	r3, [pc, #432]	; (8006d38 <err_tcp+0x1c8>)
 8006b88:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006b8c:	496b      	ldr	r1, [pc, #428]	; (8006d3c <err_tcp+0x1cc>)
 8006b8e:	486c      	ldr	r0, [pc, #432]	; (8006d40 <err_tcp+0x1d0>)
 8006b90:	f00d fd2e 	bl	80145f0 <iprintf>

  conn->pcb.tcp = NULL;
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	2200      	movs	r2, #0
 8006b98:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8006ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d114      	bne.n	8006bda <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d018      	beq.n	8006bec <err_tcp+0x7c>
 8006bba:	f00c fb13 	bl	80131e4 <sys_arch_protect>
 8006bbe:	61f8      	str	r0, [r7, #28]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006bc6:	f113 0f0c 	cmn.w	r3, #12
 8006bca:	db02      	blt.n	8006bd2 <err_tcp+0x62>
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2200      	movs	r2, #0
 8006bd0:	721a      	strb	r2, [r3, #8]
 8006bd2:	69f8      	ldr	r0, [r7, #28]
 8006bd4:	f00c fb14 	bl	8013200 <sys_arch_unprotect>
 8006bd8:	e008      	b.n	8006bec <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8006bda:	f00c fb03 	bl	80131e4 <sys_arch_protect>
 8006bde:	61b8      	str	r0, [r7, #24]
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	721a      	strb	r2, [r3, #8]
 8006be6:	69b8      	ldr	r0, [r7, #24]
 8006be8:	f00c fb0a 	bl	8013200 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <err_tcp+0x90>
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bfe:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <err_tcp+0xa4>
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c12:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <err_tcp+0xb8>
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	2200      	movs	r2, #0
 8006c22:	2102      	movs	r1, #2
 8006c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c26:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	3310      	adds	r3, #16
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00c f9c9 	bl	8012fc4 <sys_mbox_valid>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	3310      	adds	r3, #16
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f00c f94b 	bl	8012eda <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	3314      	adds	r3, #20
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f00c f9bb 	bl	8012fc4 <sys_mbox_valid>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	3314      	adds	r3, #20
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f00c f93d 	bl	8012eda <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d007      	beq.n	8006c78 <err_tcp+0x108>
 8006c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d003      	beq.n	8006c78 <err_tcp+0x108>
 8006c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d14d      	bne.n	8006d14 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	7f1b      	ldrb	r3, [r3, #28]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	7f1b      	ldrb	r3, [r3, #28]
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d145      	bne.n	8006d2c <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <err_tcp+0x146>
 8006ca8:	4b23      	ldr	r3, [pc, #140]	; (8006d38 <err_tcp+0x1c8>)
 8006caa:	f240 12b3 	movw	r2, #435	; 0x1b3
 8006cae:	4925      	ldr	r1, [pc, #148]	; (8006d44 <err_tcp+0x1d4>)
 8006cb0:	4823      	ldr	r0, [pc, #140]	; (8006d40 <err_tcp+0x1d0>)
 8006cb2:	f00d fc9d 	bl	80145f0 <iprintf>
      conn->current_msg->err = err;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f00c fa0a 	bl	80130e2 <sys_sem_valid>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <err_tcp+0x172>
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <err_tcp+0x1c8>)
 8006cd6:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8006cda:	491b      	ldr	r1, [pc, #108]	; (8006d48 <err_tcp+0x1d8>)
 8006cdc:	4818      	ldr	r0, [pc, #96]	; (8006d40 <err_tcp+0x1d0>)
 8006cde:	f00d fc87 	bl	80145f0 <iprintf>
      conn->current_msg = NULL;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00e      	beq.n	8006d0c <err_tcp+0x19c>
 8006cee:	f00c fa79 	bl	80131e4 <sys_arch_protect>
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006cfa:	f113 0f0c 	cmn.w	r3, #12
 8006cfe:	db02      	blt.n	8006d06 <err_tcp+0x196>
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	721a      	strb	r2, [r3, #8]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f00c fa7a 	bl	8013200 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8006d0c:	6938      	ldr	r0, [r7, #16]
 8006d0e:	f00c f9ce 	bl	80130ae <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8006d12:	e00b      	b.n	8006d2c <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <err_tcp+0x1be>
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <err_tcp+0x1c8>)
 8006d1e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006d22:	490a      	ldr	r1, [pc, #40]	; (8006d4c <err_tcp+0x1dc>)
 8006d24:	4806      	ldr	r0, [pc, #24]	; (8006d40 <err_tcp+0x1d0>)
 8006d26:	f00d fc63 	bl	80145f0 <iprintf>
  }
}
 8006d2a:	e000      	b.n	8006d2e <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8006d2c:	bf00      	nop
}
 8006d2e:	bf00      	nop
 8006d30:	3728      	adds	r7, #40	; 0x28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	080156e4 	.word	0x080156e4
 8006d3c:	08015808 	.word	0x08015808
 8006d40:	0801573c 	.word	0x0801573c
 8006d44:	08015818 	.word	0x08015818
 8006d48:	08015834 	.word	0x08015834
 8006d4c:	08015850 	.word	0x08015850

08006d50 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f007 fa43 	bl	800e1ec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006d66:	490a      	ldr	r1, [pc, #40]	; (8006d90 <setup_tcp+0x40>)
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f007 fa51 	bl	800e210 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006d6e:	4909      	ldr	r1, [pc, #36]	; (8006d94 <setup_tcp+0x44>)
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f007 fa6f 	bl	800e254 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006d76:	2202      	movs	r2, #2
 8006d78:	4907      	ldr	r1, [pc, #28]	; (8006d98 <setup_tcp+0x48>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f007 fac4 	bl	800e308 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006d80:	4906      	ldr	r1, [pc, #24]	; (8006d9c <setup_tcp+0x4c>)
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f007 fa86 	bl	800e294 <tcp_err>
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	080068f9 	.word	0x080068f9
 8006d94:	08006acd 	.word	0x08006acd
 8006d98:	08006a09 	.word	0x08006a09
 8006d9c:	08006b71 	.word	0x08006b71

08006da0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <pcb_new+0x24>
 8006db6:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <pcb_new+0xc4>)
 8006db8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006dbc:	492a      	ldr	r1, [pc, #168]	; (8006e68 <pcb_new+0xc8>)
 8006dbe:	482b      	ldr	r0, [pc, #172]	; (8006e6c <pcb_new+0xcc>)
 8006dc0:	f00d fc16 	bl	80145f0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d022      	beq.n	8006e18 <pcb_new+0x78>
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d133      	bne.n	8006e3e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681c      	ldr	r4, [r3, #0]
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f00b ff20 	bl	8012c22 <udp_new_ip_type>
 8006de2:	4603      	mov	r3, r0
 8006de4:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d02a      	beq.n	8006e46 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b22      	cmp	r3, #34	; 0x22
 8006df8:	d104      	bne.n	8006e04 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6858      	ldr	r0, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	4917      	ldr	r1, [pc, #92]	; (8006e70 <pcb_new+0xd0>)
 8006e12:	f00b feaa 	bl	8012b6a <udp_recv>
    }
    break;
 8006e16:	e016      	b.n	8006e46 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681c      	ldr	r4, [r3, #0]
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f007 f9d6 	bl	800e1d0 <tcp_new_ip_type>
 8006e24:	4603      	mov	r3, r0
 8006e26:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff ff8a 	bl	8006d50 <setup_tcp>
    }
    break;
 8006e3c:	e005      	b.n	8006e4a <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	22fa      	movs	r2, #250	; 0xfa
 8006e42:	711a      	strb	r2, [r3, #4]
    return;
 8006e44:	e00a      	b.n	8006e5c <pcb_new+0xbc>
    break;
 8006e46:	bf00      	nop
 8006e48:	e000      	b.n	8006e4c <pcb_new+0xac>
    break;
 8006e4a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	22ff      	movs	r2, #255	; 0xff
 8006e5a:	711a      	strb	r2, [r3, #4]
  }
}
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd90      	pop	{r4, r7, pc}
 8006e62:	bf00      	nop
 8006e64:	080156e4 	.word	0x080156e4
 8006e68:	0801586c 	.word	0x0801586c
 8006e6c:	0801573c 	.word	0x0801573c
 8006e70:	080067fd 	.word	0x080067fd

08006e74 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff ff85 	bl	8006da0 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d012      	beq.n	8006ec4 <lwip_netconn_do_newconn+0x50>
 8006e9e:	f00c f9a1 	bl	80131e4 <sys_arch_protect>
 8006ea2:	60b8      	str	r0, [r7, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006eac:	f113 0f0c 	cmn.w	r3, #12
 8006eb0:	db05      	blt.n	8006ebe <lwip_netconn_do_newconn+0x4a>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006ebc:	721a      	strb	r2, [r3, #8]
 8006ebe:	68b8      	ldr	r0, [r7, #8]
 8006ec0:	f00c f99e 	bl	8013200 <sys_arch_unprotect>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f00c f8ef 	bl	80130ae <sys_sem_signal>
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006ee4:	2007      	movs	r0, #7
 8006ee6:	f004 ff4d 	bl	800bd84 <memp_malloc>
 8006eea:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <netconn_alloc+0x1e>
    return NULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e055      	b.n	8006fa2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	79fa      	ldrb	r2, [r7, #7]
 8006f00:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d004      	beq.n	8006f1c <netconn_alloc+0x44>
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d105      	bne.n	8006f22 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8006f16:	2306      	movs	r3, #6
 8006f18:	60fb      	str	r3, [r7, #12]
    break;
 8006f1a:	e00a      	b.n	8006f32 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8006f1c:	2306      	movs	r3, #6
 8006f1e:	60fb      	str	r3, [r7, #12]
    break;
 8006f20:	e007      	b.n	8006f32 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006f22:	4b22      	ldr	r3, [pc, #136]	; (8006fac <netconn_alloc+0xd4>)
 8006f24:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006f28:	4921      	ldr	r1, [pc, #132]	; (8006fb0 <netconn_alloc+0xd8>)
 8006f2a:	4822      	ldr	r0, [pc, #136]	; (8006fb4 <netconn_alloc+0xdc>)
 8006f2c:	f00d fb60 	bl	80145f0 <iprintf>
    goto free_and_return;
 8006f30:	e032      	b.n	8006f98 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3310      	adds	r3, #16
 8006f36:	68f9      	ldr	r1, [r7, #12]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f00b ff89 	bl	8012e50 <sys_mbox_new>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d128      	bne.n	8006f96 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	330c      	adds	r3, #12
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00c f858 	bl	8013000 <sys_sem_new>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	3310      	adds	r3, #16
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f00b ff96 	bl	8012e8c <sys_mbox_free>
    goto free_and_return;
 8006f60:	e01a      	b.n	8006f98 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3314      	adds	r3, #20
 8006f66:	4618      	mov	r0, r3
 8006f68:	f00c f83d 	bl	8012fe6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f78:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	771a      	strb	r2, [r3, #28]
  return conn;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	e005      	b.n	8006fa2 <netconn_alloc+0xca>
    goto free_and_return;
 8006f96:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	2007      	movs	r0, #7
 8006f9c:	f004 ff44 	bl	800be28 <memp_free>
  return NULL;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	080156e4 	.word	0x080156e4
 8006fb0:	0801588c 	.word	0x0801588c
 8006fb4:	0801573c 	.word	0x0801573c

08006fb8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d006      	beq.n	8006fd6 <netconn_free+0x1e>
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <netconn_free+0x80>)
 8006fca:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8006fce:	491b      	ldr	r1, [pc, #108]	; (800703c <netconn_free+0x84>)
 8006fd0:	481b      	ldr	r0, [pc, #108]	; (8007040 <netconn_free+0x88>)
 8006fd2:	f00d fb0d 	bl	80145f0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3310      	adds	r3, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f00b fff2 	bl	8012fc4 <sys_mbox_valid>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <netconn_free+0x3c>
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <netconn_free+0x80>)
 8006fe8:	f240 22e2 	movw	r2, #738	; 0x2e2
 8006fec:	4915      	ldr	r1, [pc, #84]	; (8007044 <netconn_free+0x8c>)
 8006fee:	4814      	ldr	r0, [pc, #80]	; (8007040 <netconn_free+0x88>)
 8006ff0:	f00d fafe 	bl	80145f0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f00b ffe3 	bl	8012fc4 <sys_mbox_valid>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d006      	beq.n	8007012 <netconn_free+0x5a>
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <netconn_free+0x80>)
 8007006:	f240 22e5 	movw	r2, #741	; 0x2e5
 800700a:	490f      	ldr	r1, [pc, #60]	; (8007048 <netconn_free+0x90>)
 800700c:	480c      	ldr	r0, [pc, #48]	; (8007040 <netconn_free+0x88>)
 800700e:	f00d faef 	bl	80145f0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	330c      	adds	r3, #12
 8007016:	4618      	mov	r0, r3
 8007018:	f00c f856 	bl	80130c8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	330c      	adds	r3, #12
 8007020:	4618      	mov	r0, r3
 8007022:	f00c f86f 	bl	8013104 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	2007      	movs	r0, #7
 800702a:	f004 fefd 	bl	800be28 <memp_free>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	080156e4 	.word	0x080156e4
 800703c:	080158b4 	.word	0x080158b4
 8007040:	0801573c 	.word	0x0801573c
 8007044:	080158e4 	.word	0x080158e4
 8007048:	08015920 	.word	0x08015920

0800704c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3310      	adds	r3, #16
 8007058:	4618      	mov	r0, r3
 800705a:	f00b ffb3 	bl	8012fc4 <sys_mbox_valid>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d035      	beq.n	80070d0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007064:	e01e      	b.n	80070a4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800706e:	2b10      	cmp	r3, #16
 8007070:	d114      	bne.n	800709c <netconn_drain+0x50>
        if (mem != NULL) {
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	891b      	ldrh	r3, [r3, #8]
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f006 f9d6 	bl	800d440 <tcp_recved>
          }
          pbuf_free(p);
 8007094:	6978      	ldr	r0, [r7, #20]
 8007096:	f005 fc21 	bl	800c8dc <pbuf_free>
 800709a:	e003      	b.n	80070a4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 f850 	bl	8008144 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3310      	adds	r3, #16
 80070a8:	f107 020c 	add.w	r2, r7, #12
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f00b ff6c 	bl	8012f8c <sys_arch_mbox_tryfetch>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ba:	d1d4      	bne.n	8007066 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3310      	adds	r3, #16
 80070c0:	4618      	mov	r0, r3
 80070c2:	f00b fee3 	bl	8012e8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3310      	adds	r3, #16
 80070ca:	4618      	mov	r0, r3
 80070cc:	f00b ff8b 	bl	8012fe6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3314      	adds	r3, #20
 80070d4:	4618      	mov	r0, r3
 80070d6:	f00b ff75 	bl	8012fc4 <sys_mbox_valid>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02e      	beq.n	800713e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80070e0:	e017      	b.n	8007112 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <netconn_drain+0xfc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80070ee:	6938      	ldr	r0, [r7, #16]
 80070f0:	f7ff ffac 	bl	800704c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	4618      	mov	r0, r3
 8007102:	f006 f941 	bl	800d388 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800710c:	6938      	ldr	r0, [r7, #16]
 800710e:	f7ff ff53 	bl	8006fb8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3314      	adds	r3, #20
 8007116:	f107 020c 	add.w	r2, r7, #12
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f00b ff35 	bl	8012f8c <sys_arch_mbox_tryfetch>
 8007122:	4603      	mov	r3, r0
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007128:	d1db      	bne.n	80070e2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3314      	adds	r3, #20
 800712e:	4618      	mov	r0, r3
 8007130:	f00b feac 	bl	8012e8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3314      	adds	r3, #20
 8007138:	4618      	mov	r0, r3
 800713a:	f00b ff54 	bl	8012fe6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20004020 	.word	0x20004020

0800714c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <lwip_netconn_do_close_internal+0x20>
 800715e:	4ba8      	ldr	r3, [pc, #672]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 8007160:	f240 3243 	movw	r2, #835	; 0x343
 8007164:	49a7      	ldr	r1, [pc, #668]	; (8007404 <lwip_netconn_do_close_internal+0x2b8>)
 8007166:	48a8      	ldr	r0, [pc, #672]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 8007168:	f00d fa42 	bl	80145f0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007174:	2b10      	cmp	r3, #16
 8007176:	d006      	beq.n	8007186 <lwip_netconn_do_close_internal+0x3a>
 8007178:	4ba1      	ldr	r3, [pc, #644]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 800717a:	f44f 7251 	mov.w	r2, #836	; 0x344
 800717e:	49a3      	ldr	r1, [pc, #652]	; (800740c <lwip_netconn_do_close_internal+0x2c0>)
 8007180:	48a1      	ldr	r0, [pc, #644]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 8007182:	f00d fa35 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d006      	beq.n	800719c <lwip_netconn_do_close_internal+0x50>
 800718e:	4b9c      	ldr	r3, [pc, #624]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 8007190:	f240 3245 	movw	r2, #837	; 0x345
 8007194:	499e      	ldr	r1, [pc, #632]	; (8007410 <lwip_netconn_do_close_internal+0x2c4>)
 8007196:	489c      	ldr	r0, [pc, #624]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 8007198:	f00d fa2a 	bl	80145f0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <lwip_netconn_do_close_internal+0x66>
 80071a4:	4b96      	ldr	r3, [pc, #600]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 80071a6:	f240 3246 	movw	r2, #838	; 0x346
 80071aa:	499a      	ldr	r1, [pc, #616]	; (8007414 <lwip_netconn_do_close_internal+0x2c8>)
 80071ac:	4896      	ldr	r0, [pc, #600]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 80071ae:	f00d fa1f 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <lwip_netconn_do_close_internal+0x7c>
 80071ba:	4b91      	ldr	r3, [pc, #580]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 80071bc:	f240 3247 	movw	r2, #839	; 0x347
 80071c0:	4995      	ldr	r1, [pc, #596]	; (8007418 <lwip_netconn_do_close_internal+0x2cc>)
 80071c2:	4891      	ldr	r0, [pc, #580]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 80071c4:	f00d fa14 	bl	80145f0 <iprintf>

  tpcb = conn->pcb.tcp;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	7a1b      	ldrb	r3, [r3, #8]
 80071d4:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d102      	bne.n	80071f2 <lwip_netconn_do_close_internal+0xa6>
    close = 1;
 80071ec:	2301      	movs	r3, #1
 80071ee:	77bb      	strb	r3, [r7, #30]
 80071f0:	e01f      	b.n	8007232 <lwip_netconn_do_close_internal+0xe6>
  } else if (shut_rx &&
 80071f2:	7dbb      	ldrb	r3, [r7, #22]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00e      	beq.n	8007216 <lwip_netconn_do_close_internal+0xca>
             ((tpcb->state == FIN_WAIT_1) ||
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	d007      	beq.n	8007210 <lwip_netconn_do_close_internal+0xc4>
              (tpcb->state == FIN_WAIT_2) ||
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007204:	2b06      	cmp	r3, #6
 8007206:	d003      	beq.n	8007210 <lwip_netconn_do_close_internal+0xc4>
              (tpcb->state == CLOSING))) {
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800720c:	2b08      	cmp	r3, #8
 800720e:	d102      	bne.n	8007216 <lwip_netconn_do_close_internal+0xca>
    close = 1;
 8007210:	2301      	movs	r3, #1
 8007212:	77bb      	strb	r3, [r7, #30]
 8007214:	e00d      	b.n	8007232 <lwip_netconn_do_close_internal+0xe6>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007216:	7d7b      	ldrb	r3, [r7, #21]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <lwip_netconn_do_close_internal+0xe2>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	7e9b      	ldrb	r3, [r3, #26]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <lwip_netconn_do_close_internal+0xe2>
    close = 1;
 8007228:	2301      	movs	r3, #1
 800722a:	77bb      	strb	r3, [r7, #30]
 800722c:	e001      	b.n	8007232 <lwip_netconn_do_close_internal+0xe6>
  } else {
    close = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8007232:	7fbb      	ldrb	r3, [r7, #30]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <lwip_netconn_do_close_internal+0xf4>
    tcp_arg(tpcb, NULL);
 8007238:	2100      	movs	r1, #0
 800723a:	69b8      	ldr	r0, [r7, #24]
 800723c:	f006 ffd6 	bl	800e1ec <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d104      	bne.n	8007252 <lwip_netconn_do_close_internal+0x106>
    tcp_accept(tpcb, NULL);
 8007248:	2100      	movs	r1, #0
 800724a:	69b8      	ldr	r0, [r7, #24]
 800724c:	f007 f844 	bl	800e2d8 <tcp_accept>
 8007250:	e01d      	b.n	800728e <lwip_netconn_do_close_internal+0x142>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8007252:	7dbb      	ldrb	r3, [r7, #22]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <lwip_netconn_do_close_internal+0x11c>
      tcp_recv(tpcb, NULL);
 8007258:	2100      	movs	r1, #0
 800725a:	69b8      	ldr	r0, [r7, #24]
 800725c:	f006 ffd8 	bl	800e210 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007260:	2100      	movs	r1, #0
 8007262:	69b8      	ldr	r0, [r7, #24]
 8007264:	f007 f838 	bl	800e2d8 <tcp_accept>
    }
    if (shut_tx) {
 8007268:	7d7b      	ldrb	r3, [r7, #21]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <lwip_netconn_do_close_internal+0x12a>
      tcp_sent(tpcb, NULL);
 800726e:	2100      	movs	r1, #0
 8007270:	69b8      	ldr	r0, [r7, #24]
 8007272:	f006 ffef 	bl	800e254 <tcp_sent>
    }
    if (close) {
 8007276:	7fbb      	ldrb	r3, [r7, #30]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <lwip_netconn_do_close_internal+0x142>
      tcp_poll(tpcb, NULL, 0);
 800727c:	2200      	movs	r2, #0
 800727e:	2100      	movs	r1, #0
 8007280:	69b8      	ldr	r0, [r7, #24]
 8007282:	f007 f841 	bl	800e308 <tcp_poll>
      tcp_err(tpcb, NULL);
 8007286:	2100      	movs	r1, #0
 8007288:	69b8      	ldr	r0, [r7, #24]
 800728a:	f007 f803 	bl	800e294 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800728e:	7fbb      	ldrb	r3, [r7, #30]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <lwip_netconn_do_close_internal+0x154>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8007294:	69b8      	ldr	r0, [r7, #24]
 8007296:	f005 ff65 	bl	800d164 <tcp_close>
 800729a:	4603      	mov	r3, r0
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e007      	b.n	80072b0 <lwip_netconn_do_close_internal+0x164>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80072a0:	7dbb      	ldrb	r3, [r7, #22]
 80072a2:	7d7a      	ldrb	r2, [r7, #21]
 80072a4:	4619      	mov	r1, r3
 80072a6:	69b8      	ldr	r0, [r7, #24]
 80072a8:	f005 ff74 	bl	800d194 <tcp_shutdown>
 80072ac:	4603      	mov	r3, r0
 80072ae:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80072b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <lwip_netconn_do_close_internal+0x172>
    close_finished = 1;
 80072b8:	2301      	movs	r3, #1
 80072ba:	777b      	strb	r3, [r7, #29]
 80072bc:	e016      	b.n	80072ec <lwip_netconn_do_close_internal+0x1a0>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80072be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c6:	d10f      	bne.n	80072e8 <lwip_netconn_do_close_internal+0x19c>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	7a5b      	ldrb	r3, [r3, #9]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10c      	bne.n	80072ec <lwip_netconn_do_close_internal+0x1a0>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80072d2:	2301      	movs	r3, #1
 80072d4:	777b      	strb	r3, [r7, #29]
        if (close) {
 80072d6:	7fbb      	ldrb	r3, [r7, #30]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <lwip_netconn_do_close_internal+0x1a0>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80072dc:	69b8      	ldr	r0, [r7, #24]
 80072de:	f006 f853 	bl	800d388 <tcp_abort>
          err = ERR_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e001      	b.n	80072ec <lwip_netconn_do_close_internal+0x1a0>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 80072ec:	7f7b      	ldrb	r3, [r7, #29]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d053      	beq.n	800739a <lwip_netconn_do_close_internal+0x24e>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	330c      	adds	r3, #12
 80072fa:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	7ffa      	ldrb	r2, [r7, #31]
 8007302:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007310:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d129      	bne.n	800736c <lwip_netconn_do_close_internal+0x220>
      if (close) {
 8007318:	7fbb      	ldrb	r3, [r7, #30]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <lwip_netconn_do_close_internal+0x1ec>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <lwip_netconn_do_close_internal+0x1ec>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	2200      	movs	r2, #0
 8007332:	2104      	movs	r1, #4
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
      }
      if (shut_rx) {
 8007338:	7dbb      	ldrb	r3, [r7, #22]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <lwip_netconn_do_close_internal+0x206>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <lwip_netconn_do_close_internal+0x206>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
      }
      if (shut_tx) {
 8007352:	7d7b      	ldrb	r3, [r7, #21]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <lwip_netconn_do_close_internal+0x220>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <lwip_netconn_do_close_internal+0x220>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	2200      	movs	r2, #0
 8007366:	2102      	movs	r1, #2
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <lwip_netconn_do_close_internal+0x244>
 8007372:	f00b ff37 	bl	80131e4 <sys_arch_protect>
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800737e:	f113 0f0c 	cmn.w	r3, #12
 8007382:	db02      	blt.n	800738a <lwip_netconn_do_close_internal+0x23e>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7ffa      	ldrb	r2, [r7, #31]
 8007388:	721a      	strb	r2, [r3, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f00b ff38 	bl	8013200 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8007390:	6938      	ldr	r0, [r7, #16]
 8007392:	f00b fe8c 	bl	80130ae <sys_sem_signal>
    }
    return ERR_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e02e      	b.n	80073f8 <lwip_netconn_do_close_internal+0x2ac>
  }
  if (!close_finished) {
 800739a:	7f7b      	ldrb	r3, [r7, #29]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11e      	bne.n	80073de <lwip_netconn_do_close_internal+0x292>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	7d1b      	ldrb	r3, [r3, #20]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d106      	bne.n	80073b6 <lwip_netconn_do_close_internal+0x26a>
 80073a8:	4b15      	ldr	r3, [pc, #84]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 80073aa:	f240 32e3 	movw	r2, #995	; 0x3e3
 80073ae:	491b      	ldr	r1, [pc, #108]	; (800741c <lwip_netconn_do_close_internal+0x2d0>)
 80073b0:	4815      	ldr	r0, [pc, #84]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 80073b2:	f00d f91d 	bl	80145f0 <iprintf>
    if (shut_tx) {
 80073b6:	7d7b      	ldrb	r3, [r7, #21]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <lwip_netconn_do_close_internal+0x278>
      tcp_sent(tpcb, sent_tcp);
 80073bc:	4918      	ldr	r1, [pc, #96]	; (8007420 <lwip_netconn_do_close_internal+0x2d4>)
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f006 ff48 	bl	800e254 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80073c4:	2201      	movs	r2, #1
 80073c6:	4917      	ldr	r1, [pc, #92]	; (8007424 <lwip_netconn_do_close_internal+0x2d8>)
 80073c8:	69b8      	ldr	r0, [r7, #24]
 80073ca:	f006 ff9d 	bl	800e308 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80073ce:	4916      	ldr	r1, [pc, #88]	; (8007428 <lwip_netconn_do_close_internal+0x2dc>)
 80073d0:	69b8      	ldr	r0, [r7, #24]
 80073d2:	f006 ff5f 	bl	800e294 <tcp_err>
    tcp_arg(tpcb, conn);
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	69b8      	ldr	r0, [r7, #24]
 80073da:	f006 ff07 	bl	800e1ec <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80073de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d106      	bne.n	80073f4 <lwip_netconn_do_close_internal+0x2a8>
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <lwip_netconn_do_close_internal+0x2b4>)
 80073e8:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80073ec:	490f      	ldr	r1, [pc, #60]	; (800742c <lwip_netconn_do_close_internal+0x2e0>)
 80073ee:	4806      	ldr	r0, [pc, #24]	; (8007408 <lwip_netconn_do_close_internal+0x2bc>)
 80073f0:	f00d f8fe 	bl	80145f0 <iprintf>
  return err;
 80073f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	080156e4 	.word	0x080156e4
 8007404:	0801595c 	.word	0x0801595c
 8007408:	0801573c 	.word	0x0801573c
 800740c:	0801596c 	.word	0x0801596c
 8007410:	0801598c 	.word	0x0801598c
 8007414:	080159b0 	.word	0x080159b0
 8007418:	08015818 	.word	0x08015818
 800741c:	080159c4 	.word	0x080159c4
 8007420:	08006acd 	.word	0x08006acd
 8007424:	08006a09 	.word	0x08006a09
 8007428:	08006b71 	.word	0x08006b71
 800742c:	080159e8 	.word	0x080159e8

08007430 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007444:	7cfb      	ldrb	r3, [r7, #19]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <lwip_netconn_do_delconn+0x36>
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007454:	2b10      	cmp	r3, #16
 8007456:	d006      	beq.n	8007466 <lwip_netconn_do_delconn+0x36>
 8007458:	4b5d      	ldr	r3, [pc, #372]	; (80075d0 <lwip_netconn_do_delconn+0x1a0>)
 800745a:	f240 4201 	movw	r2, #1025	; 0x401
 800745e:	495d      	ldr	r1, [pc, #372]	; (80075d4 <lwip_netconn_do_delconn+0x1a4>)
 8007460:	485d      	ldr	r0, [pc, #372]	; (80075d8 <lwip_netconn_do_delconn+0x1a8>)
 8007462:	f00d f8c5 	bl	80145f0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <lwip_netconn_do_delconn+0x48>
 800746c:	7cfb      	ldrb	r3, [r7, #19]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d002      	beq.n	8007478 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8007472:	7cfb      	ldrb	r3, [r7, #19]
 8007474:	2b03      	cmp	r3, #3
 8007476:	d109      	bne.n	800748c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8007478:	7cfb      	ldrb	r3, [r7, #19]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d10a      	bne.n	8007494 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	7f1b      	ldrb	r3, [r3, #28]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	22fb      	movs	r2, #251	; 0xfb
 8007490:	711a      	strb	r2, [r3, #4]
 8007492:	e073      	b.n	800757c <lwip_netconn_do_delconn+0x14c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8007494:	7cfb      	ldrb	r3, [r7, #19]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d10d      	bne.n	80074b6 <lwip_netconn_do_delconn+0x86>
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	7f1b      	ldrb	r3, [r3, #28]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <lwip_netconn_do_delconn+0x86>
 80074a8:	4b49      	ldr	r3, [pc, #292]	; (80075d0 <lwip_netconn_do_delconn+0x1a0>)
 80074aa:	f240 421f 	movw	r2, #1055	; 0x41f
 80074ae:	494b      	ldr	r1, [pc, #300]	; (80075dc <lwip_netconn_do_delconn+0x1ac>)
 80074b0:	4849      	ldr	r0, [pc, #292]	; (80075d8 <lwip_netconn_do_delconn+0x1a8>)
 80074b2:	f00d f89d 	bl	80145f0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fdc3 	bl	800704c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d03b      	beq.n	8007548 <lwip_netconn_do_delconn+0x118>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d00e      	beq.n	80074fc <lwip_netconn_do_delconn+0xcc>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d000      	beq.n	80074e4 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80074e2:	e02d      	b.n	8007540 <lwip_netconn_do_delconn+0x110>
        msg->conn->pcb.udp->recv_arg = NULL;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f00b fb4b 	bl	8012b90 <udp_remove>
        break;
 80074fa:	e021      	b.n	8007540 <lwip_netconn_do_delconn+0x110>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <lwip_netconn_do_delconn+0xe0>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <lwip_netconn_do_delconn+0xee>
 8007510:	4b2f      	ldr	r3, [pc, #188]	; (80075d0 <lwip_netconn_do_delconn+0x1a0>)
 8007512:	f240 4235 	movw	r2, #1077	; 0x435
 8007516:	4932      	ldr	r1, [pc, #200]	; (80075e0 <lwip_netconn_do_delconn+0x1b0>)
 8007518:	482f      	ldr	r0, [pc, #188]	; (80075d8 <lwip_netconn_do_delconn+0x1a8>)
 800751a:	f00d f869 	bl	80145f0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2204      	movs	r2, #4
 8007524:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2203      	movs	r2, #3
 800752a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	625a      	str	r2, [r3, #36]	; 0x24
        lwip_netconn_do_close_internal(msg->conn);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fe07 	bl	800714c <lwip_netconn_do_close_internal>
        return;
 800753e:	e043      	b.n	80075c8 <lwip_netconn_do_delconn+0x198>
      }
      msg->conn->pcb.tcp = NULL;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <lwip_netconn_do_delconn+0x132>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	6810      	ldr	r0, [r2, #0]
 800755c:	2200      	movs	r2, #0
 800755e:	2100      	movs	r1, #0
 8007560:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <lwip_netconn_do_delconn+0x14c>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	6810      	ldr	r0, [r2, #0]
 8007576:	2200      	movs	r2, #0
 8007578:	2102      	movs	r1, #2
 800757a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	4618      	mov	r0, r3
 8007584:	f00b fdad 	bl	80130e2 <sys_sem_valid>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01c      	beq.n	80075c8 <lwip_netconn_do_delconn+0x198>
    TCPIP_APIMSG_ACK(msg);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d012      	beq.n	80075bc <lwip_netconn_do_delconn+0x18c>
 8007596:	f00b fe25 	bl	80131e4 <sys_arch_protect>
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80075a4:	f113 0f0c 	cmn.w	r3, #12
 80075a8:	db05      	blt.n	80075b6 <lwip_netconn_do_delconn+0x186>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80075b4:	721a      	strb	r2, [r3, #8]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f00b fe22 	bl	8013200 <sys_arch_unprotect>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	4618      	mov	r0, r3
 80075c4:	f00b fd73 	bl	80130ae <sys_sem_signal>
  }
}
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	080156e4 	.word	0x080156e4
 80075d4:	080159f8 	.word	0x080159f8
 80075d8:	0801573c 	.word	0x0801573c
 80075dc:	08015a0c 	.word	0x08015a0c
 80075e0:	08015a2c 	.word	0x08015a2c

080075e4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007600:	f06f 0305 	mvn.w	r3, #5
 8007604:	e082      	b.n	800770c <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	2b03      	cmp	r3, #3
 800760c:	d006      	beq.n	800761c <lwip_netconn_do_connected+0x38>
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <lwip_netconn_do_connected+0x130>)
 8007610:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8007614:	4940      	ldr	r1, [pc, #256]	; (8007718 <lwip_netconn_do_connected+0x134>)
 8007616:	4841      	ldr	r0, [pc, #260]	; (800771c <lwip_netconn_do_connected+0x138>)
 8007618:	f00c ffea 	bl	80145f0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10c      	bne.n	800763e <lwip_netconn_do_connected+0x5a>
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	7f1b      	ldrb	r3, [r3, #28]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <lwip_netconn_do_connected+0x5a>
 8007630:	4b38      	ldr	r3, [pc, #224]	; (8007714 <lwip_netconn_do_connected+0x130>)
 8007632:	f240 429a 	movw	r2, #1178	; 0x49a
 8007636:	493a      	ldr	r1, [pc, #232]	; (8007720 <lwip_netconn_do_connected+0x13c>)
 8007638:	4838      	ldr	r0, [pc, #224]	; (800771c <lwip_netconn_do_connected+0x138>)
 800763a:	f00c ffd9 	bl	80145f0 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	79fa      	ldrb	r2, [r7, #7]
 800764c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007660:	2b10      	cmp	r3, #16
 8007662:	d106      	bne.n	8007672 <lwip_netconn_do_connected+0x8e>
 8007664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800766c:	69b8      	ldr	r0, [r7, #24]
 800766e:	f7ff fb6f 	bl	8006d50 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	7f1b      	ldrb	r3, [r3, #28]
 8007676:	f003 0304 	and.w	r3, r3, #4
 800767a:	2b00      	cmp	r3, #0
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	7f1b      	ldrb	r3, [r3, #28]
 800768a:	f023 0304 	bic.w	r3, r3, #4
 800768e:	b2da      	uxtb	r2, r3
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <lwip_netconn_do_connected+0xbc>
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10c      	bne.n	80076ba <lwip_netconn_do_connected+0xd6>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <lwip_netconn_do_connected+0xc8>
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <lwip_netconn_do_connected+0xd6>
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <lwip_netconn_do_connected+0x130>)
 80076ae:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80076b2:	491c      	ldr	r1, [pc, #112]	; (8007724 <lwip_netconn_do_connected+0x140>)
 80076b4:	4819      	ldr	r0, [pc, #100]	; (800771c <lwip_netconn_do_connected+0x138>)
 80076b6:	f00c ff9b 	bl	80145f0 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2200      	movs	r2, #0
 80076be:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2200      	movs	r2, #0
 80076c4:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00e      	beq.n	80076ea <lwip_netconn_do_connected+0x106>
 80076cc:	f00b fd8a 	bl	80131e4 <sys_arch_protect>
 80076d0:	6138      	str	r0, [r7, #16]
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80076d8:	f113 0f0c 	cmn.w	r3, #12
 80076dc:	db02      	blt.n	80076e4 <lwip_netconn_do_connected+0x100>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2200      	movs	r2, #0
 80076e2:	721a      	strb	r2, [r3, #8]
 80076e4:	6938      	ldr	r0, [r7, #16]
 80076e6:	f00b fd8b 	bl	8013200 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <lwip_netconn_do_connected+0x11a>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	2200      	movs	r2, #0
 80076f8:	2102      	movs	r1, #2
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	4798      	blx	r3

  if (was_blocking) {
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8007704:	69f8      	ldr	r0, [r7, #28]
 8007706:	f00b fcd2 	bl	80130ae <sys_sem_signal>
  }
  return ERR_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	080156e4 	.word	0x080156e4
 8007718:	08015a48 	.word	0x08015a48
 800771c:	0801573c 	.word	0x0801573c
 8007720:	08015a68 	.word	0x08015a68
 8007724:	08015aa8 	.word	0x08015aa8

08007728 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	22f1      	movs	r2, #241	; 0xf1
 8007742:	711a      	strb	r2, [r3, #4]
 8007744:	e07e      	b.n	8007844 <lwip_netconn_do_connect+0x11c>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007750:	2b10      	cmp	r3, #16
 8007752:	d010      	beq.n	8007776 <lwip_netconn_do_connect+0x4e>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d169      	bne.n	800782c <lwip_netconn_do_connect+0x104>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6858      	ldr	r0, [r3, #4]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6899      	ldr	r1, [r3, #8]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	899b      	ldrh	r3, [r3, #12]
 8007766:	461a      	mov	r2, r3
 8007768:	f00b f992 	bl	8012a90 <udp_connect>
 800776c:	4603      	mov	r3, r0
 800776e:	461a      	mov	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	711a      	strb	r2, [r3, #4]
      break;
 8007774:	e066      	b.n	8007844 <lwip_netconn_do_connect+0x11c>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b03      	cmp	r3, #3
 800777e:	d103      	bne.n	8007788 <lwip_netconn_do_connect+0x60>
        msg->err = ERR_ALREADY;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	22f7      	movs	r2, #247	; 0xf7
 8007784:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 8007786:	e05c      	b.n	8007842 <lwip_netconn_do_connect+0x11a>
      } else if (msg->conn->state != NETCONN_NONE) {
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <lwip_netconn_do_connect+0x72>
        msg->err = ERR_ISCONN;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	22f6      	movs	r2, #246	; 0xf6
 8007796:	711a      	strb	r2, [r3, #4]
      break;
 8007798:	e053      	b.n	8007842 <lwip_netconn_do_connect+0x11a>
        setup_tcp(msg->conn);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fad6 	bl	8006d50 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6858      	ldr	r0, [r3, #4]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	6899      	ldr	r1, [r3, #8]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	899a      	ldrh	r2, [r3, #12]
 80077b2:	4b34      	ldr	r3, [pc, #208]	; (8007884 <lwip_netconn_do_connect+0x15c>)
 80077b4:	f005 fee2 	bl	800d57c <tcp_connect>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d13b      	bne.n	8007842 <lwip_netconn_do_connect+0x11a>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	7f1b      	ldrb	r3, [r3, #28]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2203      	movs	r2, #3
 80077e6:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80077e8:	7cfb      	ldrb	r3, [r7, #19]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <lwip_netconn_do_connect+0xda>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	7f12      	ldrb	r2, [r2, #28]
 80077f8:	f042 0204 	orr.w	r2, r2, #4
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	771a      	strb	r2, [r3, #28]
 8007800:	e008      	b.n	8007814 <lwip_netconn_do_connect+0xec>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	7f12      	ldrb	r2, [r2, #28]
 800780c:	f022 0204 	bic.w	r2, r2, #4
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8007814:	7cfb      	ldrb	r3, [r7, #19]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <lwip_netconn_do_connect+0xfa>
            msg->err = ERR_INPROGRESS;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	22fb      	movs	r2, #251	; 0xfb
 800781e:	711a      	strb	r2, [r3, #4]
      break;
 8007820:	e00f      	b.n	8007842 <lwip_netconn_do_connect+0x11a>
            msg->conn->current_msg = msg;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	625a      	str	r2, [r3, #36]	; 0x24
            return;
 800782a:	e028      	b.n	800787e <lwip_netconn_do_connect+0x156>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <lwip_netconn_do_connect+0x160>)
 800782e:	f240 42f2 	movw	r2, #1266	; 0x4f2
 8007832:	4916      	ldr	r1, [pc, #88]	; (800788c <lwip_netconn_do_connect+0x164>)
 8007834:	4816      	ldr	r0, [pc, #88]	; (8007890 <lwip_netconn_do_connect+0x168>)
 8007836:	f00c fedb 	bl	80145f0 <iprintf>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	22fa      	movs	r2, #250	; 0xfa
 800783e:	711a      	strb	r2, [r3, #4]
      break;
 8007840:	e000      	b.n	8007844 <lwip_netconn_do_connect+0x11c>
      break;
 8007842:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d012      	beq.n	8007872 <lwip_netconn_do_connect+0x14a>
 800784c:	f00b fcca 	bl	80131e4 <sys_arch_protect>
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800785a:	f113 0f0c 	cmn.w	r3, #12
 800785e:	db05      	blt.n	800786c <lwip_netconn_do_connect+0x144>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800786a:	721a      	strb	r2, [r3, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f00b fcc7 	bl	8013200 <sys_arch_unprotect>
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	4618      	mov	r0, r3
 800787a:	f00b fc18 	bl	80130ae <sys_sem_signal>
}
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	080075e5 	.word	0x080075e5
 8007888:	080156e4 	.word	0x080156e4
 800788c:	08015ac8 	.word	0x08015ac8
 8007890:	0801573c 	.word	0x0801573c

08007894 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d109      	bne.n	80078c2 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f00b f941 	bl	8012b3c <udp_disconnect>
    msg->err = ERR_OK;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	711a      	strb	r2, [r3, #4]
 80078c0:	e002      	b.n	80078c8 <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22fa      	movs	r2, #250	; 0xfa
 80078c6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d012      	beq.n	80078f6 <lwip_netconn_do_disconnect+0x62>
 80078d0:	f00b fc88 	bl	80131e4 <sys_arch_protect>
 80078d4:	60b8      	str	r0, [r7, #8]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80078de:	f113 0f0c 	cmn.w	r3, #12
 80078e2:	db05      	blt.n	80078f0 <lwip_netconn_do_disconnect+0x5c>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80078ee:	721a      	strb	r2, [r3, #8]
 80078f0:	68b8      	ldr	r0, [r7, #8]
 80078f2:	f00b fc85 	bl	8013200 <sys_arch_unprotect>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	4618      	mov	r0, r3
 80078fe:	f00b fbd6 	bl	80130ae <sys_sem_signal>
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800791e:	f113 0f0c 	cmn.w	r3, #12
 8007922:	da06      	bge.n	8007932 <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	711a      	strb	r2, [r3, #4]
 8007930:	e037      	b.n	80079a2 <lwip_netconn_do_send+0x98>
  } else {
    msg->err = ERR_CONN;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22f5      	movs	r2, #245	; 0xf5
 8007936:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02f      	beq.n	80079a2 <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800794c:	2b20      	cmp	r3, #32
 800794e:	d000      	beq.n	8007952 <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 8007950:	e027      	b.n	80079a2 <lwip_netconn_do_send+0x98>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f00a ff06 	bl	801277c <udp_send>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	711a      	strb	r2, [r3, #4]
        break;
 8007978:	e012      	b.n	80079a0 <lwip_netconn_do_send+0x96>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6858      	ldr	r0, [r3, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	6819      	ldr	r1, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f103 0208 	add.w	r2, r3, #8
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	899b      	ldrh	r3, [r3, #12]
 8007994:	f00a ff0a 	bl	80127ac <udp_sendto>
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	711a      	strb	r2, [r3, #4]
        break;
 80079a0:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <lwip_netconn_do_send+0xc6>
 80079aa:	f00b fc1b 	bl	80131e4 <sys_arch_protect>
 80079ae:	60b8      	str	r0, [r7, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80079b8:	f113 0f0c 	cmn.w	r3, #12
 80079bc:	db05      	blt.n	80079ca <lwip_netconn_do_send+0xc0>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80079c8:	721a      	strb	r2, [r3, #8]
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f00b fc18 	bl	8013200 <sys_arch_unprotect>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	4618      	mov	r0, r3
 80079d8:	f00b fb69 	bl	80130ae <sys_sem_signal>
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2200      	movs	r2, #0
 80079f4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d022      	beq.n	8007a46 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d11b      	bne.n	8007a46 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1a:	d202      	bcs.n	8007a22 <lwip_netconn_do_recv+0x3e>
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	e001      	b.n	8007a26 <lwip_netconn_do_recv+0x42>
 8007a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a26:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	89fa      	ldrh	r2, [r7, #14]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f005 fd04 	bl	800d440 <tcp_recved>
        remaining -= recved;
 8007a38:	89fb      	ldrh	r3, [r7, #14]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1e6      	bne.n	8007a14 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d012      	beq.n	8007a74 <lwip_netconn_do_recv+0x90>
 8007a4e:	f00b fbc9 	bl	80131e4 <sys_arch_protect>
 8007a52:	60b8      	str	r0, [r7, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007a5c:	f113 0f0c 	cmn.w	r3, #12
 8007a60:	db05      	blt.n	8007a6e <lwip_netconn_do_recv+0x8a>
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007a6c:	721a      	strb	r2, [r3, #8]
 8007a6e:	68b8      	ldr	r0, [r7, #8]
 8007a70:	f00b fbc6 	bl	8013200 <sys_arch_unprotect>
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f00b fb17 	bl	80130ae <sys_sem_signal>
}
 8007a80:	bf00      	nop
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <lwip_netconn_do_writemore+0x22>
 8007a9c:	4ba2      	ldr	r3, [pc, #648]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007a9e:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8007aa2:	49a2      	ldr	r1, [pc, #648]	; (8007d2c <lwip_netconn_do_writemore+0x2a4>)
 8007aa4:	48a2      	ldr	r0, [pc, #648]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007aa6:	f00c fda3 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d006      	beq.n	8007ac0 <lwip_netconn_do_writemore+0x38>
 8007ab2:	4b9d      	ldr	r3, [pc, #628]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007ab4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8007ab8:	499e      	ldr	r1, [pc, #632]	; (8007d34 <lwip_netconn_do_writemore+0x2ac>)
 8007aba:	489d      	ldr	r0, [pc, #628]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007abc:	f00c fd98 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <lwip_netconn_do_writemore+0x4e>
 8007ac8:	4b97      	ldr	r3, [pc, #604]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007aca:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8007ace:	499a      	ldr	r1, [pc, #616]	; (8007d38 <lwip_netconn_do_writemore+0x2b0>)
 8007ad0:	4897      	ldr	r0, [pc, #604]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007ad2:	f00c fd8d 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <lwip_netconn_do_writemore+0x64>
 8007ade:	4b92      	ldr	r3, [pc, #584]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007ae0:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8007ae4:	4995      	ldr	r1, [pc, #596]	; (8007d3c <lwip_netconn_do_writemore+0x2b4>)
 8007ae6:	4892      	ldr	r0, [pc, #584]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007ae8:	f00c fd82 	bl	80145f0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1a      	ldr	r2, [r3, #32]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d306      	bcc.n	8007b08 <lwip_netconn_do_writemore+0x80>
 8007afa:	4b8b      	ldr	r3, [pc, #556]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007afc:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8007b00:	498f      	ldr	r1, [pc, #572]	; (8007d40 <lwip_netconn_do_writemore+0x2b8>)
 8007b02:	488b      	ldr	r0, [pc, #556]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007b04:	f00c fd74 	bl	80145f0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	7c1b      	ldrb	r3, [r3, #16]
 8007b0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7f1b      	ldrb	r3, [r3, #28]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <lwip_netconn_do_writemore+0xa2>
 8007b1e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <lwip_netconn_do_writemore+0xa6>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <lwip_netconn_do_writemore+0xa8>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	4413      	add	r3, r2
 8007b40:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b56:	d309      	bcc.n	8007b6c <lwip_netconn_do_writemore+0xe4>
      len = 0xffff;
 8007b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8007b5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b62:	f043 0302 	orr.w	r3, r3, #2
 8007b66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b6a:	e001      	b.n	8007b70 <lwip_netconn_do_writemore+0xe8>
    } else {
      len = (u16_t)diff;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b78:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8007b7a:	8afa      	ldrh	r2, [r7, #22]
 8007b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d212      	bcs.n	8007ba8 <lwip_netconn_do_writemore+0x120>
      /* don't try to write more than sendbuf */
      len = available;
 8007b82:	8afb      	ldrh	r3, [r7, #22]
 8007b84:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8007b86:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <lwip_netconn_do_writemore+0x114>
        if (!len) {
 8007b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <lwip_netconn_do_writemore+0x120>
          err = ERR_WOULDBLOCK;
 8007b94:	23f9      	movs	r3, #249	; 0xf9
 8007b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8007b9a:	e029      	b.n	8007bf0 <lwip_netconn_do_writemore+0x168>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ba0:	f043 0302 	orr.w	r3, r3, #2
 8007ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bae:	441a      	add	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d906      	bls.n	8007bc8 <lwip_netconn_do_writemore+0x140>
 8007bba:	4b5b      	ldr	r3, [pc, #364]	; (8007d28 <lwip_netconn_do_writemore+0x2a0>)
 8007bbc:	f240 6213 	movw	r2, #1555	; 0x613
 8007bc0:	4960      	ldr	r1, [pc, #384]	; (8007d44 <lwip_netconn_do_writemore+0x2bc>)
 8007bc2:	485b      	ldr	r0, [pc, #364]	; (8007d30 <lwip_netconn_do_writemore+0x2a8>)
 8007bc4:	f00c fd14 	bl	80145f0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6858      	ldr	r0, [r3, #4]
 8007bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bd2:	69f9      	ldr	r1, [r7, #28]
 8007bd4:	f009 f94a 	bl	8010e6c <tcp_write>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007bde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <lwip_netconn_do_writemore+0x168>
 8007be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bee:	d132      	bne.n	8007c56 <lwip_netconn_do_writemore+0x1ce>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8007bf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d017      	beq.n	8007c28 <lwip_netconn_do_writemore+0x1a0>
 8007bf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d211      	bcs.n	8007c28 <lwip_netconn_do_writemore+0x1a0>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <lwip_netconn_do_writemore+0x190>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c12:	2103      	movs	r1, #3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7f1b      	ldrb	r3, [r3, #28]
 8007c1c:	f043 0310 	orr.w	r3, r3, #16
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	771a      	strb	r2, [r3, #28]
 8007c26:	e016      	b.n	8007c56 <lwip_netconn_do_writemore+0x1ce>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c30:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007c34:	d305      	bcc.n	8007c42 <lwip_netconn_do_writemore+0x1ba>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d909      	bls.n	8007c56 <lwip_netconn_do_writemore+0x1ce>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <lwip_netconn_do_writemore+0x1ce>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c50:	2103      	movs	r1, #3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8007c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d134      	bne.n	8007cc8 <lwip_netconn_do_writemore+0x240>
      err_t out_err;
      conn->write_offset += len;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c64:	441a      	add	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d003      	beq.n	8007c80 <lwip_netconn_do_writemore+0x1f8>
 8007c78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <lwip_netconn_do_writemore+0x208>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6a12      	ldr	r2, [r2, #32]
 8007c88:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f009 fd9f 	bl	80117d8 <tcp_output>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007c9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007ca2:	f113 0f0c 	cmn.w	r3, #12
 8007ca6:	db04      	blt.n	8007cb2 <lwip_netconn_do_writemore+0x22a>
 8007ca8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007cac:	f113 0f04 	cmn.w	r3, #4
 8007cb0:	d151      	bne.n	8007d56 <lwip_netconn_do_writemore+0x2ce>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007cb2:	7d7b      	ldrb	r3, [r7, #21]
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	60da      	str	r2, [r3, #12]
 8007cc6:	e046      	b.n	8007d56 <lwip_netconn_do_writemore+0x2ce>
      }
    } else if (err == ERR_MEM) {
 8007cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd0:	d13a      	bne.n	8007d48 <lwip_netconn_do_writemore+0x2c0>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f009 fd7e 	bl	80117d8 <tcp_output>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007ce0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007ce4:	f113 0f0c 	cmn.w	r3, #12
 8007ce8:	db04      	blt.n	8007cf4 <lwip_netconn_do_writemore+0x26c>
 8007cea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007cee:	f113 0f04 	cmn.w	r3, #4
 8007cf2:	d10a      	bne.n	8007d0a <lwip_netconn_do_writemore+0x282>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007cf4:	7d3b      	ldrb	r3, [r7, #20]
 8007cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	2200      	movs	r2, #0
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e025      	b.n	8007d56 <lwip_netconn_do_writemore+0x2ce>
      } else if (dontblock) {
 8007d0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d021      	beq.n	8007d56 <lwip_netconn_do_writemore+0x2ce>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8007d12:	23f9      	movs	r3, #249	; 0xf9
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2200      	movs	r2, #0
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	e016      	b.n	8007d56 <lwip_netconn_do_writemore+0x2ce>
 8007d28:	080156e4 	.word	0x080156e4
 8007d2c:	08015808 	.word	0x08015808
 8007d30:	0801573c 	.word	0x0801573c
 8007d34:	08015ae0 	.word	0x08015ae0
 8007d38:	08015818 	.word	0x08015818
 8007d3c:	08015b00 	.word	0x08015b00
 8007d40:	08015b18 	.word	0x08015b18
 8007d44:	08015b4c 	.word	0x08015b4c
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8007d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d028      	beq.n	8007db0 <lwip_netconn_do_writemore+0x328>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	330c      	adds	r3, #12
 8007d66:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d70:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00f      	beq.n	8007daa <lwip_netconn_do_writemore+0x322>
 8007d8a:	f00b fa2b 	bl	80131e4 <sys_arch_protect>
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007d96:	f113 0f0c 	cmn.w	r3, #12
 8007d9a:	db03      	blt.n	8007da4 <lwip_netconn_do_writemore+0x31c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007da2:	721a      	strb	r2, [r3, #8]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f00b fa2b 	bl	8013200 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f00b f97f 	bl	80130ae <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3728      	adds	r7, #40	; 0x28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop

08007dbc <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dd0:	f113 0f0c 	cmn.w	r3, #12
 8007dd4:	da06      	bge.n	8007de4 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	711a      	strb	r2, [r3, #4]
 8007de2:	e049      	b.n	8007e78 <lwip_netconn_do_write+0xbc>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d13f      	bne.n	8007e72 <lwip_netconn_do_write+0xb6>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22fb      	movs	r2, #251	; 0xfb
 8007e00:	711a      	strb	r2, [r3, #4]
 8007e02:	e039      	b.n	8007e78 <lwip_netconn_do_write+0xbc>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d02d      	beq.n	8007e6a <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2201      	movs	r2, #1
 8007e14:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <lwip_netconn_do_write+0x6e>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <lwip_netconn_do_write+0x7c>
 8007e2a:	4b23      	ldr	r3, [pc, #140]	; (8007eb8 <lwip_netconn_do_write+0xfc>)
 8007e2c:	f240 6283 	movw	r2, #1667	; 0x683
 8007e30:	4922      	ldr	r1, [pc, #136]	; (8007ebc <lwip_netconn_do_write+0x100>)
 8007e32:	4823      	ldr	r0, [pc, #140]	; (8007ec0 <lwip_netconn_do_write+0x104>)
 8007e34:	f00c fbdc 	bl	80145f0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <lwip_netconn_do_write+0x92>
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <lwip_netconn_do_write+0xfc>)
 8007e42:	f240 6284 	movw	r2, #1668	; 0x684
 8007e46:	491f      	ldr	r1, [pc, #124]	; (8007ec4 <lwip_netconn_do_write+0x108>)
 8007e48:	481d      	ldr	r0, [pc, #116]	; (8007ec0 <lwip_netconn_do_write+0x104>)
 8007e4a:	f00c fbd1 	bl	80145f0 <iprintf>
        msg->conn->current_msg = msg;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	621a      	str	r2, [r3, #32]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fe10 	bl	8007a88 <lwip_netconn_do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8007e68:	e023      	b.n	8007eb2 <lwip_netconn_do_write+0xf6>
      } else {
        msg->err = ERR_CONN;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22f5      	movs	r2, #245	; 0xf5
 8007e6e:	711a      	strb	r2, [r3, #4]
 8007e70:	e002      	b.n	8007e78 <lwip_netconn_do_write+0xbc>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22fa      	movs	r2, #250	; 0xfa
 8007e76:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d012      	beq.n	8007ea6 <lwip_netconn_do_write+0xea>
 8007e80:	f00b f9b0 	bl	80131e4 <sys_arch_protect>
 8007e84:	60b8      	str	r0, [r7, #8]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e8e:	f113 0f0c 	cmn.w	r3, #12
 8007e92:	db05      	blt.n	8007ea0 <lwip_netconn_do_write+0xe4>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007e9e:	721a      	strb	r2, [r3, #8]
 8007ea0:	68b8      	ldr	r0, [r7, #8]
 8007ea2:	f00b f9ad 	bl	8013200 <sys_arch_unprotect>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	4618      	mov	r0, r3
 8007eae:	f00b f8fe 	bl	80130ae <sys_sem_signal>
}
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	080156e4 	.word	0x080156e4
 8007ebc:	08015a2c 	.word	0x08015a2c
 8007ec0:	0801573c 	.word	0x0801573c
 8007ec4:	08015b78 	.word	0x08015b78

08007ec8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d06c      	beq.n	8007fb8 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7c1b      	ldrb	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6852      	ldr	r2, [r2, #4]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e006      	b.n	8007f04 <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	6812      	ldr	r2, [r2, #0]
 8007efe:	6852      	ldr	r2, [r2, #4]
 8007f00:	6852      	ldr	r2, [r2, #4]
 8007f02:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d021      	beq.n	8007f5c <lwip_netconn_do_getaddr+0x94>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d144      	bne.n	8007fa6 <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7c1b      	ldrb	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	8a52      	ldrh	r2, [r2, #18]
 8007f30:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 8007f32:	e044      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	7c1b      	ldrb	r3, [r3, #16]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	22f5      	movs	r2, #245	; 0xf5
 8007f48:	711a      	strb	r2, [r3, #4]
      break;
 8007f4a:	e038      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	6852      	ldr	r2, [r2, #4]
 8007f56:	8a92      	ldrh	r2, [r2, #20]
 8007f58:	801a      	strh	r2, [r3, #0]
      break;
 8007f5a:	e030      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	7c1b      	ldrb	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10f      	bne.n	8007f84 <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	7d1b      	ldrb	r3, [r3, #20]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d103      	bne.n	8007f84 <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	22f5      	movs	r2, #245	; 0xf5
 8007f80:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 8007f82:	e01c      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7c1b      	ldrb	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <lwip_netconn_do_getaddr+0xd2>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	8adb      	ldrh	r3, [r3, #22]
 8007f98:	e003      	b.n	8007fa2 <lwip_netconn_do_getaddr+0xda>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	8b1b      	ldrh	r3, [r3, #24]
 8007fa2:	8013      	strh	r3, [r2, #0]
      break;
 8007fa4:	e00b      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 8007fa6:	4b16      	ldr	r3, [pc, #88]	; (8008000 <lwip_netconn_do_getaddr+0x138>)
 8007fa8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007fac:	4915      	ldr	r1, [pc, #84]	; (8008004 <lwip_netconn_do_getaddr+0x13c>)
 8007fae:	4816      	ldr	r0, [pc, #88]	; (8008008 <lwip_netconn_do_getaddr+0x140>)
 8007fb0:	f00c fb1e 	bl	80145f0 <iprintf>
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e002      	b.n	8007fbe <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	22f5      	movs	r2, #245	; 0xf5
 8007fbc:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d012      	beq.n	8007fec <lwip_netconn_do_getaddr+0x124>
 8007fc6:	f00b f90d 	bl	80131e4 <sys_arch_protect>
 8007fca:	60b8      	str	r0, [r7, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007fd4:	f113 0f0c 	cmn.w	r3, #12
 8007fd8:	db05      	blt.n	8007fe6 <lwip_netconn_do_getaddr+0x11e>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007fe4:	721a      	strb	r2, [r3, #8]
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f00b f90a 	bl	8013200 <sys_arch_unprotect>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f00b f85b 	bl	80130ae <sys_sem_signal>
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	080156e4 	.word	0x080156e4
 8008004:	08015b8c 	.word	0x08015b8c
 8008008:	0801573c 	.word	0x0801573c

0800800c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d045      	beq.n	80080b6 <lwip_netconn_do_close+0xaa>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008034:	2b10      	cmp	r3, #16
 8008036:	d13e      	bne.n	80080b6 <lwip_netconn_do_close+0xaa>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800803c:	2b03      	cmp	r3, #3
 800803e:	d002      	beq.n	8008046 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008040:	7cfb      	ldrb	r3, [r7, #19]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d037      	beq.n	80080b6 <lwip_netconn_do_close+0xaa>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008046:	7cfb      	ldrb	r3, [r7, #19]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d103      	bne.n	8008054 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	22f5      	movs	r2, #245	; 0xf5
 8008050:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008052:	e033      	b.n	80080bc <lwip_netconn_do_close+0xb0>
    } else if (state == NETCONN_WRITE) {
 8008054:	7cfb      	ldrb	r3, [r7, #19]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	22fb      	movs	r2, #251	; 0xfb
 800805e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008060:	e02c      	b.n	80080bc <lwip_netconn_do_close+0xb0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	7a1b      	ldrb	r3, [r3, #8]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe ffea 	bl	800704c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <lwip_netconn_do_close+0x80>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d006      	beq.n	800809a <lwip_netconn_do_close+0x8e>
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <lwip_netconn_do_close+0xf0>)
 800808e:	f240 721c 	movw	r2, #1820	; 0x71c
 8008092:	491b      	ldr	r1, [pc, #108]	; (8008100 <lwip_netconn_do_close+0xf4>)
 8008094:	481b      	ldr	r0, [pc, #108]	; (8008104 <lwip_netconn_do_close+0xf8>)
 8008096:	f00c faab 	bl	80145f0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2204      	movs	r2, #4
 80080a0:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	625a      	str	r2, [r3, #36]	; 0x24
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
        LOCK_TCPIP_CORE();
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff f84c 	bl	800714c <lwip_netconn_do_close_internal>
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80080b4:	e01f      	b.n	80080f6 <lwip_netconn_do_close+0xea>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	22f5      	movs	r2, #245	; 0xf5
 80080ba:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d012      	beq.n	80080ea <lwip_netconn_do_close+0xde>
 80080c4:	f00b f88e 	bl	80131e4 <sys_arch_protect>
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80080d2:	f113 0f0c 	cmn.w	r3, #12
 80080d6:	db05      	blt.n	80080e4 <lwip_netconn_do_close+0xd8>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80080e2:	721a      	strb	r2, [r3, #8]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f00b f88b 	bl	8013200 <sys_arch_unprotect>
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	330c      	adds	r3, #12
 80080f0:	4618      	mov	r0, r3
 80080f2:	f00a ffdc 	bl	80130ae <sys_sem_signal>
}
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	080156e4 	.word	0x080156e4
 8008100:	08015a2c 	.word	0x08015a2c
 8008104:	0801573c 	.word	0x0801573c

08008108 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dc04      	bgt.n	8008124 <err_to_errno+0x1c>
 800811a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811e:	425b      	negs	r3, r3
 8008120:	2b10      	cmp	r3, #16
 8008122:	dd01      	ble.n	8008128 <err_to_errno+0x20>
    return EIO;
 8008124:	2305      	movs	r3, #5
 8008126:	e005      	b.n	8008134 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8008128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812c:	425b      	negs	r3, r3
 800812e:	4a04      	ldr	r2, [pc, #16]	; (8008140 <err_to_errno+0x38>)
 8008130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	08017eac 	.word	0x08017eac

08008144 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d013      	beq.n	800817a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f004 fbbc 	bl	800c8dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	2006      	movs	r0, #6
 8008176:	f003 fe57 	bl	800be28 <memp_free>
  }
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <netbuf_free+0x1c>
 8008192:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <netbuf_free+0x44>)
 8008194:	2281      	movs	r2, #129	; 0x81
 8008196:	490d      	ldr	r1, [pc, #52]	; (80081cc <netbuf_free+0x48>)
 8008198:	480d      	ldr	r0, [pc, #52]	; (80081d0 <netbuf_free+0x4c>)
 800819a:	f00c fa29 	bl	80145f0 <iprintf>
 800819e:	e00f      	b.n	80081c0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f004 fb95 	bl	800c8dc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
}
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08015ba4 	.word	0x08015ba4
 80081cc:	08015c40 	.word	0x08015c40
 80081d0:	08015bf4 	.word	0x08015bf4

080081d4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d108      	bne.n	80081fa <netbuf_ref+0x26>
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <netbuf_ref+0x88>)
 80081ea:	2295      	movs	r2, #149	; 0x95
 80081ec:	491c      	ldr	r1, [pc, #112]	; (8008260 <netbuf_ref+0x8c>)
 80081ee:	481d      	ldr	r0, [pc, #116]	; (8008264 <netbuf_ref+0x90>)
 80081f0:	f00c f9fe 	bl	80145f0 <iprintf>
 80081f4:	f06f 030f 	mvn.w	r3, #15
 80081f8:	e02b      	b.n	8008252 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f004 fb68 	bl	800c8dc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800820c:	2202      	movs	r2, #2
 800820e:	2100      	movs	r1, #0
 8008210:	2000      	movs	r0, #0
 8008212:	f003 fff1 	bl	800c1f8 <pbuf_alloc>
 8008216:	4602      	mov	r2, r0
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d105      	bne.n	8008230 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800822e:	e010      	b.n	8008252 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	88f9      	ldrh	r1, [r7, #6]
 8008242:	8119      	strh	r1, [r3, #8]
 8008244:	891b      	ldrh	r3, [r3, #8]
 8008246:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	08015ba4 	.word	0x08015ba4
 8008260:	08015c5c 	.word	0x08015c5c
 8008264:	08015bf4 	.word	0x08015bf4

08008268 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	db02      	blt.n	800827c <get_socket+0x14>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b03      	cmp	r3, #3
 800827a:	dd04      	ble.n	8008286 <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <get_socket+0x50>)
 800827e:	2209      	movs	r2, #9
 8008280:	601a      	str	r2, [r3, #0]
    return NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	e011      	b.n	80082aa <get_socket+0x42>
  }

  sock = &sockets[s];
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <get_socket+0x54>)
 8008292:	4413      	add	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <get_socket+0x50>)
 80082a0:	2209      	movs	r2, #9
 80082a2:	601a      	str	r2, [r3, #0]
    return NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e000      	b.n	80082aa <get_socket+0x42>
  }

  return sock;
 80082a8:	68fb      	ldr	r3, [r7, #12]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20007750 	.word	0x20007750
 80082bc:	20003de4 	.word	0x20003de4

080082c0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	e074      	b.n	80083ba <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 80082d0:	f00a ff88 	bl	80131e4 <sys_arch_protect>
 80082d4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 80082d6:	493d      	ldr	r1, [pc, #244]	; (80083cc <alloc_socket+0x10c>)
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d161      	bne.n	80083ae <alloc_socket+0xee>
 80082ea:	4938      	ldr	r1, [pc, #224]	; (80083cc <alloc_socket+0x10c>)
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	3311      	adds	r3, #17
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d156      	bne.n	80083ae <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 8008300:	4932      	ldr	r1, [pc, #200]	; (80083cc <alloc_socket+0x10c>)
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8008312:	68b8      	ldr	r0, [r7, #8]
 8008314:	f00a ff74 	bl	8013200 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 8008318:	492c      	ldr	r1, [pc, #176]	; (80083cc <alloc_socket+0x10c>)
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	3304      	adds	r3, #4
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 800832c:	4927      	ldr	r1, [pc, #156]	; (80083cc <alloc_socket+0x10c>)
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3308      	adds	r3, #8
 800833c:	2200      	movs	r2, #0
 800833e:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 8008340:	4922      	ldr	r1, [pc, #136]	; (80083cc <alloc_socket+0x10c>)
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	330a      	adds	r3, #10
 8008350:	2200      	movs	r2, #0
 8008352:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835c:	2b10      	cmp	r3, #16
 800835e:	d102      	bne.n	8008366 <alloc_socket+0xa6>
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <alloc_socket+0xaa>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <alloc_socket+0xac>
 800836a:	2300      	movs	r3, #0
 800836c:	b298      	uxth	r0, r3
 800836e:	4917      	ldr	r1, [pc, #92]	; (80083cc <alloc_socket+0x10c>)
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	330c      	adds	r3, #12
 800837e:	4602      	mov	r2, r0
 8008380:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8008382:	4912      	ldr	r1, [pc, #72]	; (80083cc <alloc_socket+0x10c>)
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	330e      	adds	r3, #14
 8008392:	2200      	movs	r2, #0
 8008394:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 8008396:	490d      	ldr	r1, [pc, #52]	; (80083cc <alloc_socket+0x10c>)
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	3310      	adds	r3, #16
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	e00a      	b.n	80083c4 <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 80083ae:	68b8      	ldr	r0, [r7, #8]
 80083b0:	f00a ff26 	bl	8013200 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	dd87      	ble.n	80082d0 <alloc_socket+0x10>
  }
  return -1;
 80083c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20003de4 	.word	0x20003de4

080083d0 <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08c      	sub	sp, #48	; 0x30
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff ff43 	bl	8008268 <get_socket>
 80083e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <lwip_connect+0x20>
    return -1;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ee:	e06e      	b.n	80084ce <lwip_connect+0xfe>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fd ff8d 	bl	800631c <netconn_disconnect>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008408:	e03d      	b.n	8008486 <lwip_connect+0xb6>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b10      	cmp	r3, #16
 800840e:	d10c      	bne.n	800842a <lwip_connect+0x5a>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <lwip_connect+0x50>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d104      	bne.n	800842a <lwip_connect+0x5a>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <lwip_connect+0x8c>
 800842a:	4b2b      	ldr	r3, [pc, #172]	; (80084d8 <lwip_connect+0x108>)
 800842c:	f240 229f 	movw	r2, #671	; 0x29f
 8008430:	492a      	ldr	r1, [pc, #168]	; (80084dc <lwip_connect+0x10c>)
 8008432:	482b      	ldr	r0, [pc, #172]	; (80084e0 <lwip_connect+0x110>)
 8008434:	f00c f8dc 	bl	80145f0 <iprintf>
 8008438:	f06f 000f 	mvn.w	r0, #15
 800843c:	f7ff fe64 	bl	8008108 <err_to_errno>
 8008440:	6238      	str	r0, [r7, #32]
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	741a      	strb	r2, [r3, #16]
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <lwip_connect+0x86>
 8008450:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <lwip_connect+0x114>)
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800845a:	e038      	b.n	80084ce <lwip_connect+0xfe>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fe26 	bl	80090b8 <lwip_htons>
 800846c:	4603      	mov	r3, r0
 800846e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008476:	f107 0114 	add.w	r1, r7, #20
 800847a:	4618      	mov	r0, r3
 800847c:	f7fd ff16 	bl	80062ac <netconn_connect>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8008486:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d012      	beq.n	80084b4 <lwip_connect+0xe4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800848e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fe38 	bl	8008108 <err_to_errno>
 8008498:	61b8      	str	r0, [r7, #24]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	741a      	strb	r2, [r3, #16]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <lwip_connect+0xde>
 80084a8:	4a0e      	ldr	r2, [pc, #56]	; (80084e4 <lwip_connect+0x114>)
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	6013      	str	r3, [r2, #0]
    return -1;
 80084ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b2:	e00c      	b.n	80084ce <lwip_connect+0xfe>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	741a      	strb	r2, [r3, #16]
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <lwip_connect+0xfc>
 80084c6:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <lwip_connect+0x114>)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	6013      	str	r3, [r2, #0]
  return 0;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3730      	adds	r7, #48	; 0x30
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	08015d3c 	.word	0x08015d3c
 80084dc:	08015e34 	.word	0x08015e34
 80084e0:	08015d80 	.word	0x08015d80
 80084e4:	20007750 	.word	0x20007750

080084e8 <lwip_recvfrom>:
}

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 80084e8:	b590      	push	{r4, r7, lr}
 80084ea:	b097      	sub	sp, #92	; 0x5c
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  u8_t             done = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff feaf 	bl	8008268 <get_socket>
 800850a:	6438      	str	r0, [r7, #64]	; 0x40
  if (!sock) {
 800850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <lwip_recvfrom+0x30>
    return -1;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008516:	e199      	b.n	800884c <lwip_recvfrom+0x364>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 8008518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 8008520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28
 8008526:	e08d      	b.n	8008644 <lwip_recvfrom+0x15c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <lwip_recvfrom+0x58>
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	7f1b      	ldrb	r3, [r3, #28]
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01b      	beq.n	8008578 <lwip_recvfrom+0x90>
          (sock->rcvevent <= 0)) {
 8008540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008542:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008546:	2b00      	cmp	r3, #0
 8008548:	dc16      	bgt.n	8008578 <lwip_recvfrom+0x90>
        if (off > 0) {
 800854a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd0d      	ble.n	800856c <lwip_recvfrom+0x84>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 8008550:	2300      	movs	r3, #0
 8008552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	b2da      	uxtb	r2, r3
 8008558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800855a:	741a      	strb	r2, [r3, #16]
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <lwip_recvfrom+0x80>
 8008562:	4aa9      	ldr	r2, [pc, #676]	; (8008808 <lwip_recvfrom+0x320>)
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	6013      	str	r3, [r2, #0]
          return off;
 8008568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856a:	e16f      	b.n	800884c <lwip_recvfrom+0x364>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 800856c:	4ba6      	ldr	r3, [pc, #664]	; (8008808 <lwip_recvfrom+0x320>)
 800856e:	220b      	movs	r2, #11
 8008570:	601a      	str	r2, [r3, #0]
        return -1;
 8008572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008576:	e169      	b.n	800884c <lwip_recvfrom+0x364>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008582:	2b10      	cmp	r3, #16
 8008584:	d10b      	bne.n	800859e <lwip_recvfrom+0xb6>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 8008586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7fd ffbf 	bl	8006514 <netconn_recv_tcp_pbuf>
 8008596:	4603      	mov	r3, r0
 8008598:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800859c:	e00a      	b.n	80085b4 <lwip_recvfrom+0xcc>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 800859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fd ffdb 	bl	8006564 <netconn_recv>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 80085b4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d036      	beq.n	800862a <lwip_recvfrom+0x142>
        if (off > 0) {
 80085bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd19      	ble.n	80085f6 <lwip_recvfrom+0x10e>
          if (err == ERR_CLSD) {
 80085c2:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80085c6:	f113 0f0f 	cmn.w	r3, #15
 80085ca:	d106      	bne.n	80085da <lwip_recvfrom+0xf2>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fac5 	bl	8008b64 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 80085da:	2300      	movs	r3, #0
 80085dc:	637b      	str	r3, [r7, #52]	; 0x34
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e4:	741a      	strb	r2, [r3, #16]
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <lwip_recvfrom+0x10a>
 80085ec:	4a86      	ldr	r2, [pc, #536]	; (8008808 <lwip_recvfrom+0x320>)
 80085ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f0:	6013      	str	r3, [r2, #0]
          return off;
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	e12a      	b.n	800884c <lwip_recvfrom+0x364>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 80085f6:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fd84 	bl	8008108 <err_to_errno>
 8008600:	6338      	str	r0, [r7, #48]	; 0x30
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	b2da      	uxtb	r2, r3
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	741a      	strb	r2, [r3, #16]
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <lwip_recvfrom+0x12e>
 8008610:	4a7d      	ldr	r2, [pc, #500]	; (8008808 <lwip_recvfrom+0x320>)
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8008616:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800861a:	f113 0f0f 	cmn.w	r3, #15
 800861e:	d101      	bne.n	8008624 <lwip_recvfrom+0x13c>
          return 0;
 8008620:	2300      	movs	r3, #0
 8008622:	e113      	b.n	800884c <lwip_recvfrom+0x364>
        } else {
          return -1;
 8008624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008628:	e110      	b.n	800884c <lwip_recvfrom+0x364>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <lwip_recvfrom+0x156>
 8008630:	4b76      	ldr	r3, [pc, #472]	; (800880c <lwip_recvfrom+0x324>)
 8008632:	f240 3227 	movw	r2, #807	; 0x327
 8008636:	4976      	ldr	r1, [pc, #472]	; (8008810 <lwip_recvfrom+0x328>)
 8008638:	4876      	ldr	r0, [pc, #472]	; (8008814 <lwip_recvfrom+0x32c>)
 800863a:	f00b ffd9 	bl	80145f0 <iprintf>
      sock->lastdata = buf;
 800863e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008642:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800864e:	2b10      	cmp	r3, #16
 8008650:	d102      	bne.n	8008658 <lwip_recvfrom+0x170>
      p = (struct pbuf *)buf;
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	657b      	str	r3, [r7, #84]	; 0x54
 8008656:	e002      	b.n	800865e <lwip_recvfrom+0x176>
    } else {
      p = ((struct netbuf *)buf)->p;
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	657b      	str	r3, [r7, #84]	; 0x54
    }
    buflen = p->tot_len;
 800865e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008660:	891b      	ldrh	r3, [r3, #8]
 8008662:	87fb      	strh	r3, [r7, #62]	; 0x3e
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	891b      	ldrh	r3, [r3, #8]
 8008668:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if (len > buflen) {
 800866e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d203      	bcs.n	800867e <lwip_recvfrom+0x196>
      copylen = buflen;
 8008676:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008678:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800867c:	e002      	b.n	8008684 <lwip_recvfrom+0x19c>
    } else {
      copylen = (u16_t)len;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 8008684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	18d1      	adds	r1, r2, r3
 800868a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868c:	891b      	ldrh	r3, [r3, #8]
 800868e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8008692:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008694:	f004 fb2e 	bl	800ccf4 <pbuf_copy_partial>

    off += copylen;
 8008698:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800869c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800869e:	4413      	add	r3, r2
 80086a0:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80086a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d127      	bne.n	8008700 <lwip_recvfrom+0x218>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 80086b0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d906      	bls.n	80086c8 <lwip_recvfrom+0x1e0>
 80086ba:	4b54      	ldr	r3, [pc, #336]	; (800880c <lwip_recvfrom+0x324>)
 80086bc:	f240 3243 	movw	r2, #835	; 0x343
 80086c0:	4955      	ldr	r1, [pc, #340]	; (8008818 <lwip_recvfrom+0x330>)
 80086c2:	4854      	ldr	r0, [pc, #336]	; (8008814 <lwip_recvfrom+0x32c>)
 80086c4:	f00b ff94 	bl	80145f0 <iprintf>
      len -= copylen;
 80086c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00f      	beq.n	80086f8 <lwip_recvfrom+0x210>
          (p->flags & PBUF_FLAG_PUSH) ||
 80086d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086da:	7b5b      	ldrb	r3, [r3, #13]
 80086dc:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <lwip_recvfrom+0x210>
          (sock->rcvevent <= 0) ||
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd04      	ble.n	80086f8 <lwip_recvfrom+0x210>
          ((flags & MSG_PEEK) != 0)) {
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <lwip_recvfrom+0x21e>
        done = 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80086fe:	e002      	b.n	8008706 <lwip_recvfrom+0x21e>
      }
    } else {
      done = 1;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 8008706:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800870a:	2b00      	cmp	r3, #0
 800870c:	d04c      	beq.n	80087a8 <lwip_recvfrom+0x2c0>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800870e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008710:	2b00      	cmp	r3, #0
 8008712:	d049      	beq.n	80087a8 <lwip_recvfrom+0x2c0>
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d046      	beq.n	80087a8 <lwip_recvfrom+0x2c0>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800871a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008724:	2b10      	cmp	r3, #16
 8008726:	d10b      	bne.n	8008740 <lwip_recvfrom+0x258>
          fromaddr = &tmpaddr;
 8008728:	f107 0320 	add.w	r3, r7, #32
 800872c:	647b      	str	r3, [r7, #68]	; 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800872e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8008736:	2300      	movs	r3, #0
 8008738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800873a:	f7fd fd67 	bl	800620c <netconn_getaddr>
 800873e:	e005      	b.n	800874c <lwip_recvfrom+0x264>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	899b      	ldrh	r3, [r3, #12]
 8008744:	84fb      	strh	r3, [r7, #38]	; 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	3308      	adds	r3, #8
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800874c:	f107 0310 	add.w	r3, r7, #16
 8008750:	2210      	movs	r2, #16
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	f107 0310 	add.w	r3, r7, #16
 8008758:	2202      	movs	r2, #2
 800875a:	705a      	strb	r2, [r3, #1]
 800875c:	f107 0410 	add.w	r4, r7, #16
 8008760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fca8 	bl	80090b8 <lwip_htons>
 8008768:	4603      	mov	r3, r0
 800876a:	8063      	strh	r3, [r4, #2]
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	f107 0310 	add.w	r3, r7, #16
 800877a:	3308      	adds	r3, #8
 800877c:	2208      	movs	r2, #8
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f00b ff2d 	bl	80145e0 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 8008786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	7c3a      	ldrb	r2, [r7, #16]
 800878c:	4293      	cmp	r3, r2
 800878e:	d903      	bls.n	8008798 <lwip_recvfrom+0x2b0>
            *fromlen = saddr.sa.sa_len;
 8008790:	7c3b      	ldrb	r3, [r7, #16]
 8008792:	461a      	mov	r2, r3
 8008794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008796:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f107 0310 	add.w	r3, r7, #16
 80087a0:	4619      	mov	r1, r3
 80087a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80087a4:	f00b ff11 	bl	80145ca <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d13a      	bne.n	8008828 <lwip_recvfrom+0x340>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d111      	bne.n	80087e4 <lwip_recvfrom+0x2fc>
 80087c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80087c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	dd0b      	ble.n	80087e4 <lwip_recvfrom+0x2fc>
        sock->lastdata = buf;
 80087cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d0:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 80087d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d4:	891a      	ldrh	r2, [r3, #8]
 80087d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80087da:	4413      	add	r3, r2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e0:	811a      	strh	r2, [r3, #8]
 80087e2:	e021      	b.n	8008828 <lwip_recvfrom+0x340>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 80087e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e6:	2200      	movs	r2, #0
 80087e8:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 80087ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80087f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087fa:	2b10      	cmp	r3, #16
 80087fc:	d10e      	bne.n	800881c <lwip_recvfrom+0x334>
          pbuf_free((struct pbuf *)buf);
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	4618      	mov	r0, r3
 8008802:	f004 f86b 	bl	800c8dc <pbuf_free>
 8008806:	e00d      	b.n	8008824 <lwip_recvfrom+0x33c>
 8008808:	20007750 	.word	0x20007750
 800880c:	08015d3c 	.word	0x08015d3c
 8008810:	08015e54 	.word	0x08015e54
 8008814:	08015d80 	.word	0x08015d80
 8008818:	08015e60 	.word	0x08015e60
        } else {
          netbuf_delete((struct netbuf *)buf);
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff fc90 	bl	8008144 <netbuf_delete>
        }
        buf = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  } while (!done);
 8008828:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800882c:	2b00      	cmp	r3, #0
 800882e:	f43f ae73 	beq.w	8008518 <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 8008832:	2300      	movs	r3, #0
 8008834:	63bb      	str	r3, [r7, #56]	; 0x38
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	b2da      	uxtb	r2, r3
 800883a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883c:	741a      	strb	r2, [r3, #16]
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <lwip_recvfrom+0x362>
 8008844:	4a03      	ldr	r2, [pc, #12]	; (8008854 <lwip_recvfrom+0x36c>)
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	6013      	str	r3, [r2, #0]
  return off;
 800884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800884c:	4618      	mov	r0, r3
 800884e:	375c      	adds	r7, #92	; 0x5c
 8008850:	46bd      	mov	sp, r7
 8008852:	bd90      	pop	{r4, r7, pc}
 8008854:	20007750 	.word	0x20007750

08008858 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8008866:	2300      	movs	r3, #0
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fe37 	bl	80084e8 <lwip_recvfrom>
 800887a:	4603      	mov	r3, r0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af02      	add	r7, sp, #8
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fce8 	bl	8008268 <get_socket>
 8008898:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d102      	bne.n	80088a6 <lwip_send+0x22>
    return -1;
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088a4:	e04c      	b.n	8008940 <lwip_send+0xbc>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088b0:	2b10      	cmp	r3, #16
 80088b2:	d00b      	beq.n	80088cc <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80088b4:	2300      	movs	r3, #0
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	2300      	movs	r3, #0
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 f842 	bl	800894c <lwip_sendto>
 80088c8:	4603      	mov	r3, r0
 80088ca:	e039      	b.n	8008940 <lwip_send+0xbc>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <lwip_send+0x56>
 80088d6:	2203      	movs	r2, #3
 80088d8:	e000      	b.n	80088dc <lwip_send+0x58>
 80088da:	2201      	movs	r2, #1
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f003 0308 	and.w	r3, r3, #8
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <lwip_send+0x66>
 80088e6:	2304      	movs	r3, #4
 80088e8:	e000      	b.n	80088ec <lwip_send+0x68>
 80088ea:	2300      	movs	r3, #0
 80088ec:	4313      	orrs	r3, r2
 80088ee:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 80088f0:	76fb      	strb	r3, [r7, #27]
  written = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	7efa      	ldrb	r2, [r7, #27]
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	4613      	mov	r3, r2
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	f7fd fed0 	bl	80066ac <netconn_write_partly>
 800890c:	4603      	mov	r3, r0
 800890e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8008910:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fbf7 	bl	8008108 <err_to_errno>
 800891a:	6178      	str	r0, [r7, #20]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	b2da      	uxtb	r2, r3
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	741a      	strb	r2, [r3, #16]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <lwip_send+0xac>
 800892a:	4a07      	ldr	r2, [pc, #28]	; (8008948 <lwip_send+0xc4>)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 8008930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <lwip_send+0xb8>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	e001      	b.n	8008940 <lwip_send+0xbc>
 800893c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20007750 	.word	0x20007750

0800894c <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08e      	sub	sp, #56	; 0x38
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7ff fc84 	bl	8008268 <get_socket>
 8008960:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <lwip_sendto+0x22>
    return -1;
 8008968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800896c:	e094      	b.n	8008a98 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008978:	2b10      	cmp	r3, #16
 800897a:	d107      	bne.n	800898c <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff ff7e 	bl	8008884 <lwip_send>
 8008988:	4603      	mov	r3, r0
 800898a:	e085      	b.n	8008a98 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008992:	d306      	bcc.n	80089a2 <lwip_sendto+0x56>
 8008994:	4b42      	ldr	r3, [pc, #264]	; (8008aa0 <lwip_sendto+0x154>)
 8008996:	f240 427b 	movw	r2, #1147	; 0x47b
 800899a:	4942      	ldr	r1, [pc, #264]	; (8008aa4 <lwip_sendto+0x158>)
 800899c:	4842      	ldr	r0, [pc, #264]	; (8008aa8 <lwip_sendto+0x15c>)
 800899e:	f00b fe27 	bl	80145f0 <iprintf>
  short_size = (u16_t)size;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80089a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <lwip_sendto+0x66>
 80089ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d024      	beq.n	80089fc <lwip_sendto+0xb0>
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d108      	bne.n	80089ca <lwip_sendto+0x7e>
 80089b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ba:	785b      	ldrb	r3, [r3, #1]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d104      	bne.n	80089ca <lwip_sendto+0x7e>
 80089c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d018      	beq.n	80089fc <lwip_sendto+0xb0>
 80089ca:	4b35      	ldr	r3, [pc, #212]	; (8008aa0 <lwip_sendto+0x154>)
 80089cc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80089d0:	4936      	ldr	r1, [pc, #216]	; (8008aac <lwip_sendto+0x160>)
 80089d2:	4835      	ldr	r0, [pc, #212]	; (8008aa8 <lwip_sendto+0x15c>)
 80089d4:	f00b fe0c 	bl	80145f0 <iprintf>
 80089d8:	f06f 000f 	mvn.w	r0, #15
 80089dc:	f7ff fb94 	bl	8008108 <err_to_errno>
 80089e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	741a      	strb	r2, [r3, #16]
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <lwip_sendto+0xaa>
 80089f0:	4a2f      	ldr	r2, [pc, #188]	; (8008ab0 <lwip_sendto+0x164>)
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089fa:	e04d      	b.n	8008a98 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8008a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a12:	885b      	ldrh	r3, [r3, #2]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fb4f 	bl	80090b8 <lwip_htons>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008a1e:	e003      	b.n	8008a28 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8008a28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a2a:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8008a2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff fbcd 	bl	80081d4 <netbuf_ref>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8008a40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f107 0214 	add.w	r2, r7, #20
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fd fdfe 	bl	8006654 <netconn_send>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8008a5e:	f107 0314 	add.w	r3, r7, #20
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fb8e 	bl	8008184 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8008a68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fb4b 	bl	8008108 <err_to_errno>
 8008a72:	6278      	str	r0, [r7, #36]	; 0x24
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	741a      	strb	r2, [r3, #16]
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <lwip_sendto+0x13c>
 8008a82:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <lwip_sendto+0x164>)
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 8008a88:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <lwip_sendto+0x148>
 8008a90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a92:	e001      	b.n	8008a98 <lwip_sendto+0x14c>
 8008a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3738      	adds	r7, #56	; 0x38
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	08015d3c 	.word	0x08015d3c
 8008aa4:	08015f00 	.word	0x08015f00
 8008aa8:	08015d80 	.word	0x08015d80
 8008aac:	08015f24 	.word	0x08015f24
 8008ab0:	20007750 	.word	0x20007750

08008ab4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d00d      	beq.n	8008ae2 <lwip_socket+0x2e>
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d002      	beq.n	8008ad0 <lwip_socket+0x1c>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d016      	beq.n	8008afc <lwip_socket+0x48>
 8008ace:	e01c      	b.n	8008b0a <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	4a21      	ldr	r2, [pc, #132]	; (8008b5c <lwip_socket+0xa8>)
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	2040      	movs	r0, #64	; 0x40
 8008ada:	f7fd faf7 	bl	80060cc <netconn_new_with_proto_and_callback>
 8008ade:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008ae0:	e019      	b.n	8008b16 <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b88      	cmp	r3, #136	; 0x88
 8008ae6:	d101      	bne.n	8008aec <lwip_socket+0x38>
 8008ae8:	2321      	movs	r3, #33	; 0x21
 8008aea:	e000      	b.n	8008aee <lwip_socket+0x3a>
 8008aec:	2320      	movs	r3, #32
 8008aee:	4a1b      	ldr	r2, [pc, #108]	; (8008b5c <lwip_socket+0xa8>)
 8008af0:	2100      	movs	r1, #0
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fd faea 	bl	80060cc <netconn_new_with_proto_and_callback>
 8008af8:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008afa:	e00c      	b.n	8008b16 <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8008afc:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <lwip_socket+0xa8>)
 8008afe:	2100      	movs	r1, #0
 8008b00:	2010      	movs	r0, #16
 8008b02:	f7fd fae3 	bl	80060cc <netconn_new_with_proto_and_callback>
 8008b06:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008b08:	e005      	b.n	8008b16 <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 8008b0a:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <lwip_socket+0xac>)
 8008b0c:	2216      	movs	r2, #22
 8008b0e:	601a      	str	r2, [r3, #0]
    return -1;
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b14:	e01e      	b.n	8008b54 <lwip_socket+0xa0>
  }

  if (!conn) {
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d105      	bne.n	8008b28 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8008b1c:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <lwip_socket+0xac>)
 8008b1e:	2269      	movs	r2, #105	; 0x69
 8008b20:	601a      	str	r2, [r3, #0]
    return -1;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b26:	e015      	b.n	8008b54 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8008b28:	2100      	movs	r1, #0
 8008b2a:	6978      	ldr	r0, [r7, #20]
 8008b2c:	f7ff fbc8 	bl	80082c0 <alloc_socket>
 8008b30:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b38:	d108      	bne.n	8008b4c <lwip_socket+0x98>
    netconn_delete(conn);
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7fd fb40 	bl	80061c0 <netconn_delete>
    set_errno(ENFILE);
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <lwip_socket+0xac>)
 8008b42:	2217      	movs	r2, #23
 8008b44:	601a      	str	r2, [r3, #0]
    return -1;
 8008b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b4a:	e003      	b.n	8008b54 <lwip_socket+0xa0>
  }
  conn->socket = i;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008b52:	693b      	ldr	r3, [r7, #16]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	08008b65 	.word	0x08008b65
 8008b60:	20007750 	.word	0x20007750

08008b64 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
 8008b70:	4613      	mov	r3, r2
 8008b72:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80ea 	beq.w	8008d50 <event_callback+0x1ec>
    s = conn->socket;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	da18      	bge.n	8008bba <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8008b88:	f00a fb2c 	bl	80131e4 <sys_arch_protect>
 8008b8c:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da0b      	bge.n	8008bae <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <event_callback+0x42>
          conn->socket--;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	1e5a      	subs	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8008ba6:	6978      	ldr	r0, [r7, #20]
 8008ba8:	f00a fb2a 	bl	8013200 <sys_arch_unprotect>
        return;
 8008bac:	e0d3      	b.n	8008d56 <event_callback+0x1f2>
      }
      s = conn->socket;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 8008bb4:	6978      	ldr	r0, [r7, #20]
 8008bb6:	f00a fb23 	bl	8013200 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8008bba:	69f8      	ldr	r0, [r7, #28]
 8008bbc:	f7ff fb54 	bl	8008268 <get_socket>
 8008bc0:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80c5 	beq.w	8008d54 <event_callback+0x1f0>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8008bca:	f00a fb0b 	bl	80131e4 <sys_arch_protect>
 8008bce:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d82c      	bhi.n	8008c30 <event_callback+0xcc>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <event_callback+0x78>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf1 	.word	0x08008bf1
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c19 	.word	0x08008c19
 8008be8:	08008c21 	.word	0x08008c21
 8008bec:	08008c29 	.word	0x08008c29
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	b21a      	sxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	815a      	strh	r2, [r3, #10]
      break;
 8008c02:	e01d      	b.n	8008c40 <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	b21a      	sxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	815a      	strh	r2, [r3, #10]
      break;
 8008c16:	e013      	b.n	8008c40 <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	819a      	strh	r2, [r3, #12]
      break;
 8008c1e:	e00f      	b.n	8008c40 <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	819a      	strh	r2, [r3, #12]
      break;
 8008c26:	e00b      	b.n	8008c40 <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	81da      	strh	r2, [r3, #14]
      break;
 8008c2e:	e007      	b.n	8008c40 <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 8008c30:	4b4a      	ldr	r3, [pc, #296]	; (8008d5c <event_callback+0x1f8>)
 8008c32:	f240 625d 	movw	r2, #1629	; 0x65d
 8008c36:	494a      	ldr	r1, [pc, #296]	; (8008d60 <event_callback+0x1fc>)
 8008c38:	484a      	ldr	r0, [pc, #296]	; (8008d64 <event_callback+0x200>)
 8008c3a:	f00b fcd9 	bl	80145f0 <iprintf>
      break;
 8008c3e:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	7c5b      	ldrb	r3, [r3, #17]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 8008c48:	6978      	ldr	r0, [r7, #20]
 8008c4a:	f00a fad9 	bl	8013200 <sys_arch_unprotect>
    return;
 8008c4e:	e082      	b.n	8008d56 <event_callback+0x1f2>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008c50:	4b45      	ldr	r3, [pc, #276]	; (8008d68 <event_callback+0x204>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	e074      	b.n	8008d42 <event_callback+0x1de>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 8008c58:	4b44      	ldr	r3, [pc, #272]	; (8008d6c <event_callback+0x208>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d15e      	bne.n	8008d24 <event_callback+0x1c0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dd14      	ble.n	8008c9e <event_callback+0x13a>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d010      	beq.n	8008c9e <event_callback+0x13a>
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	0952      	lsrs	r2, r2, #5
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	f002 021f 	and.w	r2, r2, #31
 8008c8e:	2101      	movs	r1, #1
 8008c90:	fa01 f202 	lsl.w	r2, r1, r2
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <event_callback+0x13a>
          do_signal = 1;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	899b      	ldrh	r3, [r3, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <event_callback+0x172>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d114      	bne.n	8008cd6 <event_callback+0x172>
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <event_callback+0x172>
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	0952      	lsrs	r2, r2, #5
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	f002 021f 	and.w	r2, r2, #31
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <event_callback+0x172>
          do_signal = 1;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	89db      	ldrh	r3, [r3, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d017      	beq.n	8008d0e <event_callback+0x1aa>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d114      	bne.n	8008d0e <event_callback+0x1aa>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d010      	beq.n	8008d0e <event_callback+0x1aa>
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	0952      	lsrs	r2, r2, #5
 8008cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	f002 021f 	and.w	r2, r2, #31
 8008cfe:	2101      	movs	r1, #1
 8008d00:	fa01 f202 	lsl.w	r2, r1, r2
 8008d04:	4013      	ands	r3, r2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <event_callback+0x1aa>
          do_signal = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <event_callback+0x1c0>
        scb->sem_signalled = 1;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2201      	movs	r2, #1
 8008d18:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f00a f9c5 	bl	80130ae <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8008d24:	6978      	ldr	r0, [r7, #20]
 8008d26:	f00a fa6b 	bl	8013200 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8008d2a:	f00a fa5b 	bl	80131e4 <sys_arch_protect>
 8008d2e:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 8008d30:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <event_callback+0x208>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d000      	beq.n	8008d3c <event_callback+0x1d8>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 8008d3a:	e789      	b.n	8008c50 <event_callback+0xec>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	61bb      	str	r3, [r7, #24]
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d187      	bne.n	8008c58 <event_callback+0xf4>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8008d48:	6978      	ldr	r0, [r7, #20]
 8008d4a:	f00a fa59 	bl	8013200 <sys_arch_unprotect>
 8008d4e:	e002      	b.n	8008d56 <event_callback+0x1f2>
    return;
 8008d50:	bf00      	nop
 8008d52:	e000      	b.n	8008d56 <event_callback+0x1f2>
      return;
 8008d54:	bf00      	nop
}
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	08015d3c 	.word	0x08015d3c
 8008d60:	08015f9c 	.word	0x08015f9c
 8008d64:	08015d80 	.word	0x08015d80
 8008d68:	20003e34 	.word	0x20003e34
 8008d6c:	20003e38 	.word	0x20003e38

08008d70 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008d78:	4b35      	ldr	r3, [pc, #212]	; (8008e50 <tcpip_thread+0xe0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8008d80:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <tcpip_thread+0xe0>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a33      	ldr	r2, [pc, #204]	; (8008e54 <tcpip_thread+0xe4>)
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008d8c:	f107 030c 	add.w	r3, r7, #12
 8008d90:	4619      	mov	r1, r3
 8008d92:	4831      	ldr	r0, [pc, #196]	; (8008e58 <tcpip_thread+0xe8>)
 8008d94:	f009 fb6a 	bl	801246c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <tcpip_thread+0x3c>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008d9e:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <tcpip_thread+0xec>)
 8008da0:	2269      	movs	r2, #105	; 0x69
 8008da2:	492f      	ldr	r1, [pc, #188]	; (8008e60 <tcpip_thread+0xf0>)
 8008da4:	482f      	ldr	r0, [pc, #188]	; (8008e64 <tcpip_thread+0xf4>)
 8008da6:	f00b fc23 	bl	80145f0 <iprintf>
      continue;
 8008daa:	e050      	b.n	8008e4e <tcpip_thread+0xde>
    }
    switch (msg->type) {
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b04      	cmp	r3, #4
 8008db2:	d845      	bhi.n	8008e40 <tcpip_thread+0xd0>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <tcpip_thread+0x4c>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008ddf 	.word	0x08008ddf
 8008dc4:	08008dff 	.word	0x08008dff
 8008dc8:	08008e1b 	.word	0x08008e1b
 8008dcc:	08008e33 	.word	0x08008e33
#if !LWIP_TCPIP_CORE_LOCKING
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.api_msg.function(msg->msg.api_msg.msg);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	6892      	ldr	r2, [r2, #8]
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
      break;
 8008ddc:	e037      	b.n	8008e4e <tcpip_thread+0xde>
    case TCPIP_MSG_API_CALL:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API CALL message %p\n", (void *)msg));
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689c      	ldr	r4, [r3, #8]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	6892      	ldr	r2, [r2, #8]
 8008dea:	4610      	mov	r0, r2
 8008dec:	4798      	blx	r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	7023      	strb	r3, [r4, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f00a f959 	bl	80130ae <sys_sem_signal>
      break;
 8008dfc:	e027      	b.n	8008e4e <tcpip_thread+0xde>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	6850      	ldr	r0, [r2, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	6892      	ldr	r2, [r2, #8]
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4619      	mov	r1, r3
 8008e12:	2009      	movs	r0, #9
 8008e14:	f003 f808 	bl	800be28 <memp_free>
      break;
 8008e18:	e019      	b.n	8008e4e <tcpip_thread+0xde>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	6892      	ldr	r2, [r2, #8]
 8008e22:	4610      	mov	r0, r2
 8008e24:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	2008      	movs	r0, #8
 8008e2c:	f002 fffc 	bl	800be28 <memp_free>
      break;
 8008e30:	e00d      	b.n	8008e4e <tcpip_thread+0xde>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	6892      	ldr	r2, [r2, #8]
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4798      	blx	r3
      break;
 8008e3e:	e006      	b.n	8008e4e <tcpip_thread+0xde>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <tcpip_thread+0xec>)
 8008e42:	229b      	movs	r2, #155	; 0x9b
 8008e44:	4906      	ldr	r1, [pc, #24]	; (8008e60 <tcpip_thread+0xf0>)
 8008e46:	4807      	ldr	r0, [pc, #28]	; (8008e64 <tcpip_thread+0xf4>)
 8008e48:	f00b fbd2 	bl	80145f0 <iprintf>
      break;
 8008e4c:	bf00      	nop
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008e4e:	e79d      	b.n	8008d8c <tcpip_thread+0x1c>
 8008e50:	20003e3c 	.word	0x20003e3c
 8008e54:	20003e40 	.word	0x20003e40
 8008e58:	20003e44 	.word	0x20003e44
 8008e5c:	08015fb8 	.word	0x08015fb8
 8008e60:	08015fe8 	.word	0x08015fe8
 8008e64:	08016008 	.word	0x08016008

08008e68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008e74:	481a      	ldr	r0, [pc, #104]	; (8008ee0 <tcpip_inpkt+0x78>)
 8008e76:	f00a f8a5 	bl	8012fc4 <sys_mbox_valid>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d105      	bne.n	8008e8c <tcpip_inpkt+0x24>
 8008e80:	4b18      	ldr	r3, [pc, #96]	; (8008ee4 <tcpip_inpkt+0x7c>)
 8008e82:	22b5      	movs	r2, #181	; 0xb5
 8008e84:	4918      	ldr	r1, [pc, #96]	; (8008ee8 <tcpip_inpkt+0x80>)
 8008e86:	4819      	ldr	r0, [pc, #100]	; (8008eec <tcpip_inpkt+0x84>)
 8008e88:	f00b fbb2 	bl	80145f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008e8c:	2009      	movs	r0, #9
 8008e8e:	f002 ff79 	bl	800bd84 <memp_malloc>
 8008e92:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e9e:	e01a      	b.n	8008ed6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008eb8:	6979      	ldr	r1, [r7, #20]
 8008eba:	4809      	ldr	r0, [pc, #36]	; (8008ee0 <tcpip_inpkt+0x78>)
 8008ebc:	f00a f80d 	bl	8012eda <sys_mbox_trypost>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008ec6:	6979      	ldr	r1, [r7, #20]
 8008ec8:	2009      	movs	r0, #9
 8008eca:	f002 ffad 	bl	800be28 <memp_free>
    return ERR_MEM;
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed2:	e000      	b.n	8008ed6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008ed4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20003e44 	.word	0x20003e44
 8008ee4:	08015fb8 	.word	0x08015fb8
 8008ee8:	08016030 	.word	0x08016030
 8008eec:	08016008 	.word	0x08016008

08008ef0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008f00:	f003 0318 	and.w	r3, r3, #24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <tcpip_input+0x3c>)
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ffab 	bl	8008e68 <tcpip_inpkt>
 8008f12:	4603      	mov	r3, r0
 8008f14:	e005      	b.n	8008f22 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008f16:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <tcpip_input+0x40>)
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff ffa4 	bl	8008e68 <tcpip_inpkt>
 8008f20:	4603      	mov	r3, r0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	08012c9d 	.word	0x08012c9d
 8008f30:	0800a34d 	.word	0x0800a34d

08008f34 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008f42:	481d      	ldr	r0, [pc, #116]	; (8008fb8 <tcpip_callback_with_block+0x84>)
 8008f44:	f00a f83e 	bl	8012fc4 <sys_mbox_valid>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <tcpip_callback_with_block+0x26>
 8008f4e:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <tcpip_callback_with_block+0x88>)
 8008f50:	22ee      	movs	r2, #238	; 0xee
 8008f52:	491b      	ldr	r1, [pc, #108]	; (8008fc0 <tcpip_callback_with_block+0x8c>)
 8008f54:	481b      	ldr	r0, [pc, #108]	; (8008fc4 <tcpip_callback_with_block+0x90>)
 8008f56:	f00b fb4b 	bl	80145f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008f5a:	2008      	movs	r0, #8
 8008f5c:	f002 ff12 	bl	800bd84 <memp_malloc>
 8008f60:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f6c:	e01f      	b.n	8008fae <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2203      	movs	r2, #3
 8008f72:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	609a      	str	r2, [r3, #8]
  if (block) {
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	480b      	ldr	r0, [pc, #44]	; (8008fb8 <tcpip_callback_with_block+0x84>)
 8008f8a:	f009 ff91 	bl	8012eb0 <sys_mbox_post>
 8008f8e:	e00d      	b.n	8008fac <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008f90:	6979      	ldr	r1, [r7, #20]
 8008f92:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <tcpip_callback_with_block+0x84>)
 8008f94:	f009 ffa1 	bl	8012eda <sys_mbox_trypost>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d006      	beq.n	8008fac <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008f9e:	6979      	ldr	r1, [r7, #20]
 8008fa0:	2008      	movs	r0, #8
 8008fa2:	f002 ff41 	bl	800be28 <memp_free>
      return ERR_MEM;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008faa:	e000      	b.n	8008fae <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20003e44 	.word	0x20003e44
 8008fbc:	08015fb8 	.word	0x08015fb8
 8008fc0:	08016030 	.word	0x08016030
 8008fc4:	08016008 	.word	0x08016008

08008fc8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ERR_OK;
#else /* LWIP_TCPIP_CORE_LOCKING */
  TCPIP_MSG_VAR_DECLARE(msg);

  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f00a f884 	bl	80130e2 <sys_sem_valid>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <tcpip_send_msg_wait_sem+0x26>
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <tcpip_send_msg_wait_sem+0x6c>)
 8008fe2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8008fe6:	4914      	ldr	r1, [pc, #80]	; (8009038 <tcpip_send_msg_wait_sem+0x70>)
 8008fe8:	4814      	ldr	r0, [pc, #80]	; (800903c <tcpip_send_msg_wait_sem+0x74>)
 8008fea:	f00b fb01 	bl	80145f0 <iprintf>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008fee:	4814      	ldr	r0, [pc, #80]	; (8009040 <tcpip_send_msg_wait_sem+0x78>)
 8008ff0:	f009 ffe8 	bl	8012fc4 <sys_mbox_valid>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <tcpip_send_msg_wait_sem+0x40>
 8008ffa:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <tcpip_send_msg_wait_sem+0x6c>)
 8008ffc:	f240 1255 	movw	r2, #341	; 0x155
 8009000:	4910      	ldr	r1, [pc, #64]	; (8009044 <tcpip_send_msg_wait_sem+0x7c>)
 8009002:	480e      	ldr	r0, [pc, #56]	; (800903c <tcpip_send_msg_wait_sem+0x74>)
 8009004:	f00b faf4 	bl	80145f0 <iprintf>

  TCPIP_MSG_VAR_ALLOC(msg);
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8009008:	2300      	movs	r3, #0
 800900a:	743b      	strb	r3, [r7, #16]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	617b      	str	r3, [r7, #20]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	61bb      	str	r3, [r7, #24]
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 8009014:	f107 0310 	add.w	r3, r7, #16
 8009018:	4619      	mov	r1, r3
 800901a:	4809      	ldr	r0, [pc, #36]	; (8009040 <tcpip_send_msg_wait_sem+0x78>)
 800901c:	f009 ff48 	bl	8012eb0 <sys_mbox_post>
  sys_arch_sem_wait(sem, 0);
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f00a f812 	bl	801304c <sys_arch_sem_wait>
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
 8009028:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	08015fb8 	.word	0x08015fb8
 8009038:	08016040 	.word	0x08016040
 800903c:	08016008 	.word	0x08016008
 8009040:	20003e44 	.word	0x20003e44
 8009044:	08016030 	.word	0x08016030

08009048 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009052:	f000 f858 	bl	8009106 <lwip_init>

  tcpip_init_done = initfunc;
 8009056:	4a10      	ldr	r2, [pc, #64]	; (8009098 <tcpip_init+0x50>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800905c:	4a0f      	ldr	r2, [pc, #60]	; (800909c <tcpip_init+0x54>)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009062:	2106      	movs	r1, #6
 8009064:	480e      	ldr	r0, [pc, #56]	; (80090a0 <tcpip_init+0x58>)
 8009066:	f009 fef3 	bl	8012e50 <sys_mbox_new>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <tcpip_init+0x5c>)
 8009072:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009076:	490c      	ldr	r1, [pc, #48]	; (80090a8 <tcpip_init+0x60>)
 8009078:	480c      	ldr	r0, [pc, #48]	; (80090ac <tcpip_init+0x64>)
 800907a:	f00b fab9 	bl	80145f0 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800907e:	2303      	movs	r3, #3
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009086:	2200      	movs	r2, #0
 8009088:	4909      	ldr	r1, [pc, #36]	; (80090b0 <tcpip_init+0x68>)
 800908a:	480a      	ldr	r0, [pc, #40]	; (80090b4 <tcpip_init+0x6c>)
 800908c:	f00a f88c 	bl	80131a8 <sys_thread_new>
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20003e3c 	.word	0x20003e3c
 800909c:	20003e40 	.word	0x20003e40
 80090a0:	20003e44 	.word	0x20003e44
 80090a4:	08015fb8 	.word	0x08015fb8
 80090a8:	0801605c 	.word	0x0801605c
 80090ac:	08016008 	.word	0x08016008
 80090b0:	08008d71 	.word	0x08008d71
 80090b4:	08016080 	.word	0x08016080

080090b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80090c2:	88fb      	ldrh	r3, [r7, #6]
 80090c4:	ba5b      	rev16	r3, r3
 80090c6:	b29b      	uxth	r3, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	061a      	lsls	r2, r3, #24
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	0e1b      	lsrs	r3, r3, #24
 80090f8:	4313      	orrs	r3, r2
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009110:	f00a f806 	bl	8013120 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009114:	f002 fb1e 	bl	800b754 <mem_init>
  memp_init();
 8009118:	f002 fde8 	bl	800bcec <memp_init>
  pbuf_init();
  netif_init();
 800911c:	f002 feae 	bl	800be7c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009120:	f009 f9ca 	bl	80124b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009124:	f003 fe60 	bl	800cde8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009128:	f009 f864 	bl	80121f4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800913c:	4915      	ldr	r1, [pc, #84]	; (8009194 <etharp_free_entry+0x60>)
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	440b      	add	r3, r1
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d013      	beq.n	8009178 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009150:	4910      	ldr	r1, [pc, #64]	; (8009194 <etharp_free_entry+0x60>)
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	440b      	add	r3, r1
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f003 fbbb 	bl	800c8dc <pbuf_free>
    arp_table[i].q = NULL;
 8009166:	490b      	ldr	r1, [pc, #44]	; (8009194 <etharp_free_entry+0x60>)
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4413      	add	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	440b      	add	r3, r1
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009178:	4906      	ldr	r1, [pc, #24]	; (8009194 <etharp_free_entry+0x60>)
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	4413      	add	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	440b      	add	r3, r1
 8009186:	3314      	adds	r3, #20
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20003e48 	.word	0x20003e48

08009198 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800919e:	2300      	movs	r3, #0
 80091a0:	71fb      	strb	r3, [r7, #7]
 80091a2:	e096      	b.n	80092d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80091a4:	79fa      	ldrb	r2, [r7, #7]
 80091a6:	494f      	ldr	r1, [pc, #316]	; (80092e4 <etharp_tmr+0x14c>)
 80091a8:	4613      	mov	r3, r2
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	4413      	add	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	440b      	add	r3, r1
 80091b2:	3314      	adds	r3, #20
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80091b8:	79bb      	ldrb	r3, [r7, #6]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8086 	beq.w	80092cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80091c0:	79fa      	ldrb	r2, [r7, #7]
 80091c2:	4948      	ldr	r1, [pc, #288]	; (80092e4 <etharp_tmr+0x14c>)
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	440b      	add	r3, r1
 80091ce:	3312      	adds	r3, #18
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	b298      	uxth	r0, r3
 80091d6:	4943      	ldr	r1, [pc, #268]	; (80092e4 <etharp_tmr+0x14c>)
 80091d8:	4613      	mov	r3, r2
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	440b      	add	r3, r1
 80091e2:	3312      	adds	r3, #18
 80091e4:	4602      	mov	r2, r0
 80091e6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80091e8:	79fa      	ldrb	r2, [r7, #7]
 80091ea:	493e      	ldr	r1, [pc, #248]	; (80092e4 <etharp_tmr+0x14c>)
 80091ec:	4613      	mov	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	440b      	add	r3, r1
 80091f6:	3312      	adds	r3, #18
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80091fe:	d215      	bcs.n	800922c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	4938      	ldr	r1, [pc, #224]	; (80092e4 <etharp_tmr+0x14c>)
 8009204:	4613      	mov	r3, r2
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	4413      	add	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	440b      	add	r3, r1
 800920e:	3314      	adds	r3, #20
 8009210:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009212:	2b01      	cmp	r3, #1
 8009214:	d10f      	bne.n	8009236 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009216:	79fa      	ldrb	r2, [r7, #7]
 8009218:	4932      	ldr	r1, [pc, #200]	; (80092e4 <etharp_tmr+0x14c>)
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	440b      	add	r3, r1
 8009224:	3312      	adds	r3, #18
 8009226:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009228:	2b04      	cmp	r3, #4
 800922a:	d904      	bls.n	8009236 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff ff80 	bl	8009134 <etharp_free_entry>
 8009234:	e04a      	b.n	80092cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009236:	79fa      	ldrb	r2, [r7, #7]
 8009238:	492a      	ldr	r1, [pc, #168]	; (80092e4 <etharp_tmr+0x14c>)
 800923a:	4613      	mov	r3, r2
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4413      	add	r3, r2
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	440b      	add	r3, r1
 8009244:	3314      	adds	r3, #20
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d10a      	bne.n	8009262 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800924c:	79fa      	ldrb	r2, [r7, #7]
 800924e:	4925      	ldr	r1, [pc, #148]	; (80092e4 <etharp_tmr+0x14c>)
 8009250:	4613      	mov	r3, r2
 8009252:	005b      	lsls	r3, r3, #1
 8009254:	4413      	add	r3, r2
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	440b      	add	r3, r1
 800925a:	3314      	adds	r3, #20
 800925c:	2204      	movs	r2, #4
 800925e:	701a      	strb	r2, [r3, #0]
 8009260:	e034      	b.n	80092cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009262:	79fa      	ldrb	r2, [r7, #7]
 8009264:	491f      	ldr	r1, [pc, #124]	; (80092e4 <etharp_tmr+0x14c>)
 8009266:	4613      	mov	r3, r2
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	4413      	add	r3, r2
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	440b      	add	r3, r1
 8009270:	3314      	adds	r3, #20
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b04      	cmp	r3, #4
 8009276:	d10a      	bne.n	800928e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009278:	79fa      	ldrb	r2, [r7, #7]
 800927a:	491a      	ldr	r1, [pc, #104]	; (80092e4 <etharp_tmr+0x14c>)
 800927c:	4613      	mov	r3, r2
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	4413      	add	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	440b      	add	r3, r1
 8009286:	3314      	adds	r3, #20
 8009288:	2202      	movs	r2, #2
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	e01e      	b.n	80092cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800928e:	79fa      	ldrb	r2, [r7, #7]
 8009290:	4914      	ldr	r1, [pc, #80]	; (80092e4 <etharp_tmr+0x14c>)
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	440b      	add	r3, r1
 800929c:	3314      	adds	r3, #20
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d113      	bne.n	80092cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80092a4:	79fa      	ldrb	r2, [r7, #7]
 80092a6:	490f      	ldr	r1, [pc, #60]	; (80092e4 <etharp_tmr+0x14c>)
 80092a8:	4613      	mov	r3, r2
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	4413      	add	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	440b      	add	r3, r1
 80092b2:	3308      	adds	r3, #8
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	79fa      	ldrb	r2, [r7, #7]
 80092b8:	4613      	mov	r3, r2
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	4413      	add	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <etharp_tmr+0x14c>)
 80092c2:	4413      	add	r3, r2
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	f000 fe38 	bl	8009f3c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	3301      	adds	r3, #1
 80092d0:	71fb      	strb	r3, [r7, #7]
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	f67f af65 	bls.w	80091a4 <etharp_tmr+0xc>
      }
    }
  }
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20003e48 	.word	0x20003e48

080092e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	460b      	mov	r3, r1
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80092f6:	230a      	movs	r3, #10
 80092f8:	77fb      	strb	r3, [r7, #31]
 80092fa:	230a      	movs	r3, #10
 80092fc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80092fe:	230a      	movs	r3, #10
 8009300:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8009306:	230a      	movs	r3, #10
 8009308:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	833b      	strh	r3, [r7, #24]
 800930e:	2300      	movs	r3, #0
 8009310:	82fb      	strh	r3, [r7, #22]
 8009312:	2300      	movs	r3, #0
 8009314:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009316:	2300      	movs	r3, #0
 8009318:	773b      	strb	r3, [r7, #28]
 800931a:	e093      	b.n	8009444 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800931c:	7f3a      	ldrb	r2, [r7, #28]
 800931e:	4990      	ldr	r1, [pc, #576]	; (8009560 <etharp_find_entry+0x278>)
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	3314      	adds	r3, #20
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009330:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009334:	2b0a      	cmp	r3, #10
 8009336:	d105      	bne.n	8009344 <etharp_find_entry+0x5c>
 8009338:	7cfb      	ldrb	r3, [r7, #19]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800933e:	7f3b      	ldrb	r3, [r7, #28]
 8009340:	777b      	strb	r3, [r7, #29]
 8009342:	e07c      	b.n	800943e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009344:	7cfb      	ldrb	r3, [r7, #19]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d079      	beq.n	800943e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800934a:	7cfb      	ldrb	r3, [r7, #19]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d009      	beq.n	8009364 <etharp_find_entry+0x7c>
 8009350:	7cfb      	ldrb	r3, [r7, #19]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d806      	bhi.n	8009364 <etharp_find_entry+0x7c>
 8009356:	4b83      	ldr	r3, [pc, #524]	; (8009564 <etharp_find_entry+0x27c>)
 8009358:	f44f 7293 	mov.w	r2, #294	; 0x126
 800935c:	4982      	ldr	r1, [pc, #520]	; (8009568 <etharp_find_entry+0x280>)
 800935e:	4883      	ldr	r0, [pc, #524]	; (800956c <etharp_find_entry+0x284>)
 8009360:	f00b f946 	bl	80145f0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00f      	beq.n	800938a <etharp_find_entry+0xa2>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6819      	ldr	r1, [r3, #0]
 800936e:	7f3a      	ldrb	r2, [r7, #28]
 8009370:	487b      	ldr	r0, [pc, #492]	; (8009560 <etharp_find_entry+0x278>)
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4403      	add	r3, r0
 800937c:	3304      	adds	r3, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4299      	cmp	r1, r3
 8009382:	d102      	bne.n	800938a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8009384:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009388:	e0e5      	b.n	8009556 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800938a:	7cfb      	ldrb	r3, [r7, #19]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d13b      	bne.n	8009408 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009390:	7f3a      	ldrb	r2, [r7, #28]
 8009392:	4973      	ldr	r1, [pc, #460]	; (8009560 <etharp_find_entry+0x278>)
 8009394:	4613      	mov	r3, r2
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	4413      	add	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	440b      	add	r3, r1
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d018      	beq.n	80093d6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80093a4:	7f3a      	ldrb	r2, [r7, #28]
 80093a6:	496e      	ldr	r1, [pc, #440]	; (8009560 <etharp_find_entry+0x278>)
 80093a8:	4613      	mov	r3, r2
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	4413      	add	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	440b      	add	r3, r1
 80093b2:	3312      	adds	r3, #18
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	8b3a      	ldrh	r2, [r7, #24]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d840      	bhi.n	800943e <etharp_find_entry+0x156>
            old_queue = i;
 80093bc:	7f3b      	ldrb	r3, [r7, #28]
 80093be:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80093c0:	7f3a      	ldrb	r2, [r7, #28]
 80093c2:	4967      	ldr	r1, [pc, #412]	; (8009560 <etharp_find_entry+0x278>)
 80093c4:	4613      	mov	r3, r2
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	4413      	add	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	440b      	add	r3, r1
 80093ce:	3312      	adds	r3, #18
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	833b      	strh	r3, [r7, #24]
 80093d4:	e033      	b.n	800943e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80093d6:	7f3a      	ldrb	r2, [r7, #28]
 80093d8:	4961      	ldr	r1, [pc, #388]	; (8009560 <etharp_find_entry+0x278>)
 80093da:	4613      	mov	r3, r2
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4413      	add	r3, r2
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	440b      	add	r3, r1
 80093e4:	3312      	adds	r3, #18
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	8afa      	ldrh	r2, [r7, #22]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d827      	bhi.n	800943e <etharp_find_entry+0x156>
            old_pending = i;
 80093ee:	7f3b      	ldrb	r3, [r7, #28]
 80093f0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80093f2:	7f3a      	ldrb	r2, [r7, #28]
 80093f4:	495a      	ldr	r1, [pc, #360]	; (8009560 <etharp_find_entry+0x278>)
 80093f6:	4613      	mov	r3, r2
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	4413      	add	r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	440b      	add	r3, r1
 8009400:	3312      	adds	r3, #18
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	82fb      	strh	r3, [r7, #22]
 8009406:	e01a      	b.n	800943e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009408:	7cfb      	ldrb	r3, [r7, #19]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d917      	bls.n	800943e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800940e:	7f3a      	ldrb	r2, [r7, #28]
 8009410:	4953      	ldr	r1, [pc, #332]	; (8009560 <etharp_find_entry+0x278>)
 8009412:	4613      	mov	r3, r2
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	4413      	add	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	440b      	add	r3, r1
 800941c:	3312      	adds	r3, #18
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	8aba      	ldrh	r2, [r7, #20]
 8009422:	429a      	cmp	r2, r3
 8009424:	d80b      	bhi.n	800943e <etharp_find_entry+0x156>
            old_stable = i;
 8009426:	7f3b      	ldrb	r3, [r7, #28]
 8009428:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800942a:	7f3a      	ldrb	r2, [r7, #28]
 800942c:	494c      	ldr	r1, [pc, #304]	; (8009560 <etharp_find_entry+0x278>)
 800942e:	4613      	mov	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4413      	add	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	440b      	add	r3, r1
 8009438:	3312      	adds	r3, #18
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800943e:	7f3b      	ldrb	r3, [r7, #28]
 8009440:	3301      	adds	r3, #1
 8009442:	773b      	strb	r3, [r7, #28]
 8009444:	7f3b      	ldrb	r3, [r7, #28]
 8009446:	2b09      	cmp	r3, #9
 8009448:	f67f af68 	bls.w	800931c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d108      	bne.n	8009468 <etharp_find_entry+0x180>
 8009456:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800945a:	2b0a      	cmp	r3, #10
 800945c:	d107      	bne.n	800946e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8009468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800946c:	e073      	b.n	8009556 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800946e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009472:	2b09      	cmp	r3, #9
 8009474:	dc02      	bgt.n	800947c <etharp_find_entry+0x194>
    i = empty;
 8009476:	7f7b      	ldrb	r3, [r7, #29]
 8009478:	773b      	strb	r3, [r7, #28]
 800947a:	e036      	b.n	80094ea <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800947c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009480:	2b09      	cmp	r3, #9
 8009482:	dc13      	bgt.n	80094ac <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8009484:	7fbb      	ldrb	r3, [r7, #30]
 8009486:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009488:	7f3a      	ldrb	r2, [r7, #28]
 800948a:	4935      	ldr	r1, [pc, #212]	; (8009560 <etharp_find_entry+0x278>)
 800948c:	4613      	mov	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	440b      	add	r3, r1
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d018      	beq.n	80094ce <etharp_find_entry+0x1e6>
 800949c:	4b31      	ldr	r3, [pc, #196]	; (8009564 <etharp_find_entry+0x27c>)
 800949e:	f240 126f 	movw	r2, #367	; 0x16f
 80094a2:	4933      	ldr	r1, [pc, #204]	; (8009570 <etharp_find_entry+0x288>)
 80094a4:	4831      	ldr	r0, [pc, #196]	; (800956c <etharp_find_entry+0x284>)
 80094a6:	f00b f8a3 	bl	80145f0 <iprintf>
 80094aa:	e010      	b.n	80094ce <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80094ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094b0:	2b09      	cmp	r3, #9
 80094b2:	dc02      	bgt.n	80094ba <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80094b4:	7ffb      	ldrb	r3, [r7, #31]
 80094b6:	773b      	strb	r3, [r7, #28]
 80094b8:	e009      	b.n	80094ce <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80094ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80094be:	2b09      	cmp	r3, #9
 80094c0:	dc02      	bgt.n	80094c8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80094c2:	7efb      	ldrb	r3, [r7, #27]
 80094c4:	773b      	strb	r3, [r7, #28]
 80094c6:	e002      	b.n	80094ce <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80094c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094cc:	e043      	b.n	8009556 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80094ce:	7f3b      	ldrb	r3, [r7, #28]
 80094d0:	2b09      	cmp	r3, #9
 80094d2:	d906      	bls.n	80094e2 <etharp_find_entry+0x1fa>
 80094d4:	4b23      	ldr	r3, [pc, #140]	; (8009564 <etharp_find_entry+0x27c>)
 80094d6:	f240 1281 	movw	r2, #385	; 0x181
 80094da:	4926      	ldr	r1, [pc, #152]	; (8009574 <etharp_find_entry+0x28c>)
 80094dc:	4823      	ldr	r0, [pc, #140]	; (800956c <etharp_find_entry+0x284>)
 80094de:	f00b f887 	bl	80145f0 <iprintf>
    etharp_free_entry(i);
 80094e2:	7f3b      	ldrb	r3, [r7, #28]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fe25 	bl	8009134 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80094ea:	7f3b      	ldrb	r3, [r7, #28]
 80094ec:	2b09      	cmp	r3, #9
 80094ee:	d906      	bls.n	80094fe <etharp_find_entry+0x216>
 80094f0:	4b1c      	ldr	r3, [pc, #112]	; (8009564 <etharp_find_entry+0x27c>)
 80094f2:	f240 1285 	movw	r2, #389	; 0x185
 80094f6:	491f      	ldr	r1, [pc, #124]	; (8009574 <etharp_find_entry+0x28c>)
 80094f8:	481c      	ldr	r0, [pc, #112]	; (800956c <etharp_find_entry+0x284>)
 80094fa:	f00b f879 	bl	80145f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80094fe:	7f3a      	ldrb	r2, [r7, #28]
 8009500:	4917      	ldr	r1, [pc, #92]	; (8009560 <etharp_find_entry+0x278>)
 8009502:	4613      	mov	r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	4413      	add	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	440b      	add	r3, r1
 800950c:	3314      	adds	r3, #20
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d006      	beq.n	8009522 <etharp_find_entry+0x23a>
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <etharp_find_entry+0x27c>)
 8009516:	f240 1287 	movw	r2, #391	; 0x187
 800951a:	4917      	ldr	r1, [pc, #92]	; (8009578 <etharp_find_entry+0x290>)
 800951c:	4813      	ldr	r0, [pc, #76]	; (800956c <etharp_find_entry+0x284>)
 800951e:	f00b f867 	bl	80145f0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00a      	beq.n	800953e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009528:	7f3a      	ldrb	r2, [r7, #28]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6819      	ldr	r1, [r3, #0]
 800952e:	480c      	ldr	r0, [pc, #48]	; (8009560 <etharp_find_entry+0x278>)
 8009530:	4613      	mov	r3, r2
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	4413      	add	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4403      	add	r3, r0
 800953a:	3304      	adds	r3, #4
 800953c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800953e:	7f3a      	ldrb	r2, [r7, #28]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <etharp_find_entry+0x278>)
 8009542:	4613      	mov	r3, r2
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4413      	add	r3, r2
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	440b      	add	r3, r1
 800954c:	3312      	adds	r3, #18
 800954e:	2200      	movs	r2, #0
 8009550:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009552:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20003e48 	.word	0x20003e48
 8009564:	08016090 	.word	0x08016090
 8009568:	080160c8 	.word	0x080160c8
 800956c:	08016108 	.word	0x08016108
 8009570:	08016130 	.word	0x08016130
 8009574:	08016148 	.word	0x08016148
 8009578:	0801615c 	.word	0x0801615c

0800957c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af02      	add	r7, sp, #8
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009590:	2b06      	cmp	r3, #6
 8009592:	d006      	beq.n	80095a2 <etharp_update_arp_entry+0x26>
 8009594:	4b48      	ldr	r3, [pc, #288]	; (80096b8 <etharp_update_arp_entry+0x13c>)
 8009596:	f240 12ab 	movw	r2, #427	; 0x1ab
 800959a:	4948      	ldr	r1, [pc, #288]	; (80096bc <etharp_update_arp_entry+0x140>)
 800959c:	4848      	ldr	r0, [pc, #288]	; (80096c0 <etharp_update_arp_entry+0x144>)
 800959e:	f00b f827 	bl	80145f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d012      	beq.n	80095ce <etharp_update_arp_entry+0x52>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68f9      	ldr	r1, [r7, #12]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 f8d6 	bl	800a768 <ip4_addr_isbroadcast_u32>
 80095bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80095ca:	2be0      	cmp	r3, #224	; 0xe0
 80095cc:	d102      	bne.n	80095d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80095ce:	f06f 030f 	mvn.w	r3, #15
 80095d2:	e06c      	b.n	80096ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4619      	mov	r1, r3
 80095da:	68b8      	ldr	r0, [r7, #8]
 80095dc:	f7ff fe84 	bl	80092e8 <etharp_find_entry>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80095e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da02      	bge.n	80095f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80095ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095f0:	e05d      	b.n	80096ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80095f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80095f6:	4933      	ldr	r1, [pc, #204]	; (80096c4 <etharp_update_arp_entry+0x148>)
 80095f8:	4613      	mov	r3, r2
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	4413      	add	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	440b      	add	r3, r1
 8009602:	3314      	adds	r3, #20
 8009604:	2202      	movs	r2, #2
 8009606:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009608:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800960c:	492d      	ldr	r1, [pc, #180]	; (80096c4 <etharp_update_arp_entry+0x148>)
 800960e:	4613      	mov	r3, r2
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	4413      	add	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	440b      	add	r3, r1
 8009618:	3308      	adds	r3, #8
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800961e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009622:	4613      	mov	r3, r2
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	3308      	adds	r3, #8
 800962c:	4a25      	ldr	r2, [pc, #148]	; (80096c4 <etharp_update_arp_entry+0x148>)
 800962e:	4413      	add	r3, r2
 8009630:	3304      	adds	r3, #4
 8009632:	2206      	movs	r2, #6
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4618      	mov	r0, r3
 8009638:	f00a ffc7 	bl	80145ca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800963c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009640:	4920      	ldr	r1, [pc, #128]	; (80096c4 <etharp_update_arp_entry+0x148>)
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	440b      	add	r3, r1
 800964c:	3312      	adds	r3, #18
 800964e:	2200      	movs	r2, #0
 8009650:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009652:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009656:	491b      	ldr	r1, [pc, #108]	; (80096c4 <etharp_update_arp_entry+0x148>)
 8009658:	4613      	mov	r3, r2
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	4413      	add	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	440b      	add	r3, r1
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d021      	beq.n	80096ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009668:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800966c:	4915      	ldr	r1, [pc, #84]	; (80096c4 <etharp_update_arp_entry+0x148>)
 800966e:	4613      	mov	r3, r2
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	4413      	add	r3, r2
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	440b      	add	r3, r1
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800967c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009680:	4910      	ldr	r1, [pc, #64]	; (80096c4 <etharp_update_arp_entry+0x148>)
 8009682:	4613      	mov	r3, r2
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	4413      	add	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	440b      	add	r3, r1
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8009696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6939      	ldr	r1, [r7, #16]
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f009 fb8d 	bl	8012dc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80096a6:	6938      	ldr	r0, [r7, #16]
 80096a8:	f003 f918 	bl	800c8dc <pbuf_free>
  }
  return ERR_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	08016090 	.word	0x08016090
 80096bc:	08016188 	.word	0x08016188
 80096c0:	08016108 	.word	0x08016108
 80096c4:	20003e48 	.word	0x20003e48

080096c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	e01f      	b.n	8009716 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80096d6:	7bfa      	ldrb	r2, [r7, #15]
 80096d8:	4912      	ldr	r1, [pc, #72]	; (8009724 <etharp_cleanup_netif+0x5c>)
 80096da:	4613      	mov	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	440b      	add	r3, r1
 80096e4:	3314      	adds	r3, #20
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00f      	beq.n	8009710 <etharp_cleanup_netif+0x48>
 80096f0:	7bfa      	ldrb	r2, [r7, #15]
 80096f2:	490c      	ldr	r1, [pc, #48]	; (8009724 <etharp_cleanup_netif+0x5c>)
 80096f4:	4613      	mov	r3, r2
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	4413      	add	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	440b      	add	r3, r1
 80096fe:	3308      	adds	r3, #8
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d103      	bne.n	8009710 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fd12 	bl	8009134 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	3301      	adds	r3, #1
 8009714:	73fb      	strb	r3, [r7, #15]
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	2b09      	cmp	r3, #9
 800971a:	d9dc      	bls.n	80096d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20003e48 	.word	0x20003e48

08009728 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af04      	add	r7, sp, #16
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d107      	bne.n	8009748 <etharp_input+0x20>
 8009738:	4b3d      	ldr	r3, [pc, #244]	; (8009830 <etharp_input+0x108>)
 800973a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800973e:	493d      	ldr	r1, [pc, #244]	; (8009834 <etharp_input+0x10c>)
 8009740:	483d      	ldr	r0, [pc, #244]	; (8009838 <etharp_input+0x110>)
 8009742:	f00a ff55 	bl	80145f0 <iprintf>
 8009746:	e06f      	b.n	8009828 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29b      	uxth	r3, r3
 8009754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009758:	d10c      	bne.n	8009774 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800975e:	2b06      	cmp	r3, #6
 8009760:	d108      	bne.n	8009774 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009766:	2b04      	cmp	r3, #4
 8009768:	d104      	bne.n	8009774 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	885b      	ldrh	r3, [r3, #2]
 800976e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009770:	2b08      	cmp	r3, #8
 8009772:	d003      	beq.n	800977c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f003 f8b1 	bl	800c8dc <pbuf_free>
    return;
 800977a:	e055      	b.n	8009828 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	330e      	adds	r3, #14
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	3318      	adds	r3, #24
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	3304      	adds	r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d102      	bne.n	800979c <etharp_input+0x74>
    for_us = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]
 800979a:	e009      	b.n	80097b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	3304      	adds	r3, #4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	bf0c      	ite	eq
 80097a8:	2301      	moveq	r3, #1
 80097aa:	2300      	movne	r3, #0
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f103 0208 	add.w	r2, r3, #8
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <etharp_input+0x98>
 80097bc:	2301      	movs	r3, #1
 80097be:	e000      	b.n	80097c2 <etharp_input+0x9a>
 80097c0:	2302      	movs	r3, #2
 80097c2:	f107 010c 	add.w	r1, r7, #12
 80097c6:	6838      	ldr	r0, [r7, #0]
 80097c8:	f7ff fed8 	bl	800957c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	88db      	ldrh	r3, [r3, #6]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d6:	d003      	beq.n	80097e0 <etharp_input+0xb8>
 80097d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097dc:	d01e      	beq.n	800981c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80097de:	e020      	b.n	8009822 <etharp_input+0xfa>
    if (for_us) {
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01c      	beq.n	8009820 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	3208      	adds	r2, #8
      etharp_raw(netif,
 8009800:	2102      	movs	r1, #2
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	f107 010c 	add.w	r1, r7, #12
 8009808:	9102      	str	r1, [sp, #8]
 800980a:	9201      	str	r2, [sp, #4]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	462b      	mov	r3, r5
 8009810:	4622      	mov	r2, r4
 8009812:	4601      	mov	r1, r0
 8009814:	6838      	ldr	r0, [r7, #0]
 8009816:	f000 fae3 	bl	8009de0 <etharp_raw>
    break;
 800981a:	e001      	b.n	8009820 <etharp_input+0xf8>
    break;
 800981c:	bf00      	nop
 800981e:	e000      	b.n	8009822 <etharp_input+0xfa>
    break;
 8009820:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f003 f85a 	bl	800c8dc <pbuf_free>
}
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bdb0      	pop	{r4, r5, r7, pc}
 800982e:	bf00      	nop
 8009830:	08016090 	.word	0x08016090
 8009834:	080161e0 	.word	0x080161e0
 8009838:	08016108 	.word	0x08016108

0800983c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af02      	add	r7, sp, #8
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800984a:	79fa      	ldrb	r2, [r7, #7]
 800984c:	4944      	ldr	r1, [pc, #272]	; (8009960 <etharp_output_to_arp_index+0x124>)
 800984e:	4613      	mov	r3, r2
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	4413      	add	r3, r2
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	440b      	add	r3, r1
 8009858:	3314      	adds	r3, #20
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d806      	bhi.n	800986e <etharp_output_to_arp_index+0x32>
 8009860:	4b40      	ldr	r3, [pc, #256]	; (8009964 <etharp_output_to_arp_index+0x128>)
 8009862:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009866:	4940      	ldr	r1, [pc, #256]	; (8009968 <etharp_output_to_arp_index+0x12c>)
 8009868:	4840      	ldr	r0, [pc, #256]	; (800996c <etharp_output_to_arp_index+0x130>)
 800986a:	f00a fec1 	bl	80145f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800986e:	79fa      	ldrb	r2, [r7, #7]
 8009870:	493b      	ldr	r1, [pc, #236]	; (8009960 <etharp_output_to_arp_index+0x124>)
 8009872:	4613      	mov	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4413      	add	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	440b      	add	r3, r1
 800987c:	3314      	adds	r3, #20
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d153      	bne.n	800992c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009884:	79fa      	ldrb	r2, [r7, #7]
 8009886:	4936      	ldr	r1, [pc, #216]	; (8009960 <etharp_output_to_arp_index+0x124>)
 8009888:	4613      	mov	r3, r2
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	4413      	add	r3, r2
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	440b      	add	r3, r1
 8009892:	3312      	adds	r3, #18
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800989a:	d919      	bls.n	80098d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800989c:	79fa      	ldrb	r2, [r7, #7]
 800989e:	4613      	mov	r3, r2
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	4413      	add	r3, r2
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4a2e      	ldr	r2, [pc, #184]	; (8009960 <etharp_output_to_arp_index+0x124>)
 80098a8:	4413      	add	r3, r2
 80098aa:	3304      	adds	r3, #4
 80098ac:	4619      	mov	r1, r3
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 fb44 	bl	8009f3c <etharp_request>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d138      	bne.n	800992c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80098ba:	79fa      	ldrb	r2, [r7, #7]
 80098bc:	4928      	ldr	r1, [pc, #160]	; (8009960 <etharp_output_to_arp_index+0x124>)
 80098be:	4613      	mov	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4413      	add	r3, r2
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	440b      	add	r3, r1
 80098c8:	3314      	adds	r3, #20
 80098ca:	2203      	movs	r2, #3
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e02d      	b.n	800992c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80098d0:	79fa      	ldrb	r2, [r7, #7]
 80098d2:	4923      	ldr	r1, [pc, #140]	; (8009960 <etharp_output_to_arp_index+0x124>)
 80098d4:	4613      	mov	r3, r2
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	4413      	add	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	440b      	add	r3, r1
 80098de:	3312      	adds	r3, #18
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80098e6:	d321      	bcc.n	800992c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80098e8:	79fa      	ldrb	r2, [r7, #7]
 80098ea:	4613      	mov	r3, r2
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	4413      	add	r3, r2
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <etharp_output_to_arp_index+0x124>)
 80098f4:	4413      	add	r3, r2
 80098f6:	1d19      	adds	r1, r3, #4
 80098f8:	79fa      	ldrb	r2, [r7, #7]
 80098fa:	4613      	mov	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	4413      	add	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	3308      	adds	r3, #8
 8009904:	4a16      	ldr	r2, [pc, #88]	; (8009960 <etharp_output_to_arp_index+0x124>)
 8009906:	4413      	add	r3, r2
 8009908:	3304      	adds	r3, #4
 800990a:	461a      	mov	r2, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 faf3 	bl	8009ef8 <etharp_request_dst>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	4911      	ldr	r1, [pc, #68]	; (8009960 <etharp_output_to_arp_index+0x124>)
 800991c:	4613      	mov	r3, r2
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	4413      	add	r3, r2
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	440b      	add	r3, r1
 8009926:	3314      	adds	r3, #20
 8009928:	2203      	movs	r2, #3
 800992a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8009932:	79fa      	ldrb	r2, [r7, #7]
 8009934:	4613      	mov	r3, r2
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	4413      	add	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	3308      	adds	r3, #8
 800993e:	4a08      	ldr	r2, [pc, #32]	; (8009960 <etharp_output_to_arp_index+0x124>)
 8009940:	4413      	add	r3, r2
 8009942:	1d1a      	adds	r2, r3, #4
 8009944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	4613      	mov	r3, r2
 800994c:	460a      	mov	r2, r1
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f009 fa35 	bl	8012dc0 <ethernet_output>
 8009956:	4603      	mov	r3, r0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20003e48 	.word	0x20003e48
 8009964:	08016090 	.word	0x08016090
 8009968:	08016200 	.word	0x08016200
 800996c:	08016108 	.word	0x08016108

08009970 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <etharp_output+0x24>
 8009986:	4b69      	ldr	r3, [pc, #420]	; (8009b2c <etharp_output+0x1bc>)
 8009988:	f240 321b 	movw	r2, #795	; 0x31b
 800998c:	4968      	ldr	r1, [pc, #416]	; (8009b30 <etharp_output+0x1c0>)
 800998e:	4869      	ldr	r0, [pc, #420]	; (8009b34 <etharp_output+0x1c4>)
 8009990:	f00a fe2e 	bl	80145f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <etharp_output+0x38>
 800999a:	4b64      	ldr	r3, [pc, #400]	; (8009b2c <etharp_output+0x1bc>)
 800999c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80099a0:	4965      	ldr	r1, [pc, #404]	; (8009b38 <etharp_output+0x1c8>)
 80099a2:	4864      	ldr	r0, [pc, #400]	; (8009b34 <etharp_output+0x1c4>)
 80099a4:	f00a fe24 	bl	80145f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <etharp_output+0x4c>
 80099ae:	4b5f      	ldr	r3, [pc, #380]	; (8009b2c <etharp_output+0x1bc>)
 80099b0:	f240 321d 	movw	r2, #797	; 0x31d
 80099b4:	4961      	ldr	r1, [pc, #388]	; (8009b3c <etharp_output+0x1cc>)
 80099b6:	485f      	ldr	r0, [pc, #380]	; (8009b34 <etharp_output+0x1c4>)
 80099b8:	f00a fe1a 	bl	80145f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68f9      	ldr	r1, [r7, #12]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fed0 	bl	800a768 <ip4_addr_isbroadcast_u32>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80099ce:	4b5c      	ldr	r3, [pc, #368]	; (8009b40 <etharp_output+0x1d0>)
 80099d0:	61fb      	str	r3, [r7, #28]
 80099d2:	e09b      	b.n	8009b0c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099dc:	2be0      	cmp	r3, #224	; 0xe0
 80099de:	d118      	bne.n	8009a12 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80099e0:	2301      	movs	r3, #1
 80099e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80099e4:	2300      	movs	r3, #0
 80099e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80099e8:	235e      	movs	r3, #94	; 0x5e
 80099ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3301      	adds	r3, #1
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3302      	adds	r3, #2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3303      	adds	r3, #3
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009a0a:	f107 0310 	add.w	r3, r7, #16
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	e07c      	b.n	8009b0c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	405a      	eors	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3308      	adds	r3, #8
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4013      	ands	r3, r2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d012      	beq.n	8009a50 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a30:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00b      	beq.n	8009a50 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	330c      	adds	r3, #12
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	e002      	b.n	8009a50 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009a4a:	f06f 0303 	mvn.w	r3, #3
 8009a4e:	e069      	b.n	8009b24 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009a50:	4b3c      	ldr	r3, [pc, #240]	; (8009b44 <etharp_output+0x1d4>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	4619      	mov	r1, r3
 8009a56:	4a3c      	ldr	r2, [pc, #240]	; (8009b48 <etharp_output+0x1d8>)
 8009a58:	460b      	mov	r3, r1
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	440b      	add	r3, r1
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	4413      	add	r3, r2
 8009a62:	3314      	adds	r3, #20
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d917      	bls.n	8009a9a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	4b35      	ldr	r3, [pc, #212]	; (8009b44 <etharp_output+0x1d4>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	4934      	ldr	r1, [pc, #208]	; (8009b48 <etharp_output+0x1d8>)
 8009a76:	4603      	mov	r3, r0
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4403      	add	r3, r0
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	440b      	add	r3, r1
 8009a80:	3304      	adds	r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d108      	bne.n	8009a9a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009a88:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <etharp_output+0x1d4>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff fed3 	bl	800983c <etharp_output_to_arp_index>
 8009a96:	4603      	mov	r3, r0
 8009a98:	e044      	b.n	8009b24 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
 8009a9e:	e02a      	b.n	8009af6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009aa0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009aa4:	4928      	ldr	r1, [pc, #160]	; (8009b48 <etharp_output+0x1d8>)
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	4413      	add	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	440b      	add	r3, r1
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d918      	bls.n	8009aea <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	6819      	ldr	r1, [r3, #0]
 8009abc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009ac0:	4821      	ldr	r0, [pc, #132]	; (8009b48 <etharp_output+0x1d8>)
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	4403      	add	r3, r0
 8009acc:	3304      	adds	r3, #4
 8009ace:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d10a      	bne.n	8009aea <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8009ad4:	7dfa      	ldrb	r2, [r7, #23]
 8009ad6:	4b1b      	ldr	r3, [pc, #108]	; (8009b44 <etharp_output+0x1d4>)
 8009ad8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	461a      	mov	r2, r3
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff feab 	bl	800983c <etharp_output_to_arp_index>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	e01c      	b.n	8009b24 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	3301      	adds	r3, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	75fb      	strb	r3, [r7, #23]
 8009af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	ddd0      	ble.n	8009aa0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	69b9      	ldr	r1, [r7, #24]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f822 	bl	8009b4c <etharp_query>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	e00b      	b.n	8009b24 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8009b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f009 f94f 	bl	8012dc0 <ethernet_output>
 8009b22:	4603      	mov	r3, r0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	08016090 	.word	0x08016090
 8009b30:	080161e0 	.word	0x080161e0
 8009b34:	08016108 	.word	0x08016108
 8009b38:	08016230 	.word	0x08016230
 8009b3c:	080161d0 	.word	0x080161d0
 8009b40:	08018004 	.word	0x08018004
 8009b44:	20003f38 	.word	0x20003f38
 8009b48:	20003e48 	.word	0x20003e48

08009b4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	; 0x30
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3325      	adds	r3, #37	; 0x25
 8009b5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009b5e:	23ff      	movs	r3, #255	; 0xff
 8009b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68f9      	ldr	r1, [r7, #12]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fdfa 	bl	800a768 <ip4_addr_isbroadcast_u32>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10c      	bne.n	8009b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009b82:	2be0      	cmp	r3, #224	; 0xe0
 8009b84:	d006      	beq.n	8009b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009b94:	f06f 030f 	mvn.w	r3, #15
 8009b98:	e10f      	b.n	8009dba <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	68b8      	ldr	r0, [r7, #8]
 8009ba0:	f7ff fba2 	bl	80092e8 <etharp_find_entry>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8009ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da02      	bge.n	8009bb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8009bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bb4:	e101      	b.n	8009dba <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009bb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bba:	4982      	ldr	r1, [pc, #520]	; (8009dc4 <etharp_query+0x278>)
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	005b      	lsls	r3, r3, #1
 8009bc0:	4413      	add	r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3314      	adds	r3, #20
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d117      	bne.n	8009bfe <etharp_query+0xb2>
    is_new_entry = 1;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009bd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bd6:	497b      	ldr	r1, [pc, #492]	; (8009dc4 <etharp_query+0x278>)
 8009bd8:	4613      	mov	r3, r2
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	4413      	add	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	440b      	add	r3, r1
 8009be2:	3314      	adds	r3, #20
 8009be4:	2201      	movs	r2, #1
 8009be6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009be8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bec:	4975      	ldr	r1, [pc, #468]	; (8009dc4 <etharp_query+0x278>)
 8009bee:	4613      	mov	r3, r2
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009bfe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c02:	4970      	ldr	r1, [pc, #448]	; (8009dc4 <etharp_query+0x278>)
 8009c04:	4613      	mov	r3, r2
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	4413      	add	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3314      	adds	r3, #20
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d012      	beq.n	8009c3c <etharp_query+0xf0>
 8009c16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c1a:	496a      	ldr	r1, [pc, #424]	; (8009dc4 <etharp_query+0x278>)
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	4413      	add	r3, r2
 8009c22:	00db      	lsls	r3, r3, #3
 8009c24:	440b      	add	r3, r1
 8009c26:	3314      	adds	r3, #20
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d806      	bhi.n	8009c3c <etharp_query+0xf0>
 8009c2e:	4b66      	ldr	r3, [pc, #408]	; (8009dc8 <etharp_query+0x27c>)
 8009c30:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009c34:	4965      	ldr	r1, [pc, #404]	; (8009dcc <etharp_query+0x280>)
 8009c36:	4866      	ldr	r0, [pc, #408]	; (8009dd0 <etharp_query+0x284>)
 8009c38:	f00a fcda 	bl	80145f0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <etharp_query+0xfc>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10c      	bne.n	8009c62 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f976 	bl	8009f3c <etharp_request>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <etharp_query+0x116>
      return result;
 8009c5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c60:	e0ab      	b.n	8009dba <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <etharp_query+0x12a>
 8009c68:	4b57      	ldr	r3, [pc, #348]	; (8009dc8 <etharp_query+0x27c>)
 8009c6a:	f240 32db 	movw	r2, #987	; 0x3db
 8009c6e:	4959      	ldr	r1, [pc, #356]	; (8009dd4 <etharp_query+0x288>)
 8009c70:	4857      	ldr	r0, [pc, #348]	; (8009dd0 <etharp_query+0x284>)
 8009c72:	f00a fcbd 	bl	80145f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009c76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c7a:	4952      	ldr	r1, [pc, #328]	; (8009dc4 <etharp_query+0x278>)
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	4413      	add	r3, r2
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	440b      	add	r3, r1
 8009c86:	3314      	adds	r3, #20
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d919      	bls.n	8009cc2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8009c8e:	7cfa      	ldrb	r2, [r7, #19]
 8009c90:	4b51      	ldr	r3, [pc, #324]	; (8009dd8 <etharp_query+0x28c>)
 8009c92:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009c94:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	4a48      	ldr	r2, [pc, #288]	; (8009dc4 <etharp_query+0x278>)
 8009ca4:	4413      	add	r3, r2
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f009 f883 	bl	8012dc0 <ethernet_output>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cc0:	e079      	b.n	8009db6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009cc2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cc6:	493f      	ldr	r1, [pc, #252]	; (8009dc4 <etharp_query+0x278>)
 8009cc8:	4613      	mov	r3, r2
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	4413      	add	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3314      	adds	r3, #20
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d16d      	bne.n	8009db6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009ce2:	e01a      	b.n	8009d1a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	895a      	ldrh	r2, [r3, #10]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	891b      	ldrh	r3, [r3, #8]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d10a      	bne.n	8009d06 <etharp_query+0x1ba>
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d006      	beq.n	8009d06 <etharp_query+0x1ba>
 8009cf8:	4b33      	ldr	r3, [pc, #204]	; (8009dc8 <etharp_query+0x27c>)
 8009cfa:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009cfe:	4937      	ldr	r1, [pc, #220]	; (8009ddc <etharp_query+0x290>)
 8009d00:	4833      	ldr	r0, [pc, #204]	; (8009dd0 <etharp_query+0x284>)
 8009d02:	f00a fc75 	bl	80145f0 <iprintf>
      if (p->type != PBUF_ROM) {
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	7b1b      	ldrb	r3, [r3, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d002      	beq.n	8009d14 <etharp_query+0x1c8>
        copy_needed = 1;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	61bb      	str	r3, [r7, #24]
        break;
 8009d12:	e005      	b.n	8009d20 <etharp_query+0x1d4>
      }
      p = p->next;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e1      	bne.n	8009ce4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d017      	beq.n	8009d56 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	891b      	ldrh	r3, [r3, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	2002      	movs	r0, #2
 8009d30:	f002 fa62 	bl	800c1f8 <pbuf_alloc>
 8009d34:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d011      	beq.n	8009d60 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	69f8      	ldr	r0, [r7, #28]
 8009d40:	f002 ff0c 	bl	800cb5c <pbuf_copy>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <etharp_query+0x214>
          pbuf_free(p);
 8009d4a:	69f8      	ldr	r0, [r7, #28]
 8009d4c:	f002 fdc6 	bl	800c8dc <pbuf_free>
          p = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	e004      	b.n	8009d60 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009d5a:	69f8      	ldr	r0, [r7, #28]
 8009d5c:	f002 fe70 	bl	800ca40 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d024      	beq.n	8009db0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009d66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d6a:	4916      	ldr	r1, [pc, #88]	; (8009dc4 <etharp_query+0x278>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	4413      	add	r3, r2
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	440b      	add	r3, r1
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8009d7c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d80:	4910      	ldr	r1, [pc, #64]	; (8009dc4 <etharp_query+0x278>)
 8009d82:	4613      	mov	r3, r2
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	4413      	add	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	440b      	add	r3, r1
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 fda4 	bl	800c8dc <pbuf_free>
      }
      arp_table[i].q = p;
 8009d94:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d98:	490a      	ldr	r1, [pc, #40]	; (8009dc4 <etharp_query+0x278>)
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	440b      	add	r3, r1
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dae:	e002      	b.n	8009db6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009db0:	23ff      	movs	r3, #255	; 0xff
 8009db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3728      	adds	r7, #40	; 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20003e48 	.word	0x20003e48
 8009dc8:	08016090 	.word	0x08016090
 8009dcc:	0801623c 	.word	0x0801623c
 8009dd0:	08016108 	.word	0x08016108
 8009dd4:	08016230 	.word	0x08016230
 8009dd8:	20003f38 	.word	0x20003f38
 8009ddc:	08016264 	.word	0x08016264

08009de0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	; 0x28
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d106      	bne.n	8009e06 <etharp_raw+0x26>
 8009df8:	4b3a      	ldr	r3, [pc, #232]	; (8009ee4 <etharp_raw+0x104>)
 8009dfa:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8009dfe:	493a      	ldr	r1, [pc, #232]	; (8009ee8 <etharp_raw+0x108>)
 8009e00:	483a      	ldr	r0, [pc, #232]	; (8009eec <etharp_raw+0x10c>)
 8009e02:	f00a fbf5 	bl	80145f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009e06:	2200      	movs	r2, #0
 8009e08:	211c      	movs	r1, #28
 8009e0a:	2002      	movs	r0, #2
 8009e0c:	f002 f9f4 	bl	800c1f8 <pbuf_alloc>
 8009e10:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e1c:	e05d      	b.n	8009eda <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	895b      	ldrh	r3, [r3, #10]
 8009e22:	2b1b      	cmp	r3, #27
 8009e24:	d806      	bhi.n	8009e34 <etharp_raw+0x54>
 8009e26:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <etharp_raw+0x104>)
 8009e28:	f240 4264 	movw	r2, #1124	; 0x464
 8009e2c:	4930      	ldr	r1, [pc, #192]	; (8009ef0 <etharp_raw+0x110>)
 8009e2e:	482f      	ldr	r0, [pc, #188]	; (8009eec <etharp_raw+0x10c>)
 8009e30:	f00a fbde 	bl	80145f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009e3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff f93b 	bl	80090b8 <lwip_htons>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	d006      	beq.n	8009e62 <etharp_raw+0x82>
 8009e54:	4b23      	ldr	r3, [pc, #140]	; (8009ee4 <etharp_raw+0x104>)
 8009e56:	f240 426b 	movw	r2, #1131	; 0x46b
 8009e5a:	4926      	ldr	r1, [pc, #152]	; (8009ef4 <etharp_raw+0x114>)
 8009e5c:	4823      	ldr	r0, [pc, #140]	; (8009eec <etharp_raw+0x10c>)
 8009e5e:	f00a fbc7 	bl	80145f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	3308      	adds	r3, #8
 8009e66:	2206      	movs	r2, #6
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f00a fbad 	bl	80145ca <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	3312      	adds	r3, #18
 8009e74:	2206      	movs	r2, #6
 8009e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00a fba6 	bl	80145ca <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	330e      	adds	r3, #14
 8009e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e84:	6812      	ldr	r2, [r2, #0]
 8009e86:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3318      	adds	r3, #24
 8009e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f042 0201 	orr.w	r2, r2, #1
 8009e9e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f042 0208 	orr.w	r2, r2, #8
 8009ea8:	709a      	strb	r2, [r3, #2]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2206      	movs	r2, #6
 8009eb2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2204      	movs	r2, #4
 8009eb8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009eba:	f640 0306 	movw	r3, #2054	; 0x806
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	69b9      	ldr	r1, [r7, #24]
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f008 ff7a 	bl	8012dc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009ecc:	69b8      	ldr	r0, [r7, #24]
 8009ece:	f002 fd05 	bl	800c8dc <pbuf_free>
  p = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	08016090 	.word	0x08016090
 8009ee8:	080161e0 	.word	0x080161e0
 8009eec:	08016108 	.word	0x08016108
 8009ef0:	08016280 	.word	0x08016280
 8009ef4:	080162b4 	.word	0x080162b4

08009ef8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b088      	sub	sp, #32
 8009efc:	af04      	add	r7, sp, #16
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f14:	2201      	movs	r2, #1
 8009f16:	9203      	str	r2, [sp, #12]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	9202      	str	r2, [sp, #8]
 8009f1c:	4a06      	ldr	r2, [pc, #24]	; (8009f38 <etharp_request_dst+0x40>)
 8009f1e:	9201      	str	r2, [sp, #4]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	4603      	mov	r3, r0
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f7ff ff5a 	bl	8009de0 <etharp_raw>
 8009f2c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	0801800c 	.word	0x0801800c

08009f3c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009f46:	4a05      	ldr	r2, [pc, #20]	; (8009f5c <etharp_request+0x20>)
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff ffd4 	bl	8009ef8 <etharp_request_dst>
 8009f50:	4603      	mov	r3, r0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	08018004 	.word	0x08018004

08009f60 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009f6a:	4b7a      	ldr	r3, [pc, #488]	; (800a154 <icmp_input+0x1f4>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f003 030f 	and.w	r3, r3, #15
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f82:	2b13      	cmp	r3, #19
 8009f84:	f240 80d1 	bls.w	800a12a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	895b      	ldrh	r3, [r3, #10]
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	f240 80ce 	bls.w	800a12e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009f9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 80bb 	beq.w	800a11c <icmp_input+0x1bc>
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	f040 80bb 	bne.w	800a122 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8009fac:	4b6a      	ldr	r3, [pc, #424]	; (800a158 <icmp_input+0x1f8>)
 8009fae:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009fb0:	4b68      	ldr	r3, [pc, #416]	; (800a154 <icmp_input+0x1f4>)
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fb8:	2be0      	cmp	r3, #224	; 0xe0
 8009fba:	f000 80bf 	beq.w	800a13c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009fbe:	4b65      	ldr	r3, [pc, #404]	; (800a154 <icmp_input+0x1f4>)
 8009fc0:	695a      	ldr	r2, [r3, #20]
 8009fc2:	4b64      	ldr	r3, [pc, #400]	; (800a154 <icmp_input+0x1f4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f000 fbcd 	bl	800a768 <ip4_addr_isbroadcast_u32>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f040 80b5 	bne.w	800a140 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	891b      	ldrh	r3, [r3, #8]
 8009fda:	2b07      	cmp	r3, #7
 8009fdc:	f240 80a9 	bls.w	800a132 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fe2:	330e      	adds	r3, #14
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	b21b      	sxth	r3, r3
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f002 fc52 	bl	800c894 <pbuf_header>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d046      	beq.n	800a084 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	891a      	ldrh	r2, [r3, #8]
 8009ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ffc:	4413      	add	r3, r2
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2200      	movs	r2, #0
 800a002:	4619      	mov	r1, r3
 800a004:	2002      	movs	r0, #2
 800a006:	f002 f8f7 	bl	800c1f8 <pbuf_alloc>
 800a00a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8098 	beq.w	800a144 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	895b      	ldrh	r3, [r3, #10]
 800a018:	461a      	mov	r2, r3
 800a01a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a01c:	3308      	adds	r3, #8
 800a01e:	429a      	cmp	r2, r3
 800a020:	d203      	bcs.n	800a02a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800a022:	69b8      	ldr	r0, [r7, #24]
 800a024:	f002 fc5a 	bl	800c8dc <pbuf_free>
        goto icmperr;
 800a028:	e08d      	b.n	800a146 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a032:	4618      	mov	r0, r3
 800a034:	f00a fac9 	bl	80145ca <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a03a:	425b      	negs	r3, r3
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	b21b      	sxth	r3, r3
 800a040:	4619      	mov	r1, r3
 800a042:	69b8      	ldr	r0, [r7, #24]
 800a044:	f002 fc26 	bl	800c894 <pbuf_header>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d009      	beq.n	800a062 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a04e:	4b43      	ldr	r3, [pc, #268]	; (800a15c <icmp_input+0x1fc>)
 800a050:	22af      	movs	r2, #175	; 0xaf
 800a052:	4943      	ldr	r1, [pc, #268]	; (800a160 <icmp_input+0x200>)
 800a054:	4843      	ldr	r0, [pc, #268]	; (800a164 <icmp_input+0x204>)
 800a056:	f00a facb 	bl	80145f0 <iprintf>
        pbuf_free(r);
 800a05a:	69b8      	ldr	r0, [r7, #24]
 800a05c:	f002 fc3e 	bl	800c8dc <pbuf_free>
        goto icmperr;
 800a060:	e071      	b.n	800a146 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	69b8      	ldr	r0, [r7, #24]
 800a066:	f002 fd79 	bl	800cb5c <pbuf_copy>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d003      	beq.n	800a078 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800a070:	69b8      	ldr	r0, [r7, #24]
 800a072:	f002 fc33 	bl	800c8dc <pbuf_free>
        goto icmperr;
 800a076:	e066      	b.n	800a146 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f002 fc2f 	bl	800c8dc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e015      	b.n	800a0b0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a086:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800a08a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a08e:	33f2      	adds	r3, #242	; 0xf2
 800a090:	b29b      	uxth	r3, r3
 800a092:	b21b      	sxth	r3, r3
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f002 fbfc 	bl	800c894 <pbuf_header>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <icmp_input+0x1fc>)
 800a0a4:	22c0      	movs	r2, #192	; 0xc0
 800a0a6:	4930      	ldr	r1, [pc, #192]	; (800a168 <icmp_input+0x208>)
 800a0a8:	482e      	ldr	r0, [pc, #184]	; (800a164 <icmp_input+0x204>)
 800a0aa:	f00a faa1 	bl	80145f0 <iprintf>
        goto icmperr;
 800a0ae:	e04a      	b.n	800a146 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a0b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f002 fbe9 	bl	800c894 <pbuf_header>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d12b      	bne.n	800a120 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	; (800a154 <icmp_input+0x1f4>)
 800a0d8:	691a      	ldr	r2, [r3, #16]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	709a      	strb	r2, [r3, #2]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	729a      	strb	r2, [r3, #10]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	9302      	str	r3, [sp, #8]
 800a102:	2301      	movs	r3, #1
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	2300      	movs	r3, #0
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	23ff      	movs	r3, #255	; 0xff
 800a10c:	2200      	movs	r2, #0
 800a10e:	69f9      	ldr	r1, [r7, #28]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fa57 	bl	800a5c4 <ip4_output_if>
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a11a:	e001      	b.n	800a120 <icmp_input+0x1c0>
    break;
 800a11c:	bf00      	nop
 800a11e:	e000      	b.n	800a122 <icmp_input+0x1c2>
    break;
 800a120:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f002 fbda 	bl	800c8dc <pbuf_free>
  return;
 800a128:	e011      	b.n	800a14e <icmp_input+0x1ee>
    goto lenerr;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <icmp_input+0x1d4>
    goto lenerr;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <icmp_input+0x1d4>
      goto lenerr;
 800a132:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f002 fbd1 	bl	800c8dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a13a:	e008      	b.n	800a14e <icmp_input+0x1ee>
      goto icmperr;
 800a13c:	bf00      	nop
 800a13e:	e002      	b.n	800a146 <icmp_input+0x1e6>
      goto icmperr;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <icmp_input+0x1e6>
        goto icmperr;
 800a144:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f002 fbc8 	bl	800c8dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a14c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a14e:	3728      	adds	r7, #40	; 0x28
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20004024 	.word	0x20004024
 800a158:	20004038 	.word	0x20004038
 800a15c:	080162f8 	.word	0x080162f8
 800a160:	08016330 	.word	0x08016330
 800a164:	08016368 	.word	0x08016368
 800a168:	08016390 	.word	0x08016390

0800a16c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	461a      	mov	r2, r3
 800a17c:	2103      	movs	r1, #3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f814 	bl	800a1ac <icmp_send_response>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	461a      	mov	r2, r3
 800a19c:	210b      	movs	r1, #11
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f804 	bl	800a1ac <icmp_send_response>
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af04      	add	r7, sp, #16
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2124      	movs	r1, #36	; 0x24
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	f002 f819 	bl	800c1f8 <pbuf_alloc>
 800a1c6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d04c      	beq.n	800a268 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	895b      	ldrh	r3, [r3, #10]
 800a1d2:	2b23      	cmp	r3, #35	; 0x23
 800a1d4:	d806      	bhi.n	800a1e4 <icmp_send_response+0x38>
 800a1d6:	4b26      	ldr	r3, [pc, #152]	; (800a270 <icmp_send_response+0xc4>)
 800a1d8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a1dc:	4925      	ldr	r1, [pc, #148]	; (800a274 <icmp_send_response+0xc8>)
 800a1de:	4826      	ldr	r0, [pc, #152]	; (800a278 <icmp_send_response+0xcc>)
 800a1e0:	f00a fa06 	bl	80145f0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	78ba      	ldrb	r2, [r7, #2]
 800a1fa:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	711a      	strb	r2, [r3, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2200      	movs	r2, #0
 800a20a:	719a      	strb	r2, [r3, #6]
 800a20c:	2200      	movs	r2, #0
 800a20e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f103 0008 	add.w	r0, r3, #8
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	221c      	movs	r2, #28
 800a21e:	4619      	mov	r1, r3
 800a220:	f00a f9d3 	bl	80145ca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a22a:	f107 030c 	add.w	r3, r7, #12
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f824 	bl	800a27c <ip4_route>
 800a234:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d011      	beq.n	800a260 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2200      	movs	r2, #0
 800a240:	709a      	strb	r2, [r3, #2]
 800a242:	2200      	movs	r2, #0
 800a244:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a246:	f107 020c 	add.w	r2, r7, #12
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	9302      	str	r3, [sp, #8]
 800a24e:	2301      	movs	r3, #1
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	2300      	movs	r3, #0
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	23ff      	movs	r3, #255	; 0xff
 800a258:	2100      	movs	r1, #0
 800a25a:	69f8      	ldr	r0, [r7, #28]
 800a25c:	f000 f9b2 	bl	800a5c4 <ip4_output_if>
  }
  pbuf_free(q);
 800a260:	69f8      	ldr	r0, [r7, #28]
 800a262:	f002 fb3b 	bl	800c8dc <pbuf_free>
 800a266:	e000      	b.n	800a26a <icmp_send_response+0xbe>
    return;
 800a268:	bf00      	nop
}
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	080162f8 	.word	0x080162f8
 800a274:	080163c4 	.word	0x080163c4
 800a278:	08016368 	.word	0x08016368

0800a27c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a284:	4b2f      	ldr	r3, [pc, #188]	; (800a344 <ip4_route+0xc8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	e033      	b.n	800a2f4 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d029      	beq.n	800a2ee <ip4_route+0x72>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d022      	beq.n	800a2ee <ip4_route+0x72>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d01d      	beq.n	800a2ee <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	405a      	eors	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	e033      	b.n	800a336 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d108      	bne.n	800a2ee <ip4_route+0x72>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	330c      	adds	r3, #12
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d101      	bne.n	800a2ee <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	e023      	b.n	800a336 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1c8      	bne.n	800a28c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <ip4_route+0xcc>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d015      	beq.n	800a32e <ip4_route+0xb2>
 800a302:	4b11      	ldr	r3, [pc, #68]	; (800a348 <ip4_route+0xcc>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00d      	beq.n	800a32e <ip4_route+0xb2>
 800a312:	4b0d      	ldr	r3, [pc, #52]	; (800a348 <ip4_route+0xcc>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <ip4_route+0xcc>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3304      	adds	r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	e001      	b.n	800a336 <ip4_route+0xba>
  }

  return netif_default;
 800a332:	4b05      	ldr	r3, [pc, #20]	; (800a348 <ip4_route+0xcc>)
 800a334:	681b      	ldr	r3, [r3, #0]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20007724 	.word	0x20007724
 800a348:	20007728 	.word	0x20007728

0800a34c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	091b      	lsrs	r3, r3, #4
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b04      	cmp	r3, #4
 800a366:	d004      	beq.n	800a372 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 fab7 	bl	800c8dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	e120      	b.n	800a5b4 <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b29b      	uxth	r3, r3
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a37e:	897b      	ldrh	r3, [r7, #10]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	885b      	ldrh	r3, [r3, #2]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fe94 	bl	80090b8 <lwip_htons>
 800a390:	4603      	mov	r3, r0
 800a392:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	891b      	ldrh	r3, [r3, #8]
 800a398:	893a      	ldrh	r2, [r7, #8]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d204      	bcs.n	800a3a8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800a39e:	893b      	ldrh	r3, [r7, #8]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f002 f926 	bl	800c5f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	895b      	ldrh	r3, [r3, #10]
 800a3ac:	897a      	ldrh	r2, [r7, #10]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d807      	bhi.n	800a3c2 <ip4_input+0x76>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	891b      	ldrh	r3, [r3, #8]
 800a3b6:	893a      	ldrh	r2, [r7, #8]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d802      	bhi.n	800a3c2 <ip4_input+0x76>
 800a3bc:	897b      	ldrh	r3, [r7, #10]
 800a3be:	2b13      	cmp	r3, #19
 800a3c0:	d804      	bhi.n	800a3cc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f002 fa8a 	bl	800c8dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e0f3      	b.n	800a5b4 <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	4a7a      	ldr	r2, [pc, #488]	; (800a5bc <ip4_input+0x270>)
 800a3d2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	4a78      	ldr	r2, [pc, #480]	; (800a5bc <ip4_input+0x270>)
 800a3da:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a3dc:	4b77      	ldr	r3, [pc, #476]	; (800a5bc <ip4_input+0x270>)
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3e4:	2be0      	cmp	r3, #224	; 0xe0
 800a3e6:	d111      	bne.n	800a40c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d007      	beq.n	800a406 <ip4_input+0xba>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <ip4_input+0xba>
      netif = inp;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	613b      	str	r3, [r7, #16]
 800a404:	e040      	b.n	800a488 <ip4_input+0x13c>
    } else {
      netif = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	613b      	str	r3, [r7, #16]
 800a40a:	e03d      	b.n	800a488 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a40c:	2301      	movs	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d014      	beq.n	800a44c <ip4_input+0x100>
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3304      	adds	r3, #4
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00f      	beq.n	800a44c <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a42c:	4b63      	ldr	r3, [pc, #396]	; (800a5bc <ip4_input+0x270>)
 800a42e:	695a      	ldr	r2, [r3, #20]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	3304      	adds	r3, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d026      	beq.n	800a488 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a43a:	4b60      	ldr	r3, [pc, #384]	; (800a5bc <ip4_input+0x270>)
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	6939      	ldr	r1, [r7, #16]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f991 	bl	800a768 <ip4_addr_isbroadcast_u32>
 800a446:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d11d      	bne.n	800a488 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00d      	beq.n	800a46e <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a452:	4b5a      	ldr	r3, [pc, #360]	; (800a5bc <ip4_input+0x270>)
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b7f      	cmp	r3, #127	; 0x7f
 800a45a:	d102      	bne.n	800a462 <ip4_input+0x116>
          netif = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	613b      	str	r3, [r7, #16]
          break;
 800a460:	e012      	b.n	800a488 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800a466:	4b56      	ldr	r3, [pc, #344]	; (800a5c0 <ip4_input+0x274>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	e002      	b.n	800a474 <ip4_input+0x128>
      } else {
        netif = netif->next;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d102      	bne.n	800a482 <ip4_input+0x136>
        netif = netif->next;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1c5      	bne.n	800a414 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a488:	4b4c      	ldr	r3, [pc, #304]	; (800a5bc <ip4_input+0x270>)
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 f96a 	bl	800a768 <ip4_addr_isbroadcast_u32>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d105      	bne.n	800a4a6 <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a49a:	4b48      	ldr	r3, [pc, #288]	; (800a5bc <ip4_input+0x270>)
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a4a2:	2be0      	cmp	r3, #224	; 0xe0
 800a4a4:	d104      	bne.n	800a4b0 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f002 fa18 	bl	800c8dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e081      	b.n	800a5b4 <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f002 fa10 	bl	800c8dc <pbuf_free>
    return ERR_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e079      	b.n	800a5b4 <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	88db      	ldrh	r3, [r3, #6]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fde0 	bl	800b098 <ip4_reass>
 800a4d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <ip4_input+0x198>
      return ERR_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e067      	b.n	800a5b4 <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a4ea:	4a34      	ldr	r2, [pc, #208]	; (800a5bc <ip4_input+0x270>)
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a4f0:	4a32      	ldr	r2, [pc, #200]	; (800a5bc <ip4_input+0x270>)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a4f6:	4a31      	ldr	r2, [pc, #196]	; (800a5bc <ip4_input+0x270>)
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	b29b      	uxth	r3, r3
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	b29b      	uxth	r3, r3
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	4b2b      	ldr	r3, [pc, #172]	; (800a5bc <ip4_input+0x270>)
 800a50e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a510:	897b      	ldrh	r3, [r7, #10]
 800a512:	425b      	negs	r3, r3
 800a514:	b29b      	uxth	r3, r3
 800a516:	b21b      	sxth	r3, r3
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f002 f9ba 	bl	800c894 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	7a5b      	ldrb	r3, [r3, #9]
 800a524:	2b06      	cmp	r3, #6
 800a526:	d009      	beq.n	800a53c <ip4_input+0x1f0>
 800a528:	2b11      	cmp	r3, #17
 800a52a:	d002      	beq.n	800a532 <ip4_input+0x1e6>
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d00a      	beq.n	800a546 <ip4_input+0x1fa>
 800a530:	e00e      	b.n	800a550 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f008 f83b 	bl	80125b0 <udp_input>
      break;
 800a53a:	e028      	b.n	800a58e <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f004 f862 	bl	800e608 <tcp_input>
      break;
 800a544:	e023      	b.n	800a58e <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7ff fd09 	bl	8009f60 <icmp_input>
      break;
 800a54e:	e01e      	b.n	800a58e <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a550:	4b1a      	ldr	r3, [pc, #104]	; (800a5bc <ip4_input+0x270>)
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	6939      	ldr	r1, [r7, #16]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 f906 	bl	800a768 <ip4_addr_isbroadcast_u32>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d112      	bne.n	800a588 <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <ip4_input+0x270>)
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a56a:	2be0      	cmp	r3, #224	; 0xe0
 800a56c:	d00c      	beq.n	800a588 <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a56e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f002 f99f 	bl	800c8b8 <pbuf_header_force>
        p->payload = iphdr;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a580:	2102      	movs	r1, #2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fdf2 	bl	800a16c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f002 f9a7 	bl	800c8dc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a58e:	4b0b      	ldr	r3, [pc, #44]	; (800a5bc <ip4_input+0x270>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a594:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <ip4_input+0x270>)
 800a596:	2200      	movs	r2, #0
 800a598:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a59a:	4b08      	ldr	r3, [pc, #32]	; (800a5bc <ip4_input+0x270>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <ip4_input+0x270>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <ip4_input+0x270>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a5ac:	4b03      	ldr	r3, [pc, #12]	; (800a5bc <ip4_input+0x270>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20004024 	.word	0x20004024
 800a5c0:	20007724 	.word	0x20007724

0800a5c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08a      	sub	sp, #40	; 0x28
 800a5c8:	af04      	add	r7, sp, #16
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d009      	beq.n	800a5f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d003      	beq.n	800a5ea <ip4_output_if+0x26>
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a5f0:	78fa      	ldrb	r2, [r7, #3]
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	9302      	str	r3, [sp, #8]
 800a5f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4613      	mov	r3, r2
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	6979      	ldr	r1, [r7, #20]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f805 	bl	800a618 <ip4_output_if_src>
 800a60e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	89db      	ldrh	r3, [r3, #14]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d006      	beq.n	800a63c <ip4_output_if_src+0x24>
 800a62e:	4b48      	ldr	r3, [pc, #288]	; (800a750 <ip4_output_if_src+0x138>)
 800a630:	f240 3233 	movw	r2, #819	; 0x333
 800a634:	4947      	ldr	r1, [pc, #284]	; (800a754 <ip4_output_if_src+0x13c>)
 800a636:	4848      	ldr	r0, [pc, #288]	; (800a758 <ip4_output_if_src+0x140>)
 800a638:	f009 ffda 	bl	80145f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d060      	beq.n	800a704 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a642:	2314      	movs	r3, #20
 800a644:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a646:	2114      	movs	r1, #20
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f002 f923 	bl	800c894 <pbuf_header>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a654:	f06f 0301 	mvn.w	r3, #1
 800a658:	e075      	b.n	800a746 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	895b      	ldrh	r3, [r3, #10]
 800a664:	2b13      	cmp	r3, #19
 800a666:	d806      	bhi.n	800a676 <ip4_output_if_src+0x5e>
 800a668:	4b39      	ldr	r3, [pc, #228]	; (800a750 <ip4_output_if_src+0x138>)
 800a66a:	f240 3261 	movw	r2, #865	; 0x361
 800a66e:	493b      	ldr	r1, [pc, #236]	; (800a75c <ip4_output_if_src+0x144>)
 800a670:	4839      	ldr	r0, [pc, #228]	; (800a758 <ip4_output_if_src+0x140>)
 800a672:	f009 ffbd 	bl	80145f0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	78fa      	ldrb	r2, [r7, #3]
 800a67a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a682:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a68c:	8bfb      	ldrh	r3, [r7, #30]
 800a68e:	089b      	lsrs	r3, r3, #2
 800a690:	b29b      	uxth	r3, r3
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a6a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	891b      	ldrh	r3, [r3, #8]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fd04 	bl	80090b8 <lwip_htons>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	719a      	strb	r2, [r3, #6]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a6c2:	4b27      	ldr	r3, [pc, #156]	; (800a760 <ip4_output_if_src+0x148>)
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fcf6 	bl	80090b8 <lwip_htons>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a6d4:	4b22      	ldr	r3, [pc, #136]	; (800a760 <ip4_output_if_src+0x148>)
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	4b20      	ldr	r3, [pc, #128]	; (800a760 <ip4_output_if_src+0x148>)
 800a6de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a6e6:	4b1f      	ldr	r3, [pc, #124]	; (800a764 <ip4_output_if_src+0x14c>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	60da      	str	r2, [r3, #12]
 800a6ee:	e003      	b.n	800a6f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	729a      	strb	r2, [r3, #10]
 800a6fe:	2200      	movs	r2, #0
 800a700:	72da      	strb	r2, [r3, #11]
 800a702:	e008      	b.n	800a716 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a710:	f107 0314 	add.w	r3, r7, #20
 800a714:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00c      	beq.n	800a738 <ip4_output_if_src+0x120>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	891a      	ldrh	r2, [r3, #8]
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a726:	429a      	cmp	r2, r3
 800a728:	d906      	bls.n	800a738 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fe5a 	bl	800b3e8 <ip4_frag>
 800a734:	4603      	mov	r3, r0
 800a736:	e006      	b.n	800a746 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	68f9      	ldr	r1, [r7, #12]
 800a740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a742:	4798      	blx	r3
 800a744:	4603      	mov	r3, r0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3720      	adds	r7, #32
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	080163f0 	.word	0x080163f0
 800a754:	08016424 	.word	0x08016424
 800a758:	08016430 	.word	0x08016430
 800a75c:	08016458 	.word	0x08016458
 800a760:	20003f3a 	.word	0x20003f3a
 800a764:	08017ef0 	.word	0x08017ef0

0800a768 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77c:	d002      	beq.n	800a784 <ip4_addr_isbroadcast_u32+0x1c>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a784:	2301      	movs	r3, #1
 800a786:	e02a      	b.n	800a7de <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a796:	2300      	movs	r3, #0
 800a798:	e021      	b.n	800a7de <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	3304      	adds	r3, #4
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d101      	bne.n	800a7aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e019      	b.n	800a7de <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	405a      	eors	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10d      	bne.n	800a7dc <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	43da      	mvns	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d101      	bne.n	800a7dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e000      	b.n	800a7de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a7dc:	2300      	movs	r3, #0
  }
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800a7f2:	f107 030c 	add.w	r3, r7, #12
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f80b 	bl	800a814 <ip4addr_aton>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	e001      	b.n	800a80c <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800a808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08a      	sub	sp, #40	; 0x28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800a81e:	f107 030c 	add.w	r3, r7, #12
 800a822:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 800a82c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a830:	2b2f      	cmp	r3, #47	; 0x2f
 800a832:	d903      	bls.n	800a83c <ip4addr_aton+0x28>
 800a834:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a838:	2b39      	cmp	r3, #57	; 0x39
 800a83a:	d901      	bls.n	800a840 <ip4addr_aton+0x2c>
      return 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	e11e      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    val = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800a844:	230a      	movs	r3, #10
 800a846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800a84a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a84e:	2b30      	cmp	r3, #48	; 0x30
 800a850:	d11c      	bne.n	800a88c <ip4addr_aton+0x78>
      c = *++cp;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3301      	adds	r3, #1
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800a860:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a864:	2b78      	cmp	r3, #120	; 0x78
 800a866:	d003      	beq.n	800a870 <ip4addr_aton+0x5c>
 800a868:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a86c:	2b58      	cmp	r3, #88	; 0x58
 800a86e:	d10a      	bne.n	800a886 <ip4addr_aton+0x72>
        base = 16;
 800a870:	2310      	movs	r3, #16
 800a872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3301      	adds	r3, #1
 800a87a:	607b      	str	r3, [r7, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a884:	e002      	b.n	800a88c <ip4addr_aton+0x78>
      } else {
        base = 8;
 800a886:	2308      	movs	r3, #8
 800a888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 800a88c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a890:	2b2f      	cmp	r3, #47	; 0x2f
 800a892:	d915      	bls.n	800a8c0 <ip4addr_aton+0xac>
 800a894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a898:	2b39      	cmp	r3, #57	; 0x39
 800a89a:	d811      	bhi.n	800a8c0 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 800a89c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a2:	fb02 f203 	mul.w	r2, r2, r3
 800a8a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3b30      	subs	r3, #48	; 0x30
 800a8ae:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	607b      	str	r3, [r7, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a8be:	e036      	b.n	800a92e <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 800a8c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8c4:	2b10      	cmp	r3, #16
 800a8c6:	d133      	bne.n	800a930 <ip4addr_aton+0x11c>
 800a8c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8cc:	2b2f      	cmp	r3, #47	; 0x2f
 800a8ce:	d903      	bls.n	800a8d8 <ip4addr_aton+0xc4>
 800a8d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8d4:	2b39      	cmp	r3, #57	; 0x39
 800a8d6:	d90f      	bls.n	800a8f8 <ip4addr_aton+0xe4>
 800a8d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8dc:	2b60      	cmp	r3, #96	; 0x60
 800a8de:	d903      	bls.n	800a8e8 <ip4addr_aton+0xd4>
 800a8e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8e4:	2b66      	cmp	r3, #102	; 0x66
 800a8e6:	d907      	bls.n	800a8f8 <ip4addr_aton+0xe4>
 800a8e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8ec:	2b40      	cmp	r3, #64	; 0x40
 800a8ee:	d91f      	bls.n	800a930 <ip4addr_aton+0x11c>
 800a8f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8f4:	2b46      	cmp	r3, #70	; 0x46
 800a8f6:	d81b      	bhi.n	800a930 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a900:	f102 010a 	add.w	r1, r2, #10
 800a904:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a908:	2a60      	cmp	r2, #96	; 0x60
 800a90a:	d905      	bls.n	800a918 <ip4addr_aton+0x104>
 800a90c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a910:	2a7a      	cmp	r2, #122	; 0x7a
 800a912:	d801      	bhi.n	800a918 <ip4addr_aton+0x104>
 800a914:	2261      	movs	r2, #97	; 0x61
 800a916:	e000      	b.n	800a91a <ip4addr_aton+0x106>
 800a918:	2241      	movs	r2, #65	; 0x41
 800a91a:	1a8a      	subs	r2, r1, r2
 800a91c:	4313      	orrs	r3, r2
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3301      	adds	r3, #1
 800a924:	607b      	str	r3, [r7, #4]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 800a92e:	e7ad      	b.n	800a88c <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 800a930:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a934:	2b2e      	cmp	r3, #46	; 0x2e
 800a936:	d114      	bne.n	800a962 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800a938:	f107 030c 	add.w	r3, r7, #12
 800a93c:	330c      	adds	r3, #12
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	4293      	cmp	r3, r2
 800a942:	d801      	bhi.n	800a948 <ip4addr_aton+0x134>
        return 0;
 800a944:	2300      	movs	r3, #0
 800a946:	e09a      	b.n	800aa7e <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	1d1a      	adds	r2, r3, #4
 800a94c:	61fa      	str	r2, [r7, #28]
 800a94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a950:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3301      	adds	r3, #1
 800a956:	607b      	str	r3, [r7, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 800a960:	e764      	b.n	800a82c <ip4addr_aton+0x18>
    } else {
      break;
 800a962:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800a964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d019      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a96c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a970:	2b20      	cmp	r3, #32
 800a972:	d015      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a974:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a978:	2b0c      	cmp	r3, #12
 800a97a:	d011      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a97c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a980:	2b0a      	cmp	r3, #10
 800a982:	d00d      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a988:	2b0d      	cmp	r3, #13
 800a98a:	d009      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a98c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a990:	2b09      	cmp	r3, #9
 800a992:	d005      	beq.n	800a9a0 <ip4addr_aton+0x18c>
 800a994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a998:	2b0b      	cmp	r3, #11
 800a99a:	d001      	beq.n	800a9a0 <ip4addr_aton+0x18c>
    return 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	e06e      	b.n	800aa7e <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800a9a0:	69fa      	ldr	r2, [r7, #28]
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	109b      	asrs	r3, r3, #2
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d853      	bhi.n	800aa58 <ip4addr_aton+0x244>
 800a9b0:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <ip4addr_aton+0x1a4>)
 800a9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b6:	bf00      	nop
 800a9b8:	0800a9cd 	.word	0x0800a9cd
 800a9bc:	0800aa69 	.word	0x0800aa69
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9f3 	.word	0x0800a9f3
 800a9c8:	0800aa21 	.word	0x0800aa21

  case 0:
    return 0;       /* initial nondigit */
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e056      	b.n	800aa7e <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9d6:	d301      	bcc.n	800a9dc <ip4addr_aton+0x1c8>
      return 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e050      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2bff      	cmp	r3, #255	; 0xff
 800a9e0:	d901      	bls.n	800a9e6 <ip4addr_aton+0x1d2>
      return 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e04b      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	061b      	lsls	r3, r3, #24
 800a9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800a9f0:	e03b      	b.n	800aa6a <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f8:	d301      	bcc.n	800a9fe <ip4addr_aton+0x1ea>
      return 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e03f      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2bff      	cmp	r3, #255	; 0xff
 800aa02:	d802      	bhi.n	800aa0a <ip4addr_aton+0x1f6>
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	2bff      	cmp	r3, #255	; 0xff
 800aa08:	d901      	bls.n	800aa0e <ip4addr_aton+0x1fa>
      return 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e037      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	061a      	lsls	r2, r3, #24
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	041b      	lsls	r3, r3, #16
 800aa16:	4313      	orrs	r3, r2
 800aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800aa1e:	e024      	b.n	800aa6a <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	2bff      	cmp	r3, #255	; 0xff
 800aa24:	d901      	bls.n	800aa2a <ip4addr_aton+0x216>
      return 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e029      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2bff      	cmp	r3, #255	; 0xff
 800aa2e:	d805      	bhi.n	800aa3c <ip4addr_aton+0x228>
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2bff      	cmp	r3, #255	; 0xff
 800aa34:	d802      	bhi.n	800aa3c <ip4addr_aton+0x228>
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2bff      	cmp	r3, #255	; 0xff
 800aa3a:	d901      	bls.n	800aa40 <ip4addr_aton+0x22c>
      return 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e01e      	b.n	800aa7e <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	061a      	lsls	r2, r3, #24
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	021b      	lsls	r3, r3, #8
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa52:	4313      	orrs	r3, r2
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800aa56:	e008      	b.n	800aa6a <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 800aa58:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <ip4addr_aton+0x274>)
 800aa5a:	f240 1203 	movw	r2, #259	; 0x103
 800aa5e:	490b      	ldr	r1, [pc, #44]	; (800aa8c <ip4addr_aton+0x278>)
 800aa60:	480b      	ldr	r0, [pc, #44]	; (800aa90 <ip4addr_aton+0x27c>)
 800aa62:	f009 fdc5 	bl	80145f0 <iprintf>
    break;
 800aa66:	e000      	b.n	800aa6a <ip4addr_aton+0x256>
    break;
 800aa68:	bf00      	nop
  }
  if (addr) {
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800aa70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa72:	f7fe fb2f 	bl	80090d4 <lwip_htonl>
 800aa76:	4602      	mov	r2, r0
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800aa7c:	2301      	movs	r3, #1
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	08016488 	.word	0x08016488
 800aa8c:	080164c4 	.word	0x080164c4
 800aa90:	080164d0 	.word	0x080164d0

0800aa94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <ip_reass_tmr+0x54>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800aaa4:	e018      	b.n	800aad8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	7fdb      	ldrb	r3, [r3, #31]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <ip_reass_tmr+0x32>
      r->timer--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	7fdb      	ldrb	r3, [r3, #31]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e008      	b.n	800aad8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f80a 	bl	800aaec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e3      	bne.n	800aaa6 <ip_reass_tmr+0x12>
     }
   }
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20003f3c 	.word	0x20003f3c

0800aaec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d105      	bne.n	800ab0e <ip_reass_free_complete_datagram+0x22>
 800ab02:	4b45      	ldr	r3, [pc, #276]	; (800ac18 <ip_reass_free_complete_datagram+0x12c>)
 800ab04:	22ab      	movs	r2, #171	; 0xab
 800ab06:	4945      	ldr	r1, [pc, #276]	; (800ac1c <ip_reass_free_complete_datagram+0x130>)
 800ab08:	4845      	ldr	r0, [pc, #276]	; (800ac20 <ip_reass_free_complete_datagram+0x134>)
 800ab0a:	f009 fd71 	bl	80145f0 <iprintf>
  if (prev != NULL) {
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d005      	beq.n	800ab2a <ip_reass_free_complete_datagram+0x3e>
 800ab1e:	4b3e      	ldr	r3, [pc, #248]	; (800ac18 <ip_reass_free_complete_datagram+0x12c>)
 800ab20:	22ad      	movs	r2, #173	; 0xad
 800ab22:	4940      	ldr	r1, [pc, #256]	; (800ac24 <ip_reass_free_complete_datagram+0x138>)
 800ab24:	483e      	ldr	r0, [pc, #248]	; (800ac20 <ip_reass_free_complete_datagram+0x134>)
 800ab26:	f009 fd63 	bl	80145f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	889b      	ldrh	r3, [r3, #4]
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d12a      	bne.n	800ab92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	6858      	ldr	r0, [r3, #4]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	3308      	adds	r3, #8
 800ab52:	2214      	movs	r2, #20
 800ab54:	4619      	mov	r1, r3
 800ab56:	f009 fd38 	bl	80145ca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	69b8      	ldr	r0, [r7, #24]
 800ab5e:	f7ff fb15 	bl	800a18c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ab62:	69b8      	ldr	r0, [r7, #24]
 800ab64:	f001 ff54 	bl	800ca10 <pbuf_clen>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ab6c:	8bfa      	ldrh	r2, [r7, #30]
 800ab6e:	8a7b      	ldrh	r3, [r7, #18]
 800ab70:	4413      	add	r3, r2
 800ab72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab76:	db05      	blt.n	800ab84 <ip_reass_free_complete_datagram+0x98>
 800ab78:	4b27      	ldr	r3, [pc, #156]	; (800ac18 <ip_reass_free_complete_datagram+0x12c>)
 800ab7a:	22bc      	movs	r2, #188	; 0xbc
 800ab7c:	492a      	ldr	r1, [pc, #168]	; (800ac28 <ip_reass_free_complete_datagram+0x13c>)
 800ab7e:	4828      	ldr	r0, [pc, #160]	; (800ac20 <ip_reass_free_complete_datagram+0x134>)
 800ab80:	f009 fd36 	bl	80145f0 <iprintf>
    pbufs_freed += clen;
 800ab84:	8bfa      	ldrh	r2, [r7, #30]
 800ab86:	8a7b      	ldrh	r3, [r7, #18]
 800ab88:	4413      	add	r3, r2
 800ab8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ab8c:	69b8      	ldr	r0, [r7, #24]
 800ab8e:	f001 fea5 	bl	800c8dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ab98:	e01f      	b.n	800abda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f001 ff30 	bl	800ca10 <pbuf_clen>
 800abb0:	4603      	mov	r3, r0
 800abb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800abb4:	8bfa      	ldrh	r2, [r7, #30]
 800abb6:	8a7b      	ldrh	r3, [r7, #18]
 800abb8:	4413      	add	r3, r2
 800abba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbe:	db05      	blt.n	800abcc <ip_reass_free_complete_datagram+0xe0>
 800abc0:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <ip_reass_free_complete_datagram+0x12c>)
 800abc2:	22cc      	movs	r2, #204	; 0xcc
 800abc4:	4918      	ldr	r1, [pc, #96]	; (800ac28 <ip_reass_free_complete_datagram+0x13c>)
 800abc6:	4816      	ldr	r0, [pc, #88]	; (800ac20 <ip_reass_free_complete_datagram+0x134>)
 800abc8:	f009 fd12 	bl	80145f0 <iprintf>
    pbufs_freed += clen;
 800abcc:	8bfa      	ldrh	r2, [r7, #30]
 800abce:	8a7b      	ldrh	r3, [r7, #18]
 800abd0:	4413      	add	r3, r2
 800abd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f001 fe81 	bl	800c8dc <pbuf_free>
  while (p != NULL) {
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1dc      	bne.n	800ab9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f8c2 	bl	800ad6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <ip_reass_free_complete_datagram+0x140>)
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	8bfa      	ldrh	r2, [r7, #30]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d905      	bls.n	800abfe <ip_reass_free_complete_datagram+0x112>
 800abf2:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <ip_reass_free_complete_datagram+0x12c>)
 800abf4:	22d2      	movs	r2, #210	; 0xd2
 800abf6:	490e      	ldr	r1, [pc, #56]	; (800ac30 <ip_reass_free_complete_datagram+0x144>)
 800abf8:	4809      	ldr	r0, [pc, #36]	; (800ac20 <ip_reass_free_complete_datagram+0x134>)
 800abfa:	f009 fcf9 	bl	80145f0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <ip_reass_free_complete_datagram+0x140>)
 800ac00:	881a      	ldrh	r2, [r3, #0]
 800ac02:	8bfb      	ldrh	r3, [r7, #30]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <ip_reass_free_complete_datagram+0x140>)
 800ac0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ac0c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	080164f8 	.word	0x080164f8
 800ac1c:	08016534 	.word	0x08016534
 800ac20:	08016540 	.word	0x08016540
 800ac24:	08016568 	.word	0x08016568
 800ac28:	0801657c 	.word	0x0801657c
 800ac2c:	20003f40 	.word	0x20003f40
 800ac30:	0801659c 	.word	0x0801659c

0800ac34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08a      	sub	sp, #40	; 0x28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ac46:	2300      	movs	r3, #0
 800ac48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ac52:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <ip_reass_remove_oldest_datagram+0xc0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ac58:	e030      	b.n	800acbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	695a      	ldr	r2, [r3, #20]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10c      	bne.n	800ac80 <ip_reass_remove_oldest_datagram+0x4c>
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	699a      	ldr	r2, [r3, #24]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d106      	bne.n	800ac80 <ip_reass_remove_oldest_datagram+0x4c>
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	899a      	ldrh	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	889b      	ldrh	r3, [r3, #4]
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d014      	beq.n	800acaa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	3301      	adds	r3, #1
 800ac84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	61bb      	str	r3, [r7, #24]
 800ac94:	e009      	b.n	800acaa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	7fda      	ldrb	r2, [r3, #31]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	7fdb      	ldrb	r3, [r3, #31]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d803      	bhi.n	800acaa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1cb      	bne.n	800ac5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d008      	beq.n	800acda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800acc8:	69b9      	ldr	r1, [r7, #24]
 800acca:	6a38      	ldr	r0, [r7, #32]
 800accc:	f7ff ff0e 	bl	800aaec <ip_reass_free_complete_datagram>
 800acd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	da02      	bge.n	800ace8 <ip_reass_remove_oldest_datagram+0xb4>
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	dcac      	bgt.n	800ac42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ace8:	697b      	ldr	r3, [r7, #20]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	; 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20003f3c 	.word	0x20003f3c

0800acf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ad02:	2004      	movs	r0, #4
 800ad04:	f001 f83e 	bl	800bd84 <memp_malloc>
 800ad08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d110      	bne.n	800ad32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff ff8e 	bl	800ac34 <ip_reass_remove_oldest_datagram>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	db03      	blt.n	800ad28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ad20:	2004      	movs	r0, #4
 800ad22:	f001 f82f 	bl	800bd84 <memp_malloc>
 800ad26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e016      	b.n	800ad60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ad32:	2220      	movs	r2, #32
 800ad34:	2100      	movs	r1, #0
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f009 fc52 	bl	80145e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2203      	movs	r2, #3
 800ad40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <ip_reass_enqueue_new_datagram+0x70>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ad4a:	4a07      	ldr	r2, [pc, #28]	; (800ad68 <ip_reass_enqueue_new_datagram+0x70>)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3308      	adds	r3, #8
 800ad54:	2214      	movs	r2, #20
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f009 fc36 	bl	80145ca <memcpy>
  return ipr;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20003f3c 	.word	0x20003f3c

0800ad6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ad76:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <ip_reass_dequeue_datagram+0x4c>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d104      	bne.n	800ad8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a0c      	ldr	r2, [pc, #48]	; (800adb8 <ip_reass_dequeue_datagram+0x4c>)
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	e00d      	b.n	800ada6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d106      	bne.n	800ad9e <ip_reass_dequeue_datagram+0x32>
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <ip_reass_dequeue_datagram+0x50>)
 800ad92:	f240 1245 	movw	r2, #325	; 0x145
 800ad96:	490a      	ldr	r1, [pc, #40]	; (800adc0 <ip_reass_dequeue_datagram+0x54>)
 800ad98:	480a      	ldr	r0, [pc, #40]	; (800adc4 <ip_reass_dequeue_datagram+0x58>)
 800ad9a:	f009 fc29 	bl	80145f0 <iprintf>
    prev->next = ipr->next;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	2004      	movs	r0, #4
 800adaa:	f001 f83d 	bl	800be28 <memp_free>
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20003f3c 	.word	0x20003f3c
 800adbc:	080164f8 	.word	0x080164f8
 800adc0:	080165b8 	.word	0x080165b8
 800adc4:	08016540 	.word	0x08016540

0800adc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08c      	sub	sp, #48	; 0x30
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800add4:	2300      	movs	r3, #0
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800add8:	2301      	movs	r3, #1
 800adda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	885b      	ldrh	r3, [r3, #2]
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fe f965 	bl	80090b8 <lwip_htons>
 800adee:	4603      	mov	r3, r0
 800adf0:	461a      	mov	r2, r3
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	88db      	ldrh	r3, [r3, #6]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe f953 	bl	80090b8 <lwip_htons>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2200      	movs	r2, #0
 800ae28:	701a      	strb	r2, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	705a      	strb	r2, [r3, #1]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	709a      	strb	r2, [r3, #2]
 800ae32:	2200      	movs	r2, #0
 800ae34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	8b3a      	ldrh	r2, [r7, #24]
 800ae3a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800ae3c:	8b3a      	ldrh	r2, [r7, #24]
 800ae3e:	8b7b      	ldrh	r3, [r7, #26]
 800ae40:	4413      	add	r3, r2
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae4e:	e061      	b.n	800af14 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	889b      	ldrh	r3, [r3, #4]
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	889b      	ldrh	r3, [r3, #4]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d232      	bcs.n	800aecc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01f      	beq.n	800aeb2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	889b      	ldrh	r3, [r3, #4]
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	88db      	ldrh	r3, [r3, #6]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	f0c0 80e8 	bcc.w	800b054 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae86:	88db      	ldrh	r3, [r3, #6]
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	889b      	ldrh	r3, [r3, #4]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	429a      	cmp	r2, r3
 800ae92:	f200 80df 	bhi.w	800b054 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	88db      	ldrh	r3, [r3, #6]
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d037      	beq.n	800af1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800aeb0:	e034      	b.n	800af1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	889b      	ldrh	r3, [r3, #4]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	429a      	cmp	r2, r3
 800aec0:	f200 80c3 	bhi.w	800b04a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	605a      	str	r2, [r3, #4]
      break;
 800aeca:	e027      	b.n	800af1c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	889b      	ldrh	r3, [r3, #4]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	889b      	ldrh	r3, [r3, #4]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	429a      	cmp	r2, r3
 800aeda:	f000 80b8 	beq.w	800b04e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800aede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee0:	889b      	ldrh	r3, [r3, #4]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	88db      	ldrh	r3, [r3, #6]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	429a      	cmp	r2, r3
 800aeec:	f0c0 80b1 	bcc.w	800b052 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d009      	beq.n	800af0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	889b      	ldrh	r3, [r3, #4]
 800af00:	b29b      	uxth	r3, r3
 800af02:	429a      	cmp	r2, r3
 800af04:	d001      	beq.n	800af0a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	2b00      	cmp	r3, #0
 800af18:	d19a      	bne.n	800ae50 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800af1a:	e000      	b.n	800af1e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800af1c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	2b00      	cmp	r3, #0
 800af22:	d12d      	bne.n	800af80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01c      	beq.n	800af64 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	88db      	ldrh	r3, [r3, #6]
 800af2e:	b29a      	uxth	r2, r3
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	889b      	ldrh	r3, [r3, #4]
 800af34:	b29b      	uxth	r3, r3
 800af36:	429a      	cmp	r2, r3
 800af38:	d906      	bls.n	800af48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800af3a:	4b50      	ldr	r3, [pc, #320]	; (800b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800af3c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800af40:	494f      	ldr	r1, [pc, #316]	; (800b080 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800af42:	4850      	ldr	r0, [pc, #320]	; (800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800af44:	f009 fb54 	bl	80145f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	88db      	ldrh	r3, [r3, #6]
 800af52:	b29a      	uxth	r2, r3
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	889b      	ldrh	r3, [r3, #4]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d010      	beq.n	800af80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	623b      	str	r3, [r7, #32]
 800af62:	e00d      	b.n	800af80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800af6c:	4b43      	ldr	r3, [pc, #268]	; (800b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800af6e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800af72:	4945      	ldr	r1, [pc, #276]	; (800b088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800af74:	4843      	ldr	r0, [pc, #268]	; (800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800af76:	f009 fb3b 	bl	80145f0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d105      	bne.n	800af92 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	7f9b      	ldrb	r3, [r3, #30]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d059      	beq.n	800b046 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d04f      	beq.n	800b038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d006      	beq.n	800afae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	889b      	ldrh	r3, [r3, #4]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	623b      	str	r3, [r7, #32]
 800afb2:	e041      	b.n	800b038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800afbe:	e012      	b.n	800afe6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	88db      	ldrh	r3, [r3, #6]
 800afca:	b29a      	uxth	r2, r3
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	889b      	ldrh	r3, [r3, #4]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d002      	beq.n	800afdc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	623b      	str	r3, [r7, #32]
            break;
 800afda:	e007      	b.n	800afec <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e9      	bne.n	800afc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d022      	beq.n	800b038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800affa:	4b20      	ldr	r3, [pc, #128]	; (800b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800affc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800b000:	4922      	ldr	r1, [pc, #136]	; (800b08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b002:	4820      	ldr	r0, [pc, #128]	; (800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b004:	f009 faf4 	bl	80145f0 <iprintf>
          LWIP_ASSERT("sanity check",
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	429a      	cmp	r2, r3
 800b012:	d106      	bne.n	800b022 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800b014:	4b19      	ldr	r3, [pc, #100]	; (800b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b016:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b01a:	491c      	ldr	r1, [pc, #112]	; (800b08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b01c:	4819      	ldr	r0, [pc, #100]	; (800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b01e:	f009 fae7 	bl	80145f0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d006      	beq.n	800b038 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800b02a:	4b14      	ldr	r3, [pc, #80]	; (800b07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b02c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b030:	4917      	ldr	r1, [pc, #92]	; (800b090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b032:	4814      	ldr	r0, [pc, #80]	; (800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b034:	f009 fadc 	bl	80145f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf14      	ite	ne
 800b03e:	2301      	movne	r3, #1
 800b040:	2300      	moveq	r3, #0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	e016      	b.n	800b074 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b046:	2300      	movs	r3, #0
 800b048:	e014      	b.n	800b074 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800b04a:	bf00      	nop
 800b04c:	e002      	b.n	800b054 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b04e:	bf00      	nop
 800b050:	e000      	b.n	800b054 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b052:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f001 fcdb 	bl	800ca10 <pbuf_clen>
 800b05a:	4603      	mov	r3, r0
 800b05c:	461a      	mov	r2, r3
 800b05e:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b068:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800b06a:	68b8      	ldr	r0, [r7, #8]
 800b06c:	f001 fc36 	bl	800c8dc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800b074:	4618      	mov	r0, r3
 800b076:	3730      	adds	r7, #48	; 0x30
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	080164f8 	.word	0x080164f8
 800b080:	080165d4 	.word	0x080165d4
 800b084:	08016540 	.word	0x08016540
 800b088:	080165f4 	.word	0x080165f4
 800b08c:	0801662c 	.word	0x0801662c
 800b090:	0801663c 	.word	0x0801663c
 800b094:	20003f40 	.word	0x20003f40

0800b098 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08e      	sub	sp, #56	; 0x38
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 030f 	and.w	r3, r3, #15
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	2b14      	cmp	r3, #20
 800b0b2:	f040 8131 	bne.w	800b318 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	88db      	ldrh	r3, [r3, #6]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fd fffb 	bl	80090b8 <lwip_htons>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	885b      	ldrh	r3, [r3, #2]
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fd ffef 	bl	80090b8 <lwip_htons>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	f003 030f 	and.w	r3, r3, #15
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 fc8c 	bl	800ca10 <pbuf_clen>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b0fc:	4b8c      	ldr	r3, [pc, #560]	; (800b330 <ip4_reass+0x298>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b104:	4413      	add	r3, r2
 800b106:	2b0a      	cmp	r3, #10
 800b108:	dd10      	ble.n	800b12c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b10a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b10c:	4619      	mov	r1, r3
 800b10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b110:	f7ff fd90 	bl	800ac34 <ip_reass_remove_oldest_datagram>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8101 	beq.w	800b31e <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b11c:	4b84      	ldr	r3, [pc, #528]	; (800b330 <ip4_reass+0x298>)
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	461a      	mov	r2, r3
 800b122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b124:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b126:	2b0a      	cmp	r3, #10
 800b128:	f300 80f9 	bgt.w	800b31e <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b12c:	4b81      	ldr	r3, [pc, #516]	; (800b334 <ip4_reass+0x29c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	633b      	str	r3, [r7, #48]	; 0x30
 800b132:	e015      	b.n	800b160 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	695a      	ldr	r2, [r3, #20]
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d10c      	bne.n	800b15a <ip4_reass+0xc2>
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	699a      	ldr	r2, [r3, #24]
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d106      	bne.n	800b15a <ip4_reass+0xc2>
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	899a      	ldrh	r2, [r3, #12]
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	889b      	ldrh	r3, [r3, #4]
 800b154:	b29b      	uxth	r3, r3
 800b156:	429a      	cmp	r2, r3
 800b158:	d006      	beq.n	800b168 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	633b      	str	r3, [r7, #48]	; 0x30
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e6      	bne.n	800b134 <ip4_reass+0x9c>
 800b166:	e000      	b.n	800b16a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b168:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b172:	4619      	mov	r1, r3
 800b174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b176:	f7ff fdbf 	bl	800acf8 <ip_reass_enqueue_new_datagram>
 800b17a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11c      	bne.n	800b1bc <ip4_reass+0x124>
      goto nullreturn;
 800b182:	e0cc      	b.n	800b31e <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	88db      	ldrh	r3, [r3, #6]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fd ff94 	bl	80090b8 <lwip_htons>
 800b190:	4603      	mov	r3, r0
 800b192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b196:	2b00      	cmp	r3, #0
 800b198:	d110      	bne.n	800b1bc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	89db      	ldrh	r3, [r3, #14]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fd ff8a 	bl	80090b8 <lwip_htons>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d006      	beq.n	800b1bc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	2214      	movs	r2, #20
 800b1b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f009 fa07 	bl	80145ca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	88db      	ldrh	r3, [r3, #6]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bf0c      	ite	eq
 800b1ca:	2301      	moveq	r3, #1
 800b1cc:	2300      	movne	r3, #0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00e      	beq.n	800b1f6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800b1d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b1da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1dc:	4413      	add	r3, r2
 800b1de:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b1e0:	8b7a      	ldrh	r2, [r7, #26]
 800b1e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	f0c0 809a 	bcc.w	800b31e <ip4_reass+0x286>
 800b1ea:	8b7b      	ldrh	r3, [r7, #26]
 800b1ec:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	f200 8094 	bhi.w	800b31e <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b1f6:	69fa      	ldr	r2, [r7, #28]
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1fc:	f7ff fde4 	bl	800adc8 <ip_reass_chain_frag_into_datagram_and_validate>
 800b200:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b208:	f000 8088 	beq.w	800b31c <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b20c:	4b48      	ldr	r3, [pc, #288]	; (800b330 <ip4_reass+0x298>)
 800b20e:	881a      	ldrh	r2, [r3, #0]
 800b210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b212:	4413      	add	r3, r2
 800b214:	b29a      	uxth	r2, r3
 800b216:	4b46      	ldr	r3, [pc, #280]	; (800b330 <ip4_reass+0x298>)
 800b218:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00d      	beq.n	800b23c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800b220:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b224:	4413      	add	r3, r2
 800b226:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	8a7a      	ldrh	r2, [r7, #18]
 800b22c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	7f9b      	ldrb	r3, [r3, #30]
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	b2da      	uxtb	r2, r3
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d168      	bne.n	800b314 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	8b9b      	ldrh	r3, [r3, #28]
 800b246:	3314      	adds	r3, #20
 800b248:	b29a      	uxth	r2, r3
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	3308      	adds	r3, #8
 800b264:	2214      	movs	r2, #20
 800b266:	4619      	mov	r1, r3
 800b268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26a:	f009 f9ae 	bl	80145ca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	8b9b      	ldrh	r3, [r3, #28]
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd ff20 	bl	80090b8 <lwip_htons>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	2200      	movs	r2, #0
 800b284:	719a      	strb	r2, [r3, #6]
 800b286:	2200      	movs	r2, #0
 800b288:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28c:	2200      	movs	r2, #0
 800b28e:	729a      	strb	r2, [r3, #10]
 800b290:	2200      	movs	r2, #0
 800b292:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b29a:	e00e      	b.n	800b2ba <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800b29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800b2a2:	f06f 0113 	mvn.w	r1, #19
 800b2a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b2a8:	f001 faf4 	bl	800c894 <pbuf_header>
      pbuf_cat(p, r);
 800b2ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 fbee 	bl	800ca90 <pbuf_cat>
      r = iprh->next_pbuf;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1ed      	bne.n	800b29c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b2c0:	4b1c      	ldr	r3, [pc, #112]	; (800b334 <ip4_reass+0x29c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d102      	bne.n	800b2d0 <ip4_reass+0x238>
      ipr_prev = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ce:	e010      	b.n	800b2f2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b2d0:	4b18      	ldr	r3, [pc, #96]	; (800b334 <ip4_reass+0x29c>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d6:	e007      	b.n	800b2e8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d006      	beq.n	800b2f0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1f4      	bne.n	800b2d8 <ip4_reass+0x240>
 800b2ee:	e000      	b.n	800b2f2 <ip4_reass+0x25a>
          break;
 800b2f0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2f6:	f7ff fd39 	bl	800ad6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 fb88 	bl	800ca10 <pbuf_clen>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <ip4_reass+0x298>)
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	1a9b      	subs	r3, r3, r2
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	4b08      	ldr	r3, [pc, #32]	; (800b330 <ip4_reass+0x298>)
 800b30e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	e008      	b.n	800b326 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	e006      	b.n	800b326 <ip4_reass+0x28e>
    goto nullreturn;
 800b318:	bf00      	nop
 800b31a:	e000      	b.n	800b31e <ip4_reass+0x286>
    goto nullreturn;
 800b31c:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 fadc 	bl	800c8dc <pbuf_free>
  return NULL;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3738      	adds	r7, #56	; 0x38
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20003f40 	.word	0x20003f40
 800b334:	20003f3c 	.word	0x20003f3c

0800b338 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b33c:	2005      	movs	r0, #5
 800b33e:	f000 fd21 	bl	800bd84 <memp_malloc>
 800b342:	4603      	mov	r3, r0
}
 800b344:	4618      	mov	r0, r3
 800b346:	bd80      	pop	{r7, pc}

0800b348 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <ip_frag_free_pbuf_custom_ref+0x1c>
 800b356:	4b07      	ldr	r3, [pc, #28]	; (800b374 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b358:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b35c:	4906      	ldr	r1, [pc, #24]	; (800b378 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b35e:	4807      	ldr	r0, [pc, #28]	; (800b37c <ip_frag_free_pbuf_custom_ref+0x34>)
 800b360:	f009 f946 	bl	80145f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	2005      	movs	r0, #5
 800b368:	f000 fd5e 	bl	800be28 <memp_free>
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	080164f8 	.word	0x080164f8
 800b378:	08016660 	.word	0x08016660
 800b37c:	08016540 	.word	0x08016540

0800b380 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <ipfrag_free_pbuf_custom+0x20>
 800b392:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <ipfrag_free_pbuf_custom+0x58>)
 800b394:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b398:	4910      	ldr	r1, [pc, #64]	; (800b3dc <ipfrag_free_pbuf_custom+0x5c>)
 800b39a:	4811      	ldr	r0, [pc, #68]	; (800b3e0 <ipfrag_free_pbuf_custom+0x60>)
 800b39c:	f009 f928 	bl	80145f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d006      	beq.n	800b3b6 <ipfrag_free_pbuf_custom+0x36>
 800b3a8:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <ipfrag_free_pbuf_custom+0x58>)
 800b3aa:	f240 22b9 	movw	r2, #697	; 0x2b9
 800b3ae:	490d      	ldr	r1, [pc, #52]	; (800b3e4 <ipfrag_free_pbuf_custom+0x64>)
 800b3b0:	480b      	ldr	r0, [pc, #44]	; (800b3e0 <ipfrag_free_pbuf_custom+0x60>)
 800b3b2:	f009 f91d 	bl	80145f0 <iprintf>
  if (pcr->original != NULL) {
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d004      	beq.n	800b3c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 fa8a 	bl	800c8dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff ffbd 	bl	800b348 <ip_frag_free_pbuf_custom_ref>
}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	080164f8 	.word	0x080164f8
 800b3dc:	0801666c 	.word	0x0801666c
 800b3e0:	08016540 	.word	0x08016540
 800b3e4:	08016678 	.word	0x08016678

0800b3e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b092      	sub	sp, #72	; 0x48
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b3fc:	3b14      	subs	r3, #20
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da00      	bge.n	800b404 <ip4_frag+0x1c>
 800b402:	3307      	adds	r3, #7
 800b404:	10db      	asrs	r3, r3, #3
 800b406:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b408:	2314      	movs	r3, #20
 800b40a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	f003 030f 	and.w	r3, r3, #15
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	2b14      	cmp	r3, #20
 800b422:	d009      	beq.n	800b438 <ip4_frag+0x50>
 800b424:	4b79      	ldr	r3, [pc, #484]	; (800b60c <ip4_frag+0x224>)
 800b426:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b42a:	4979      	ldr	r1, [pc, #484]	; (800b610 <ip4_frag+0x228>)
 800b42c:	4879      	ldr	r0, [pc, #484]	; (800b614 <ip4_frag+0x22c>)
 800b42e:	f009 f8df 	bl	80145f0 <iprintf>
 800b432:	f06f 0305 	mvn.w	r3, #5
 800b436:	e0e5      	b.n	800b604 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	88db      	ldrh	r3, [r3, #6]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd fe3a 	bl	80090b8 <lwip_htons>
 800b444:	4603      	mov	r3, r0
 800b446:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800b448:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b44a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b44e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b450:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <ip4_frag+0x86>
 800b45a:	4b6c      	ldr	r3, [pc, #432]	; (800b60c <ip4_frag+0x224>)
 800b45c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b460:	496d      	ldr	r1, [pc, #436]	; (800b618 <ip4_frag+0x230>)
 800b462:	486c      	ldr	r0, [pc, #432]	; (800b614 <ip4_frag+0x22c>)
 800b464:	f009 f8c4 	bl	80145f0 <iprintf>
 800b468:	f06f 0305 	mvn.w	r3, #5
 800b46c:	e0ca      	b.n	800b604 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	891b      	ldrh	r3, [r3, #8]
 800b472:	3b14      	subs	r3, #20
 800b474:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800b476:	e0bc      	b.n	800b5f2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800b478:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b47a:	00da      	lsls	r2, r3, #3
 800b47c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b47e:	4293      	cmp	r3, r2
 800b480:	bfa8      	it	ge
 800b482:	4613      	movge	r3, r2
 800b484:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b486:	2200      	movs	r2, #0
 800b488:	2114      	movs	r1, #20
 800b48a:	2002      	movs	r0, #2
 800b48c:	f000 feb4 	bl	800c1f8 <pbuf_alloc>
 800b490:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80b2 	beq.w	800b5fe <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	2b13      	cmp	r3, #19
 800b4a0:	d806      	bhi.n	800b4b0 <ip4_frag+0xc8>
 800b4a2:	4b5a      	ldr	r3, [pc, #360]	; (800b60c <ip4_frag+0x224>)
 800b4a4:	f240 3209 	movw	r2, #777	; 0x309
 800b4a8:	495c      	ldr	r1, [pc, #368]	; (800b61c <ip4_frag+0x234>)
 800b4aa:	485a      	ldr	r0, [pc, #360]	; (800b614 <ip4_frag+0x22c>)
 800b4ac:	f009 f8a0 	bl	80145f0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2214      	movs	r2, #20
 800b4b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f009 f886 	bl	80145ca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800b4c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800b4c8:	e04f      	b.n	800b56a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	895a      	ldrh	r2, [r3, #10]
 800b4ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b4d4:	8bfa      	ldrh	r2, [r7, #30]
 800b4d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf28      	it	cs
 800b4dc:	4613      	movcs	r3, r2
 800b4de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b4e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <ip4_frag+0x10a>
        poff = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	60fb      	str	r3, [r7, #12]
        continue;
 800b4f0:	e03b      	b.n	800b56a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b4f2:	f7ff ff21 	bl	800b338 <ip_frag_alloc_pbuf_custom_ref>
 800b4f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d103      	bne.n	800b506 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800b4fe:	6a38      	ldr	r0, [r7, #32]
 800b500:	f001 f9ec 	bl	800c8dc <pbuf_free>
        goto memerr;
 800b504:	e07c      	b.n	800b600 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b506:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b50c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b50e:	4413      	add	r3, r2
 800b510:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800b512:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b514:	9201      	str	r2, [sp, #4]
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	4603      	mov	r3, r0
 800b51a:	2202      	movs	r2, #2
 800b51c:	2004      	movs	r0, #4
 800b51e:	f000 ffff 	bl	800c520 <pbuf_alloced_custom>
 800b522:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b52a:	69b8      	ldr	r0, [r7, #24]
 800b52c:	f7ff ff0c 	bl	800b348 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b530:	6a38      	ldr	r0, [r7, #32]
 800b532:	f001 f9d3 	bl	800c8dc <pbuf_free>
        goto memerr;
 800b536:	e063      	b.n	800b600 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f001 fa81 	bl	800ca40 <pbuf_ref>
      pcr->original = p;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	4a36      	ldr	r2, [pc, #216]	; (800b620 <ip4_frag+0x238>)
 800b548:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b54a:	6979      	ldr	r1, [r7, #20]
 800b54c:	6a38      	ldr	r0, [r7, #32]
 800b54e:	f001 fa9f 	bl	800ca90 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b552:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b554:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800b55a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <ip4_frag+0x182>
        poff = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b56a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1ac      	bne.n	800b4ca <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800b570:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b572:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b574:	4413      	add	r3, r2
 800b576:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b578:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b57e:	3b14      	subs	r3, #20
 800b580:	429a      	cmp	r2, r3
 800b582:	bfd4      	ite	le
 800b584:	2301      	movle	r3, #1
 800b586:	2300      	movgt	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b58c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b58e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b592:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800b59a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b59c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b5a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fd fd87 	bl	80090b8 <lwip_htons>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b5b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5b4:	3314      	adds	r3, #20
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fd fd7d 	bl	80090b8 <lwip_htons>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	729a      	strb	r2, [r3, #10]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6a39      	ldr	r1, [r7, #32]
 800b5d8:	68b8      	ldr	r0, [r7, #8]
 800b5da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b5dc:	6a38      	ldr	r0, [r7, #32]
 800b5de:	f001 f97d 	bl	800c8dc <pbuf_free>
    left -= fragsize;
 800b5e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b5e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800b5ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b5ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5ee:	4413      	add	r3, r2
 800b5f0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800b5f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f47f af3f 	bne.w	800b478 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e002      	b.n	800b604 <ip4_frag+0x21c>
      goto memerr;
 800b5fe:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b604:	4618      	mov	r0, r3
 800b606:	3740      	adds	r7, #64	; 0x40
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	080164f8 	.word	0x080164f8
 800b610:	08016684 	.word	0x08016684
 800b614:	08016540 	.word	0x08016540
 800b618:	080166ac 	.word	0x080166ac
 800b61c:	080166c8 	.word	0x080166c8
 800b620:	0800b381 	.word	0x0800b381

0800b624 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b62c:	4b40      	ldr	r3, [pc, #256]	; (800b730 <plug_holes+0x10c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	429a      	cmp	r2, r3
 800b634:	d206      	bcs.n	800b644 <plug_holes+0x20>
 800b636:	4b3f      	ldr	r3, [pc, #252]	; (800b734 <plug_holes+0x110>)
 800b638:	f240 125d 	movw	r2, #349	; 0x15d
 800b63c:	493e      	ldr	r1, [pc, #248]	; (800b738 <plug_holes+0x114>)
 800b63e:	483f      	ldr	r0, [pc, #252]	; (800b73c <plug_holes+0x118>)
 800b640:	f008 ffd6 	bl	80145f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b644:	4b3e      	ldr	r3, [pc, #248]	; (800b740 <plug_holes+0x11c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d306      	bcc.n	800b65c <plug_holes+0x38>
 800b64e:	4b39      	ldr	r3, [pc, #228]	; (800b734 <plug_holes+0x110>)
 800b650:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b654:	493b      	ldr	r1, [pc, #236]	; (800b744 <plug_holes+0x120>)
 800b656:	4839      	ldr	r0, [pc, #228]	; (800b73c <plug_holes+0x118>)
 800b658:	f008 ffca 	bl	80145f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	791b      	ldrb	r3, [r3, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d006      	beq.n	800b672 <plug_holes+0x4e>
 800b664:	4b33      	ldr	r3, [pc, #204]	; (800b734 <plug_holes+0x110>)
 800b666:	f240 125f 	movw	r2, #351	; 0x15f
 800b66a:	4937      	ldr	r1, [pc, #220]	; (800b748 <plug_holes+0x124>)
 800b66c:	4833      	ldr	r0, [pc, #204]	; (800b73c <plug_holes+0x118>)
 800b66e:	f008 ffbf 	bl	80145f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b67a:	d906      	bls.n	800b68a <plug_holes+0x66>
 800b67c:	4b2d      	ldr	r3, [pc, #180]	; (800b734 <plug_holes+0x110>)
 800b67e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b682:	4932      	ldr	r1, [pc, #200]	; (800b74c <plug_holes+0x128>)
 800b684:	482d      	ldr	r0, [pc, #180]	; (800b73c <plug_holes+0x118>)
 800b686:	f008 ffb3 	bl	80145f0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b68a:	4b29      	ldr	r3, [pc, #164]	; (800b730 <plug_holes+0x10c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	8812      	ldrh	r2, [r2, #0]
 800b692:	4413      	add	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d01f      	beq.n	800b6de <plug_holes+0xba>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	791b      	ldrb	r3, [r3, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d11b      	bne.n	800b6de <plug_holes+0xba>
 800b6a6:	4b26      	ldr	r3, [pc, #152]	; (800b740 <plug_holes+0x11c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d016      	beq.n	800b6de <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b6b0:	4b27      	ldr	r3, [pc, #156]	; (800b750 <plug_holes+0x12c>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d102      	bne.n	800b6c0 <plug_holes+0x9c>
      lfree = mem;
 800b6ba:	4a25      	ldr	r2, [pc, #148]	; (800b750 <plug_holes+0x12c>)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	881a      	ldrh	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b6c8:	4b19      	ldr	r3, [pc, #100]	; (800b730 <plug_holes+0x10c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	8812      	ldrh	r2, [r2, #0]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	4916      	ldr	r1, [pc, #88]	; (800b730 <plug_holes+0x10c>)
 800b6d6:	6809      	ldr	r1, [r1, #0]
 800b6d8:	1a52      	subs	r2, r2, r1
 800b6da:	b292      	uxth	r2, r2
 800b6dc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b6de:	4b14      	ldr	r3, [pc, #80]	; (800b730 <plug_holes+0x10c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	8852      	ldrh	r2, [r2, #2]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d01a      	beq.n	800b728 <plug_holes+0x104>
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	791b      	ldrb	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d116      	bne.n	800b728 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b6fa:	4b15      	ldr	r3, [pc, #84]	; (800b750 <plug_holes+0x12c>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d102      	bne.n	800b70a <plug_holes+0xe6>
      lfree = pmem;
 800b704:	4a12      	ldr	r2, [pc, #72]	; (800b750 <plug_holes+0x12c>)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	881a      	ldrh	r2, [r3, #0]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b712:	4b07      	ldr	r3, [pc, #28]	; (800b730 <plug_holes+0x10c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	8812      	ldrh	r2, [r2, #0]
 800b71a:	4413      	add	r3, r2
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	4904      	ldr	r1, [pc, #16]	; (800b730 <plug_holes+0x10c>)
 800b720:	6809      	ldr	r1, [r1, #0]
 800b722:	1a52      	subs	r2, r2, r1
 800b724:	b292      	uxth	r2, r2
 800b726:	805a      	strh	r2, [r3, #2]
  }
}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	20003f44 	.word	0x20003f44
 800b734:	080166e8 	.word	0x080166e8
 800b738:	08016718 	.word	0x08016718
 800b73c:	08016730 	.word	0x08016730
 800b740:	20003f48 	.word	0x20003f48
 800b744:	08016758 	.word	0x08016758
 800b748:	08016774 	.word	0x08016774
 800b74c:	08016790 	.word	0x08016790
 800b750:	20003f4c 	.word	0x20003f4c

0800b754 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b75a:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <mem_init+0x80>)
 800b75c:	3303      	adds	r3, #3
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	461a      	mov	r2, r3
 800b764:	4b1c      	ldr	r3, [pc, #112]	; (800b7d8 <mem_init+0x84>)
 800b766:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b768:	4b1b      	ldr	r3, [pc, #108]	; (800b7d8 <mem_init+0x84>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b774:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b782:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <mem_init+0x84>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b78a:	4a14      	ldr	r2, [pc, #80]	; (800b7dc <mem_init+0x88>)
 800b78c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <mem_init+0x88>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2201      	movs	r2, #1
 800b794:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b796:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <mem_init+0x88>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b79e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b7a0:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <mem_init+0x88>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7a8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <mem_init+0x84>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a0c      	ldr	r2, [pc, #48]	; (800b7e0 <mem_init+0x8c>)
 800b7b0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7b2:	480c      	ldr	r0, [pc, #48]	; (800b7e4 <mem_init+0x90>)
 800b7b4:	f007 fcc2 	bl	801313c <sys_mutex_new>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d006      	beq.n	800b7cc <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7be:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <mem_init+0x94>)
 800b7c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7c4:	4909      	ldr	r1, [pc, #36]	; (800b7ec <mem_init+0x98>)
 800b7c6:	480a      	ldr	r0, [pc, #40]	; (800b7f0 <mem_init+0x9c>)
 800b7c8:	f008 ff12 	bl	80145f0 <iprintf>
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	2000403c 	.word	0x2000403c
 800b7d8:	20003f44 	.word	0x20003f44
 800b7dc:	20003f48 	.word	0x20003f48
 800b7e0:	20003f4c 	.word	0x20003f4c
 800b7e4:	20003f50 	.word	0x20003f50
 800b7e8:	080166e8 	.word	0x080166e8
 800b7ec:	080167bc 	.word	0x080167bc
 800b7f0:	08016730 	.word	0x08016730

0800b7f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d050      	beq.n	800b8a4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f003 0303 	and.w	r3, r3, #3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d006      	beq.n	800b81a <mem_free+0x26>
 800b80c:	4b27      	ldr	r3, [pc, #156]	; (800b8ac <mem_free+0xb8>)
 800b80e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b812:	4927      	ldr	r1, [pc, #156]	; (800b8b0 <mem_free+0xbc>)
 800b814:	4827      	ldr	r0, [pc, #156]	; (800b8b4 <mem_free+0xc0>)
 800b816:	f008 feeb 	bl	80145f0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b81a:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <mem_free+0xc4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d304      	bcc.n	800b82e <mem_free+0x3a>
 800b824:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <mem_free+0xc8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d306      	bcc.n	800b83c <mem_free+0x48>
 800b82e:	4b1f      	ldr	r3, [pc, #124]	; (800b8ac <mem_free+0xb8>)
 800b830:	f240 12af 	movw	r2, #431	; 0x1af
 800b834:	4922      	ldr	r1, [pc, #136]	; (800b8c0 <mem_free+0xcc>)
 800b836:	481f      	ldr	r0, [pc, #124]	; (800b8b4 <mem_free+0xc0>)
 800b838:	f008 feda 	bl	80145f0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b83c:	4b1e      	ldr	r3, [pc, #120]	; (800b8b8 <mem_free+0xc4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	429a      	cmp	r2, r3
 800b844:	d304      	bcc.n	800b850 <mem_free+0x5c>
 800b846:	4b1d      	ldr	r3, [pc, #116]	; (800b8bc <mem_free+0xc8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d306      	bcc.n	800b85e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b850:	f007 fcc8 	bl	80131e4 <sys_arch_protect>
 800b854:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b856:	68b8      	ldr	r0, [r7, #8]
 800b858:	f007 fcd2 	bl	8013200 <sys_arch_unprotect>
    return;
 800b85c:	e023      	b.n	800b8a6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b85e:	4819      	ldr	r0, [pc, #100]	; (800b8c4 <mem_free+0xd0>)
 800b860:	f007 fc86 	bl	8013170 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3b08      	subs	r3, #8
 800b868:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	791b      	ldrb	r3, [r3, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <mem_free+0x8c>
 800b872:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <mem_free+0xb8>)
 800b874:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b878:	4913      	ldr	r1, [pc, #76]	; (800b8c8 <mem_free+0xd4>)
 800b87a:	480e      	ldr	r0, [pc, #56]	; (800b8b4 <mem_free+0xc0>)
 800b87c:	f008 feb8 	bl	80145f0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <mem_free+0xd8>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d202      	bcs.n	800b896 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b890:	4a0e      	ldr	r2, [pc, #56]	; (800b8cc <mem_free+0xd8>)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff fec4 	bl	800b624 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b89c:	4809      	ldr	r0, [pc, #36]	; (800b8c4 <mem_free+0xd0>)
 800b89e:	f007 fc76 	bl	801318e <sys_mutex_unlock>
 800b8a2:	e000      	b.n	800b8a6 <mem_free+0xb2>
    return;
 800b8a4:	bf00      	nop
}
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	080166e8 	.word	0x080166e8
 800b8b0:	080167d8 	.word	0x080167d8
 800b8b4:	08016730 	.word	0x08016730
 800b8b8:	20003f44 	.word	0x20003f44
 800b8bc:	20003f48 	.word	0x20003f48
 800b8c0:	080167fc 	.word	0x080167fc
 800b8c4:	20003f50 	.word	0x20003f50
 800b8c8:	08016814 	.word	0x08016814
 800b8cc:	20003f4c 	.word	0x20003f4c

0800b8d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b8dc:	887b      	ldrh	r3, [r7, #2]
 800b8de:	3303      	adds	r3, #3
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	f023 0303 	bic.w	r3, r3, #3
 800b8e6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b8e8:	887b      	ldrh	r3, [r7, #2]
 800b8ea:	2b0b      	cmp	r3, #11
 800b8ec:	d801      	bhi.n	800b8f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b8f2:	887b      	ldrh	r3, [r7, #2]
 800b8f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8f8:	d901      	bls.n	800b8fe <mem_trim+0x2e>
    return NULL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	e0bd      	b.n	800ba7a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b8fe:	4b61      	ldr	r3, [pc, #388]	; (800ba84 <mem_trim+0x1b4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	429a      	cmp	r2, r3
 800b906:	d304      	bcc.n	800b912 <mem_trim+0x42>
 800b908:	4b5f      	ldr	r3, [pc, #380]	; (800ba88 <mem_trim+0x1b8>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d306      	bcc.n	800b920 <mem_trim+0x50>
 800b912:	4b5e      	ldr	r3, [pc, #376]	; (800ba8c <mem_trim+0x1bc>)
 800b914:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b918:	495d      	ldr	r1, [pc, #372]	; (800ba90 <mem_trim+0x1c0>)
 800b91a:	485e      	ldr	r0, [pc, #376]	; (800ba94 <mem_trim+0x1c4>)
 800b91c:	f008 fe68 	bl	80145f0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b920:	4b58      	ldr	r3, [pc, #352]	; (800ba84 <mem_trim+0x1b4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	429a      	cmp	r2, r3
 800b928:	d304      	bcc.n	800b934 <mem_trim+0x64>
 800b92a:	4b57      	ldr	r3, [pc, #348]	; (800ba88 <mem_trim+0x1b8>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d307      	bcc.n	800b944 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b934:	f007 fc56 	bl	80131e4 <sys_arch_protect>
 800b938:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f007 fc60 	bl	8013200 <sys_arch_unprotect>
    return rmem;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	e09a      	b.n	800ba7a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3b08      	subs	r3, #8
 800b948:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4a4d      	ldr	r2, [pc, #308]	; (800ba84 <mem_trim+0x1b4>)
 800b94e:	6812      	ldr	r2, [r2, #0]
 800b950:	1a9b      	subs	r3, r3, r2
 800b952:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	881a      	ldrh	r2, [r3, #0]
 800b958:	8b7b      	ldrh	r3, [r7, #26]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b08      	subs	r3, #8
 800b960:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b962:	887a      	ldrh	r2, [r7, #2]
 800b964:	8b3b      	ldrh	r3, [r7, #24]
 800b966:	429a      	cmp	r2, r3
 800b968:	d906      	bls.n	800b978 <mem_trim+0xa8>
 800b96a:	4b48      	ldr	r3, [pc, #288]	; (800ba8c <mem_trim+0x1bc>)
 800b96c:	f240 2206 	movw	r2, #518	; 0x206
 800b970:	4949      	ldr	r1, [pc, #292]	; (800ba98 <mem_trim+0x1c8>)
 800b972:	4848      	ldr	r0, [pc, #288]	; (800ba94 <mem_trim+0x1c4>)
 800b974:	f008 fe3c 	bl	80145f0 <iprintf>
  if (newsize > size) {
 800b978:	887a      	ldrh	r2, [r7, #2]
 800b97a:	8b3b      	ldrh	r3, [r7, #24]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d901      	bls.n	800b984 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	e07a      	b.n	800ba7a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b984:	887a      	ldrh	r2, [r7, #2]
 800b986:	8b3b      	ldrh	r3, [r7, #24]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d101      	bne.n	800b990 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	e074      	b.n	800ba7a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b990:	4842      	ldr	r0, [pc, #264]	; (800ba9c <mem_trim+0x1cc>)
 800b992:	f007 fbed 	bl	8013170 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b996:	4b3b      	ldr	r3, [pc, #236]	; (800ba84 <mem_trim+0x1b4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	8812      	ldrh	r2, [r2, #0]
 800b99e:	4413      	add	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	791b      	ldrb	r3, [r3, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d131      	bne.n	800ba0e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b9b0:	8b7a      	ldrh	r2, [r7, #26]
 800b9b2:	887b      	ldrh	r3, [r7, #2]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	3308      	adds	r3, #8
 800b9ba:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800b9bc:	4b38      	ldr	r3, [pc, #224]	; (800baa0 <mem_trim+0x1d0>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d105      	bne.n	800b9d2 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <mem_trim+0x1b4>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	8a3b      	ldrh	r3, [r7, #16]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	4a34      	ldr	r2, [pc, #208]	; (800baa0 <mem_trim+0x1d0>)
 800b9d0:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b9d2:	4b2c      	ldr	r3, [pc, #176]	; (800ba84 <mem_trim+0x1b4>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	8a3b      	ldrh	r3, [r7, #16]
 800b9d8:	4413      	add	r3, r2
 800b9da:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	8a7a      	ldrh	r2, [r7, #18]
 800b9e6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	8b7a      	ldrh	r2, [r7, #26]
 800b9ec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	8a3a      	ldrh	r2, [r7, #16]
 800b9f2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9fc:	d039      	beq.n	800ba72 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b9fe:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <mem_trim+0x1b4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	8812      	ldrh	r2, [r2, #0]
 800ba06:	4413      	add	r3, r2
 800ba08:	8a3a      	ldrh	r2, [r7, #16]
 800ba0a:	805a      	strh	r2, [r3, #2]
 800ba0c:	e031      	b.n	800ba72 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ba0e:	887b      	ldrh	r3, [r7, #2]
 800ba10:	f103 0214 	add.w	r2, r3, #20
 800ba14:	8b3b      	ldrh	r3, [r7, #24]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d82b      	bhi.n	800ba72 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ba1a:	8b7a      	ldrh	r2, [r7, #26]
 800ba1c:	887b      	ldrh	r3, [r7, #2]
 800ba1e:	4413      	add	r3, r2
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	3308      	adds	r3, #8
 800ba24:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ba26:	4b17      	ldr	r3, [pc, #92]	; (800ba84 <mem_trim+0x1b4>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	8a3b      	ldrh	r3, [r7, #16]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800ba30:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <mem_trim+0x1d0>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d202      	bcs.n	800ba40 <mem_trim+0x170>
      lfree = mem2;
 800ba3a:	4a19      	ldr	r2, [pc, #100]	; (800baa0 <mem_trim+0x1d0>)
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2200      	movs	r2, #0
 800ba44:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	881a      	ldrh	r2, [r3, #0]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	8b7a      	ldrh	r2, [r7, #26]
 800ba52:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	8a3a      	ldrh	r2, [r7, #16]
 800ba58:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba62:	d006      	beq.n	800ba72 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ba64:	4b07      	ldr	r3, [pc, #28]	; (800ba84 <mem_trim+0x1b4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	8812      	ldrh	r2, [r2, #0]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	8a3a      	ldrh	r2, [r7, #16]
 800ba70:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ba72:	480a      	ldr	r0, [pc, #40]	; (800ba9c <mem_trim+0x1cc>)
 800ba74:	f007 fb8b 	bl	801318e <sys_mutex_unlock>
  return rmem;
 800ba78:	687b      	ldr	r3, [r7, #4]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20003f44 	.word	0x20003f44
 800ba88:	20003f48 	.word	0x20003f48
 800ba8c:	080166e8 	.word	0x080166e8
 800ba90:	08016828 	.word	0x08016828
 800ba94:	08016730 	.word	0x08016730
 800ba98:	08016840 	.word	0x08016840
 800ba9c:	20003f50 	.word	0x20003f50
 800baa0:	20003f4c 	.word	0x20003f4c

0800baa4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800baae:	88fb      	ldrh	r3, [r7, #6]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <mem_malloc+0x14>
    return NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	e0d1      	b.n	800bc5c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	3303      	adds	r3, #3
 800babc:	b29b      	uxth	r3, r3
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800bac4:	88fb      	ldrh	r3, [r7, #6]
 800bac6:	2b0b      	cmp	r3, #11
 800bac8:	d801      	bhi.n	800bace <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800baca:	230c      	movs	r3, #12
 800bacc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800bace:	88fb      	ldrh	r3, [r7, #6]
 800bad0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bad4:	d901      	bls.n	800bada <mem_malloc+0x36>
    return NULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e0c0      	b.n	800bc5c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bada:	4862      	ldr	r0, [pc, #392]	; (800bc64 <mem_malloc+0x1c0>)
 800badc:	f007 fb48 	bl	8013170 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bae0:	4b61      	ldr	r3, [pc, #388]	; (800bc68 <mem_malloc+0x1c4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	4b61      	ldr	r3, [pc, #388]	; (800bc6c <mem_malloc+0x1c8>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	83fb      	strh	r3, [r7, #30]
 800baee:	e0aa      	b.n	800bc46 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800baf0:	4b5e      	ldr	r3, [pc, #376]	; (800bc6c <mem_malloc+0x1c8>)
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	8bfb      	ldrh	r3, [r7, #30]
 800baf6:	4413      	add	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	791b      	ldrb	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f040 809b 	bne.w	800bc3a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	8bfb      	ldrh	r3, [r7, #30]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	f1a3 0208 	sub.w	r2, r3, #8
 800bb12:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800bb14:	429a      	cmp	r2, r3
 800bb16:	f0c0 8090 	bcc.w	800bc3a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	8bfb      	ldrh	r3, [r7, #30]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	f1a3 0208 	sub.w	r2, r3, #8
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d327      	bcc.n	800bb80 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800bb30:	8bfa      	ldrh	r2, [r7, #30]
 800bb32:	88fb      	ldrh	r3, [r7, #6]
 800bb34:	4413      	add	r3, r2
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3308      	adds	r3, #8
 800bb3a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800bb3c:	4b4b      	ldr	r3, [pc, #300]	; (800bc6c <mem_malloc+0x1c8>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	8a7b      	ldrh	r3, [r7, #18]
 800bb42:	4413      	add	r3, r2
 800bb44:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	881a      	ldrh	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8bfa      	ldrh	r2, [r7, #30]
 800bb58:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	8a7a      	ldrh	r2, [r7, #18]
 800bb5e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2201      	movs	r2, #1
 800bb64:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb6e:	d00a      	beq.n	800bb86 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bb70:	4b3e      	ldr	r3, [pc, #248]	; (800bc6c <mem_malloc+0x1c8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	8812      	ldrh	r2, [r2, #0]
 800bb78:	4413      	add	r3, r2
 800bb7a:	8a7a      	ldrh	r2, [r7, #18]
 800bb7c:	805a      	strh	r2, [r3, #2]
 800bb7e:	e002      	b.n	800bb86 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2201      	movs	r2, #1
 800bb84:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bb86:	4b38      	ldr	r3, [pc, #224]	; (800bc68 <mem_malloc+0x1c4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d127      	bne.n	800bbe0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800bb90:	4b35      	ldr	r3, [pc, #212]	; (800bc68 <mem_malloc+0x1c4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bb96:	e005      	b.n	800bba4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800bb98:	4b34      	ldr	r3, [pc, #208]	; (800bc6c <mem_malloc+0x1c8>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	8812      	ldrh	r2, [r2, #0]
 800bba0:	4413      	add	r3, r2
 800bba2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	791b      	ldrb	r3, [r3, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d004      	beq.n	800bbb6 <mem_malloc+0x112>
 800bbac:	4b30      	ldr	r3, [pc, #192]	; (800bc70 <mem_malloc+0x1cc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d1f0      	bne.n	800bb98 <mem_malloc+0xf4>
          }
          lfree = cur;
 800bbb6:	4a2c      	ldr	r2, [pc, #176]	; (800bc68 <mem_malloc+0x1c4>)
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bbbc:	4b2a      	ldr	r3, [pc, #168]	; (800bc68 <mem_malloc+0x1c4>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4b2b      	ldr	r3, [pc, #172]	; (800bc70 <mem_malloc+0x1cc>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d00b      	beq.n	800bbe0 <mem_malloc+0x13c>
 800bbc8:	4b27      	ldr	r3, [pc, #156]	; (800bc68 <mem_malloc+0x1c4>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	791b      	ldrb	r3, [r3, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d006      	beq.n	800bbe0 <mem_malloc+0x13c>
 800bbd2:	4b28      	ldr	r3, [pc, #160]	; (800bc74 <mem_malloc+0x1d0>)
 800bbd4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800bbd8:	4927      	ldr	r1, [pc, #156]	; (800bc78 <mem_malloc+0x1d4>)
 800bbda:	4828      	ldr	r0, [pc, #160]	; (800bc7c <mem_malloc+0x1d8>)
 800bbdc:	f008 fd08 	bl	80145f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bbe0:	4820      	ldr	r0, [pc, #128]	; (800bc64 <mem_malloc+0x1c0>)
 800bbe2:	f007 fad4 	bl	801318e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bbe6:	88fa      	ldrh	r2, [r7, #6]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	4413      	add	r3, r2
 800bbec:	3308      	adds	r3, #8
 800bbee:	4a20      	ldr	r2, [pc, #128]	; (800bc70 <mem_malloc+0x1cc>)
 800bbf0:	6812      	ldr	r2, [r2, #0]
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d906      	bls.n	800bc04 <mem_malloc+0x160>
 800bbf6:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <mem_malloc+0x1d0>)
 800bbf8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bbfc:	4920      	ldr	r1, [pc, #128]	; (800bc80 <mem_malloc+0x1dc>)
 800bbfe:	481f      	ldr	r0, [pc, #124]	; (800bc7c <mem_malloc+0x1d8>)
 800bc00:	f008 fcf6 	bl	80145f0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <mem_malloc+0x178>
 800bc0e:	4b19      	ldr	r3, [pc, #100]	; (800bc74 <mem_malloc+0x1d0>)
 800bc10:	f240 22d6 	movw	r2, #726	; 0x2d6
 800bc14:	491b      	ldr	r1, [pc, #108]	; (800bc84 <mem_malloc+0x1e0>)
 800bc16:	4819      	ldr	r0, [pc, #100]	; (800bc7c <mem_malloc+0x1d8>)
 800bc18:	f008 fcea 	bl	80145f0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d006      	beq.n	800bc34 <mem_malloc+0x190>
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <mem_malloc+0x1d0>)
 800bc28:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800bc2c:	4916      	ldr	r1, [pc, #88]	; (800bc88 <mem_malloc+0x1e4>)
 800bc2e:	4813      	ldr	r0, [pc, #76]	; (800bc7c <mem_malloc+0x1d8>)
 800bc30:	f008 fcde 	bl	80145f0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	3308      	adds	r3, #8
 800bc38:	e010      	b.n	800bc5c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <mem_malloc+0x1c8>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	8bfb      	ldrh	r3, [r7, #30]
 800bc40:	4413      	add	r3, r2
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bc46:	8bfa      	ldrh	r2, [r7, #30]
 800bc48:	88fb      	ldrh	r3, [r7, #6]
 800bc4a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	f4ff af4e 	bcc.w	800baf0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bc54:	4803      	ldr	r0, [pc, #12]	; (800bc64 <mem_malloc+0x1c0>)
 800bc56:	f007 fa9a 	bl	801318e <sys_mutex_unlock>
  return NULL;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3720      	adds	r7, #32
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	20003f50 	.word	0x20003f50
 800bc68:	20003f4c 	.word	0x20003f4c
 800bc6c:	20003f44 	.word	0x20003f44
 800bc70:	20003f48 	.word	0x20003f48
 800bc74:	080166e8 	.word	0x080166e8
 800bc78:	08016860 	.word	0x08016860
 800bc7c:	08016730 	.word	0x08016730
 800bc80:	0801687c 	.word	0x0801687c
 800bc84:	080168ac 	.word	0x080168ac
 800bc88:	080168dc 	.word	0x080168dc

0800bc8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	3303      	adds	r3, #3
 800bca2:	f023 0303 	bic.w	r3, r3, #3
 800bca6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e011      	b.n	800bcd2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	4413      	add	r3, r2
 800bcca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	885b      	ldrh	r3, [r3, #2]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	dce7      	bgt.n	800bcae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bcde:	bf00      	nop
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
	...

0800bcec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	80fb      	strh	r3, [r7, #6]
 800bcf6:	e009      	b.n	800bd0c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bcf8:	88fb      	ldrh	r3, [r7, #6]
 800bcfa:	4a08      	ldr	r2, [pc, #32]	; (800bd1c <memp_init+0x30>)
 800bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff ffc3 	bl	800bc8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bd06:	88fb      	ldrh	r3, [r7, #6]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	80fb      	strh	r3, [r7, #6]
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b0c      	cmp	r3, #12
 800bd10:	d9f2      	bls.n	800bcf8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	08017f90 	.word	0x08017f90

0800bd20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bd28:	f007 fa5c 	bl	80131e4 <sys_arch_protect>
 800bd2c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d015      	beq.n	800bd68 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	6812      	ldr	r2, [r2, #0]
 800bd44:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d006      	beq.n	800bd5e <do_memp_malloc_pool+0x3e>
 800bd50:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <do_memp_malloc_pool+0x58>)
 800bd52:	f240 1249 	movw	r2, #329	; 0x149
 800bd56:	4909      	ldr	r1, [pc, #36]	; (800bd7c <do_memp_malloc_pool+0x5c>)
 800bd58:	4809      	ldr	r0, [pc, #36]	; (800bd80 <do_memp_malloc_pool+0x60>)
 800bd5a:	f008 fc49 	bl	80145f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f007 fa4e 	bl	8013200 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	e003      	b.n	800bd70 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f007 fa49 	bl	8013200 <sys_arch_unprotect>
  return NULL;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	08016900 	.word	0x08016900
 800bd7c:	08016930 	.word	0x08016930
 800bd80:	08016954 	.word	0x08016954

0800bd84 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	2b0c      	cmp	r3, #12
 800bd92:	d908      	bls.n	800bda6 <memp_malloc+0x22>
 800bd94:	4b0a      	ldr	r3, [pc, #40]	; (800bdc0 <memp_malloc+0x3c>)
 800bd96:	f240 1287 	movw	r2, #391	; 0x187
 800bd9a:	490a      	ldr	r1, [pc, #40]	; (800bdc4 <memp_malloc+0x40>)
 800bd9c:	480a      	ldr	r0, [pc, #40]	; (800bdc8 <memp_malloc+0x44>)
 800bd9e:	f008 fc27 	bl	80145f0 <iprintf>
 800bda2:	2300      	movs	r3, #0
 800bda4:	e008      	b.n	800bdb8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bda6:	79fb      	ldrb	r3, [r7, #7]
 800bda8:	4a08      	ldr	r2, [pc, #32]	; (800bdcc <memp_malloc+0x48>)
 800bdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff ffb6 	bl	800bd20 <do_memp_malloc_pool>
 800bdb4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	08016900 	.word	0x08016900
 800bdc4:	08016990 	.word	0x08016990
 800bdc8:	08016954 	.word	0x08016954
 800bdcc:	08017f90 	.word	0x08017f90

0800bdd0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d006      	beq.n	800bdf2 <do_memp_free_pool+0x22>
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <do_memp_free_pool+0x4c>)
 800bde6:	f240 129d 	movw	r2, #413	; 0x19d
 800bdea:	490d      	ldr	r1, [pc, #52]	; (800be20 <do_memp_free_pool+0x50>)
 800bdec:	480d      	ldr	r0, [pc, #52]	; (800be24 <do_memp_free_pool+0x54>)
 800bdee:	f008 fbff 	bl	80145f0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bdf6:	f007 f9f5 	bl	80131e4 <sys_arch_protect>
 800bdfa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800be0e:	68b8      	ldr	r0, [r7, #8]
 800be10:	f007 f9f6 	bl	8013200 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800be14:	bf00      	nop
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	08016900 	.word	0x08016900
 800be20:	080169b0 	.word	0x080169b0
 800be24:	08016954 	.word	0x08016954

0800be28 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	2b0c      	cmp	r3, #12
 800be38:	d907      	bls.n	800be4a <memp_free+0x22>
 800be3a:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <memp_free+0x44>)
 800be3c:	f240 12db 	movw	r2, #475	; 0x1db
 800be40:	490b      	ldr	r1, [pc, #44]	; (800be70 <memp_free+0x48>)
 800be42:	480c      	ldr	r0, [pc, #48]	; (800be74 <memp_free+0x4c>)
 800be44:	f008 fbd4 	bl	80145f0 <iprintf>
 800be48:	e00c      	b.n	800be64 <memp_free+0x3c>

  if (mem == NULL) {
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d008      	beq.n	800be62 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800be50:	79fb      	ldrb	r3, [r7, #7]
 800be52:	4a09      	ldr	r2, [pc, #36]	; (800be78 <memp_free+0x50>)
 800be54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff ffb8 	bl	800bdd0 <do_memp_free_pool>
 800be60:	e000      	b.n	800be64 <memp_free+0x3c>
    return;
 800be62:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	08016900 	.word	0x08016900
 800be70:	080169d0 	.word	0x080169d0
 800be74:	08016954 	.word	0x08016954
 800be78:	08017f90 	.word	0x08017f90

0800be7c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800be80:	bf00      	nop
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
	...

0800be8c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d105      	bne.n	800beac <netif_add+0x20>
 800bea0:	4b1f      	ldr	r3, [pc, #124]	; (800bf20 <netif_add+0x94>)
 800bea2:	22fb      	movs	r2, #251	; 0xfb
 800bea4:	491f      	ldr	r1, [pc, #124]	; (800bf24 <netif_add+0x98>)
 800bea6:	4820      	ldr	r0, [pc, #128]	; (800bf28 <netif_add+0x9c>)
 800bea8:	f008 fba2 	bl	80145f0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2203      	movs	r2, #3
 800beca:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800bed4:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <netif_add+0xa0>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	1c5a      	adds	r2, r3, #1
 800beda:	b2d1      	uxtb	r1, r2
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <netif_add+0xa0>)
 800bede:	7011      	strb	r1, [r2, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a3a      	ldr	r2, [r7, #32]
 800beea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f81e 	bl	800bf34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	4798      	blx	r3
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <netif_add+0x7c>
    return NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e007      	b.n	800bf18 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <netif_add+0xa4>)
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bf10:	4a07      	ldr	r2, [pc, #28]	; (800bf30 <netif_add+0xa4>)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	080169ec 	.word	0x080169ec
 800bf24:	08016a20 	.word	0x08016a20
 800bf28:	08016a38 	.word	0x08016a38
 800bf2c:	20003f88 	.word	0x20003f88
 800bf30:	20007724 	.word	0x20007724

0800bf34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d003      	beq.n	800bf50 <netif_set_addr+0x1c>
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10c      	bne.n	800bf6a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 f81a 	bl	800bf8c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800bf58:	6879      	ldr	r1, [r7, #4]
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f000 f862 	bl	800c024 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f84a 	bl	800bffc <netif_set_gw>
 800bf68:	e00b      	b.n	800bf82 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f000 f859 	bl	800c024 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 f841 	bl	800bffc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f805 	bl	800bf8c <netif_set_ipaddr>
  }
}
 800bf82:	bf00      	nop
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <netif_set_ipaddr+0x18>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	e002      	b.n	800bfaa <netif_set_ipaddr+0x1e>
 800bfa4:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <netif_set_ipaddr+0x6c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3304      	adds	r3, #4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d01c      	beq.n	800bff0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	f107 020c 	add.w	r2, r7, #12
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f002 fae1 	bl	800e588 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	f107 020c 	add.w	r2, r7, #12
 800bfce:	4611      	mov	r1, r2
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f006 fe33 	bl	8012c3c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <netif_set_ipaddr+0x56>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	e000      	b.n	800bfe4 <netif_set_ipaddr+0x58>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bfe8:	2101      	movs	r1, #1
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f861 	bl	800c0b2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800bff0:	bf00      	nop
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	08017ef0 	.word	0x08017ef0

0800bffc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <netif_set_gw+0x16>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	e000      	b.n	800c014 <netif_set_gw+0x18>
 800c012:	2300      	movs	r3, #0
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d002      	beq.n	800c03a <netif_set_netmask+0x16>
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	e000      	b.n	800c03c <netif_set_netmask+0x18>
 800c03a:	2300      	movs	r3, #0
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c054:	4a04      	ldr	r2, [pc, #16]	; (800c068 <netif_set_default+0x1c>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20007728 	.word	0x20007728

0800c06c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d113      	bne.n	800c0aa <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c088:	f043 0301 	orr.w	r3, r3, #1
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c0a2:	2103      	movs	r1, #3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f804 	bl	800c0b2 <netif_issue_reports>
    }
  }
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0be:	78fb      	ldrb	r3, [r7, #3]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d011      	beq.n	800c0ec <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00c      	beq.n	800c0ec <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c0d8:	f003 0308 	and.w	r3, r3, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d005      	beq.n	800c0ec <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fd ff28 	bl	8009f3c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	2b00      	cmp	r3, #0
 800c108:	d012      	beq.n	800c130 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c110:	f023 0301 	bic.w	r3, r3, #1
 800c114:	b2da      	uxtb	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c122:	f003 0308 	and.w	r3, r3, #8
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7fd facc 	bl	80096c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c13e:	f007 f851 	bl	80131e4 <sys_arch_protect>
 800c142:	6038      	str	r0, [r7, #0]
 800c144:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <pbuf_free_ooseq+0x4c>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f007 f858 	bl	8013200 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c150:	4b0d      	ldr	r3, [pc, #52]	; (800c188 <pbuf_free_ooseq+0x50>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	e00f      	b.n	800c178 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d008      	beq.n	800c172 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c164:	4618      	mov	r0, r3
 800c166:	f001 fe8a 	bl	800de7e <tcp_segs_free>
      pcb->ooseq = NULL;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800c170:	e005      	b.n	800c17e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	607b      	str	r3, [r7, #4]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1ec      	bne.n	800c158 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	2000772c 	.word	0x2000772c
 800c188:	20007734 	.word	0x20007734

0800c18c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c194:	f7ff ffd0 	bl	800c138 <pbuf_free_ooseq>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c1a6:	f007 f81d 	bl	80131e4 <sys_arch_protect>
 800c1aa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c1ac:	4b10      	ldr	r3, [pc, #64]	; (800c1f0 <pbuf_pool_is_empty+0x50>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <pbuf_pool_is_empty+0x50>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f007 f821 	bl	8013200 <sys_arch_unprotect>

  if (!queued) {
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d110      	bne.n	800c1e6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	480a      	ldr	r0, [pc, #40]	; (800c1f4 <pbuf_pool_is_empty+0x54>)
 800c1ca:	f7fc feb3 	bl	8008f34 <tcpip_callback_with_block>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d008      	beq.n	800c1e6 <pbuf_pool_is_empty+0x46>
 800c1d4:	f007 f806 	bl	80131e4 <sys_arch_protect>
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <pbuf_pool_is_empty+0x50>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f007 f80d 	bl	8013200 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	2000772c 	.word	0x2000772c
 800c1f4:	0800c18d 	.word	0x0800c18d

0800c1f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
 800c202:	460b      	mov	r3, r1
 800c204:	80bb      	strh	r3, [r7, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c20a:	79fb      	ldrb	r3, [r7, #7]
 800c20c:	2b04      	cmp	r3, #4
 800c20e:	d81c      	bhi.n	800c24a <pbuf_alloc+0x52>
 800c210:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <pbuf_alloc+0x20>)
 800c212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c22d 	.word	0x0800c22d
 800c21c:	0800c233 	.word	0x0800c233
 800c220:	0800c239 	.word	0x0800c239
 800c224:	0800c23f 	.word	0x0800c23f
 800c228:	0800c245 	.word	0x0800c245
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c22c:	2336      	movs	r3, #54	; 0x36
 800c22e:	82fb      	strh	r3, [r7, #22]
    break;
 800c230:	e014      	b.n	800c25c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c232:	2322      	movs	r3, #34	; 0x22
 800c234:	82fb      	strh	r3, [r7, #22]
    break;
 800c236:	e011      	b.n	800c25c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c238:	230e      	movs	r3, #14
 800c23a:	82fb      	strh	r3, [r7, #22]
    break;
 800c23c:	e00e      	b.n	800c25c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c23e:	2300      	movs	r3, #0
 800c240:	82fb      	strh	r3, [r7, #22]
    break;
 800c242:	e00b      	b.n	800c25c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	82fb      	strh	r3, [r7, #22]
    break;
 800c248:	e008      	b.n	800c25c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c24a:	4ba5      	ldr	r3, [pc, #660]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c24c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c250:	49a4      	ldr	r1, [pc, #656]	; (800c4e4 <pbuf_alloc+0x2ec>)
 800c252:	48a5      	ldr	r0, [pc, #660]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c254:	f008 f9cc 	bl	80145f0 <iprintf>
    return NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	e15d      	b.n	800c518 <pbuf_alloc+0x320>
  }

  switch (type) {
 800c25c:	79bb      	ldrb	r3, [r7, #6]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	f200 8134 	bhi.w	800c4cc <pbuf_alloc+0x2d4>
 800c264:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <pbuf_alloc+0x74>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c40d 	.word	0x0800c40d
 800c270:	0800c499 	.word	0x0800c499
 800c274:	0800c499 	.word	0x0800c499
 800c278:	0800c27d 	.word	0x0800c27d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c27c:	200c      	movs	r0, #12
 800c27e:	f7ff fd81 	bl	800bd84 <memp_malloc>
 800c282:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800c28a:	f7ff ff89 	bl	800c1a0 <pbuf_pool_is_empty>
      return NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	e142      	b.n	800c518 <pbuf_alloc+0x320>
    }
    p->type = type;
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	79ba      	ldrb	r2, [r7, #6]
 800c296:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c29e:	8afb      	ldrh	r3, [r7, #22]
 800c2a0:	3310      	adds	r3, #16
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3303      	adds	r3, #3
 800c2a8:	f023 0303 	bic.w	r3, r3, #3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	f003 0303 	and.w	r3, r3, #3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d006      	beq.n	800c2cc <pbuf_alloc+0xd4>
 800c2be:	4b88      	ldr	r3, [pc, #544]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c2c0:	f240 1229 	movw	r2, #297	; 0x129
 800c2c4:	4989      	ldr	r1, [pc, #548]	; (800c4ec <pbuf_alloc+0x2f4>)
 800c2c6:	4888      	ldr	r0, [pc, #544]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c2c8:	f008 f992 	bl	80145f0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	88ba      	ldrh	r2, [r7, #4]
 800c2d0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c2d2:	8afb      	ldrh	r3, [r7, #22]
 800c2d4:	3303      	adds	r3, #3
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800c2de:	88bb      	ldrh	r3, [r7, #4]
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	bf28      	it	cs
 800c2e4:	4613      	movcs	r3, r2
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	69fa      	ldr	r2, [r7, #28]
 800c2f2:	8952      	ldrh	r2, [r2, #10]
 800c2f4:	441a      	add	r2, r3
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d906      	bls.n	800c30e <pbuf_alloc+0x116>
 800c300:	4b77      	ldr	r3, [pc, #476]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c302:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c306:	497a      	ldr	r1, [pc, #488]	; (800c4f0 <pbuf_alloc+0x2f8>)
 800c308:	4877      	ldr	r0, [pc, #476]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c30a:	f008 f971 	bl	80145f0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c30e:	8afb      	ldrh	r3, [r7, #22]
 800c310:	3303      	adds	r3, #3
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c31a:	d106      	bne.n	800c32a <pbuf_alloc+0x132>
 800c31c:	4b70      	ldr	r3, [pc, #448]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c31e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c322:	4974      	ldr	r1, [pc, #464]	; (800c4f4 <pbuf_alloc+0x2fc>)
 800c324:	4870      	ldr	r0, [pc, #448]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c326:	f008 f963 	bl	80145f0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	2201      	movs	r2, #1
 800c32e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c334:	88bb      	ldrh	r3, [r7, #4]
 800c336:	69fa      	ldr	r2, [r7, #28]
 800c338:	8952      	ldrh	r2, [r2, #10]
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c33e:	e061      	b.n	800c404 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c340:	200c      	movs	r0, #12
 800c342:	f7ff fd1f 	bl	800bd84 <memp_malloc>
 800c346:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800c34e:	f7ff ff27 	bl	800c1a0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800c352:	69f8      	ldr	r0, [r7, #28]
 800c354:	f000 fac2 	bl	800c8dc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c358:	2300      	movs	r3, #0
 800c35a:	e0dd      	b.n	800c518 <pbuf_alloc+0x320>
      }
      q->type = type;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	79ba      	ldrb	r2, [r7, #6]
 800c360:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c37a:	4293      	cmp	r3, r2
 800c37c:	dd06      	ble.n	800c38c <pbuf_alloc+0x194>
 800c37e:	4b58      	ldr	r3, [pc, #352]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c380:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c384:	495c      	ldr	r1, [pc, #368]	; (800c4f8 <pbuf_alloc+0x300>)
 800c386:	4858      	ldr	r0, [pc, #352]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c388:	f008 f932 	bl	80145f0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	b29a      	uxth	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	b29b      	uxth	r3, r3
 800c398:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c39c:	bf28      	it	cs
 800c39e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f103 0210 	add.w	r2, r3, #16
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d006      	beq.n	800c3cc <pbuf_alloc+0x1d4>
 800c3be:	4b48      	ldr	r3, [pc, #288]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c3c0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c3c4:	494d      	ldr	r1, [pc, #308]	; (800c4fc <pbuf_alloc+0x304>)
 800c3c6:	4848      	ldr	r0, [pc, #288]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c3c8:	f008 f912 	bl	80145f0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	69fa      	ldr	r2, [r7, #28]
 800c3d2:	8952      	ldrh	r2, [r2, #10]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d906      	bls.n	800c3ee <pbuf_alloc+0x1f6>
 800c3e0:	4b3f      	ldr	r3, [pc, #252]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c3e2:	f240 1255 	movw	r2, #341	; 0x155
 800c3e6:	4942      	ldr	r1, [pc, #264]	; (800c4f0 <pbuf_alloc+0x2f8>)
 800c3e8:	483f      	ldr	r0, [pc, #252]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c3ea:	f008 f901 	bl	80145f0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	895b      	ldrh	r3, [r3, #10]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	1a9b      	subs	r3, r3, r2
 800c3fe:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	dc9a      	bgt.n	800c340 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c40a:	e07e      	b.n	800c50a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c40c:	8afb      	ldrh	r3, [r7, #22]
 800c40e:	3313      	adds	r3, #19
 800c410:	b29b      	uxth	r3, r3
 800c412:	f023 0303 	bic.w	r3, r3, #3
 800c416:	b29a      	uxth	r2, r3
 800c418:	88bb      	ldrh	r3, [r7, #4]
 800c41a:	3303      	adds	r3, #3
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f023 0303 	bic.w	r3, r3, #3
 800c422:	b29b      	uxth	r3, r3
 800c424:	4413      	add	r3, r2
 800c426:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c428:	897a      	ldrh	r2, [r7, #10]
 800c42a:	88bb      	ldrh	r3, [r7, #4]
 800c42c:	3303      	adds	r3, #3
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	429a      	cmp	r2, r3
 800c434:	d201      	bcs.n	800c43a <pbuf_alloc+0x242>
        return NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	e06e      	b.n	800c518 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c43a:	897b      	ldrh	r3, [r7, #10]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff fb31 	bl	800baa4 <mem_malloc>
 800c442:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <pbuf_alloc+0x256>
      return NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e064      	b.n	800c518 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c44e:	8afb      	ldrh	r3, [r7, #22]
 800c450:	3310      	adds	r3, #16
 800c452:	69fa      	ldr	r2, [r7, #28]
 800c454:	4413      	add	r3, r2
 800c456:	3303      	adds	r3, #3
 800c458:	f023 0303 	bic.w	r3, r3, #3
 800c45c:	461a      	mov	r2, r3
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	88ba      	ldrh	r2, [r7, #4]
 800c466:	811a      	strh	r2, [r3, #8]
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	891a      	ldrh	r2, [r3, #8]
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	79ba      	ldrb	r2, [r7, #6]
 800c47a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	f003 0303 	and.w	r3, r3, #3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d03f      	beq.n	800c508 <pbuf_alloc+0x310>
 800c488:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c48a:	f240 1277 	movw	r2, #375	; 0x177
 800c48e:	491c      	ldr	r1, [pc, #112]	; (800c500 <pbuf_alloc+0x308>)
 800c490:	4815      	ldr	r0, [pc, #84]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c492:	f008 f8ad 	bl	80145f0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c496:	e037      	b.n	800c508 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c498:	200b      	movs	r0, #11
 800c49a:	f7ff fc73 	bl	800bd84 <memp_malloc>
 800c49e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e036      	b.n	800c518 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	88ba      	ldrh	r2, [r7, #4]
 800c4b4:	811a      	strh	r2, [r3, #8]
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	891a      	ldrh	r2, [r3, #8]
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	79ba      	ldrb	r2, [r7, #6]
 800c4c8:	731a      	strb	r2, [r3, #12]
    break;
 800c4ca:	e01e      	b.n	800c50a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c4cc:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <pbuf_alloc+0x2e8>)
 800c4ce:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c4d2:	490c      	ldr	r1, [pc, #48]	; (800c504 <pbuf_alloc+0x30c>)
 800c4d4:	4804      	ldr	r0, [pc, #16]	; (800c4e8 <pbuf_alloc+0x2f0>)
 800c4d6:	f008 f88b 	bl	80145f0 <iprintf>
    return NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e01c      	b.n	800c518 <pbuf_alloc+0x320>
 800c4de:	bf00      	nop
 800c4e0:	08016a60 	.word	0x08016a60
 800c4e4:	08016a90 	.word	0x08016a90
 800c4e8:	08016aac 	.word	0x08016aac
 800c4ec:	08016ad4 	.word	0x08016ad4
 800c4f0:	08016b04 	.word	0x08016b04
 800c4f4:	08016b38 	.word	0x08016b38
 800c4f8:	08016b6c 	.word	0x08016b6c
 800c4fc:	08016b80 	.word	0x08016b80
 800c500:	08016bb0 	.word	0x08016bb0
 800c504:	08016bdc 	.word	0x08016bdc
    break;
 800c508:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2201      	movs	r2, #1
 800c50e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	2200      	movs	r2, #0
 800c514:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c516:	69fb      	ldr	r3, [r7, #28]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	4603      	mov	r3, r0
 800c52a:	71fb      	strb	r3, [r7, #7]
 800c52c:	460b      	mov	r3, r1
 800c52e:	80bb      	strh	r3, [r7, #4]
 800c530:	4613      	mov	r3, r2
 800c532:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d81b      	bhi.n	800c572 <pbuf_alloced_custom+0x52>
 800c53a:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <pbuf_alloced_custom+0x20>)
 800c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c55b 	.word	0x0800c55b
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c567 	.word	0x0800c567
 800c550:	0800c56d 	.word	0x0800c56d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c554:	2336      	movs	r3, #54	; 0x36
 800c556:	81fb      	strh	r3, [r7, #14]
    break;
 800c558:	e014      	b.n	800c584 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c55a:	2322      	movs	r3, #34	; 0x22
 800c55c:	81fb      	strh	r3, [r7, #14]
    break;
 800c55e:	e011      	b.n	800c584 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c560:	230e      	movs	r3, #14
 800c562:	81fb      	strh	r3, [r7, #14]
    break;
 800c564:	e00e      	b.n	800c584 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c566:	2300      	movs	r3, #0
 800c568:	81fb      	strh	r3, [r7, #14]
    break;
 800c56a:	e00b      	b.n	800c584 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	81fb      	strh	r3, [r7, #14]
    break;
 800c570:	e008      	b.n	800c584 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c572:	4b1d      	ldr	r3, [pc, #116]	; (800c5e8 <pbuf_alloced_custom+0xc8>)
 800c574:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c578:	491c      	ldr	r1, [pc, #112]	; (800c5ec <pbuf_alloced_custom+0xcc>)
 800c57a:	481d      	ldr	r0, [pc, #116]	; (800c5f0 <pbuf_alloced_custom+0xd0>)
 800c57c:	f008 f838 	bl	80145f0 <iprintf>
    return NULL;
 800c580:	2300      	movs	r3, #0
 800c582:	e02d      	b.n	800c5e0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c584:	89fb      	ldrh	r3, [r7, #14]
 800c586:	3303      	adds	r3, #3
 800c588:	f023 0203 	bic.w	r2, r3, #3
 800c58c:	88bb      	ldrh	r3, [r7, #4]
 800c58e:	441a      	add	r2, r3
 800c590:	8bbb      	ldrh	r3, [r7, #28]
 800c592:	429a      	cmp	r2, r3
 800c594:	d901      	bls.n	800c59a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	e022      	b.n	800c5e0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d008      	beq.n	800c5b8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c5a6:	89fb      	ldrh	r3, [r7, #14]
 800c5a8:	3303      	adds	r3, #3
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	441a      	add	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	605a      	str	r2, [r3, #4]
 800c5b6:	e002      	b.n	800c5be <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	88ba      	ldrh	r2, [r7, #4]
 800c5c8:	811a      	strh	r2, [r3, #8]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	891a      	ldrh	r2, [r3, #8]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	79ba      	ldrb	r2, [r7, #6]
 800c5d6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c5de:	683b      	ldr	r3, [r7, #0]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08016a60 	.word	0x08016a60
 800c5ec:	08016bf8 	.word	0x08016bf8
 800c5f0:	08016aac 	.word	0x08016aac

0800c5f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d106      	bne.n	800c614 <pbuf_realloc+0x20>
 800c606:	4b4b      	ldr	r3, [pc, #300]	; (800c734 <pbuf_realloc+0x140>)
 800c608:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c60c:	494a      	ldr	r1, [pc, #296]	; (800c738 <pbuf_realloc+0x144>)
 800c60e:	484b      	ldr	r0, [pc, #300]	; (800c73c <pbuf_realloc+0x148>)
 800c610:	f007 ffee 	bl	80145f0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7b1b      	ldrb	r3, [r3, #12]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d012      	beq.n	800c642 <pbuf_realloc+0x4e>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	7b1b      	ldrb	r3, [r3, #12]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d00e      	beq.n	800c642 <pbuf_realloc+0x4e>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	7b1b      	ldrb	r3, [r3, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00a      	beq.n	800c642 <pbuf_realloc+0x4e>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7b1b      	ldrb	r3, [r3, #12]
 800c630:	2b02      	cmp	r3, #2
 800c632:	d006      	beq.n	800c642 <pbuf_realloc+0x4e>
 800c634:	4b3f      	ldr	r3, [pc, #252]	; (800c734 <pbuf_realloc+0x140>)
 800c636:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c63a:	4941      	ldr	r1, [pc, #260]	; (800c740 <pbuf_realloc+0x14c>)
 800c63c:	483f      	ldr	r0, [pc, #252]	; (800c73c <pbuf_realloc+0x148>)
 800c63e:	f007 ffd7 	bl	80145f0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	891b      	ldrh	r3, [r3, #8]
 800c646:	887a      	ldrh	r2, [r7, #2]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d26f      	bcs.n	800c72c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c64c:	887b      	ldrh	r3, [r7, #2]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	8912      	ldrh	r2, [r2, #8]
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c656:	887b      	ldrh	r3, [r7, #2]
 800c658:	827b      	strh	r3, [r7, #18]
  q = p;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c65e:	e025      	b.n	800c6ac <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	895b      	ldrh	r3, [r3, #10]
 800c664:	8a7a      	ldrh	r2, [r7, #18]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c670:	4293      	cmp	r3, r2
 800c672:	dd06      	ble.n	800c682 <pbuf_realloc+0x8e>
 800c674:	4b2f      	ldr	r3, [pc, #188]	; (800c734 <pbuf_realloc+0x140>)
 800c676:	f240 220b 	movw	r2, #523	; 0x20b
 800c67a:	4932      	ldr	r1, [pc, #200]	; (800c744 <pbuf_realloc+0x150>)
 800c67c:	482f      	ldr	r0, [pc, #188]	; (800c73c <pbuf_realloc+0x148>)
 800c67e:	f007 ffb7 	bl	80145f0 <iprintf>
    q->tot_len += (u16_t)grow;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	891a      	ldrh	r2, [r3, #8]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4413      	add	r3, r2
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <pbuf_realloc+0xb8>
 800c69e:	4b25      	ldr	r3, [pc, #148]	; (800c734 <pbuf_realloc+0x140>)
 800c6a0:	f240 220f 	movw	r2, #527	; 0x20f
 800c6a4:	4928      	ldr	r1, [pc, #160]	; (800c748 <pbuf_realloc+0x154>)
 800c6a6:	4825      	ldr	r0, [pc, #148]	; (800c73c <pbuf_realloc+0x148>)
 800c6a8:	f007 ffa2 	bl	80145f0 <iprintf>
  while (rem_len > q->len) {
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	895b      	ldrh	r3, [r3, #10]
 800c6b0:	8a7a      	ldrh	r2, [r7, #18]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d8d4      	bhi.n	800c660 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	7b1b      	ldrb	r3, [r3, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d122      	bne.n	800c704 <pbuf_realloc+0x110>
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	895b      	ldrh	r3, [r3, #10]
 800c6c2:	8a7a      	ldrh	r2, [r7, #18]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d01d      	beq.n	800c704 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	7b5b      	ldrb	r3, [r3, #13]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d117      	bne.n	800c704 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	8a7b      	ldrh	r3, [r7, #18]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6978      	ldr	r0, [r7, #20]
 800c6ea:	f7ff f8f1 	bl	800b8d0 <mem_trim>
 800c6ee:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <pbuf_realloc+0x110>
 800c6f6:	4b0f      	ldr	r3, [pc, #60]	; (800c734 <pbuf_realloc+0x140>)
 800c6f8:	f240 221d 	movw	r2, #541	; 0x21d
 800c6fc:	4913      	ldr	r1, [pc, #76]	; (800c74c <pbuf_realloc+0x158>)
 800c6fe:	480f      	ldr	r0, [pc, #60]	; (800c73c <pbuf_realloc+0x148>)
 800c700:	f007 ff76 	bl	80145f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	8a7a      	ldrh	r2, [r7, #18]
 800c708:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	895a      	ldrh	r2, [r3, #10]
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d004      	beq.n	800c724 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 f8dc 	bl	800c8dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e000      	b.n	800c72e <pbuf_realloc+0x13a>
    return;
 800c72c:	bf00      	nop

}
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	08016a60 	.word	0x08016a60
 800c738:	08016c1c 	.word	0x08016c1c
 800c73c:	08016aac 	.word	0x08016aac
 800c740:	08016c34 	.word	0x08016c34
 800c744:	08016c50 	.word	0x08016c50
 800c748:	08016c64 	.word	0x08016c64
 800c74c:	08016c7c 	.word	0x08016c7c

0800c750 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	807b      	strh	r3, [r7, #2]
 800c75c:	4613      	mov	r3, r2
 800c75e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d106      	bne.n	800c774 <pbuf_header_impl+0x24>
 800c766:	4b46      	ldr	r3, [pc, #280]	; (800c880 <pbuf_header_impl+0x130>)
 800c768:	f240 223f 	movw	r2, #575	; 0x23f
 800c76c:	4945      	ldr	r1, [pc, #276]	; (800c884 <pbuf_header_impl+0x134>)
 800c76e:	4846      	ldr	r0, [pc, #280]	; (800c888 <pbuf_header_impl+0x138>)
 800c770:	f007 ff3e 	bl	80145f0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c774:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <pbuf_header_impl+0x32>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d101      	bne.n	800c786 <pbuf_header_impl+0x36>
    return 0;
 800c782:	2300      	movs	r3, #0
 800c784:	e078      	b.n	800c878 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	da10      	bge.n	800c7b0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c78e:	887b      	ldrh	r3, [r7, #2]
 800c790:	425b      	negs	r3, r3
 800c792:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	895b      	ldrh	r3, [r3, #10]
 800c798:	89fa      	ldrh	r2, [r7, #14]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d90a      	bls.n	800c7b4 <pbuf_header_impl+0x64>
 800c79e:	4b38      	ldr	r3, [pc, #224]	; (800c880 <pbuf_header_impl+0x130>)
 800c7a0:	f240 2247 	movw	r2, #583	; 0x247
 800c7a4:	4939      	ldr	r1, [pc, #228]	; (800c88c <pbuf_header_impl+0x13c>)
 800c7a6:	4838      	ldr	r0, [pc, #224]	; (800c888 <pbuf_header_impl+0x138>)
 800c7a8:	f007 ff22 	bl	80145f0 <iprintf>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e063      	b.n	800c878 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c7b0:	887b      	ldrh	r3, [r7, #2]
 800c7b2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7b1b      	ldrb	r3, [r3, #12]
 800c7b8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c7c0:	89bb      	ldrh	r3, [r7, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <pbuf_header_impl+0x7c>
 800c7c6:	89bb      	ldrh	r3, [r7, #12]
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d112      	bne.n	800c7f2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7d4:	425b      	negs	r3, r3
 800c7d6:	441a      	add	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3310      	adds	r3, #16
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d238      	bcs.n	800c85a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e042      	b.n	800c878 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c7f2:	89bb      	ldrh	r3, [r7, #12]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d002      	beq.n	800c7fe <pbuf_header_impl+0xae>
 800c7f8:	89bb      	ldrh	r3, [r7, #12]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d124      	bne.n	800c848 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c7fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c802:	2b00      	cmp	r3, #0
 800c804:	da0d      	bge.n	800c822 <pbuf_header_impl+0xd2>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	895b      	ldrh	r3, [r3, #10]
 800c80a:	89fa      	ldrh	r2, [r7, #14]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d808      	bhi.n	800c822 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c818:	425b      	negs	r3, r3
 800c81a:	441a      	add	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	605a      	str	r2, [r3, #4]
 800c820:	e011      	b.n	800c846 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd0b      	ble.n	800c842 <pbuf_header_impl+0xf2>
 800c82a:	787b      	ldrb	r3, [r7, #1]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c838:	425b      	negs	r3, r3
 800c83a:	441a      	add	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]
 800c840:	e001      	b.n	800c846 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c842:	2301      	movs	r3, #1
 800c844:	e018      	b.n	800c878 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c846:	e008      	b.n	800c85a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <pbuf_header_impl+0x130>)
 800c84a:	f240 2277 	movw	r2, #631	; 0x277
 800c84e:	4910      	ldr	r1, [pc, #64]	; (800c890 <pbuf_header_impl+0x140>)
 800c850:	480d      	ldr	r0, [pc, #52]	; (800c888 <pbuf_header_impl+0x138>)
 800c852:	f007 fecd 	bl	80145f0 <iprintf>
    return 1;
 800c856:	2301      	movs	r3, #1
 800c858:	e00e      	b.n	800c878 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	895a      	ldrh	r2, [r3, #10]
 800c85e:	887b      	ldrh	r3, [r7, #2]
 800c860:	4413      	add	r3, r2
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	891a      	ldrh	r2, [r3, #8]
 800c86c:	887b      	ldrh	r3, [r7, #2]
 800c86e:	4413      	add	r3, r2
 800c870:	b29a      	uxth	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08016a60 	.word	0x08016a60
 800c884:	08016c98 	.word	0x08016c98
 800c888:	08016aac 	.word	0x08016aac
 800c88c:	08016ca4 	.word	0x08016ca4
 800c890:	08016cc4 	.word	0x08016cc4

0800c894 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c8a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ff51 	bl	800c750 <pbuf_header_impl>
 800c8ae:	4603      	mov	r3, r0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c8c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7ff ff3f 	bl	800c750 <pbuf_header_impl>
 800c8d2:	4603      	mov	r3, r0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b088      	sub	sp, #32
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10b      	bne.n	800c902 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d106      	bne.n	800c8fe <pbuf_free+0x22>
 800c8f0:	4b41      	ldr	r3, [pc, #260]	; (800c9f8 <pbuf_free+0x11c>)
 800c8f2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c8f6:	4941      	ldr	r1, [pc, #260]	; (800c9fc <pbuf_free+0x120>)
 800c8f8:	4841      	ldr	r0, [pc, #260]	; (800ca00 <pbuf_free+0x124>)
 800c8fa:	f007 fe79 	bl	80145f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e076      	b.n	800c9f0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7b1b      	ldrb	r3, [r3, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d012      	beq.n	800c930 <pbuf_free+0x54>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7b1b      	ldrb	r3, [r3, #12]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d00e      	beq.n	800c930 <pbuf_free+0x54>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7b1b      	ldrb	r3, [r3, #12]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d00a      	beq.n	800c930 <pbuf_free+0x54>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7b1b      	ldrb	r3, [r3, #12]
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d006      	beq.n	800c930 <pbuf_free+0x54>
 800c922:	4b35      	ldr	r3, [pc, #212]	; (800c9f8 <pbuf_free+0x11c>)
 800c924:	f240 22de 	movw	r2, #734	; 0x2de
 800c928:	4936      	ldr	r1, [pc, #216]	; (800ca04 <pbuf_free+0x128>)
 800c92a:	4835      	ldr	r0, [pc, #212]	; (800ca00 <pbuf_free+0x124>)
 800c92c:	f007 fe60 	bl	80145f0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c934:	e058      	b.n	800c9e8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c936:	f006 fc55 	bl	80131e4 <sys_arch_protect>
 800c93a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	89db      	ldrh	r3, [r3, #14]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <pbuf_free+0x76>
 800c944:	4b2c      	ldr	r3, [pc, #176]	; (800c9f8 <pbuf_free+0x11c>)
 800c946:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c94a:	492f      	ldr	r1, [pc, #188]	; (800ca08 <pbuf_free+0x12c>)
 800c94c:	482c      	ldr	r0, [pc, #176]	; (800ca00 <pbuf_free+0x124>)
 800c94e:	f007 fe4f 	bl	80145f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	89db      	ldrh	r3, [r3, #14]
 800c956:	3b01      	subs	r3, #1
 800c958:	b29a      	uxth	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	81da      	strh	r2, [r3, #14]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	89db      	ldrh	r3, [r3, #14]
 800c962:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c964:	69b8      	ldr	r0, [r7, #24]
 800c966:	f006 fc4b 	bl	8013200 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c96a:	8afb      	ldrh	r3, [r7, #22]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d139      	bne.n	800c9e4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7b1b      	ldrb	r3, [r3, #12]
 800c97a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	7b5b      	ldrb	r3, [r3, #13]
 800c980:	f003 0302 	and.w	r3, r3, #2
 800c984:	2b00      	cmp	r3, #0
 800c986:	d011      	beq.n	800c9ac <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <pbuf_free+0xc6>
 800c994:	4b18      	ldr	r3, [pc, #96]	; (800c9f8 <pbuf_free+0x11c>)
 800c996:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c99a:	491c      	ldr	r1, [pc, #112]	; (800ca0c <pbuf_free+0x130>)
 800c99c:	4818      	ldr	r0, [pc, #96]	; (800ca00 <pbuf_free+0x124>)
 800c99e:	f007 fe27 	bl	80145f0 <iprintf>
        pc->custom_free_function(p);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
 800c9aa:	e015      	b.n	800c9d8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c9ac:	89fb      	ldrh	r3, [r7, #14]
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d104      	bne.n	800c9bc <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c9b2:	6879      	ldr	r1, [r7, #4]
 800c9b4:	200c      	movs	r0, #12
 800c9b6:	f7ff fa37 	bl	800be28 <memp_free>
 800c9ba:	e00d      	b.n	800c9d8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c9bc:	89fb      	ldrh	r3, [r7, #14]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d002      	beq.n	800c9c8 <pbuf_free+0xec>
 800c9c2:	89fb      	ldrh	r3, [r7, #14]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d104      	bne.n	800c9d2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	200b      	movs	r0, #11
 800c9cc:	f7ff fa2c 	bl	800be28 <memp_free>
 800c9d0:	e002      	b.n	800c9d8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7fe ff0e 	bl	800b7f4 <mem_free>
        }
      }
      count++;
 800c9d8:	7ffb      	ldrb	r3, [r7, #31]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	e001      	b.n	800c9e8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1a3      	bne.n	800c936 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c9ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3720      	adds	r7, #32
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	08016a60 	.word	0x08016a60
 800c9fc:	08016c98 	.word	0x08016c98
 800ca00:	08016aac 	.word	0x08016aac
 800ca04:	08016cd4 	.word	0x08016cd4
 800ca08:	08016cec 	.word	0x08016cec
 800ca0c:	08016d04 	.word	0x08016d04

0800ca10 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ca1c:	e005      	b.n	800ca2a <pbuf_clen+0x1a>
    ++len;
 800ca1e:	89fb      	ldrh	r3, [r7, #14]
 800ca20:	3301      	adds	r3, #1
 800ca22:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1f6      	bne.n	800ca1e <pbuf_clen+0xe>
  }
  return len;
 800ca30:	89fb      	ldrh	r3, [r7, #14]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
	...

0800ca40 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d016      	beq.n	800ca7c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800ca4e:	f006 fbc9 	bl	80131e4 <sys_arch_protect>
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	89db      	ldrh	r3, [r3, #14]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	81da      	strh	r2, [r3, #14]
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f006 fbcd 	bl	8013200 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	89db      	ldrh	r3, [r3, #14]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d106      	bne.n	800ca7c <pbuf_ref+0x3c>
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <pbuf_ref+0x44>)
 800ca70:	f240 3239 	movw	r2, #825	; 0x339
 800ca74:	4904      	ldr	r1, [pc, #16]	; (800ca88 <pbuf_ref+0x48>)
 800ca76:	4805      	ldr	r0, [pc, #20]	; (800ca8c <pbuf_ref+0x4c>)
 800ca78:	f007 fdba 	bl	80145f0 <iprintf>
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	08016a60 	.word	0x08016a60
 800ca88:	08016d28 	.word	0x08016d28
 800ca8c:	08016aac 	.word	0x08016aac

0800ca90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <pbuf_cat+0x16>
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d107      	bne.n	800cab6 <pbuf_cat+0x26>
 800caa6:	4b20      	ldr	r3, [pc, #128]	; (800cb28 <pbuf_cat+0x98>)
 800caa8:	f240 324d 	movw	r2, #845	; 0x34d
 800caac:	491f      	ldr	r1, [pc, #124]	; (800cb2c <pbuf_cat+0x9c>)
 800caae:	4820      	ldr	r0, [pc, #128]	; (800cb30 <pbuf_cat+0xa0>)
 800cab0:	f007 fd9e 	bl	80145f0 <iprintf>
 800cab4:	e034      	b.n	800cb20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	e00a      	b.n	800cad2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	891a      	ldrh	r2, [r3, #8]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	891b      	ldrh	r3, [r3, #8]
 800cac4:	4413      	add	r3, r2
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f0      	bne.n	800cabc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	891a      	ldrh	r2, [r3, #8]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	895b      	ldrh	r3, [r3, #10]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d006      	beq.n	800caf4 <pbuf_cat+0x64>
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <pbuf_cat+0x98>)
 800cae8:	f240 3255 	movw	r2, #853	; 0x355
 800caec:	4911      	ldr	r1, [pc, #68]	; (800cb34 <pbuf_cat+0xa4>)
 800caee:	4810      	ldr	r0, [pc, #64]	; (800cb30 <pbuf_cat+0xa0>)
 800caf0:	f007 fd7e 	bl	80145f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d006      	beq.n	800cb0a <pbuf_cat+0x7a>
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <pbuf_cat+0x98>)
 800cafe:	f240 3256 	movw	r2, #854	; 0x356
 800cb02:	490d      	ldr	r1, [pc, #52]	; (800cb38 <pbuf_cat+0xa8>)
 800cb04:	480a      	ldr	r0, [pc, #40]	; (800cb30 <pbuf_cat+0xa0>)
 800cb06:	f007 fd73 	bl	80145f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	891a      	ldrh	r2, [r3, #8]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	891b      	ldrh	r3, [r3, #8]
 800cb12:	4413      	add	r3, r2
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	08016a60 	.word	0x08016a60
 800cb2c:	08016d3c 	.word	0x08016d3c
 800cb30:	08016aac 	.word	0x08016aac
 800cb34:	08016d74 	.word	0x08016d74
 800cb38:	08016da4 	.word	0x08016da4

0800cb3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff ffa1 	bl	800ca90 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cb4e:	6838      	ldr	r0, [r7, #0]
 800cb50:	f7ff ff76 	bl	800ca40 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cb54:	bf00      	nop
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800cb66:	2300      	movs	r3, #0
 800cb68:	81fb      	strh	r3, [r7, #14]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d008      	beq.n	800cb86 <pbuf_copy+0x2a>
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d005      	beq.n	800cb86 <pbuf_copy+0x2a>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	891a      	ldrh	r2, [r3, #8]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	891b      	ldrh	r3, [r3, #8]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d209      	bcs.n	800cb9a <pbuf_copy+0x3e>
 800cb86:	4b54      	ldr	r3, [pc, #336]	; (800ccd8 <pbuf_copy+0x17c>)
 800cb88:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cb8c:	4953      	ldr	r1, [pc, #332]	; (800ccdc <pbuf_copy+0x180>)
 800cb8e:	4854      	ldr	r0, [pc, #336]	; (800cce0 <pbuf_copy+0x184>)
 800cb90:	f007 fd2e 	bl	80145f0 <iprintf>
 800cb94:	f06f 030f 	mvn.w	r3, #15
 800cb98:	e099      	b.n	800ccce <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	895b      	ldrh	r3, [r3, #10]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	89fb      	ldrh	r3, [r7, #14]
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	895b      	ldrh	r3, [r3, #10]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	89bb      	ldrh	r3, [r7, #12]
 800cbac:	1acb      	subs	r3, r1, r3
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	db05      	blt.n	800cbbe <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	895a      	ldrh	r2, [r3, #10]
 800cbb6:	89bb      	ldrh	r3, [r7, #12]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	817b      	strh	r3, [r7, #10]
 800cbbc:	e004      	b.n	800cbc8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	895a      	ldrh	r2, [r3, #10]
 800cbc2:	89fb      	ldrh	r3, [r7, #14]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	89fb      	ldrh	r3, [r7, #14]
 800cbce:	18d0      	adds	r0, r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	89bb      	ldrh	r3, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	897a      	ldrh	r2, [r7, #10]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f007 fcf5 	bl	80145ca <memcpy>
    offset_to += len;
 800cbe0:	89fa      	ldrh	r2, [r7, #14]
 800cbe2:	897b      	ldrh	r3, [r7, #10]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800cbe8:	89ba      	ldrh	r2, [r7, #12]
 800cbea:	897b      	ldrh	r3, [r7, #10]
 800cbec:	4413      	add	r3, r2
 800cbee:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	895b      	ldrh	r3, [r3, #10]
 800cbf4:	89fa      	ldrh	r2, [r7, #14]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d906      	bls.n	800cc08 <pbuf_copy+0xac>
 800cbfa:	4b37      	ldr	r3, [pc, #220]	; (800ccd8 <pbuf_copy+0x17c>)
 800cbfc:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cc00:	4938      	ldr	r1, [pc, #224]	; (800cce4 <pbuf_copy+0x188>)
 800cc02:	4837      	ldr	r0, [pc, #220]	; (800cce0 <pbuf_copy+0x184>)
 800cc04:	f007 fcf4 	bl	80145f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	895b      	ldrh	r3, [r3, #10]
 800cc0c:	89ba      	ldrh	r2, [r7, #12]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d906      	bls.n	800cc20 <pbuf_copy+0xc4>
 800cc12:	4b31      	ldr	r3, [pc, #196]	; (800ccd8 <pbuf_copy+0x17c>)
 800cc14:	f240 32ce 	movw	r2, #974	; 0x3ce
 800cc18:	4933      	ldr	r1, [pc, #204]	; (800cce8 <pbuf_copy+0x18c>)
 800cc1a:	4831      	ldr	r0, [pc, #196]	; (800cce0 <pbuf_copy+0x184>)
 800cc1c:	f007 fce8 	bl	80145f0 <iprintf>
    if (offset_from >= p_from->len) {
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	89ba      	ldrh	r2, [r7, #12]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d304      	bcc.n	800cc34 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	895b      	ldrh	r3, [r3, #10]
 800cc38:	89fa      	ldrh	r2, [r7, #14]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d114      	bne.n	800cc68 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10c      	bne.n	800cc68 <pbuf_copy+0x10c>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d009      	beq.n	800cc68 <pbuf_copy+0x10c>
 800cc54:	4b20      	ldr	r3, [pc, #128]	; (800ccd8 <pbuf_copy+0x17c>)
 800cc56:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc5a:	4924      	ldr	r1, [pc, #144]	; (800ccec <pbuf_copy+0x190>)
 800cc5c:	4820      	ldr	r0, [pc, #128]	; (800cce0 <pbuf_copy+0x184>)
 800cc5e:	f007 fcc7 	bl	80145f0 <iprintf>
 800cc62:	f06f 030f 	mvn.w	r3, #15
 800cc66:	e032      	b.n	800ccce <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d013      	beq.n	800cc96 <pbuf_copy+0x13a>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	895a      	ldrh	r2, [r3, #10]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	891b      	ldrh	r3, [r3, #8]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d10d      	bne.n	800cc96 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d009      	beq.n	800cc96 <pbuf_copy+0x13a>
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <pbuf_copy+0x17c>)
 800cc84:	f240 32de 	movw	r2, #990	; 0x3de
 800cc88:	4919      	ldr	r1, [pc, #100]	; (800ccf0 <pbuf_copy+0x194>)
 800cc8a:	4815      	ldr	r0, [pc, #84]	; (800cce0 <pbuf_copy+0x184>)
 800cc8c:	f007 fcb0 	bl	80145f0 <iprintf>
 800cc90:	f06f 0305 	mvn.w	r3, #5
 800cc94:	e01b      	b.n	800ccce <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d013      	beq.n	800ccc4 <pbuf_copy+0x168>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	895a      	ldrh	r2, [r3, #10]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	891b      	ldrh	r3, [r3, #8]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d10d      	bne.n	800ccc4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d009      	beq.n	800ccc4 <pbuf_copy+0x168>
 800ccb0:	4b09      	ldr	r3, [pc, #36]	; (800ccd8 <pbuf_copy+0x17c>)
 800ccb2:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ccb6:	490e      	ldr	r1, [pc, #56]	; (800ccf0 <pbuf_copy+0x194>)
 800ccb8:	4809      	ldr	r0, [pc, #36]	; (800cce0 <pbuf_copy+0x184>)
 800ccba:	f007 fc99 	bl	80145f0 <iprintf>
 800ccbe:	f06f 0305 	mvn.w	r3, #5
 800ccc2:	e004      	b.n	800ccce <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f47f af67 	bne.w	800cb9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	08016a60 	.word	0x08016a60
 800ccdc:	08016df0 	.word	0x08016df0
 800cce0:	08016aac 	.word	0x08016aac
 800cce4:	08016e20 	.word	0x08016e20
 800cce8:	08016e38 	.word	0x08016e38
 800ccec:	08016e54 	.word	0x08016e54
 800ccf0:	08016e64 	.word	0x08016e64

0800ccf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	4611      	mov	r1, r2
 800cd00:	461a      	mov	r2, r3
 800cd02:	460b      	mov	r3, r1
 800cd04:	80fb      	strh	r3, [r7, #6]
 800cd06:	4613      	mov	r3, r2
 800cd08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d108      	bne.n	800cd26 <pbuf_copy_partial+0x32>
 800cd14:	4b30      	ldr	r3, [pc, #192]	; (800cdd8 <pbuf_copy_partial+0xe4>)
 800cd16:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800cd1a:	4930      	ldr	r1, [pc, #192]	; (800cddc <pbuf_copy_partial+0xe8>)
 800cd1c:	4830      	ldr	r0, [pc, #192]	; (800cde0 <pbuf_copy_partial+0xec>)
 800cd1e:	f007 fc67 	bl	80145f0 <iprintf>
 800cd22:	2300      	movs	r3, #0
 800cd24:	e054      	b.n	800cdd0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d108      	bne.n	800cd3e <pbuf_copy_partial+0x4a>
 800cd2c:	4b2a      	ldr	r3, [pc, #168]	; (800cdd8 <pbuf_copy_partial+0xe4>)
 800cd2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800cd32:	492c      	ldr	r1, [pc, #176]	; (800cde4 <pbuf_copy_partial+0xf0>)
 800cd34:	482a      	ldr	r0, [pc, #168]	; (800cde0 <pbuf_copy_partial+0xec>)
 800cd36:	f007 fc5b 	bl	80145f0 <iprintf>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e048      	b.n	800cdd0 <pbuf_copy_partial+0xdc>

  left = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <pbuf_copy_partial+0x5a>
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <pbuf_copy_partial+0x5e>
    return 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	e03e      	b.n	800cdd0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e034      	b.n	800cdc2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800cd58:	88bb      	ldrh	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <pbuf_copy_partial+0x80>
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	895b      	ldrh	r3, [r3, #10]
 800cd62:	88ba      	ldrh	r2, [r7, #4]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d305      	bcc.n	800cd74 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	895b      	ldrh	r3, [r3, #10]
 800cd6c:	88ba      	ldrh	r2, [r7, #4]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	80bb      	strh	r3, [r7, #4]
 800cd72:	e023      	b.n	800cdbc <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	895a      	ldrh	r2, [r3, #10]
 800cd78:	88bb      	ldrh	r3, [r7, #4]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cd7e:	8b3a      	ldrh	r2, [r7, #24]
 800cd80:	88fb      	ldrh	r3, [r7, #6]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d901      	bls.n	800cd8a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800cd86:	88fb      	ldrh	r3, [r7, #6]
 800cd88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800cd8a:	8b7b      	ldrh	r3, [r7, #26]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	18d0      	adds	r0, r2, r3
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	88bb      	ldrh	r3, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	8b3a      	ldrh	r2, [r7, #24]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	f007 fc15 	bl	80145ca <memcpy>
      copied_total += buf_copy_len;
 800cda0:	8afa      	ldrh	r2, [r7, #22]
 800cda2:	8b3b      	ldrh	r3, [r7, #24]
 800cda4:	4413      	add	r3, r2
 800cda6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800cda8:	8b7a      	ldrh	r2, [r7, #26]
 800cdaa:	8b3b      	ldrh	r3, [r7, #24]
 800cdac:	4413      	add	r3, r2
 800cdae:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800cdb0:	88fa      	ldrh	r2, [r7, #6]
 800cdb2:	8b3b      	ldrh	r3, [r7, #24]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	61fb      	str	r3, [r7, #28]
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <pbuf_copy_partial+0xda>
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1c4      	bne.n	800cd58 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800cdce:	8afb      	ldrh	r3, [r7, #22]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3720      	adds	r7, #32
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	08016a60 	.word	0x08016a60
 800cddc:	08016e90 	.word	0x08016e90
 800cde0:	08016aac 	.word	0x08016aac
 800cde4:	08016eb0 	.word	0x08016eb0

0800cde8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cde8:	b480      	push	{r7}
 800cdea:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cdec:	bf00      	nop
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cdfc:	f000 ff72 	bl	800dce4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <tcp_tmr+0x28>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <tcp_tmr+0x28>)
 800ce0a:	701a      	strb	r2, [r3, #0]
 800ce0c:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <tcp_tmr+0x28>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ce18:	f000 fca4 	bl	800d764 <tcp_slowtmr>
  }
}
 800ce1c:	bf00      	nop
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20003f89 	.word	0x20003f89

0800ce24 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	e00a      	b.n	800ce4a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d102      	bne.n	800ce44 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d1f1      	bne.n	800ce34 <tcp_remove_listener+0x10>
      }
   }
}
 800ce50:	bf00      	nop
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <tcp_listen_closed+0x1a>
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <tcp_listen_closed+0x5c>)
 800ce6c:	22c0      	movs	r2, #192	; 0xc0
 800ce6e:	4913      	ldr	r1, [pc, #76]	; (800cebc <tcp_listen_closed+0x60>)
 800ce70:	4813      	ldr	r0, [pc, #76]	; (800cec0 <tcp_listen_closed+0x64>)
 800ce72:	f007 fbbd 	bl	80145f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7d1b      	ldrb	r3, [r3, #20]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d005      	beq.n	800ce8a <tcp_listen_closed+0x2e>
 800ce7e:	4b0e      	ldr	r3, [pc, #56]	; (800ceb8 <tcp_listen_closed+0x5c>)
 800ce80:	22c1      	movs	r2, #193	; 0xc1
 800ce82:	4910      	ldr	r1, [pc, #64]	; (800cec4 <tcp_listen_closed+0x68>)
 800ce84:	480e      	ldr	r0, [pc, #56]	; (800cec0 <tcp_listen_closed+0x64>)
 800ce86:	f007 fbb3 	bl	80145f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	60fb      	str	r3, [r7, #12]
 800ce8e:	e00b      	b.n	800cea8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800ce90:	4a0d      	ldr	r2, [pc, #52]	; (800cec8 <tcp_listen_closed+0x6c>)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff ffc1 	bl	800ce24 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d9f0      	bls.n	800ce90 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	08016fe4 	.word	0x08016fe4
 800cebc:	08017014 	.word	0x08017014
 800cec0:	08017020 	.word	0x08017020
 800cec4:	08017048 	.word	0x08017048
 800cec8:	08017fdc 	.word	0x08017fdc

0800cecc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cecc:	b5b0      	push	{r4, r5, r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af02      	add	r7, sp, #8
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d075      	beq.n	800cfca <tcp_close_shutdown+0xfe>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7d1b      	ldrb	r3, [r3, #20]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d003      	beq.n	800ceee <tcp_close_shutdown+0x22>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
 800ceea:	2b07      	cmp	r3, #7
 800ceec:	d16d      	bne.n	800cfca <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d104      	bne.n	800cf00 <tcp_close_shutdown+0x34>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cefa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cefe:	d064      	beq.n	800cfca <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7e9b      	ldrb	r3, [r3, #26]
 800cf04:	f003 0310 	and.w	r3, r3, #16
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <tcp_close_shutdown+0x4e>
 800cf0c:	4b59      	ldr	r3, [pc, #356]	; (800d074 <tcp_close_shutdown+0x1a8>)
 800cf0e:	f240 120f 	movw	r2, #271	; 0x10f
 800cf12:	4959      	ldr	r1, [pc, #356]	; (800d078 <tcp_close_shutdown+0x1ac>)
 800cf14:	4859      	ldr	r0, [pc, #356]	; (800d07c <tcp_close_shutdown+0x1b0>)
 800cf16:	f007 fb6b 	bl	80145f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf22:	687c      	ldr	r4, [r7, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	1d1d      	adds	r5, r3, #4
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	8adb      	ldrh	r3, [r3, #22]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	8b12      	ldrh	r2, [r2, #24]
 800cf30:	9201      	str	r2, [sp, #4]
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	462b      	mov	r3, r5
 800cf36:	4622      	mov	r2, r4
 800cf38:	f004 fed6 	bl	8011ce8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f001 fa07 	bl	800e350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cf42:	4b4f      	ldr	r3, [pc, #316]	; (800d080 <tcp_close_shutdown+0x1b4>)
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d105      	bne.n	800cf58 <tcp_close_shutdown+0x8c>
 800cf4c:	4b4c      	ldr	r3, [pc, #304]	; (800d080 <tcp_close_shutdown+0x1b4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	4a4b      	ldr	r2, [pc, #300]	; (800d080 <tcp_close_shutdown+0x1b4>)
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	e013      	b.n	800cf80 <tcp_close_shutdown+0xb4>
 800cf58:	4b49      	ldr	r3, [pc, #292]	; (800d080 <tcp_close_shutdown+0x1b4>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	e00c      	b.n	800cf7a <tcp_close_shutdown+0xae>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d104      	bne.n	800cf74 <tcp_close_shutdown+0xa8>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68da      	ldr	r2, [r3, #12]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	60da      	str	r2, [r3, #12]
 800cf72:	e005      	b.n	800cf80 <tcp_close_shutdown+0xb4>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1ef      	bne.n	800cf60 <tcp_close_shutdown+0x94>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	60da      	str	r2, [r3, #12]
 800cf86:	4b3f      	ldr	r3, [pc, #252]	; (800d084 <tcp_close_shutdown+0x1b8>)
 800cf88:	2201      	movs	r2, #1
 800cf8a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d10c      	bne.n	800cfae <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	220a      	movs	r2, #10
 800cf98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf9a:	4b3b      	ldr	r3, [pc, #236]	; (800d088 <tcp_close_shutdown+0x1bc>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	4a39      	ldr	r2, [pc, #228]	; (800d088 <tcp_close_shutdown+0x1bc>)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	f005 f8ee 	bl	8012188 <tcp_timer_needed>
 800cfac:	e00b      	b.n	800cfc6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800cfae:	4b37      	ldr	r3, [pc, #220]	; (800d08c <tcp_close_shutdown+0x1c0>)
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d102      	bne.n	800cfbe <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800cfb8:	f003 fd2c 	bl	8010a14 <tcp_trigger_input_pcb_close>
 800cfbc:	e003      	b.n	800cfc6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800cfbe:	6879      	ldr	r1, [r7, #4]
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f7fe ff31 	bl	800be28 <memp_free>
        }
      }
      return ERR_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e050      	b.n	800d06c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7d1b      	ldrb	r3, [r3, #20]
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d02e      	beq.n	800d030 <tcp_close_shutdown+0x164>
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d038      	beq.n	800d048 <tcp_close_shutdown+0x17c>
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d142      	bne.n	800d060 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8adb      	ldrh	r3, [r3, #22]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d021      	beq.n	800d026 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfe2:	4b2b      	ldr	r3, [pc, #172]	; (800d090 <tcp_close_shutdown+0x1c4>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d105      	bne.n	800cff8 <tcp_close_shutdown+0x12c>
 800cfec:	4b28      	ldr	r3, [pc, #160]	; (800d090 <tcp_close_shutdown+0x1c4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	4a27      	ldr	r2, [pc, #156]	; (800d090 <tcp_close_shutdown+0x1c4>)
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	e013      	b.n	800d020 <tcp_close_shutdown+0x154>
 800cff8:	4b25      	ldr	r3, [pc, #148]	; (800d090 <tcp_close_shutdown+0x1c4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	60bb      	str	r3, [r7, #8]
 800cffe:	e00c      	b.n	800d01a <tcp_close_shutdown+0x14e>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	68da      	ldr	r2, [r3, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d104      	bne.n	800d014 <tcp_close_shutdown+0x148>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	68da      	ldr	r2, [r3, #12]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	60da      	str	r2, [r3, #12]
 800d012:	e005      	b.n	800d020 <tcp_close_shutdown+0x154>
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	60bb      	str	r3, [r7, #8]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1ef      	bne.n	800d000 <tcp_close_shutdown+0x134>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	2001      	movs	r0, #1
 800d02a:	f7fe fefd 	bl	800be28 <memp_free>
    break;
 800d02e:	e01c      	b.n	800d06a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ff13 	bl	800ce5c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d036:	6879      	ldr	r1, [r7, #4]
 800d038:	4816      	ldr	r0, [pc, #88]	; (800d094 <tcp_close_shutdown+0x1c8>)
 800d03a:	f001 f9cb 	bl	800e3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	2002      	movs	r0, #2
 800d042:	f7fe fef1 	bl	800be28 <memp_free>
    break;
 800d046:	e010      	b.n	800d06a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d048:	6879      	ldr	r1, [r7, #4]
 800d04a:	480d      	ldr	r0, [pc, #52]	; (800d080 <tcp_close_shutdown+0x1b4>)
 800d04c:	f001 f9c2 	bl	800e3d4 <tcp_pcb_remove>
 800d050:	4b0c      	ldr	r3, [pc, #48]	; (800d084 <tcp_close_shutdown+0x1b8>)
 800d052:	2201      	movs	r2, #1
 800d054:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	2001      	movs	r0, #1
 800d05a:	f7fe fee5 	bl	800be28 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d05e:	e004      	b.n	800d06a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f819 	bl	800d098 <tcp_close_shutdown_fin>
 800d066:	4603      	mov	r3, r0
 800d068:	e000      	b.n	800d06c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bdb0      	pop	{r4, r5, r7, pc}
 800d074:	08016fe4 	.word	0x08016fe4
 800d078:	08017060 	.word	0x08017060
 800d07c:	08017020 	.word	0x08017020
 800d080:	20007734 	.word	0x20007734
 800d084:	20007730 	.word	0x20007730
 800d088:	20007744 	.word	0x20007744
 800d08c:	20007748 	.word	0x20007748
 800d090:	20007740 	.word	0x20007740
 800d094:	2000773c 	.word	0x2000773c

0800d098 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d106      	bne.n	800d0b4 <tcp_close_shutdown_fin+0x1c>
 800d0a6:	4b2c      	ldr	r3, [pc, #176]	; (800d158 <tcp_close_shutdown_fin+0xc0>)
 800d0a8:	f240 124d 	movw	r2, #333	; 0x14d
 800d0ac:	492b      	ldr	r1, [pc, #172]	; (800d15c <tcp_close_shutdown_fin+0xc4>)
 800d0ae:	482c      	ldr	r0, [pc, #176]	; (800d160 <tcp_close_shutdown_fin+0xc8>)
 800d0b0:	f007 fa9e 	bl	80145f0 <iprintf>

  switch (pcb->state) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7d1b      	ldrb	r3, [r3, #20]
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d010      	beq.n	800d0de <tcp_close_shutdown_fin+0x46>
 800d0bc:	2b07      	cmp	r3, #7
 800d0be:	d01b      	beq.n	800d0f8 <tcp_close_shutdown_fin+0x60>
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d126      	bne.n	800d112 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f003 fd31 	bl	8010b2c <tcp_send_fin>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d11f      	bne.n	800d116 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2205      	movs	r2, #5
 800d0da:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d0dc:	e01b      	b.n	800d116 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f003 fd24 	bl	8010b2c <tcp_send_fin>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d114      	bne.n	800d11a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2205      	movs	r2, #5
 800d0f4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d0f6:	e010      	b.n	800d11a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f003 fd17 	bl	8010b2c <tcp_send_fin>
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d109      	bne.n	800d11e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2209      	movs	r2, #9
 800d10e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d110:	e005      	b.n	800d11e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	e01c      	b.n	800d150 <tcp_close_shutdown_fin+0xb8>
    break;
 800d116:	bf00      	nop
 800d118:	e002      	b.n	800d120 <tcp_close_shutdown_fin+0x88>
    break;
 800d11a:	bf00      	nop
 800d11c:	e000      	b.n	800d120 <tcp_close_shutdown_fin+0x88>
    break;
 800d11e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d103      	bne.n	800d130 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f004 fb55 	bl	80117d8 <tcp_output>
 800d12e:	e00d      	b.n	800d14c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d138:	d108      	bne.n	800d14c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	7e9b      	ldrb	r3, [r3, #26]
 800d13e:	f043 0308 	orr.w	r3, r3, #8
 800d142:	b2da      	uxtb	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	e001      	b.n	800d150 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	08016fe4 	.word	0x08016fe4
 800d15c:	08017014 	.word	0x08017014
 800d160:	08017020 	.word	0x08017020

0800d164 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	7d1b      	ldrb	r3, [r3, #20]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d006      	beq.n	800d182 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7e9b      	ldrb	r3, [r3, #26]
 800d178:	f043 0310 	orr.w	r3, r3, #16
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d182:	2101      	movs	r1, #1
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff fea1 	bl	800cecc <tcp_close_shutdown>
 800d18a:	4603      	mov	r3, r0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	7d1b      	ldrb	r3, [r3, #20]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d102      	bne.n	800d1ae <tcp_shutdown+0x1a>
    return ERR_CONN;
 800d1a8:	f06f 030a 	mvn.w	r3, #10
 800d1ac:	e035      	b.n	800d21a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d01b      	beq.n	800d1ec <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	7e9b      	ldrb	r3, [r3, #26]
 800d1b8:	f043 0310 	orr.w	r3, r3, #16
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff fe7e 	bl	800cecc <tcp_close_shutdown>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	e022      	b.n	800d21a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d007      	beq.n	800d1ec <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff fb7b 	bl	800c8dc <pbuf_free>
      pcb->refused_data = NULL;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d012      	beq.n	800d218 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	7d1b      	ldrb	r3, [r3, #20]
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	db0b      	blt.n	800d212 <tcp_shutdown+0x7e>
 800d1fa:	2b04      	cmp	r3, #4
 800d1fc:	dd01      	ble.n	800d202 <tcp_shutdown+0x6e>
 800d1fe:	2b07      	cmp	r3, #7
 800d200:	d107      	bne.n	800d212 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	b2db      	uxtb	r3, r3
 800d206:	4619      	mov	r1, r3
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff fe5f 	bl	800cecc <tcp_close_shutdown>
 800d20e:	4603      	mov	r3, r0
 800d210:	e003      	b.n	800d21a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800d212:	f06f 030a 	mvn.w	r3, #10
 800d216:	e000      	b.n	800d21a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08c      	sub	sp, #48	; 0x30
 800d228:	af02      	add	r7, sp, #8
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7d1b      	ldrb	r3, [r3, #20]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d106      	bne.n	800d244 <tcp_abandon+0x20>
 800d236:	4b4d      	ldr	r3, [pc, #308]	; (800d36c <tcp_abandon+0x148>)
 800d238:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d23c:	494c      	ldr	r1, [pc, #304]	; (800d370 <tcp_abandon+0x14c>)
 800d23e:	484d      	ldr	r0, [pc, #308]	; (800d374 <tcp_abandon+0x150>)
 800d240:	f007 f9d6 	bl	80145f0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	7d1b      	ldrb	r3, [r3, #20]
 800d248:	2b0a      	cmp	r3, #10
 800d24a:	d108      	bne.n	800d25e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	484a      	ldr	r0, [pc, #296]	; (800d378 <tcp_abandon+0x154>)
 800d250:	f001 f8c0 	bl	800e3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	2001      	movs	r0, #1
 800d258:	f7fe fde6 	bl	800be28 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d25c:	e081      	b.n	800d362 <tcp_abandon+0x13e>
    int send_rst = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d26a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d270:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d278:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7d1b      	ldrb	r3, [r3, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d126      	bne.n	800d2d6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8adb      	ldrh	r3, [r3, #22]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d02e      	beq.n	800d2ee <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d290:	4b3a      	ldr	r3, [pc, #232]	; (800d37c <tcp_abandon+0x158>)
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d105      	bne.n	800d2a6 <tcp_abandon+0x82>
 800d29a:	4b38      	ldr	r3, [pc, #224]	; (800d37c <tcp_abandon+0x158>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	4a36      	ldr	r2, [pc, #216]	; (800d37c <tcp_abandon+0x158>)
 800d2a2:	6013      	str	r3, [r2, #0]
 800d2a4:	e013      	b.n	800d2ce <tcp_abandon+0xaa>
 800d2a6:	4b35      	ldr	r3, [pc, #212]	; (800d37c <tcp_abandon+0x158>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	61fb      	str	r3, [r7, #28]
 800d2ac:	e00c      	b.n	800d2c8 <tcp_abandon+0xa4>
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	68da      	ldr	r2, [r3, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d104      	bne.n	800d2c2 <tcp_abandon+0x9e>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	60da      	str	r2, [r3, #12]
 800d2c0:	e005      	b.n	800d2ce <tcp_abandon+0xaa>
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	61fb      	str	r3, [r7, #28]
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1ef      	bne.n	800d2ae <tcp_abandon+0x8a>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	60da      	str	r2, [r3, #12]
 800d2d4:	e00b      	b.n	800d2ee <tcp_abandon+0xca>
      send_rst = reset;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	8adb      	ldrh	r3, [r3, #22]
 800d2de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d2e0:	6879      	ldr	r1, [r7, #4]
 800d2e2:	4827      	ldr	r0, [pc, #156]	; (800d380 <tcp_abandon+0x15c>)
 800d2e4:	f001 f876 	bl	800e3d4 <tcp_pcb_remove>
 800d2e8:	4b26      	ldr	r3, [pc, #152]	; (800d384 <tcp_abandon+0x160>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d004      	beq.n	800d300 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 fdbf 	bl	800de7e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fdb6 	bl	800de7e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d316:	2b00      	cmp	r3, #0
 800d318:	d004      	beq.n	800d324 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fdad 	bl	800de7e <tcp_segs_free>
    if (send_rst) {
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00c      	beq.n	800d344 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	1d19      	adds	r1, r3, #4
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	8b1b      	ldrh	r3, [r3, #24]
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	460b      	mov	r3, r1
 800d33c:	6979      	ldr	r1, [r7, #20]
 800d33e:	69b8      	ldr	r0, [r7, #24]
 800d340:	f004 fcd2 	bl	8011ce8 <tcp_rst>
    last_state = pcb->state;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	7d1b      	ldrb	r3, [r3, #20]
 800d348:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	2001      	movs	r0, #1
 800d34e:	f7fe fd6b 	bl	800be28 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <tcp_abandon+0x13e>
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	f06f 010c 	mvn.w	r1, #12
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	4798      	blx	r3
}
 800d362:	bf00      	nop
 800d364:	3728      	adds	r7, #40	; 0x28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	08016fe4 	.word	0x08016fe4
 800d370:	0801707c 	.word	0x0801707c
 800d374:	08017020 	.word	0x08017020
 800d378:	20007744 	.word	0x20007744
 800d37c:	20007740 	.word	0x20007740
 800d380:	20007734 	.word	0x20007734
 800d384:	20007730 	.word	0x20007730

0800d388 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d390:	2101      	movs	r1, #1
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff ff46 	bl	800d224 <tcp_abandon>
}
 800d398:	bf00      	nop
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d3b0:	4413      	add	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d3bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d3c0:	d802      	bhi.n	800d3c8 <tcp_update_rcv_ann_wnd+0x28>
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d3c6:	e001      	b.n	800d3cc <tcp_update_rcv_ann_wnd+0x2c>
 800d3c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3cc:	4413      	add	r3, r2
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	db08      	blt.n	800d3e8 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	e020      	b.n	800d42a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dd03      	ble.n	800d3fe <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3fc:	e014      	b.n	800d428 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	1ad3      	subs	r3, r2, r3
 800d408:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d410:	d306      	bcc.n	800d420 <tcp_update_rcv_ann_wnd+0x80>
 800d412:	4b08      	ldr	r3, [pc, #32]	; (800d434 <tcp_update_rcv_ann_wnd+0x94>)
 800d414:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d418:	4907      	ldr	r1, [pc, #28]	; (800d438 <tcp_update_rcv_ann_wnd+0x98>)
 800d41a:	4808      	ldr	r0, [pc, #32]	; (800d43c <tcp_update_rcv_ann_wnd+0x9c>)
 800d41c:	f007 f8e8 	bl	80145f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d428:	2300      	movs	r3, #0
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	08016fe4 	.word	0x08016fe4
 800d438:	080170fc 	.word	0x080170fc
 800d43c:	08017020 	.word	0x08017020

0800d440 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	460b      	mov	r3, r1
 800d44a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d106      	bne.n	800d462 <tcp_recved+0x22>
 800d454:	4b23      	ldr	r3, [pc, #140]	; (800d4e4 <tcp_recved+0xa4>)
 800d456:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d45a:	4923      	ldr	r1, [pc, #140]	; (800d4e8 <tcp_recved+0xa8>)
 800d45c:	4823      	ldr	r0, [pc, #140]	; (800d4ec <tcp_recved+0xac>)
 800d45e:	f007 f8c7 	bl	80145f0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d466:	887b      	ldrh	r3, [r7, #2]
 800d468:	4413      	add	r3, r2
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d474:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d478:	d904      	bls.n	800d484 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d480:	851a      	strh	r2, [r3, #40]	; 0x28
 800d482:	e017      	b.n	800d4b4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d113      	bne.n	800d4b4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7d1b      	ldrb	r3, [r3, #20]
 800d490:	2b07      	cmp	r3, #7
 800d492:	d003      	beq.n	800d49c <tcp_recved+0x5c>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7d1b      	ldrb	r3, [r3, #20]
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d104      	bne.n	800d4a6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d4a4:	e006      	b.n	800d4b4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <tcp_recved+0xa4>)
 800d4a8:	f240 322d 	movw	r2, #813	; 0x32d
 800d4ac:	4910      	ldr	r1, [pc, #64]	; (800d4f0 <tcp_recved+0xb0>)
 800d4ae:	480f      	ldr	r0, [pc, #60]	; (800d4ec <tcp_recved+0xac>)
 800d4b0:	f007 f89e 	bl	80145f0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7ff ff73 	bl	800d3a0 <tcp_update_rcv_ann_wnd>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d4c4:	db09      	blt.n	800d4da <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	7e9b      	ldrb	r3, [r3, #26]
 800d4ca:	f043 0302 	orr.w	r3, r3, #2
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f004 f97f 	bl	80117d8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	08016fe4 	.word	0x08016fe4
 800d4e8:	08017118 	.word	0x08017118
 800d4ec:	08017020 	.word	0x08017020
 800d4f0:	08017140 	.word	0x08017140

0800d4f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d4fe:	4b1d      	ldr	r3, [pc, #116]	; (800d574 <tcp_new_port+0x80>)
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	1c5a      	adds	r2, r3, #1
 800d504:	b291      	uxth	r1, r2
 800d506:	4a1b      	ldr	r2, [pc, #108]	; (800d574 <tcp_new_port+0x80>)
 800d508:	8011      	strh	r1, [r2, #0]
 800d50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d50e:	4293      	cmp	r3, r2
 800d510:	d103      	bne.n	800d51a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d512:	4b18      	ldr	r3, [pc, #96]	; (800d574 <tcp_new_port+0x80>)
 800d514:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d518:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d51a:	2300      	movs	r3, #0
 800d51c:	71fb      	strb	r3, [r7, #7]
 800d51e:	e01e      	b.n	800d55e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	4a15      	ldr	r2, [pc, #84]	; (800d578 <tcp_new_port+0x84>)
 800d524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	603b      	str	r3, [r7, #0]
 800d52c:	e011      	b.n	800d552 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	8ada      	ldrh	r2, [r3, #22]
 800d532:	4b10      	ldr	r3, [pc, #64]	; (800d574 <tcp_new_port+0x80>)
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	429a      	cmp	r2, r3
 800d538:	d108      	bne.n	800d54c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d53a:	88bb      	ldrh	r3, [r7, #4]
 800d53c:	3301      	adds	r3, #1
 800d53e:	80bb      	strh	r3, [r7, #4]
 800d540:	88bb      	ldrh	r3, [r7, #4]
 800d542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d546:	d3da      	bcc.n	800d4fe <tcp_new_port+0xa>
          return 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	e00d      	b.n	800d568 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	603b      	str	r3, [r7, #0]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1ea      	bne.n	800d52e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	3301      	adds	r3, #1
 800d55c:	71fb      	strb	r3, [r7, #7]
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d9dd      	bls.n	800d520 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d564:	4b03      	ldr	r3, [pc, #12]	; (800d574 <tcp_new_port+0x80>)
 800d566:	881b      	ldrh	r3, [r3, #0]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	20000008 	.word	0x20000008
 800d578:	08017fdc 	.word	0x08017fdc

0800d57c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b08a      	sub	sp, #40	; 0x28
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	603b      	str	r3, [r7, #0]
 800d588:	4613      	mov	r3, r2
 800d58a:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d002      	beq.n	800d598 <tcp_connect+0x1c>
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <tcp_connect+0x22>
    return ERR_VAL;
 800d598:	f06f 0305 	mvn.w	r3, #5
 800d59c:	e0d1      	b.n	800d742 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	7d1b      	ldrb	r3, [r3, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d009      	beq.n	800d5ba <tcp_connect+0x3e>
 800d5a6:	4b69      	ldr	r3, [pc, #420]	; (800d74c <tcp_connect+0x1d0>)
 800d5a8:	f44f 725e 	mov.w	r2, #888	; 0x378
 800d5ac:	4968      	ldr	r1, [pc, #416]	; (800d750 <tcp_connect+0x1d4>)
 800d5ae:	4869      	ldr	r0, [pc, #420]	; (800d754 <tcp_connect+0x1d8>)
 800d5b0:	f007 f81e 	bl	80145f0 <iprintf>
 800d5b4:	f06f 0309 	mvn.w	r3, #9
 800d5b8:	e0c3      	b.n	800d742 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <tcp_connect+0x4a>
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	e000      	b.n	800d5c8 <tcp_connect+0x4c>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	88fa      	ldrh	r2, [r7, #6]
 800d5d0:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <tcp_connect+0x64>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11a      	bne.n	800d616 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fc fe49 	bl	800a27c <ip4_route>
 800d5ea:	6238      	str	r0, [r7, #32]
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d002      	beq.n	800d5f8 <tcp_connect+0x7c>
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	e000      	b.n	800d5fa <tcp_connect+0x7e>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800d5fc:	6a3b      	ldr	r3, [r7, #32]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d002      	beq.n	800d608 <tcp_connect+0x8c>
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d102      	bne.n	800d60e <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800d608:	f06f 0303 	mvn.w	r3, #3
 800d60c:	e099      	b.n	800d742 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	8adb      	ldrh	r3, [r3, #22]
 800d61a:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	8adb      	ldrh	r3, [r3, #22]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10c      	bne.n	800d63e <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800d624:	f7ff ff66 	bl	800d4f4 <tcp_new_port>
 800d628:	4603      	mov	r3, r0
 800d62a:	461a      	mov	r2, r3
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	8adb      	ldrh	r3, [r3, #22]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <tcp_connect+0xc2>
      return ERR_BUF;
 800d638:	f06f 0301 	mvn.w	r3, #1
 800d63c:	e081      	b.n	800d742 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 ff44 	bl	800e4cc <tcp_next_iss>
 800d644:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2200      	movs	r2, #0
 800d64a:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	697a      	ldr	r2, [r7, #20]
 800d650:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	1e5a      	subs	r2, r3, #1
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	1e5a      	subs	r2, r3, #1
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d670:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d692:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3304      	adds	r3, #4
 800d69c:	4619      	mov	r1, r3
 800d69e:	4610      	mov	r0, r2
 800d6a0:	f000 ff2c 	bl	800e4fc <tcp_eff_send_mss_impl>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d6bc:	2102      	movs	r1, #2
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f003 ff30 	bl	8011524 <tcp_enqueue_flags>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d6c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d136      	bne.n	800d73e <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d6d6:	8b7b      	ldrh	r3, [r7, #26]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d021      	beq.n	800d720 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6dc:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <tcp_connect+0x1dc>)
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d105      	bne.n	800d6f2 <tcp_connect+0x176>
 800d6e6:	4b1c      	ldr	r3, [pc, #112]	; (800d758 <tcp_connect+0x1dc>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4a1a      	ldr	r2, [pc, #104]	; (800d758 <tcp_connect+0x1dc>)
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	e013      	b.n	800d71a <tcp_connect+0x19e>
 800d6f2:	4b19      	ldr	r3, [pc, #100]	; (800d758 <tcp_connect+0x1dc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6f8:	e00c      	b.n	800d714 <tcp_connect+0x198>
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	68da      	ldr	r2, [r3, #12]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	429a      	cmp	r2, r3
 800d702:	d104      	bne.n	800d70e <tcp_connect+0x192>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70a:	60da      	str	r2, [r3, #12]
 800d70c:	e005      	b.n	800d71a <tcp_connect+0x19e>
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1ef      	bne.n	800d6fa <tcp_connect+0x17e>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d720:	4b0e      	ldr	r3, [pc, #56]	; (800d75c <tcp_connect+0x1e0>)
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	60da      	str	r2, [r3, #12]
 800d728:	4a0c      	ldr	r2, [pc, #48]	; (800d75c <tcp_connect+0x1e0>)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	f004 fd2b 	bl	8012188 <tcp_timer_needed>
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <tcp_connect+0x1e4>)
 800d734:	2201      	movs	r2, #1
 800d736:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f004 f84d 	bl	80117d8 <tcp_output>
  }
  return ret;
 800d73e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3728      	adds	r7, #40	; 0x28
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	08016fe4 	.word	0x08016fe4
 800d750:	08017164 	.word	0x08017164
 800d754:	08017020 	.word	0x08017020
 800d758:	20007740 	.word	0x20007740
 800d75c:	20007734 	.word	0x20007734
 800d760:	20007730 	.word	0x20007730

0800d764 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d764:	b5b0      	push	{r4, r5, r7, lr}
 800d766:	b08c      	sub	sp, #48	; 0x30
 800d768:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d76e:	4b97      	ldr	r3, [pc, #604]	; (800d9cc <tcp_slowtmr+0x268>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	4a95      	ldr	r2, [pc, #596]	; (800d9cc <tcp_slowtmr+0x268>)
 800d776:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d778:	4b95      	ldr	r3, [pc, #596]	; (800d9d0 <tcp_slowtmr+0x26c>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	3301      	adds	r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	4b93      	ldr	r3, [pc, #588]	; (800d9d0 <tcp_slowtmr+0x26c>)
 800d782:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d784:	2300      	movs	r3, #0
 800d786:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d788:	4b92      	ldr	r3, [pc, #584]	; (800d9d4 <tcp_slowtmr+0x270>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d78e:	e227      	b.n	800dbe0 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	7d1b      	ldrb	r3, [r3, #20]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d106      	bne.n	800d7a6 <tcp_slowtmr+0x42>
 800d798:	4b8f      	ldr	r3, [pc, #572]	; (800d9d8 <tcp_slowtmr+0x274>)
 800d79a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d79e:	498f      	ldr	r1, [pc, #572]	; (800d9dc <tcp_slowtmr+0x278>)
 800d7a0:	488f      	ldr	r0, [pc, #572]	; (800d9e0 <tcp_slowtmr+0x27c>)
 800d7a2:	f006 ff25 	bl	80145f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	7d1b      	ldrb	r3, [r3, #20]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d106      	bne.n	800d7bc <tcp_slowtmr+0x58>
 800d7ae:	4b8a      	ldr	r3, [pc, #552]	; (800d9d8 <tcp_slowtmr+0x274>)
 800d7b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7b4:	498b      	ldr	r1, [pc, #556]	; (800d9e4 <tcp_slowtmr+0x280>)
 800d7b6:	488a      	ldr	r0, [pc, #552]	; (800d9e0 <tcp_slowtmr+0x27c>)
 800d7b8:	f006 ff1a 	bl	80145f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	7d1b      	ldrb	r3, [r3, #20]
 800d7c0:	2b0a      	cmp	r3, #10
 800d7c2:	d106      	bne.n	800d7d2 <tcp_slowtmr+0x6e>
 800d7c4:	4b84      	ldr	r3, [pc, #528]	; (800d9d8 <tcp_slowtmr+0x274>)
 800d7c6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d7ca:	4987      	ldr	r1, [pc, #540]	; (800d9e8 <tcp_slowtmr+0x284>)
 800d7cc:	4884      	ldr	r0, [pc, #528]	; (800d9e0 <tcp_slowtmr+0x27c>)
 800d7ce:	f006 ff0f 	bl	80145f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	7f5a      	ldrb	r2, [r3, #29]
 800d7d6:	4b7e      	ldr	r3, [pc, #504]	; (800d9d0 <tcp_slowtmr+0x26c>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d103      	bne.n	800d7e6 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d7e4:	e1fc      	b.n	800dbe0 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d7e6:	4b7a      	ldr	r3, [pc, #488]	; (800d9d0 <tcp_slowtmr+0x26c>)
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ec:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	7d1b      	ldrb	r3, [r3, #20]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d108      	bne.n	800d810 <tcp_slowtmr+0xac>
 800d7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d804:	2b05      	cmp	r3, #5
 800d806:	d903      	bls.n	800d810 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d808:	7ffb      	ldrb	r3, [r7, #31]
 800d80a:	3301      	adds	r3, #1
 800d80c:	77fb      	strb	r3, [r7, #31]
 800d80e:	e0a2      	b.n	800d956 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d816:	2b0b      	cmp	r3, #11
 800d818:	d903      	bls.n	800d822 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d81a:	7ffb      	ldrb	r3, [r7, #31]
 800d81c:	3301      	adds	r3, #1
 800d81e:	77fb      	strb	r3, [r7, #31]
 800d820:	e099      	b.n	800d956 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d032      	beq.n	800d892 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d832:	3b01      	subs	r3, #1
 800d834:	4a6d      	ldr	r2, [pc, #436]	; (800d9ec <tcp_slowtmr+0x288>)
 800d836:	5cd3      	ldrb	r3, [r2, r3]
 800d838:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d840:	7f3a      	ldrb	r2, [r7, #28]
 800d842:	429a      	cmp	r2, r3
 800d844:	d907      	bls.n	800d856 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d84c:	3301      	adds	r3, #1
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d85c:	7f3a      	ldrb	r2, [r7, #28]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d879      	bhi.n	800d956 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d864:	f004 fbd0 	bl	8012008 <tcp_zero_window_probe>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d173      	bne.n	800d956 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d870:	2200      	movs	r2, #0
 800d872:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d87c:	2b06      	cmp	r3, #6
 800d87e:	d86a      	bhi.n	800d956 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d890:	e061      	b.n	800d956 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d898:	2b00      	cmp	r3, #0
 800d89a:	db08      	blt.n	800d8ae <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	b21a      	sxth	r2, r3
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d04f      	beq.n	800d956 <tcp_slowtmr+0x1f2>
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	db47      	blt.n	800d956 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d018      	beq.n	800d900 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8d4:	2b0c      	cmp	r3, #12
 800d8d6:	bf28      	it	cs
 800d8d8:	230c      	movcs	r3, #12
 800d8da:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d8e2:	10db      	asrs	r3, r3, #3
 800d8e4:	b21b      	sxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d8ee:	4413      	add	r3, r2
 800d8f0:	7efa      	ldrb	r2, [r7, #27]
 800d8f2:	493f      	ldr	r1, [pc, #252]	; (800d9f0 <tcp_slowtmr+0x28c>)
 800d8f4:	5c8a      	ldrb	r2, [r1, r2]
 800d8f6:	4093      	lsls	r3, r2
 800d8f8:	b21a      	sxth	r2, r3
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	2200      	movs	r2, #0
 800d904:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d912:	4293      	cmp	r3, r2
 800d914:	bf28      	it	cs
 800d916:	4613      	movcs	r3, r2
 800d918:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800d91a:	8b3b      	ldrh	r3, [r7, #24]
 800d91c:	085b      	lsrs	r3, r3, #1
 800d91e:	b29a      	uxth	r2, r3
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	b29b      	uxth	r3, r3
 800d934:	429a      	cmp	r2, r3
 800d936:	d206      	bcs.n	800d946 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d93c:	005b      	lsls	r3, r3, #1
 800d93e:	b29a      	uxth	r2, r3
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d948:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d952:	f004 fa3f 	bl	8011dd4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d958:	7d1b      	ldrb	r3, [r3, #20]
 800d95a:	2b06      	cmp	r3, #6
 800d95c:	d10f      	bne.n	800d97e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	7e9b      	ldrb	r3, [r3, #26]
 800d962:	f003 0310 	and.w	r3, r3, #16
 800d966:	2b00      	cmp	r3, #0
 800d968:	d009      	beq.n	800d97e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d96a:	4b18      	ldr	r3, [pc, #96]	; (800d9cc <tcp_slowtmr+0x268>)
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	2b28      	cmp	r3, #40	; 0x28
 800d976:	d902      	bls.n	800d97e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d978:	7ffb      	ldrb	r3, [r7, #31]
 800d97a:	3301      	adds	r3, #1
 800d97c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	7a1b      	ldrb	r3, [r3, #8]
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	2b00      	cmp	r3, #0
 800d988:	d05d      	beq.n	800da46 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d98e:	2b04      	cmp	r3, #4
 800d990:	d003      	beq.n	800d99a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d996:	2b07      	cmp	r3, #7
 800d998:	d155      	bne.n	800da46 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d99a:	4b0c      	ldr	r3, [pc, #48]	; (800d9cc <tcp_slowtmr+0x268>)
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9aa:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d9ae:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d9b2:	4910      	ldr	r1, [pc, #64]	; (800d9f4 <tcp_slowtmr+0x290>)
 800d9b4:	fba1 1303 	umull	r1, r3, r1, r3
 800d9b8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d91c      	bls.n	800d9f8 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d9be:	7ffb      	ldrb	r3, [r7, #31]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d9c4:	7fbb      	ldrb	r3, [r7, #30]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	77bb      	strb	r3, [r7, #30]
 800d9ca:	e03c      	b.n	800da46 <tcp_slowtmr+0x2e2>
 800d9cc:	20007738 	.word	0x20007738
 800d9d0:	20003f8a 	.word	0x20003f8a
 800d9d4:	20007734 	.word	0x20007734
 800d9d8:	08016fe4 	.word	0x08016fe4
 800d9dc:	08017194 	.word	0x08017194
 800d9e0:	08017020 	.word	0x08017020
 800d9e4:	080171c0 	.word	0x080171c0
 800d9e8:	080171ec 	.word	0x080171ec
 800d9ec:	08017fd4 	.word	0x08017fd4
 800d9f0:	08017fc4 	.word	0x08017fc4
 800d9f4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9f8:	4b97      	ldr	r3, [pc, #604]	; (800dc58 <tcp_slowtmr+0x4f4>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	6a1b      	ldr	r3, [r3, #32]
 800da00:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800da0e:	4618      	mov	r0, r3
 800da10:	4b92      	ldr	r3, [pc, #584]	; (800dc5c <tcp_slowtmr+0x4f8>)
 800da12:	fb03 f300 	mul.w	r3, r3, r0
 800da16:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800da18:	4991      	ldr	r1, [pc, #580]	; (800dc60 <tcp_slowtmr+0x4fc>)
 800da1a:	fba1 1303 	umull	r1, r3, r1, r3
 800da1e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da20:	429a      	cmp	r2, r3
 800da22:	d910      	bls.n	800da46 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800da24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da26:	f004 fab2 	bl	8011f8e <tcp_keepalive>
 800da2a:	4603      	mov	r3, r0
 800da2c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800da2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d107      	bne.n	800da46 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da38:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800da3c:	3301      	adds	r3, #1
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800da4e:	4b82      	ldr	r3, [pc, #520]	; (800dc58 <tcp_slowtmr+0x4f4>)
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800da5e:	4619      	mov	r1, r3
 800da60:	460b      	mov	r3, r1
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	440b      	add	r3, r1
 800da66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800da68:	429a      	cmp	r2, r3
 800da6a:	d307      	bcc.n	800da7c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da70:	4618      	mov	r0, r3
 800da72:	f000 fa04 	bl	800de7e <tcp_segs_free>
      pcb->ooseq = NULL;
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	2200      	movs	r2, #0
 800da7a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	7d1b      	ldrb	r3, [r3, #20]
 800da80:	2b03      	cmp	r3, #3
 800da82:	d109      	bne.n	800da98 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da84:	4b74      	ldr	r3, [pc, #464]	; (800dc58 <tcp_slowtmr+0x4f4>)
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	2b28      	cmp	r3, #40	; 0x28
 800da90:	d902      	bls.n	800da98 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800da92:	7ffb      	ldrb	r3, [r7, #31]
 800da94:	3301      	adds	r3, #1
 800da96:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	7d1b      	ldrb	r3, [r3, #20]
 800da9c:	2b09      	cmp	r3, #9
 800da9e:	d109      	bne.n	800dab4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800daa0:	4b6d      	ldr	r3, [pc, #436]	; (800dc58 <tcp_slowtmr+0x4f4>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	2bf0      	cmp	r3, #240	; 0xf0
 800daac:	d902      	bls.n	800dab4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800daae:	7ffb      	ldrb	r3, [r7, #31]
 800dab0:	3301      	adds	r3, #1
 800dab2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dab4:	7ffb      	ldrb	r3, [r7, #31]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d05d      	beq.n	800db76 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dac0:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800dac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dac4:	f000 fc44 	bl	800e350 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d010      	beq.n	800daf0 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dace:	4b65      	ldr	r3, [pc, #404]	; (800dc64 <tcp_slowtmr+0x500>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d106      	bne.n	800dae6 <tcp_slowtmr+0x382>
 800dad8:	4b63      	ldr	r3, [pc, #396]	; (800dc68 <tcp_slowtmr+0x504>)
 800dada:	f240 4289 	movw	r2, #1161	; 0x489
 800dade:	4963      	ldr	r1, [pc, #396]	; (800dc6c <tcp_slowtmr+0x508>)
 800dae0:	4863      	ldr	r0, [pc, #396]	; (800dc70 <tcp_slowtmr+0x50c>)
 800dae2:	f006 fd85 	bl	80145f0 <iprintf>
        prev->next = pcb->next;
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	60da      	str	r2, [r3, #12]
 800daee:	e00f      	b.n	800db10 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800daf0:	4b5c      	ldr	r3, [pc, #368]	; (800dc64 <tcp_slowtmr+0x500>)
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d006      	beq.n	800db08 <tcp_slowtmr+0x3a4>
 800dafa:	4b5b      	ldr	r3, [pc, #364]	; (800dc68 <tcp_slowtmr+0x504>)
 800dafc:	f240 428d 	movw	r2, #1165	; 0x48d
 800db00:	495c      	ldr	r1, [pc, #368]	; (800dc74 <tcp_slowtmr+0x510>)
 800db02:	485b      	ldr	r0, [pc, #364]	; (800dc70 <tcp_slowtmr+0x50c>)
 800db04:	f006 fd74 	bl	80145f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	4a55      	ldr	r2, [pc, #340]	; (800dc64 <tcp_slowtmr+0x500>)
 800db0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800db10:	7fbb      	ldrb	r3, [r7, #30]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d010      	beq.n	800db38 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800db1e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800db20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db22:	1d1d      	adds	r5, r3, #4
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	8adb      	ldrh	r3, [r3, #22]
 800db28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db2a:	8b12      	ldrh	r2, [r2, #24]
 800db2c:	9201      	str	r2, [sp, #4]
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	462b      	mov	r3, r5
 800db32:	4622      	mov	r2, r4
 800db34:	f004 f8d8 	bl	8011ce8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	7d1b      	ldrb	r3, [r3, #20]
 800db42:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800db44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db46:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	2001      	movs	r0, #1
 800db52:	f7fe f969 	bl	800be28 <memp_free>

      tcp_active_pcbs_changed = 0;
 800db56:	4b48      	ldr	r3, [pc, #288]	; (800dc78 <tcp_slowtmr+0x514>)
 800db58:	2200      	movs	r2, #0
 800db5a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d004      	beq.n	800db6c <tcp_slowtmr+0x408>
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f06f 010c 	mvn.w	r1, #12
 800db68:	6938      	ldr	r0, [r7, #16]
 800db6a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800db6c:	4b42      	ldr	r3, [pc, #264]	; (800dc78 <tcp_slowtmr+0x514>)
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d035      	beq.n	800dbe0 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800db74:	e606      	b.n	800d784 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	7edb      	ldrb	r3, [r3, #27]
 800db84:	3301      	adds	r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	7eda      	ldrb	r2, [r3, #27]
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	7f1b      	ldrb	r3, [r3, #28]
 800db94:	429a      	cmp	r2, r3
 800db96:	d323      	bcc.n	800dbe0 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	2200      	movs	r2, #0
 800db9c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800db9e:	4b36      	ldr	r3, [pc, #216]	; (800dc78 <tcp_slowtmr+0x514>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <tcp_slowtmr+0x460>
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbb4:	6a3a      	ldr	r2, [r7, #32]
 800dbb6:	6912      	ldr	r2, [r2, #16]
 800dbb8:	6a39      	ldr	r1, [r7, #32]
 800dbba:	4610      	mov	r0, r2
 800dbbc:	4798      	blx	r3
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	777b      	strb	r3, [r7, #29]
 800dbc2:	e001      	b.n	800dbc8 <tcp_slowtmr+0x464>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800dbc8:	4b2b      	ldr	r3, [pc, #172]	; (800dc78 <tcp_slowtmr+0x514>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d000      	beq.n	800dbd2 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800dbd0:	e5d8      	b.n	800d784 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dbd2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d102      	bne.n	800dbe0 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800dbda:	6a38      	ldr	r0, [r7, #32]
 800dbdc:	f003 fdfc 	bl	80117d8 <tcp_output>
  while (pcb != NULL) {
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f47f add4 	bne.w	800d790 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800dbec:	4b23      	ldr	r3, [pc, #140]	; (800dc7c <tcp_slowtmr+0x518>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800dbf2:	e068      	b.n	800dcc6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	7d1b      	ldrb	r3, [r3, #20]
 800dbf8:	2b0a      	cmp	r3, #10
 800dbfa:	d006      	beq.n	800dc0a <tcp_slowtmr+0x4a6>
 800dbfc:	4b1a      	ldr	r3, [pc, #104]	; (800dc68 <tcp_slowtmr+0x504>)
 800dbfe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dc02:	491f      	ldr	r1, [pc, #124]	; (800dc80 <tcp_slowtmr+0x51c>)
 800dc04:	481a      	ldr	r0, [pc, #104]	; (800dc70 <tcp_slowtmr+0x50c>)
 800dc06:	f006 fcf3 	bl	80145f0 <iprintf>
    pcb_remove = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc0e:	4b12      	ldr	r3, [pc, #72]	; (800dc58 <tcp_slowtmr+0x4f4>)
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	2bf0      	cmp	r3, #240	; 0xf0
 800dc1a:	d902      	bls.n	800dc22 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800dc1c:	7ffb      	ldrb	r3, [r7, #31]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc22:	7ffb      	ldrb	r3, [r7, #31]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d049      	beq.n	800dcbc <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dc28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc2a:	f000 fb91 	bl	800e350 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d029      	beq.n	800dc88 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dc34:	4b11      	ldr	r3, [pc, #68]	; (800dc7c <tcp_slowtmr+0x518>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d106      	bne.n	800dc4c <tcp_slowtmr+0x4e8>
 800dc3e:	4b0a      	ldr	r3, [pc, #40]	; (800dc68 <tcp_slowtmr+0x504>)
 800dc40:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800dc44:	490f      	ldr	r1, [pc, #60]	; (800dc84 <tcp_slowtmr+0x520>)
 800dc46:	480a      	ldr	r0, [pc, #40]	; (800dc70 <tcp_slowtmr+0x50c>)
 800dc48:	f006 fcd2 	bl	80145f0 <iprintf>
        prev->next = pcb->next;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	68da      	ldr	r2, [r3, #12]
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	60da      	str	r2, [r3, #12]
 800dc54:	e028      	b.n	800dca8 <tcp_slowtmr+0x544>
 800dc56:	bf00      	nop
 800dc58:	20007738 	.word	0x20007738
 800dc5c:	000124f8 	.word	0x000124f8
 800dc60:	10624dd3 	.word	0x10624dd3
 800dc64:	20007734 	.word	0x20007734
 800dc68:	08016fe4 	.word	0x08016fe4
 800dc6c:	0801721c 	.word	0x0801721c
 800dc70:	08017020 	.word	0x08017020
 800dc74:	08017248 	.word	0x08017248
 800dc78:	20007730 	.word	0x20007730
 800dc7c:	20007744 	.word	0x20007744
 800dc80:	08017274 	.word	0x08017274
 800dc84:	080172a4 	.word	0x080172a4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dc88:	4b12      	ldr	r3, [pc, #72]	; (800dcd4 <tcp_slowtmr+0x570>)
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d006      	beq.n	800dca0 <tcp_slowtmr+0x53c>
 800dc92:	4b11      	ldr	r3, [pc, #68]	; (800dcd8 <tcp_slowtmr+0x574>)
 800dc94:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800dc98:	4910      	ldr	r1, [pc, #64]	; (800dcdc <tcp_slowtmr+0x578>)
 800dc9a:	4811      	ldr	r0, [pc, #68]	; (800dce0 <tcp_slowtmr+0x57c>)
 800dc9c:	f006 fca8 	bl	80145f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	4a0b      	ldr	r2, [pc, #44]	; (800dcd4 <tcp_slowtmr+0x570>)
 800dca6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcaa:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	2001      	movs	r0, #1
 800dcb6:	f7fe f8b7 	bl	800be28 <memp_free>
 800dcba:	e004      	b.n	800dcc6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d193      	bne.n	800dbf4 <tcp_slowtmr+0x490>
    }
  }
}
 800dccc:	bf00      	nop
 800dcce:	3728      	adds	r7, #40	; 0x28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd4:	20007744 	.word	0x20007744
 800dcd8:	08016fe4 	.word	0x08016fe4
 800dcdc:	080172cc 	.word	0x080172cc
 800dce0:	08017020 	.word	0x08017020

0800dce4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dcea:	4b2d      	ldr	r3, [pc, #180]	; (800dda0 <tcp_fasttmr+0xbc>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	4b2b      	ldr	r3, [pc, #172]	; (800dda0 <tcp_fasttmr+0xbc>)
 800dcf4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dcf6:	4b2b      	ldr	r3, [pc, #172]	; (800dda4 <tcp_fasttmr+0xc0>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dcfc:	e048      	b.n	800dd90 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7f5a      	ldrb	r2, [r3, #29]
 800dd02:	4b27      	ldr	r3, [pc, #156]	; (800dda0 <tcp_fasttmr+0xbc>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d03f      	beq.n	800dd8a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dd0a:	4b25      	ldr	r3, [pc, #148]	; (800dda0 <tcp_fasttmr+0xbc>)
 800dd0c:	781a      	ldrb	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7e9b      	ldrb	r3, [r3, #26]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d010      	beq.n	800dd40 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	7e9b      	ldrb	r3, [r3, #26]
 800dd22:	f043 0302 	orr.w	r3, r3, #2
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f003 fd53 	bl	80117d8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	7e9b      	ldrb	r3, [r3, #26]
 800dd36:	f023 0303 	bic.w	r3, r3, #3
 800dd3a:	b2da      	uxtb	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	7e9b      	ldrb	r3, [r3, #26]
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d009      	beq.n	800dd60 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7e9b      	ldrb	r3, [r3, #26]
 800dd50:	f023 0308 	bic.w	r3, r3, #8
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff f99c 	bl	800d098 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00a      	beq.n	800dd84 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dd6e:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <tcp_fasttmr+0xc4>)
 800dd70:	2200      	movs	r2, #0
 800dd72:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f819 	bl	800ddac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dd7a:	4b0b      	ldr	r3, [pc, #44]	; (800dda8 <tcp_fasttmr+0xc4>)
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d000      	beq.n	800dd84 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd82:	e7b8      	b.n	800dcf6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	607b      	str	r3, [r7, #4]
 800dd88:	e002      	b.n	800dd90 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1b3      	bne.n	800dcfe <tcp_fasttmr+0x1a>
    }
  }
}
 800dd96:	bf00      	nop
 800dd98:	3708      	adds	r7, #8
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	20003f8a 	.word	0x20003f8a
 800dda4:	20007734 	.word	0x20007734
 800dda8:	20007730 	.word	0x20007730

0800ddac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ddac:	b590      	push	{r4, r7, lr}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb8:	7b5b      	ldrb	r3, [r3, #13]
 800ddba:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00b      	beq.n	800ddea <tcp_process_refused_data+0x3e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6918      	ldr	r0, [r3, #16]
 800dddc:	2300      	movs	r3, #0
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	47a0      	blx	r4
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
 800dde8:	e007      	b.n	800ddfa <tcp_process_refused_data+0x4e>
 800ddea:	2300      	movs	r3, #0
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	f000 f88c 	bl	800df0e <tcp_recv_null>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ddfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d12a      	bne.n	800de58 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	f003 0320 	and.w	r3, r3, #32
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d033      	beq.n	800de74 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de10:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de14:	d005      	beq.n	800de22 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de1a:	3301      	adds	r3, #1
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d00b      	beq.n	800de44 <tcp_process_refused_data+0x98>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6918      	ldr	r0, [r3, #16]
 800de36:	2300      	movs	r3, #0
 800de38:	2200      	movs	r2, #0
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	47a0      	blx	r4
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]
 800de42:	e001      	b.n	800de48 <tcp_process_refused_data+0x9c>
 800de44:	2300      	movs	r3, #0
 800de46:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800de48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de4c:	f113 0f0d 	cmn.w	r3, #13
 800de50:	d110      	bne.n	800de74 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800de52:	f06f 030c 	mvn.w	r3, #12
 800de56:	e00e      	b.n	800de76 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800de58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5c:	f113 0f0d 	cmn.w	r3, #13
 800de60:	d102      	bne.n	800de68 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de62:	f06f 030c 	mvn.w	r3, #12
 800de66:	e006      	b.n	800de76 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800de6e:	f06f 0304 	mvn.w	r3, #4
 800de72:	e000      	b.n	800de76 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd90      	pop	{r4, r7, pc}

0800de7e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b084      	sub	sp, #16
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de86:	e007      	b.n	800de98 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f809 	bl	800dea6 <tcp_seg_free>
    seg = next;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1f4      	bne.n	800de88 <tcp_segs_free+0xa>
  }
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b082      	sub	sp, #8
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00c      	beq.n	800dece <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fd0b 	bl	800c8dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	2003      	movs	r0, #3
 800deca:	f7fd ffad 	bl	800be28 <memp_free>
  }
}
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b084      	sub	sp, #16
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dede:	2003      	movs	r0, #3
 800dee0:	f7fd ff50 	bl	800bd84 <memp_malloc>
 800dee4:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <tcp_seg_copy+0x1a>
    return NULL;
 800deec:	2300      	movs	r3, #0
 800deee:	e00a      	b.n	800df06 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800def0:	2210      	movs	r2, #16
 800def2:	6879      	ldr	r1, [r7, #4]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f006 fb68 	bl	80145ca <memcpy>
  pbuf_ref(cseg->p);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fd9e 	bl	800ca40 <pbuf_ref>
  return cseg;
 800df04:	68fb      	ldr	r3, [r7, #12]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	607a      	str	r2, [r7, #4]
 800df1a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d009      	beq.n	800df36 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	891b      	ldrh	r3, [r3, #8]
 800df26:	4619      	mov	r1, r3
 800df28:	68b8      	ldr	r0, [r7, #8]
 800df2a:	f7ff fa89 	bl	800d440 <tcp_recved>
    pbuf_free(p);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7fe fcd4 	bl	800c8dc <pbuf_free>
 800df34:	e008      	b.n	800df48 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800df36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d104      	bne.n	800df48 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800df3e:	68b8      	ldr	r0, [r7, #8]
 800df40:	f7ff f910 	bl	800d164 <tcp_close>
 800df44:	4603      	mov	r3, r0
 800df46:	e000      	b.n	800df4a <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
	...

0800df54 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df62:	2b00      	cmp	r3, #0
 800df64:	db01      	blt.n	800df6a <tcp_kill_prio+0x16>
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	e000      	b.n	800df6c <tcp_kill_prio+0x18>
 800df6a:	237f      	movs	r3, #127	; 0x7f
 800df6c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df76:	4b16      	ldr	r3, [pc, #88]	; (800dfd0 <tcp_kill_prio+0x7c>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e01a      	b.n	800dfb4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	7d5b      	ldrb	r3, [r3, #21]
 800df82:	7afa      	ldrb	r2, [r7, #11]
 800df84:	429a      	cmp	r2, r3
 800df86:	d312      	bcc.n	800dfae <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800df88:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <tcp_kill_prio+0x80>)
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	429a      	cmp	r2, r3
 800df96:	d30a      	bcc.n	800dfae <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800df98:	4b0e      	ldr	r3, [pc, #56]	; (800dfd4 <tcp_kill_prio+0x80>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	6a1b      	ldr	r3, [r3, #32]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	7d5b      	ldrb	r3, [r3, #21]
 800dfac:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	617b      	str	r3, [r7, #20]
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1e1      	bne.n	800df7e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfc0:	6938      	ldr	r0, [r7, #16]
 800dfc2:	f7ff f9e1 	bl	800d388 <tcp_abort>
  }
}
 800dfc6:	bf00      	nop
 800dfc8:	3718      	adds	r7, #24
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
 800dfce:	bf00      	nop
 800dfd0:	20007734 	.word	0x20007734
 800dfd4:	20007738 	.word	0x20007738

0800dfd8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d009      	beq.n	800dffc <tcp_kill_state+0x24>
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	2b09      	cmp	r3, #9
 800dfec:	d006      	beq.n	800dffc <tcp_kill_state+0x24>
 800dfee:	4b1a      	ldr	r3, [pc, #104]	; (800e058 <tcp_kill_state+0x80>)
 800dff0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dff4:	4919      	ldr	r1, [pc, #100]	; (800e05c <tcp_kill_state+0x84>)
 800dff6:	481a      	ldr	r0, [pc, #104]	; (800e060 <tcp_kill_state+0x88>)
 800dff8:	f006 fafa 	bl	80145f0 <iprintf>

  inactivity = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e000:	2300      	movs	r3, #0
 800e002:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e004:	4b17      	ldr	r3, [pc, #92]	; (800e064 <tcp_kill_state+0x8c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	617b      	str	r3, [r7, #20]
 800e00a:	e017      	b.n	800e03c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	7d1b      	ldrb	r3, [r3, #20]
 800e010:	79fa      	ldrb	r2, [r7, #7]
 800e012:	429a      	cmp	r2, r3
 800e014:	d10f      	bne.n	800e036 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e016:	4b14      	ldr	r3, [pc, #80]	; (800e068 <tcp_kill_state+0x90>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	1ad2      	subs	r2, r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	429a      	cmp	r2, r3
 800e024:	d307      	bcc.n	800e036 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e026:	4b10      	ldr	r3, [pc, #64]	; (800e068 <tcp_kill_state+0x90>)
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	617b      	str	r3, [r7, #20]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1e4      	bne.n	800e00c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e048:	2100      	movs	r1, #0
 800e04a:	6938      	ldr	r0, [r7, #16]
 800e04c:	f7ff f8ea 	bl	800d224 <tcp_abandon>
  }
}
 800e050:	bf00      	nop
 800e052:	3718      	adds	r7, #24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	08016fe4 	.word	0x08016fe4
 800e05c:	080172f4 	.word	0x080172f4
 800e060:	08017020 	.word	0x08017020
 800e064:	20007734 	.word	0x20007734
 800e068:	20007738 	.word	0x20007738

0800e06c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e076:	2300      	movs	r3, #0
 800e078:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e07a:	4b12      	ldr	r3, [pc, #72]	; (800e0c4 <tcp_kill_timewait+0x58>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e012      	b.n	800e0a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e082:	4b11      	ldr	r3, [pc, #68]	; (800e0c8 <tcp_kill_timewait+0x5c>)
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	1ad2      	subs	r2, r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d307      	bcc.n	800e0a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e092:	4b0d      	ldr	r3, [pc, #52]	; (800e0c8 <tcp_kill_timewait+0x5c>)
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e9      	bne.n	800e082 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d002      	beq.n	800e0ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0b4:	68b8      	ldr	r0, [r7, #8]
 800e0b6:	f7ff f967 	bl	800d388 <tcp_abort>
  }
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20007744 	.word	0x20007744
 800e0c8:	20007738 	.word	0x20007738

0800e0cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	f7fd fe54 	bl	800bd84 <memp_malloc>
 800e0dc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d124      	bne.n	800e12e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e0e4:	f7ff ffc2 	bl	800e06c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	f7fd fe4b 	bl	800bd84 <memp_malloc>
 800e0ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d11b      	bne.n	800e12e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e0f6:	2009      	movs	r0, #9
 800e0f8:	f7ff ff6e 	bl	800dfd8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e0fc:	2001      	movs	r0, #1
 800e0fe:	f7fd fe41 	bl	800bd84 <memp_malloc>
 800e102:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d111      	bne.n	800e12e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e10a:	2008      	movs	r0, #8
 800e10c:	f7ff ff64 	bl	800dfd8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e110:	2001      	movs	r0, #1
 800e112:	f7fd fe37 	bl	800bd84 <memp_malloc>
 800e116:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d107      	bne.n	800e12e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff ff17 	bl	800df54 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e126:	2001      	movs	r0, #1
 800e128:	f7fd fe2c 	bl	800bd84 <memp_malloc>
 800e12c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d03f      	beq.n	800e1b4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e134:	2298      	movs	r2, #152	; 0x98
 800e136:	2100      	movs	r1, #0
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f006 fa51 	bl	80145e0 <memset>
    pcb->prio = prio;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	79fa      	ldrb	r2, [r7, #7]
 800e142:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e14a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e154:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	22ff      	movs	r2, #255	; 0xff
 800e162:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e16a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2206      	movs	r2, #6
 800e170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2206      	movs	r2, #6
 800e178:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e180:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e18a:	4b0d      	ldr	r3, [pc, #52]	; (800e1c0 <tcp_alloc+0xf4>)
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e192:	4b0c      	ldr	r3, [pc, #48]	; (800e1c4 <tcp_alloc+0xf8>)
 800e194:	781a      	ldrb	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4a08      	ldr	r2, [pc, #32]	; (800e1c8 <tcp_alloc+0xfc>)
 800e1a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	4a07      	ldr	r2, [pc, #28]	; (800e1cc <tcp_alloc+0x100>)
 800e1b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20007738 	.word	0x20007738
 800e1c4:	20003f8a 	.word	0x20003f8a
 800e1c8:	0800df0f 	.word	0x0800df0f
 800e1cc:	006ddd00 	.word	0x006ddd00

0800e1d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e1da:	2040      	movs	r0, #64	; 0x40
 800e1dc:	f7ff ff76 	bl	800e0cc <tcp_alloc>
 800e1e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	611a      	str	r2, [r3, #16]
  }
}
 800e202:	bf00      	nop
 800e204:	370c      	adds	r7, #12
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
	...

0800e210 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00e      	beq.n	800e23e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d106      	bne.n	800e236 <tcp_recv+0x26>
 800e228:	4b07      	ldr	r3, [pc, #28]	; (800e248 <tcp_recv+0x38>)
 800e22a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800e22e:	4907      	ldr	r1, [pc, #28]	; (800e24c <tcp_recv+0x3c>)
 800e230:	4807      	ldr	r0, [pc, #28]	; (800e250 <tcp_recv+0x40>)
 800e232:	f006 f9dd 	bl	80145f0 <iprintf>
    pcb->recv = recv;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	08016fe4 	.word	0x08016fe4
 800e24c:	08017304 	.word	0x08017304
 800e250:	08017020 	.word	0x08017020

0800e254 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00d      	beq.n	800e280 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d106      	bne.n	800e27a <tcp_sent+0x26>
 800e26c:	4b06      	ldr	r3, [pc, #24]	; (800e288 <tcp_sent+0x34>)
 800e26e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800e272:	4906      	ldr	r1, [pc, #24]	; (800e28c <tcp_sent+0x38>)
 800e274:	4806      	ldr	r0, [pc, #24]	; (800e290 <tcp_sent+0x3c>)
 800e276:	f006 f9bb 	bl	80145f0 <iprintf>
    pcb->sent = sent;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800e280:	bf00      	nop
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	08016fe4 	.word	0x08016fe4
 800e28c:	0801732c 	.word	0x0801732c
 800e290:	08017020 	.word	0x08017020

0800e294 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00e      	beq.n	800e2c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	7d1b      	ldrb	r3, [r3, #20]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d106      	bne.n	800e2ba <tcp_err+0x26>
 800e2ac:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <tcp_err+0x38>)
 800e2ae:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800e2b2:	4907      	ldr	r1, [pc, #28]	; (800e2d0 <tcp_err+0x3c>)
 800e2b4:	4807      	ldr	r0, [pc, #28]	; (800e2d4 <tcp_err+0x40>)
 800e2b6:	f006 f99b 	bl	80145f0 <iprintf>
    pcb->errf = err;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	08016fe4 	.word	0x08016fe4
 800e2d0:	08017354 	.word	0x08017354
 800e2d4:	08017020 	.word	0x08017020

0800e2d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d008      	beq.n	800e2fa <tcp_accept+0x22>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d104      	bne.n	800e2fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	619a      	str	r2, [r3, #24]
  }
}
 800e2fa:	bf00      	nop
 800e2fc:	3714      	adds	r7, #20
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
	...

0800e308 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	4613      	mov	r3, r2
 800e314:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	7d1b      	ldrb	r3, [r3, #20]
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d106      	bne.n	800e32c <tcp_poll+0x24>
 800e31e:	4b09      	ldr	r3, [pc, #36]	; (800e344 <tcp_poll+0x3c>)
 800e320:	f240 7203 	movw	r2, #1795	; 0x703
 800e324:	4908      	ldr	r1, [pc, #32]	; (800e348 <tcp_poll+0x40>)
 800e326:	4809      	ldr	r0, [pc, #36]	; (800e34c <tcp_poll+0x44>)
 800e328:	f006 f962 	bl	80145f0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	79fa      	ldrb	r2, [r7, #7]
 800e338:	771a      	strb	r2, [r3, #28]
}
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	08016fe4 	.word	0x08016fe4
 800e348:	0801737c 	.word	0x0801737c
 800e34c:	08017020 	.word	0x08017020

0800e350 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d034      	beq.n	800e3ca <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e364:	2b0a      	cmp	r3, #10
 800e366:	d030      	beq.n	800e3ca <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d02c      	beq.n	800e3ca <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e374:	2b00      	cmp	r3, #0
 800e376:	d007      	beq.n	800e388 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fe faad 	bl	800c8dc <pbuf_free>
      pcb->refused_data = NULL;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff fd76 	bl	800de7e <tcp_segs_free>
    pcb->ooseq = NULL;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e39e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff fd6a 	bl	800de7e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff fd65 	bl	800de7e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	669a      	str	r2, [r3, #104]	; 0x68
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e3ca:	bf00      	nop
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
	...

0800e3d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d105      	bne.n	800e3f4 <tcp_pcb_remove+0x20>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	e013      	b.n	800e41c <tcp_pcb_remove+0x48>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	e00c      	b.n	800e416 <tcp_pcb_remove+0x42>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	68da      	ldr	r2, [r3, #12]
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	429a      	cmp	r2, r3
 800e404:	d104      	bne.n	800e410 <tcp_pcb_remove+0x3c>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	68da      	ldr	r2, [r3, #12]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	60da      	str	r2, [r3, #12]
 800e40e:	e005      	b.n	800e41c <tcp_pcb_remove+0x48>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1ef      	bne.n	800e3fc <tcp_pcb_remove+0x28>
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2200      	movs	r2, #0
 800e420:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e422:	6838      	ldr	r0, [r7, #0]
 800e424:	f7ff ff94 	bl	800e350 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	7d1b      	ldrb	r3, [r3, #20]
 800e42c:	2b0a      	cmp	r3, #10
 800e42e:	d013      	beq.n	800e458 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e434:	2b01      	cmp	r3, #1
 800e436:	d00f      	beq.n	800e458 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	7e9b      	ldrb	r3, [r3, #26]
 800e43c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e440:	2b00      	cmp	r3, #0
 800e442:	d009      	beq.n	800e458 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	7e9b      	ldrb	r3, [r3, #26]
 800e448:	f043 0302 	orr.w	r3, r3, #2
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e452:	6838      	ldr	r0, [r7, #0]
 800e454:	f003 f9c0 	bl	80117d8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d020      	beq.n	800e4a2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e464:	2b00      	cmp	r3, #0
 800e466:	d006      	beq.n	800e476 <tcp_pcb_remove+0xa2>
 800e468:	4b13      	ldr	r3, [pc, #76]	; (800e4b8 <tcp_pcb_remove+0xe4>)
 800e46a:	f240 7253 	movw	r2, #1875	; 0x753
 800e46e:	4913      	ldr	r1, [pc, #76]	; (800e4bc <tcp_pcb_remove+0xe8>)
 800e470:	4813      	ldr	r0, [pc, #76]	; (800e4c0 <tcp_pcb_remove+0xec>)
 800e472:	f006 f8bd 	bl	80145f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d006      	beq.n	800e48c <tcp_pcb_remove+0xb8>
 800e47e:	4b0e      	ldr	r3, [pc, #56]	; (800e4b8 <tcp_pcb_remove+0xe4>)
 800e480:	f240 7254 	movw	r2, #1876	; 0x754
 800e484:	490f      	ldr	r1, [pc, #60]	; (800e4c4 <tcp_pcb_remove+0xf0>)
 800e486:	480e      	ldr	r0, [pc, #56]	; (800e4c0 <tcp_pcb_remove+0xec>)
 800e488:	f006 f8b2 	bl	80145f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e490:	2b00      	cmp	r3, #0
 800e492:	d006      	beq.n	800e4a2 <tcp_pcb_remove+0xce>
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <tcp_pcb_remove+0xe4>)
 800e496:	f240 7256 	movw	r2, #1878	; 0x756
 800e49a:	490b      	ldr	r1, [pc, #44]	; (800e4c8 <tcp_pcb_remove+0xf4>)
 800e49c:	4808      	ldr	r0, [pc, #32]	; (800e4c0 <tcp_pcb_remove+0xec>)
 800e49e:	f006 f8a7 	bl	80145f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e4ae:	bf00      	nop
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	08016fe4 	.word	0x08016fe4
 800e4bc:	0801739c 	.word	0x0801739c
 800e4c0:	08017020 	.word	0x08017020
 800e4c4:	080173b4 	.word	0x080173b4
 800e4c8:	080173d0 	.word	0x080173d0

0800e4cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e4d4:	4b07      	ldr	r3, [pc, #28]	; (800e4f4 <tcp_next_iss+0x28>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <tcp_next_iss+0x2c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4413      	add	r3, r2
 800e4de:	4a05      	ldr	r2, [pc, #20]	; (800e4f4 <tcp_next_iss+0x28>)
 800e4e0:	6013      	str	r3, [r2, #0]
  return iss;
 800e4e2:	4b04      	ldr	r3, [pc, #16]	; (800e4f4 <tcp_next_iss+0x28>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	2000000c 	.word	0x2000000c
 800e4f8:	20007738 	.word	0x20007738

0800e4fc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	4603      	mov	r3, r0
 800e504:	6039      	str	r1, [r7, #0]
 800e506:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e508:	6838      	ldr	r0, [r7, #0]
 800e50a:	f7fb feb7 	bl	800a27c <ip4_route>
 800e50e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e516:	88fb      	ldrh	r3, [r7, #6]
 800e518:	e010      	b.n	800e53c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e51e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d008      	beq.n	800e53a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e528:	897b      	ldrh	r3, [r7, #10]
 800e52a:	3b28      	subs	r3, #40	; 0x28
 800e52c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e52e:	893a      	ldrh	r2, [r7, #8]
 800e530:	88fb      	ldrh	r3, [r7, #6]
 800e532:	4293      	cmp	r3, r2
 800e534:	bf28      	it	cs
 800e536:	4613      	movcs	r3, r2
 800e538:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e53a:	88fb      	ldrh	r3, [r7, #6]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e552:	e011      	b.n	800e578 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d108      	bne.n	800e572 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f7fe ff0e 	bl	800d388 <tcp_abort>
      pcb = next;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	e002      	b.n	800e578 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1ea      	bne.n	800e554 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e57e:	bf00      	nop
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d02c      	beq.n	800e5f2 <tcp_netif_ip_addr_changed+0x6a>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d028      	beq.n	800e5f2 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e5a0:	4b16      	ldr	r3, [pc, #88]	; (800e5fc <tcp_netif_ip_addr_changed+0x74>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff ffcc 	bl	800e544 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e5ac:	4b14      	ldr	r3, [pc, #80]	; (800e600 <tcp_netif_ip_addr_changed+0x78>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f7ff ffc6 	bl	800e544 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d019      	beq.n	800e5f2 <tcp_netif_ip_addr_changed+0x6a>
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d015      	beq.n	800e5f2 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <tcp_netif_ip_addr_changed+0x7c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	60fb      	str	r3, [r7, #12]
 800e5cc:	e00e      	b.n	800e5ec <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d103      	bne.n	800e5e8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1ed      	bne.n	800e5ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20007734 	.word	0x20007734
 800e600:	20007740 	.word	0x20007740
 800e604:	2000773c 	.word	0x2000773c

0800e608 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b08b      	sub	sp, #44	; 0x2c
 800e60c:	af02      	add	r7, sp, #8
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	4a82      	ldr	r2, [pc, #520]	; (800e820 <tcp_input+0x218>)
 800e618:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	895b      	ldrh	r3, [r3, #10]
 800e61e:	2b13      	cmp	r3, #19
 800e620:	f240 8388 	bls.w	800ed34 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e624:	4b7f      	ldr	r3, [pc, #508]	; (800e824 <tcp_input+0x21c>)
 800e626:	695a      	ldr	r2, [r3, #20]
 800e628:	4b7e      	ldr	r3, [pc, #504]	; (800e824 <tcp_input+0x21c>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7fc f89a 	bl	800a768 <ip4_addr_isbroadcast_u32>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	f040 837f 	bne.w	800ed3a <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e63c:	4b79      	ldr	r3, [pc, #484]	; (800e824 <tcp_input+0x21c>)
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e644:	2be0      	cmp	r3, #224	; 0xe0
 800e646:	f000 8378 	beq.w	800ed3a <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e64a:	4b75      	ldr	r3, [pc, #468]	; (800e820 <tcp_input+0x218>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	899b      	ldrh	r3, [r3, #12]
 800e650:	b29b      	uxth	r3, r3
 800e652:	4618      	mov	r0, r3
 800e654:	f7fa fd30 	bl	80090b8 <lwip_htons>
 800e658:	4603      	mov	r3, r0
 800e65a:	0b1b      	lsrs	r3, r3, #12
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e664:	7cbb      	ldrb	r3, [r7, #18]
 800e666:	2b13      	cmp	r3, #19
 800e668:	f240 8367 	bls.w	800ed3a <tcp_input+0x732>
 800e66c:	7cbb      	ldrb	r3, [r7, #18]
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	891b      	ldrh	r3, [r3, #8]
 800e674:	429a      	cmp	r2, r3
 800e676:	f200 8360 	bhi.w	800ed3a <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e67a:	7cbb      	ldrb	r3, [r7, #18]
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	3b14      	subs	r3, #20
 800e680:	b29a      	uxth	r2, r3
 800e682:	4b69      	ldr	r3, [pc, #420]	; (800e828 <tcp_input+0x220>)
 800e684:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e686:	4b69      	ldr	r3, [pc, #420]	; (800e82c <tcp_input+0x224>)
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	895a      	ldrh	r2, [r3, #10]
 800e690:	7cbb      	ldrb	r3, [r7, #18]
 800e692:	b29b      	uxth	r3, r3
 800e694:	429a      	cmp	r2, r3
 800e696:	d30d      	bcc.n	800e6b4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e698:	4b63      	ldr	r3, [pc, #396]	; (800e828 <tcp_input+0x220>)
 800e69a:	881a      	ldrh	r2, [r3, #0]
 800e69c:	4b64      	ldr	r3, [pc, #400]	; (800e830 <tcp_input+0x228>)
 800e69e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e6a0:	7cbb      	ldrb	r3, [r7, #18]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	425b      	negs	r3, r3
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	b21b      	sxth	r3, r3
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7fe f8f1 	bl	800c894 <pbuf_header>
 800e6b2:	e055      	b.n	800e760 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d105      	bne.n	800e6c8 <tcp_input+0xc0>
 800e6bc:	4b5d      	ldr	r3, [pc, #372]	; (800e834 <tcp_input+0x22c>)
 800e6be:	22b2      	movs	r2, #178	; 0xb2
 800e6c0:	495d      	ldr	r1, [pc, #372]	; (800e838 <tcp_input+0x230>)
 800e6c2:	485e      	ldr	r0, [pc, #376]	; (800e83c <tcp_input+0x234>)
 800e6c4:	f005 ff94 	bl	80145f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e6c8:	f06f 0113 	mvn.w	r1, #19
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7fe f8e1 	bl	800c894 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	895a      	ldrh	r2, [r3, #10]
 800e6d6:	4b56      	ldr	r3, [pc, #344]	; (800e830 <tcp_input+0x228>)
 800e6d8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e6da:	4b53      	ldr	r3, [pc, #332]	; (800e828 <tcp_input+0x220>)
 800e6dc:	881a      	ldrh	r2, [r3, #0]
 800e6de:	4b54      	ldr	r3, [pc, #336]	; (800e830 <tcp_input+0x228>)
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e6e6:	4b52      	ldr	r3, [pc, #328]	; (800e830 <tcp_input+0x228>)
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	425b      	negs	r3, r3
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	b21b      	sxth	r3, r3
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7fe f8ce 	bl	800c894 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	8a3a      	ldrh	r2, [r7, #16]
 800e700:	429a      	cmp	r2, r3
 800e702:	f200 8319 	bhi.w	800ed38 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	4a47      	ldr	r2, [pc, #284]	; (800e82c <tcp_input+0x224>)
 800e70e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	8a3b      	ldrh	r3, [r7, #16]
 800e716:	425b      	negs	r3, r3
 800e718:	b29b      	uxth	r3, r3
 800e71a:	b21b      	sxth	r3, r3
 800e71c:	4619      	mov	r1, r3
 800e71e:	4610      	mov	r0, r2
 800e720:	f7fe f8b8 	bl	800c894 <pbuf_header>
    p->tot_len -= opt2len;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	891a      	ldrh	r2, [r3, #8]
 800e728:	8a3b      	ldrh	r3, [r7, #16]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	895b      	ldrh	r3, [r3, #10]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <tcp_input+0x13e>
 800e73a:	4b3e      	ldr	r3, [pc, #248]	; (800e834 <tcp_input+0x22c>)
 800e73c:	22cf      	movs	r2, #207	; 0xcf
 800e73e:	4940      	ldr	r1, [pc, #256]	; (800e840 <tcp_input+0x238>)
 800e740:	483e      	ldr	r0, [pc, #248]	; (800e83c <tcp_input+0x234>)
 800e742:	f005 ff55 	bl	80145f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	891a      	ldrh	r2, [r3, #8]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	891b      	ldrh	r3, [r3, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d005      	beq.n	800e760 <tcp_input+0x158>
 800e754:	4b37      	ldr	r3, [pc, #220]	; (800e834 <tcp_input+0x22c>)
 800e756:	22d0      	movs	r2, #208	; 0xd0
 800e758:	493a      	ldr	r1, [pc, #232]	; (800e844 <tcp_input+0x23c>)
 800e75a:	4838      	ldr	r0, [pc, #224]	; (800e83c <tcp_input+0x234>)
 800e75c:	f005 ff48 	bl	80145f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e760:	4b2f      	ldr	r3, [pc, #188]	; (800e820 <tcp_input+0x218>)
 800e762:	681c      	ldr	r4, [r3, #0]
 800e764:	4b2e      	ldr	r3, [pc, #184]	; (800e820 <tcp_input+0x218>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fa fca3 	bl	80090b8 <lwip_htons>
 800e772:	4603      	mov	r3, r0
 800e774:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e776:	4b2a      	ldr	r3, [pc, #168]	; (800e820 <tcp_input+0x218>)
 800e778:	681c      	ldr	r4, [r3, #0]
 800e77a:	4b29      	ldr	r3, [pc, #164]	; (800e820 <tcp_input+0x218>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	885b      	ldrh	r3, [r3, #2]
 800e780:	b29b      	uxth	r3, r3
 800e782:	4618      	mov	r0, r3
 800e784:	f7fa fc98 	bl	80090b8 <lwip_htons>
 800e788:	4603      	mov	r3, r0
 800e78a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e78c:	4b24      	ldr	r3, [pc, #144]	; (800e820 <tcp_input+0x218>)
 800e78e:	681c      	ldr	r4, [r3, #0]
 800e790:	4b23      	ldr	r3, [pc, #140]	; (800e820 <tcp_input+0x218>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	f7fa fc9c 	bl	80090d4 <lwip_htonl>
 800e79c:	4603      	mov	r3, r0
 800e79e:	6063      	str	r3, [r4, #4]
 800e7a0:	6863      	ldr	r3, [r4, #4]
 800e7a2:	4a29      	ldr	r2, [pc, #164]	; (800e848 <tcp_input+0x240>)
 800e7a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e7a6:	4b1e      	ldr	r3, [pc, #120]	; (800e820 <tcp_input+0x218>)
 800e7a8:	681c      	ldr	r4, [r3, #0]
 800e7aa:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <tcp_input+0x218>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fa fc8f 	bl	80090d4 <lwip_htonl>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	4a23      	ldr	r2, [pc, #140]	; (800e84c <tcp_input+0x244>)
 800e7be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e7c0:	4b17      	ldr	r3, [pc, #92]	; (800e820 <tcp_input+0x218>)
 800e7c2:	681c      	ldr	r4, [r3, #0]
 800e7c4:	4b16      	ldr	r3, [pc, #88]	; (800e820 <tcp_input+0x218>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	89db      	ldrh	r3, [r3, #14]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fa fc73 	bl	80090b8 <lwip_htons>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e7d6:	4b12      	ldr	r3, [pc, #72]	; (800e820 <tcp_input+0x218>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	899b      	ldrh	r3, [r3, #12]
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fa fc6a 	bl	80090b8 <lwip_htons>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	4b18      	ldr	r3, [pc, #96]	; (800e850 <tcp_input+0x248>)
 800e7f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	891a      	ldrh	r2, [r3, #8]
 800e7f6:	4b16      	ldr	r3, [pc, #88]	; (800e850 <tcp_input+0x248>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	f003 0303 	and.w	r3, r3, #3
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bf14      	ite	ne
 800e802:	2301      	movne	r3, #1
 800e804:	2300      	moveq	r3, #0
 800e806:	b2db      	uxtb	r3, r3
 800e808:	b29b      	uxth	r3, r3
 800e80a:	4413      	add	r3, r2
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	4b11      	ldr	r3, [pc, #68]	; (800e854 <tcp_input+0x24c>)
 800e810:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e812:	2300      	movs	r3, #0
 800e814:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e816:	4b10      	ldr	r3, [pc, #64]	; (800e858 <tcp_input+0x250>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	61fb      	str	r3, [r7, #28]
 800e81c:	e082      	b.n	800e924 <tcp_input+0x31c>
 800e81e:	bf00      	nop
 800e820:	20003f9c 	.word	0x20003f9c
 800e824:	20004024 	.word	0x20004024
 800e828:	20003fa0 	.word	0x20003fa0
 800e82c:	20003fa4 	.word	0x20003fa4
 800e830:	20003fa2 	.word	0x20003fa2
 800e834:	080173e8 	.word	0x080173e8
 800e838:	0801741c 	.word	0x0801741c
 800e83c:	0801742c 	.word	0x0801742c
 800e840:	08017454 	.word	0x08017454
 800e844:	08017460 	.word	0x08017460
 800e848:	20003fac 	.word	0x20003fac
 800e84c:	20003fb0 	.word	0x20003fb0
 800e850:	20003fb8 	.word	0x20003fb8
 800e854:	20003fb6 	.word	0x20003fb6
 800e858:	20007734 	.word	0x20007734
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	7d1b      	ldrb	r3, [r3, #20]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d105      	bne.n	800e870 <tcp_input+0x268>
 800e864:	4b8f      	ldr	r3, [pc, #572]	; (800eaa4 <tcp_input+0x49c>)
 800e866:	22e2      	movs	r2, #226	; 0xe2
 800e868:	498f      	ldr	r1, [pc, #572]	; (800eaa8 <tcp_input+0x4a0>)
 800e86a:	4890      	ldr	r0, [pc, #576]	; (800eaac <tcp_input+0x4a4>)
 800e86c:	f005 fec0 	bl	80145f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	7d1b      	ldrb	r3, [r3, #20]
 800e874:	2b0a      	cmp	r3, #10
 800e876:	d105      	bne.n	800e884 <tcp_input+0x27c>
 800e878:	4b8a      	ldr	r3, [pc, #552]	; (800eaa4 <tcp_input+0x49c>)
 800e87a:	22e3      	movs	r2, #227	; 0xe3
 800e87c:	498c      	ldr	r1, [pc, #560]	; (800eab0 <tcp_input+0x4a8>)
 800e87e:	488b      	ldr	r0, [pc, #556]	; (800eaac <tcp_input+0x4a4>)
 800e880:	f005 feb6 	bl	80145f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	7d1b      	ldrb	r3, [r3, #20]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d105      	bne.n	800e898 <tcp_input+0x290>
 800e88c:	4b85      	ldr	r3, [pc, #532]	; (800eaa4 <tcp_input+0x49c>)
 800e88e:	22e4      	movs	r2, #228	; 0xe4
 800e890:	4988      	ldr	r1, [pc, #544]	; (800eab4 <tcp_input+0x4ac>)
 800e892:	4886      	ldr	r0, [pc, #536]	; (800eaac <tcp_input+0x4a4>)
 800e894:	f005 feac 	bl	80145f0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	8b1a      	ldrh	r2, [r3, #24]
 800e89c:	4b86      	ldr	r3, [pc, #536]	; (800eab8 <tcp_input+0x4b0>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d138      	bne.n	800e91a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	8ada      	ldrh	r2, [r3, #22]
 800e8ac:	4b82      	ldr	r3, [pc, #520]	; (800eab8 <tcp_input+0x4b0>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	885b      	ldrh	r3, [r3, #2]
 800e8b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d130      	bne.n	800e91a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	4b7f      	ldr	r3, [pc, #508]	; (800eabc <tcp_input+0x4b4>)
 800e8be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d12a      	bne.n	800e91a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	4b7c      	ldr	r3, [pc, #496]	; (800eabc <tcp_input+0x4b4>)
 800e8ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d124      	bne.n	800e91a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d105      	bne.n	800e8e6 <tcp_input+0x2de>
 800e8da:	4b72      	ldr	r3, [pc, #456]	; (800eaa4 <tcp_input+0x49c>)
 800e8dc:	22ec      	movs	r2, #236	; 0xec
 800e8de:	4978      	ldr	r1, [pc, #480]	; (800eac0 <tcp_input+0x4b8>)
 800e8e0:	4872      	ldr	r0, [pc, #456]	; (800eaac <tcp_input+0x4a4>)
 800e8e2:	f005 fe85 	bl	80145f0 <iprintf>
      if (prev != NULL) {
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00a      	beq.n	800e902 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	68da      	ldr	r2, [r3, #12]
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e8f4:	4b73      	ldr	r3, [pc, #460]	; (800eac4 <tcp_input+0x4bc>)
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e8fc:	4a71      	ldr	r2, [pc, #452]	; (800eac4 <tcp_input+0x4bc>)
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d10f      	bne.n	800e92c <tcp_input+0x324>
 800e90c:	4b65      	ldr	r3, [pc, #404]	; (800eaa4 <tcp_input+0x49c>)
 800e90e:	22f4      	movs	r2, #244	; 0xf4
 800e910:	496d      	ldr	r1, [pc, #436]	; (800eac8 <tcp_input+0x4c0>)
 800e912:	4866      	ldr	r0, [pc, #408]	; (800eaac <tcp_input+0x4a4>)
 800e914:	f005 fe6c 	bl	80145f0 <iprintf>
      break;
 800e918:	e008      	b.n	800e92c <tcp_input+0x324>
    }
    prev = pcb;
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	61fb      	str	r3, [r7, #28]
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d198      	bne.n	800e85c <tcp_input+0x254>
 800e92a:	e000      	b.n	800e92e <tcp_input+0x326>
      break;
 800e92c:	bf00      	nop
  }

  if (pcb == NULL) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d173      	bne.n	800ea1c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e934:	4b65      	ldr	r3, [pc, #404]	; (800eacc <tcp_input+0x4c4>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	61fb      	str	r3, [r7, #28]
 800e93a:	e02f      	b.n	800e99c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	2b0a      	cmp	r3, #10
 800e942:	d005      	beq.n	800e950 <tcp_input+0x348>
 800e944:	4b57      	ldr	r3, [pc, #348]	; (800eaa4 <tcp_input+0x49c>)
 800e946:	22fe      	movs	r2, #254	; 0xfe
 800e948:	4961      	ldr	r1, [pc, #388]	; (800ead0 <tcp_input+0x4c8>)
 800e94a:	4858      	ldr	r0, [pc, #352]	; (800eaac <tcp_input+0x4a4>)
 800e94c:	f005 fe50 	bl	80145f0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	8b1a      	ldrh	r2, [r3, #24]
 800e954:	4b58      	ldr	r3, [pc, #352]	; (800eab8 <tcp_input+0x4b0>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d11a      	bne.n	800e996 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	8ada      	ldrh	r2, [r3, #22]
 800e964:	4b54      	ldr	r3, [pc, #336]	; (800eab8 <tcp_input+0x4b0>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	885b      	ldrh	r3, [r3, #2]
 800e96a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d112      	bne.n	800e996 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	685a      	ldr	r2, [r3, #4]
 800e974:	4b51      	ldr	r3, [pc, #324]	; (800eabc <tcp_input+0x4b4>)
 800e976:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e978:	429a      	cmp	r2, r3
 800e97a:	d10c      	bne.n	800e996 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	4b4e      	ldr	r3, [pc, #312]	; (800eabc <tcp_input+0x4b4>)
 800e982:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e984:	429a      	cmp	r2, r3
 800e986:	d106      	bne.n	800e996 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e988:	69f8      	ldr	r0, [r7, #28]
 800e98a:	f000 fb11 	bl	800efb0 <tcp_timewait_input>
        pbuf_free(p);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7fd ffa4 	bl	800c8dc <pbuf_free>
        return;
 800e994:	e1d6      	b.n	800ed44 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	61fb      	str	r3, [r7, #28]
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1cc      	bne.n	800e93c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9a6:	4b4b      	ldr	r3, [pc, #300]	; (800ead4 <tcp_input+0x4cc>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e019      	b.n	800e9e2 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	8ada      	ldrh	r2, [r3, #22]
 800e9b2:	4b41      	ldr	r3, [pc, #260]	; (800eab8 <tcp_input+0x4b0>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	885b      	ldrh	r3, [r3, #2]
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d10c      	bne.n	800e9d8 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	4b3e      	ldr	r3, [pc, #248]	; (800eabc <tcp_input+0x4b4>)
 800e9c4:	695b      	ldr	r3, [r3, #20]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d00f      	beq.n	800e9ea <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00d      	beq.n	800e9ec <tcp_input+0x3e4>
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d009      	beq.n	800e9ec <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e2      	bne.n	800e9ae <tcp_input+0x3a6>
 800e9e8:	e000      	b.n	800e9ec <tcp_input+0x3e4>
            break;
 800e9ea:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d014      	beq.n	800ea1c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00a      	beq.n	800ea0e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	68da      	ldr	r2, [r3, #12]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea00:	4b34      	ldr	r3, [pc, #208]	; (800ead4 <tcp_input+0x4cc>)
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea08:	4a32      	ldr	r2, [pc, #200]	; (800ead4 <tcp_input+0x4cc>)
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ea0e:	6978      	ldr	r0, [r7, #20]
 800ea10:	f000 f9ec 	bl	800edec <tcp_listen_input>
      pbuf_free(p);
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7fd ff61 	bl	800c8dc <pbuf_free>
      return;
 800ea1a:	e193      	b.n	800ed44 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f000 8162 	beq.w	800ece8 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea24:	4b2c      	ldr	r3, [pc, #176]	; (800ead8 <tcp_input+0x4d0>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	891a      	ldrh	r2, [r3, #8]
 800ea2e:	4b2a      	ldr	r3, [pc, #168]	; (800ead8 <tcp_input+0x4d0>)
 800ea30:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea32:	4a29      	ldr	r2, [pc, #164]	; (800ead8 <tcp_input+0x4d0>)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea38:	4b1f      	ldr	r3, [pc, #124]	; (800eab8 <tcp_input+0x4b0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a26      	ldr	r2, [pc, #152]	; (800ead8 <tcp_input+0x4d0>)
 800ea3e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea40:	4b26      	ldr	r3, [pc, #152]	; (800eadc <tcp_input+0x4d4>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea46:	4b26      	ldr	r3, [pc, #152]	; (800eae0 <tcp_input+0x4d8>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea4c:	4b25      	ldr	r3, [pc, #148]	; (800eae4 <tcp_input+0x4dc>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ea52:	4b25      	ldr	r3, [pc, #148]	; (800eae8 <tcp_input+0x4e0>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 0308 	and.w	r3, r3, #8
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d006      	beq.n	800ea6c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	7b5b      	ldrb	r3, [r3, #13]
 800ea62:	f043 0301 	orr.w	r3, r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d03d      	beq.n	800eaf0 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea74:	69f8      	ldr	r0, [r7, #28]
 800ea76:	f7ff f999 	bl	800ddac <tcp_process_refused_data>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	f113 0f0d 	cmn.w	r3, #13
 800ea80:	d007      	beq.n	800ea92 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d032      	beq.n	800eaf0 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea8a:	4b18      	ldr	r3, [pc, #96]	; (800eaec <tcp_input+0x4e4>)
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d02e      	beq.n	800eaf0 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f040 8108 	bne.w	800ecac <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ea9c:	69f8      	ldr	r0, [r7, #28]
 800ea9e:	f002 fe3f 	bl	8011720 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eaa2:	e103      	b.n	800ecac <tcp_input+0x6a4>
 800eaa4:	080173e8 	.word	0x080173e8
 800eaa8:	08017480 	.word	0x08017480
 800eaac:	0801742c 	.word	0x0801742c
 800eab0:	080174a8 	.word	0x080174a8
 800eab4:	080174d4 	.word	0x080174d4
 800eab8:	20003f9c 	.word	0x20003f9c
 800eabc:	20004024 	.word	0x20004024
 800eac0:	080174fc 	.word	0x080174fc
 800eac4:	20007734 	.word	0x20007734
 800eac8:	08017528 	.word	0x08017528
 800eacc:	20007744 	.word	0x20007744
 800ead0:	08017554 	.word	0x08017554
 800ead4:	2000773c 	.word	0x2000773c
 800ead8:	20003f8c 	.word	0x20003f8c
 800eadc:	20003fbc 	.word	0x20003fbc
 800eae0:	20003fb9 	.word	0x20003fb9
 800eae4:	20003fb4 	.word	0x20003fb4
 800eae8:	20003fb8 	.word	0x20003fb8
 800eaec:	20003fb6 	.word	0x20003fb6
      }
    }
    tcp_input_pcb = pcb;
 800eaf0:	4a96      	ldr	r2, [pc, #600]	; (800ed4c <tcp_input+0x744>)
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eaf6:	69f8      	ldr	r0, [r7, #28]
 800eaf8:	f000 fac2 	bl	800f080 <tcp_process>
 800eafc:	4603      	mov	r3, r0
 800eafe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb04:	f113 0f0d 	cmn.w	r3, #13
 800eb08:	f000 80db 	beq.w	800ecc2 <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 800eb0c:	4b90      	ldr	r3, [pc, #576]	; (800ed50 <tcp_input+0x748>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f003 0308 	and.w	r3, r3, #8
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d016      	beq.n	800eb46 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d008      	beq.n	800eb34 <tcp_input+0x52c>
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb28:	69fa      	ldr	r2, [r7, #28]
 800eb2a:	6912      	ldr	r2, [r2, #16]
 800eb2c:	f06f 010d 	mvn.w	r1, #13
 800eb30:	4610      	mov	r0, r2
 800eb32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb34:	69f9      	ldr	r1, [r7, #28]
 800eb36:	4887      	ldr	r0, [pc, #540]	; (800ed54 <tcp_input+0x74c>)
 800eb38:	f7ff fc4c 	bl	800e3d4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800eb3c:	69f9      	ldr	r1, [r7, #28]
 800eb3e:	2001      	movs	r0, #1
 800eb40:	f7fd f972 	bl	800be28 <memp_free>
 800eb44:	e0bd      	b.n	800ecc2 <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb4a:	4b83      	ldr	r3, [pc, #524]	; (800ed58 <tcp_input+0x750>)
 800eb4c:	881b      	ldrh	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d01b      	beq.n	800eb8a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb52:	4b81      	ldr	r3, [pc, #516]	; (800ed58 <tcp_input+0x750>)
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <tcp_input+0x56c>
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb64:	69fa      	ldr	r2, [r7, #28]
 800eb66:	6910      	ldr	r0, [r2, #16]
 800eb68:	89fa      	ldrh	r2, [r7, #14]
 800eb6a:	69f9      	ldr	r1, [r7, #28]
 800eb6c:	4798      	blx	r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	74fb      	strb	r3, [r7, #19]
 800eb72:	e001      	b.n	800eb78 <tcp_input+0x570>
 800eb74:	2300      	movs	r3, #0
 800eb76:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb7c:	f113 0f0d 	cmn.w	r3, #13
 800eb80:	f000 8096 	beq.w	800ecb0 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb84:	4b74      	ldr	r3, [pc, #464]	; (800ed58 <tcp_input+0x750>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb8a:	69f8      	ldr	r0, [r7, #28]
 800eb8c:	f000 f8fc 	bl	800ed88 <tcp_input_delayed_close>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f040 808e 	bne.w	800ecb4 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eb98:	4b70      	ldr	r3, [pc, #448]	; (800ed5c <tcp_input+0x754>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d041      	beq.n	800ec24 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d006      	beq.n	800ebb6 <tcp_input+0x5ae>
 800eba8:	4b6d      	ldr	r3, [pc, #436]	; (800ed60 <tcp_input+0x758>)
 800ebaa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800ebae:	496d      	ldr	r1, [pc, #436]	; (800ed64 <tcp_input+0x75c>)
 800ebb0:	486d      	ldr	r0, [pc, #436]	; (800ed68 <tcp_input+0x760>)
 800ebb2:	f005 fd1d 	bl	80145f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	7e9b      	ldrb	r3, [r3, #26]
 800ebba:	f003 0310 	and.w	r3, r3, #16
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d008      	beq.n	800ebd4 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ebc2:	4b66      	ldr	r3, [pc, #408]	; (800ed5c <tcp_input+0x754>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fd fe88 	bl	800c8dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ebcc:	69f8      	ldr	r0, [r7, #28]
 800ebce:	f7fe fbdb 	bl	800d388 <tcp_abort>
            goto aborted;
 800ebd2:	e076      	b.n	800ecc2 <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00c      	beq.n	800ebf8 <tcp_input+0x5f0>
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	6918      	ldr	r0, [r3, #16]
 800ebe8:	4b5c      	ldr	r3, [pc, #368]	; (800ed5c <tcp_input+0x754>)
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	2300      	movs	r3, #0
 800ebee:	69f9      	ldr	r1, [r7, #28]
 800ebf0:	47a0      	blx	r4
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	74fb      	strb	r3, [r7, #19]
 800ebf6:	e008      	b.n	800ec0a <tcp_input+0x602>
 800ebf8:	4b58      	ldr	r3, [pc, #352]	; (800ed5c <tcp_input+0x754>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	69f9      	ldr	r1, [r7, #28]
 800ec00:	2000      	movs	r0, #0
 800ec02:	f7ff f984 	bl	800df0e <tcp_recv_null>
 800ec06:	4603      	mov	r3, r0
 800ec08:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec0e:	f113 0f0d 	cmn.w	r3, #13
 800ec12:	d051      	beq.n	800ecb8 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d003      	beq.n	800ec24 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec1c:	4b4f      	ldr	r3, [pc, #316]	; (800ed5c <tcp_input+0x754>)
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec24:	4b4a      	ldr	r3, [pc, #296]	; (800ed50 <tcp_input+0x748>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f003 0320 	and.w	r3, r3, #32
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d030      	beq.n	800ec92 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d009      	beq.n	800ec4c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ec40:	7b52      	ldrb	r2, [r2, #13]
 800ec42:	f042 0220 	orr.w	r2, r2, #32
 800ec46:	b2d2      	uxtb	r2, r2
 800ec48:	735a      	strb	r2, [r3, #13]
 800ec4a:	e022      	b.n	800ec92 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec54:	d005      	beq.n	800ec62 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00b      	beq.n	800ec84 <tcp_input+0x67c>
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	6918      	ldr	r0, [r3, #16]
 800ec76:	2300      	movs	r3, #0
 800ec78:	2200      	movs	r2, #0
 800ec7a:	69f9      	ldr	r1, [r7, #28]
 800ec7c:	47a0      	blx	r4
 800ec7e:	4603      	mov	r3, r0
 800ec80:	74fb      	strb	r3, [r7, #19]
 800ec82:	e001      	b.n	800ec88 <tcp_input+0x680>
 800ec84:	2300      	movs	r3, #0
 800ec86:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec8c:	f113 0f0d 	cmn.w	r3, #13
 800ec90:	d014      	beq.n	800ecbc <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec92:	4b2e      	ldr	r3, [pc, #184]	; (800ed4c <tcp_input+0x744>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec98:	69f8      	ldr	r0, [r7, #28]
 800ec9a:	f000 f875 	bl	800ed88 <tcp_input_delayed_close>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10d      	bne.n	800ecc0 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eca4:	69f8      	ldr	r0, [r7, #28]
 800eca6:	f002 fd97 	bl	80117d8 <tcp_output>
 800ecaa:	e00a      	b.n	800ecc2 <tcp_input+0x6ba>
        goto aborted;
 800ecac:	bf00      	nop
 800ecae:	e008      	b.n	800ecc2 <tcp_input+0x6ba>
              goto aborted;
 800ecb0:	bf00      	nop
 800ecb2:	e006      	b.n	800ecc2 <tcp_input+0x6ba>
          goto aborted;
 800ecb4:	bf00      	nop
 800ecb6:	e004      	b.n	800ecc2 <tcp_input+0x6ba>
            goto aborted;
 800ecb8:	bf00      	nop
 800ecba:	e002      	b.n	800ecc2 <tcp_input+0x6ba>
              goto aborted;
 800ecbc:	bf00      	nop
 800ecbe:	e000      	b.n	800ecc2 <tcp_input+0x6ba>
          goto aborted;
 800ecc0:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800ecc2:	4b22      	ldr	r3, [pc, #136]	; (800ed4c <tcp_input+0x744>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ecc8:	4b24      	ldr	r3, [pc, #144]	; (800ed5c <tcp_input+0x754>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ecce:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <tcp_input+0x764>)
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d035      	beq.n	800ed42 <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800ecd6:	4b25      	ldr	r3, [pc, #148]	; (800ed6c <tcp_input+0x764>)
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fd fdfe 	bl	800c8dc <pbuf_free>
      inseg.p = NULL;
 800ece0:	4b22      	ldr	r3, [pc, #136]	; (800ed6c <tcp_input+0x764>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ece6:	e02c      	b.n	800ed42 <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ece8:	4b21      	ldr	r3, [pc, #132]	; (800ed70 <tcp_input+0x768>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	899b      	ldrh	r3, [r3, #12]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fa f9e1 	bl	80090b8 <lwip_htons>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f003 0304 	and.w	r3, r3, #4
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d115      	bne.n	800ed2c <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed00:	4b1c      	ldr	r3, [pc, #112]	; (800ed74 <tcp_input+0x76c>)
 800ed02:	6818      	ldr	r0, [r3, #0]
 800ed04:	4b1c      	ldr	r3, [pc, #112]	; (800ed78 <tcp_input+0x770>)
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	4b1c      	ldr	r3, [pc, #112]	; (800ed7c <tcp_input+0x774>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed10:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <tcp_input+0x768>)
 800ed12:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed18:	4a15      	ldr	r2, [pc, #84]	; (800ed70 <tcp_input+0x768>)
 800ed1a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed1c:	8812      	ldrh	r2, [r2, #0]
 800ed1e:	b292      	uxth	r2, r2
 800ed20:	9201      	str	r2, [sp, #4]
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	4b16      	ldr	r3, [pc, #88]	; (800ed80 <tcp_input+0x778>)
 800ed26:	4a17      	ldr	r2, [pc, #92]	; (800ed84 <tcp_input+0x77c>)
 800ed28:	f002 ffde 	bl	8011ce8 <tcp_rst>
    pbuf_free(p);
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7fd fdd5 	bl	800c8dc <pbuf_free>
  return;
 800ed32:	e006      	b.n	800ed42 <tcp_input+0x73a>
    goto dropped;
 800ed34:	bf00      	nop
 800ed36:	e000      	b.n	800ed3a <tcp_input+0x732>
      goto dropped;
 800ed38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7fd fdce 	bl	800c8dc <pbuf_free>
 800ed40:	e000      	b.n	800ed44 <tcp_input+0x73c>
  return;
 800ed42:	bf00      	nop
}
 800ed44:	3724      	adds	r7, #36	; 0x24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd90      	pop	{r4, r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20007748 	.word	0x20007748
 800ed50:	20003fb9 	.word	0x20003fb9
 800ed54:	20007734 	.word	0x20007734
 800ed58:	20003fb4 	.word	0x20003fb4
 800ed5c:	20003fbc 	.word	0x20003fbc
 800ed60:	080173e8 	.word	0x080173e8
 800ed64:	08017584 	.word	0x08017584
 800ed68:	0801742c 	.word	0x0801742c
 800ed6c:	20003f8c 	.word	0x20003f8c
 800ed70:	20003f9c 	.word	0x20003f9c
 800ed74:	20003fb0 	.word	0x20003fb0
 800ed78:	20003fb6 	.word	0x20003fb6
 800ed7c:	20003fac 	.word	0x20003fac
 800ed80:	20004034 	.word	0x20004034
 800ed84:	20004038 	.word	0x20004038

0800ed88 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ed90:	4b14      	ldr	r3, [pc, #80]	; (800ede4 <tcp_input_delayed_close+0x5c>)
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	f003 0310 	and.w	r3, r3, #16
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d01d      	beq.n	800edd8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7e9b      	ldrb	r3, [r3, #26]
 800eda0:	f003 0310 	and.w	r3, r3, #16
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10d      	bne.n	800edc4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d008      	beq.n	800edc4 <tcp_input_delayed_close+0x3c>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	6912      	ldr	r2, [r2, #16]
 800edbc:	f06f 010e 	mvn.w	r1, #14
 800edc0:	4610      	mov	r0, r2
 800edc2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800edc4:	6879      	ldr	r1, [r7, #4]
 800edc6:	4808      	ldr	r0, [pc, #32]	; (800ede8 <tcp_input_delayed_close+0x60>)
 800edc8:	f7ff fb04 	bl	800e3d4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800edcc:	6879      	ldr	r1, [r7, #4]
 800edce:	2001      	movs	r0, #1
 800edd0:	f7fd f82a 	bl	800be28 <memp_free>
    return 1;
 800edd4:	2301      	movs	r3, #1
 800edd6:	e000      	b.n	800edda <tcp_input_delayed_close+0x52>
  }
  return 0;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	20003fb9 	.word	0x20003fb9
 800ede8:	20007734 	.word	0x20007734

0800edec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800edf4:	4b64      	ldr	r3, [pc, #400]	; (800ef88 <tcp_listen_input+0x19c>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f040 80bc 	bne.w	800ef7a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee02:	4b61      	ldr	r3, [pc, #388]	; (800ef88 <tcp_listen_input+0x19c>)
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	f003 0310 	and.w	r3, r3, #16
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d016      	beq.n	800ee3c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee0e:	4b5f      	ldr	r3, [pc, #380]	; (800ef8c <tcp_listen_input+0x1a0>)
 800ee10:	6818      	ldr	r0, [r3, #0]
 800ee12:	4b5f      	ldr	r3, [pc, #380]	; (800ef90 <tcp_listen_input+0x1a4>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	4b5e      	ldr	r3, [pc, #376]	; (800ef94 <tcp_listen_input+0x1a8>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee1e:	4b5e      	ldr	r3, [pc, #376]	; (800ef98 <tcp_listen_input+0x1ac>)
 800ee20:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee22:	885b      	ldrh	r3, [r3, #2]
 800ee24:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee26:	4a5c      	ldr	r2, [pc, #368]	; (800ef98 <tcp_listen_input+0x1ac>)
 800ee28:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee2a:	8812      	ldrh	r2, [r2, #0]
 800ee2c:	b292      	uxth	r2, r2
 800ee2e:	9201      	str	r2, [sp, #4]
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	4b5a      	ldr	r3, [pc, #360]	; (800ef9c <tcp_listen_input+0x1b0>)
 800ee34:	4a5a      	ldr	r2, [pc, #360]	; (800efa0 <tcp_listen_input+0x1b4>)
 800ee36:	f002 ff57 	bl	8011ce8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ee3a:	e0a0      	b.n	800ef7e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800ee3c:	4b52      	ldr	r3, [pc, #328]	; (800ef88 <tcp_listen_input+0x19c>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	f003 0302 	and.w	r3, r3, #2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f000 809a 	beq.w	800ef7e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	7d5b      	ldrb	r3, [r3, #21]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff f93c 	bl	800e0cc <tcp_alloc>
 800ee54:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d111      	bne.n	800ee80 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00a      	beq.n	800ee7a <tcp_listen_input+0x8e>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	6910      	ldr	r0, [r2, #16]
 800ee6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee70:	2100      	movs	r1, #0
 800ee72:	4798      	blx	r3
 800ee74:	4603      	mov	r3, r0
 800ee76:	74fb      	strb	r3, [r7, #19]
      return;
 800ee78:	e082      	b.n	800ef80 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee7a:	23f0      	movs	r3, #240	; 0xf0
 800ee7c:	74fb      	strb	r3, [r7, #19]
      return;
 800ee7e:	e07f      	b.n	800ef80 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ee80:	4b48      	ldr	r3, [pc, #288]	; (800efa4 <tcp_listen_input+0x1b8>)
 800ee82:	695a      	ldr	r2, [r3, #20]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee88:	4b46      	ldr	r3, [pc, #280]	; (800efa4 <tcp_listen_input+0x1b8>)
 800ee8a:	691a      	ldr	r2, [r3, #16]
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	8ada      	ldrh	r2, [r3, #22]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ee98:	4b3f      	ldr	r3, [pc, #252]	; (800ef98 <tcp_listen_input+0x1ac>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2203      	movs	r2, #3
 800eea8:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eeaa:	4b3a      	ldr	r3, [pc, #232]	; (800ef94 <tcp_listen_input+0x1a8>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	1c5a      	adds	r2, r3, #1
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800eebc:	6978      	ldr	r0, [r7, #20]
 800eebe:	f7ff fb05 	bl	800e4cc <tcp_next_iss>
 800eec2:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	68fa      	ldr	r2, [r7, #12]
 800eed4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eedc:	4b2d      	ldr	r3, [pc, #180]	; (800ef94 <tcp_listen_input+0x1a8>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	1e5a      	subs	r2, r3, #1
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	691a      	ldr	r2, [r3, #16]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7a1b      	ldrb	r3, [r3, #8]
 800eef8:	f003 030c 	and.w	r3, r3, #12
 800eefc:	b2da      	uxtb	r2, r3
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef02:	4b29      	ldr	r3, [pc, #164]	; (800efa8 <tcp_listen_input+0x1bc>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	60da      	str	r2, [r3, #12]
 800ef0a:	4a27      	ldr	r2, [pc, #156]	; (800efa8 <tcp_listen_input+0x1bc>)
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	f003 f93a 	bl	8012188 <tcp_timer_needed>
 800ef14:	4b25      	ldr	r3, [pc, #148]	; (800efac <tcp_listen_input+0x1c0>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f001 fd16 	bl	801094c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef20:	4b1d      	ldr	r3, [pc, #116]	; (800ef98 <tcp_listen_input+0x1ac>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	89db      	ldrh	r3, [r3, #14]
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	3304      	adds	r3, #4
 800ef42:	4619      	mov	r1, r3
 800ef44:	4610      	mov	r0, r2
 800ef46:	f7ff fad9 	bl	800e4fc <tcp_eff_send_mss_impl>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef52:	2112      	movs	r1, #18
 800ef54:	6978      	ldr	r0, [r7, #20]
 800ef56:	f002 fae5 	bl	8011524 <tcp_enqueue_flags>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800ef5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d004      	beq.n	800ef70 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ef66:	2100      	movs	r1, #0
 800ef68:	6978      	ldr	r0, [r7, #20]
 800ef6a:	f7fe f95b 	bl	800d224 <tcp_abandon>
      return;
 800ef6e:	e007      	b.n	800ef80 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800ef70:	6978      	ldr	r0, [r7, #20]
 800ef72:	f002 fc31 	bl	80117d8 <tcp_output>
  return;
 800ef76:	bf00      	nop
 800ef78:	e001      	b.n	800ef7e <tcp_listen_input+0x192>
    return;
 800ef7a:	bf00      	nop
 800ef7c:	e000      	b.n	800ef80 <tcp_listen_input+0x194>
  return;
 800ef7e:	bf00      	nop
}
 800ef80:	3718      	adds	r7, #24
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	20003fb8 	.word	0x20003fb8
 800ef8c:	20003fb0 	.word	0x20003fb0
 800ef90:	20003fb6 	.word	0x20003fb6
 800ef94:	20003fac 	.word	0x20003fac
 800ef98:	20003f9c 	.word	0x20003f9c
 800ef9c:	20004034 	.word	0x20004034
 800efa0:	20004038 	.word	0x20004038
 800efa4:	20004024 	.word	0x20004024
 800efa8:	20007734 	.word	0x20007734
 800efac:	20007730 	.word	0x20007730

0800efb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af02      	add	r7, sp, #8
 800efb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800efb8:	4b29      	ldr	r3, [pc, #164]	; (800f060 <tcp_timewait_input+0xb0>)
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	f003 0304 	and.w	r3, r3, #4
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d147      	bne.n	800f054 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800efc4:	4b26      	ldr	r3, [pc, #152]	; (800f060 <tcp_timewait_input+0xb0>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	f003 0302 	and.w	r3, r3, #2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d027      	beq.n	800f020 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800efd0:	4b24      	ldr	r3, [pc, #144]	; (800f064 <tcp_timewait_input+0xb4>)
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	db2a      	blt.n	800f034 <tcp_timewait_input+0x84>
 800efde:	4b21      	ldr	r3, [pc, #132]	; (800f064 <tcp_timewait_input+0xb4>)
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe6:	6879      	ldr	r1, [r7, #4]
 800efe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efea:	440b      	add	r3, r1
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	dc20      	bgt.n	800f034 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eff2:	4b1d      	ldr	r3, [pc, #116]	; (800f068 <tcp_timewait_input+0xb8>)
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	4b1d      	ldr	r3, [pc, #116]	; (800f06c <tcp_timewait_input+0xbc>)
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	4b19      	ldr	r3, [pc, #100]	; (800f064 <tcp_timewait_input+0xb4>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f002:	4b1b      	ldr	r3, [pc, #108]	; (800f070 <tcp_timewait_input+0xc0>)
 800f004:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f006:	885b      	ldrh	r3, [r3, #2]
 800f008:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f00a:	4a19      	ldr	r2, [pc, #100]	; (800f070 <tcp_timewait_input+0xc0>)
 800f00c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f00e:	8812      	ldrh	r2, [r2, #0]
 800f010:	b292      	uxth	r2, r2
 800f012:	9201      	str	r2, [sp, #4]
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	4b17      	ldr	r3, [pc, #92]	; (800f074 <tcp_timewait_input+0xc4>)
 800f018:	4a17      	ldr	r2, [pc, #92]	; (800f078 <tcp_timewait_input+0xc8>)
 800f01a:	f002 fe65 	bl	8011ce8 <tcp_rst>
      return;
 800f01e:	e01c      	b.n	800f05a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800f020:	4b0f      	ldr	r3, [pc, #60]	; (800f060 <tcp_timewait_input+0xb0>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d003      	beq.n	800f034 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f02c:	4b13      	ldr	r3, [pc, #76]	; (800f07c <tcp_timewait_input+0xcc>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f034:	4b0d      	ldr	r3, [pc, #52]	; (800f06c <tcp_timewait_input+0xbc>)
 800f036:	881b      	ldrh	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00d      	beq.n	800f058 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7e9b      	ldrb	r3, [r3, #26]
 800f040:	f043 0302 	orr.w	r3, r3, #2
 800f044:	b2da      	uxtb	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f002 fbc4 	bl	80117d8 <tcp_output>
  }
  return;
 800f050:	bf00      	nop
 800f052:	e001      	b.n	800f058 <tcp_timewait_input+0xa8>
    return;
 800f054:	bf00      	nop
 800f056:	e000      	b.n	800f05a <tcp_timewait_input+0xaa>
  return;
 800f058:	bf00      	nop
}
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	20003fb8 	.word	0x20003fb8
 800f064:	20003fac 	.word	0x20003fac
 800f068:	20003fb0 	.word	0x20003fb0
 800f06c:	20003fb6 	.word	0x20003fb6
 800f070:	20003f9c 	.word	0x20003f9c
 800f074:	20004034 	.word	0x20004034
 800f078:	20004038 	.word	0x20004038
 800f07c:	20007738 	.word	0x20007738

0800f080 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af02      	add	r7, sp, #8
 800f086:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f08c:	2300      	movs	r3, #0
 800f08e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f090:	4ba4      	ldr	r3, [pc, #656]	; (800f324 <tcp_process+0x2a4>)
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	f003 0304 	and.w	r3, r3, #4
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d04e      	beq.n	800f13a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	7d1b      	ldrb	r3, [r3, #20]
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d108      	bne.n	800f0b6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0a8:	4b9f      	ldr	r3, [pc, #636]	; (800f328 <tcp_process+0x2a8>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d123      	bne.n	800f0f8 <tcp_process+0x78>
        acceptable = 1;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	76fb      	strb	r3, [r7, #27]
 800f0b4:	e020      	b.n	800f0f8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0ba:	4b9c      	ldr	r3, [pc, #624]	; (800f32c <tcp_process+0x2ac>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d102      	bne.n	800f0c8 <tcp_process+0x48>
        acceptable = 1;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	76fb      	strb	r3, [r7, #27]
 800f0c6:	e017      	b.n	800f0f8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0c8:	4b98      	ldr	r3, [pc, #608]	; (800f32c <tcp_process+0x2ac>)
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	db10      	blt.n	800f0f8 <tcp_process+0x78>
 800f0d6:	4b95      	ldr	r3, [pc, #596]	; (800f32c <tcp_process+0x2ac>)
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	6879      	ldr	r1, [r7, #4]
 800f0e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0e2:	440b      	add	r3, r1
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	dc06      	bgt.n	800f0f8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7e9b      	ldrb	r3, [r3, #26]
 800f0ee:	f043 0302 	orr.w	r3, r3, #2
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f0f8:	7efb      	ldrb	r3, [r7, #27]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d01b      	beq.n	800f136 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	7d1b      	ldrb	r3, [r3, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <tcp_process+0x94>
 800f106:	4b8a      	ldr	r3, [pc, #552]	; (800f330 <tcp_process+0x2b0>)
 800f108:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f10c:	4989      	ldr	r1, [pc, #548]	; (800f334 <tcp_process+0x2b4>)
 800f10e:	488a      	ldr	r0, [pc, #552]	; (800f338 <tcp_process+0x2b8>)
 800f110:	f005 fa6e 	bl	80145f0 <iprintf>
      recv_flags |= TF_RESET;
 800f114:	4b89      	ldr	r3, [pc, #548]	; (800f33c <tcp_process+0x2bc>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f043 0308 	orr.w	r3, r3, #8
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	4b87      	ldr	r3, [pc, #540]	; (800f33c <tcp_process+0x2bc>)
 800f120:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7e9b      	ldrb	r3, [r3, #26]
 800f126:	f023 0301 	bic.w	r3, r3, #1
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800f130:	f06f 030d 	mvn.w	r3, #13
 800f134:	e34d      	b.n	800f7d2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	e34b      	b.n	800f7d2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f13a:	4b7a      	ldr	r3, [pc, #488]	; (800f324 <tcp_process+0x2a4>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	f003 0302 	and.w	r3, r3, #2
 800f142:	2b00      	cmp	r3, #0
 800f144:	d010      	beq.n	800f168 <tcp_process+0xe8>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	7d1b      	ldrb	r3, [r3, #20]
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d00c      	beq.n	800f168 <tcp_process+0xe8>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	7d1b      	ldrb	r3, [r3, #20]
 800f152:	2b03      	cmp	r3, #3
 800f154:	d008      	beq.n	800f168 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	7e9b      	ldrb	r3, [r3, #26]
 800f15a:	f043 0302 	orr.w	r3, r3, #2
 800f15e:	b2da      	uxtb	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800f164:	2300      	movs	r3, #0
 800f166:	e334      	b.n	800f7d2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7e9b      	ldrb	r3, [r3, #26]
 800f16c:	f003 0310 	and.w	r3, r3, #16
 800f170:	2b00      	cmp	r3, #0
 800f172:	d103      	bne.n	800f17c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f174:	4b72      	ldr	r3, [pc, #456]	; (800f340 <tcp_process+0x2c0>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f001 fbe1 	bl	801094c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	7d1b      	ldrb	r3, [r3, #20]
 800f18e:	3b02      	subs	r3, #2
 800f190:	2b07      	cmp	r3, #7
 800f192:	f200 830e 	bhi.w	800f7b2 <tcp_process+0x732>
 800f196:	a201      	add	r2, pc, #4	; (adr r2, 800f19c <tcp_process+0x11c>)
 800f198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19c:	0800f1bd 	.word	0x0800f1bd
 800f1a0:	0800f3b5 	.word	0x0800f3b5
 800f1a4:	0800f50d 	.word	0x0800f50d
 800f1a8:	0800f537 	.word	0x0800f537
 800f1ac:	0800f661 	.word	0x0800f661
 800f1b0:	0800f50d 	.word	0x0800f50d
 800f1b4:	0800f6ed 	.word	0x0800f6ed
 800f1b8:	0800f77d 	.word	0x0800f77d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f1bc:	4b59      	ldr	r3, [pc, #356]	; (800f324 <tcp_process+0x2a4>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f003 0310 	and.w	r3, r3, #16
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f000 80cb 	beq.w	800f360 <tcp_process+0x2e0>
 800f1ca:	4b56      	ldr	r3, [pc, #344]	; (800f324 <tcp_process+0x2a4>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	f003 0302 	and.w	r3, r3, #2
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 80c4 	beq.w	800f360 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1dc:	1c5a      	adds	r2, r3, #1
 800f1de:	4b52      	ldr	r3, [pc, #328]	; (800f328 <tcp_process+0x2a8>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	f040 80bc 	bne.w	800f360 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800f1e8:	4b50      	ldr	r3, [pc, #320]	; (800f32c <tcp_process+0x2ac>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800f1fa:	4b4b      	ldr	r3, [pc, #300]	; (800f328 <tcp_process+0x2a8>)
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800f202:	4b50      	ldr	r3, [pc, #320]	; (800f344 <tcp_process+0x2c4>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	89db      	ldrh	r3, [r3, #14]
 800f208:	b29a      	uxth	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f21c:	4b43      	ldr	r3, [pc, #268]	; (800f32c <tcp_process+0x2ac>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	1e5a      	subs	r2, r3, #1
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2204      	movs	r2, #4
 800f22a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3304      	adds	r3, #4
 800f234:	4619      	mov	r1, r3
 800f236:	4610      	mov	r0, r2
 800f238:	f7ff f960 	bl	800e4fc <tcp_eff_send_mss_impl>
 800f23c:	4603      	mov	r3, r0
 800f23e:	461a      	mov	r2, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f24e:	429a      	cmp	r2, r3
 800f250:	bf38      	it	cc
 800f252:	461a      	movcc	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	4293      	cmp	r3, r2
 800f25c:	bf28      	it	cs
 800f25e:	4613      	movcs	r3, r2
 800f260:	b29a      	uxth	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d106      	bne.n	800f280 <tcp_process+0x200>
 800f272:	4b2f      	ldr	r3, [pc, #188]	; (800f330 <tcp_process+0x2b0>)
 800f274:	f240 321a 	movw	r2, #794	; 0x31a
 800f278:	4933      	ldr	r1, [pc, #204]	; (800f348 <tcp_process+0x2c8>)
 800f27a:	482f      	ldr	r0, [pc, #188]	; (800f338 <tcp_process+0x2b8>)
 800f27c:	f005 f9b8 	bl	80145f0 <iprintf>
      --pcb->snd_queuelen;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f286:	3b01      	subs	r3, #1
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f294:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d111      	bne.n	800f2c0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2a0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d106      	bne.n	800f2b6 <tcp_process+0x236>
 800f2a8:	4b21      	ldr	r3, [pc, #132]	; (800f330 <tcp_process+0x2b0>)
 800f2aa:	f240 3222 	movw	r2, #802	; 0x322
 800f2ae:	4927      	ldr	r1, [pc, #156]	; (800f34c <tcp_process+0x2cc>)
 800f2b0:	4821      	ldr	r0, [pc, #132]	; (800f338 <tcp_process+0x2b8>)
 800f2b2:	f005 f99d 	bl	80145f0 <iprintf>
        pcb->unsent = rseg->next;
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	669a      	str	r2, [r3, #104]	; 0x68
 800f2be:	e003      	b.n	800f2c8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f2c8:	69f8      	ldr	r0, [r7, #28]
 800f2ca:	f7fe fdec 	bl	800dea6 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d104      	bne.n	800f2e0 <tcp_process+0x260>
        pcb->rtime = -1;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2dc:	861a      	strh	r2, [r3, #48]	; 0x30
 800f2de:	e006      	b.n	800f2ee <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00a      	beq.n	800f30e <tcp_process+0x28e>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	6910      	ldr	r0, [r2, #16]
 800f302:	2200      	movs	r2, #0
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	4798      	blx	r3
 800f308:	4603      	mov	r3, r0
 800f30a:	76bb      	strb	r3, [r7, #26]
 800f30c:	e001      	b.n	800f312 <tcp_process+0x292>
 800f30e:	2300      	movs	r3, #0
 800f310:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f312:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f316:	f113 0f0d 	cmn.w	r3, #13
 800f31a:	d119      	bne.n	800f350 <tcp_process+0x2d0>
        return ERR_ABRT;
 800f31c:	f06f 030c 	mvn.w	r3, #12
 800f320:	e257      	b.n	800f7d2 <tcp_process+0x752>
 800f322:	bf00      	nop
 800f324:	20003fb8 	.word	0x20003fb8
 800f328:	20003fb0 	.word	0x20003fb0
 800f32c:	20003fac 	.word	0x20003fac
 800f330:	080173e8 	.word	0x080173e8
 800f334:	080175a0 	.word	0x080175a0
 800f338:	0801742c 	.word	0x0801742c
 800f33c:	20003fb9 	.word	0x20003fb9
 800f340:	20007738 	.word	0x20007738
 800f344:	20003f9c 	.word	0x20003f9c
 800f348:	080175c0 	.word	0x080175c0
 800f34c:	080175d8 	.word	0x080175d8
      }
      tcp_ack_now(pcb);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	7e9b      	ldrb	r3, [r3, #26]
 800f354:	f043 0302 	orr.w	r3, r3, #2
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f35e:	e22a      	b.n	800f7b6 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f360:	4b9f      	ldr	r3, [pc, #636]	; (800f5e0 <tcp_process+0x560>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 0310 	and.w	r3, r3, #16
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 8224 	beq.w	800f7b6 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f36e:	4b9d      	ldr	r3, [pc, #628]	; (800f5e4 <tcp_process+0x564>)
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	4b9d      	ldr	r3, [pc, #628]	; (800f5e8 <tcp_process+0x568>)
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	4b9c      	ldr	r3, [pc, #624]	; (800f5ec <tcp_process+0x56c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f37e:	4b9c      	ldr	r3, [pc, #624]	; (800f5f0 <tcp_process+0x570>)
 800f380:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f382:	885b      	ldrh	r3, [r3, #2]
 800f384:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f386:	4a9a      	ldr	r2, [pc, #616]	; (800f5f0 <tcp_process+0x570>)
 800f388:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38a:	8812      	ldrh	r2, [r2, #0]
 800f38c:	b292      	uxth	r2, r2
 800f38e:	9201      	str	r2, [sp, #4]
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	4b98      	ldr	r3, [pc, #608]	; (800f5f4 <tcp_process+0x574>)
 800f394:	4a98      	ldr	r2, [pc, #608]	; (800f5f8 <tcp_process+0x578>)
 800f396:	f002 fca7 	bl	8011ce8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3a0:	2b05      	cmp	r3, #5
 800f3a2:	f200 8208 	bhi.w	800f7b6 <tcp_process+0x736>
        pcb->rtime = 0;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f002 fd11 	bl	8011dd4 <tcp_rexmit_rto>
    break;
 800f3b2:	e200      	b.n	800f7b6 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f3b4:	4b8a      	ldr	r3, [pc, #552]	; (800f5e0 <tcp_process+0x560>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 0310 	and.w	r3, r3, #16
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 8091 	beq.w	800f4e4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f3c2:	4b88      	ldr	r3, [pc, #544]	; (800f5e4 <tcp_process+0x564>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	db71      	blt.n	800f4b6 <tcp_process+0x436>
 800f3d2:	4b84      	ldr	r3, [pc, #528]	; (800f5e4 <tcp_process+0x564>)
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dc6a      	bgt.n	800f4b6 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2204      	movs	r2, #4
 800f3e4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d00b      	beq.n	800f406 <tcp_process+0x386>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <tcp_process+0x386>
 800f3f8:	4b80      	ldr	r3, [pc, #512]	; (800f5fc <tcp_process+0x57c>)
 800f3fa:	f240 3251 	movw	r2, #849	; 0x351
 800f3fe:	4980      	ldr	r1, [pc, #512]	; (800f600 <tcp_process+0x580>)
 800f400:	4880      	ldr	r0, [pc, #512]	; (800f604 <tcp_process+0x584>)
 800f402:	f005 f8f5 	bl	80145f0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d102      	bne.n	800f414 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f40e:	23fa      	movs	r3, #250	; 0xfa
 800f410:	76bb      	strb	r3, [r7, #26]
 800f412:	e011      	b.n	800f438 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00a      	beq.n	800f434 <tcp_process+0x3b4>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	6910      	ldr	r0, [r2, #16]
 800f428:	2200      	movs	r2, #0
 800f42a:	6879      	ldr	r1, [r7, #4]
 800f42c:	4798      	blx	r3
 800f42e:	4603      	mov	r3, r0
 800f430:	76bb      	strb	r3, [r7, #26]
 800f432:	e001      	b.n	800f438 <tcp_process+0x3b8>
 800f434:	23f0      	movs	r3, #240	; 0xf0
 800f436:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f438:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00a      	beq.n	800f456 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f440:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f444:	f113 0f0d 	cmn.w	r3, #13
 800f448:	d002      	beq.n	800f450 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7fd ff9c 	bl	800d388 <tcp_abort>
          }
          return ERR_ABRT;
 800f450:	f06f 030c 	mvn.w	r3, #12
 800f454:	e1bd      	b.n	800f7d2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fa42 	bl	800f8e0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f45c:	4b6a      	ldr	r3, [pc, #424]	; (800f608 <tcp_process+0x588>)
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <tcp_process+0x3f0>
          recv_acked--;
 800f464:	4b68      	ldr	r3, [pc, #416]	; (800f608 <tcp_process+0x588>)
 800f466:	881b      	ldrh	r3, [r3, #0]
 800f468:	3b01      	subs	r3, #1
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	4b66      	ldr	r3, [pc, #408]	; (800f608 <tcp_process+0x588>)
 800f46e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	f241 121c 	movw	r2, #4380	; 0x111c
 800f47a:	429a      	cmp	r2, r3
 800f47c:	bf38      	it	cc
 800f47e:	461a      	movcc	r2, r3
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4293      	cmp	r3, r2
 800f488:	bf28      	it	cs
 800f48a:	4613      	movcs	r3, r2
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f494:	4b5d      	ldr	r3, [pc, #372]	; (800f60c <tcp_process+0x58c>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	f003 0320 	and.w	r3, r3, #32
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d034      	beq.n	800f50a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	7e9b      	ldrb	r3, [r3, #26]
 800f4a4:	f043 0302 	orr.w	r3, r3, #2
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2207      	movs	r2, #7
 800f4b2:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f4b4:	e029      	b.n	800f50a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4b6:	4b4b      	ldr	r3, [pc, #300]	; (800f5e4 <tcp_process+0x564>)
 800f4b8:	6818      	ldr	r0, [r3, #0]
 800f4ba:	4b4b      	ldr	r3, [pc, #300]	; (800f5e8 <tcp_process+0x568>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4b4a      	ldr	r3, [pc, #296]	; (800f5ec <tcp_process+0x56c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4c6:	4b4a      	ldr	r3, [pc, #296]	; (800f5f0 <tcp_process+0x570>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ca:	885b      	ldrh	r3, [r3, #2]
 800f4cc:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4ce:	4a48      	ldr	r2, [pc, #288]	; (800f5f0 <tcp_process+0x570>)
 800f4d0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4d2:	8812      	ldrh	r2, [r2, #0]
 800f4d4:	b292      	uxth	r2, r2
 800f4d6:	9201      	str	r2, [sp, #4]
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	4b46      	ldr	r3, [pc, #280]	; (800f5f4 <tcp_process+0x574>)
 800f4dc:	4a46      	ldr	r2, [pc, #280]	; (800f5f8 <tcp_process+0x578>)
 800f4de:	f002 fc03 	bl	8011ce8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f4e2:	e16a      	b.n	800f7ba <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f4e4:	4b3e      	ldr	r3, [pc, #248]	; (800f5e0 <tcp_process+0x560>)
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f003 0302 	and.w	r3, r3, #2
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	f000 8164 	beq.w	800f7ba <tcp_process+0x73a>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	1e5a      	subs	r2, r3, #1
 800f4f8:	4b3c      	ldr	r3, [pc, #240]	; (800f5ec <tcp_process+0x56c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	f040 815c 	bne.w	800f7ba <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f002 fc9c 	bl	8011e40 <tcp_rexmit>
    break;
 800f508:	e157      	b.n	800f7ba <tcp_process+0x73a>
 800f50a:	e156      	b.n	800f7ba <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f9e7 	bl	800f8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f512:	4b3e      	ldr	r3, [pc, #248]	; (800f60c <tcp_process+0x58c>)
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	f003 0320 	and.w	r3, r3, #32
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 814f 	beq.w	800f7be <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	7e9b      	ldrb	r3, [r3, #26]
 800f524:	f043 0302 	orr.w	r3, r3, #2
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2207      	movs	r2, #7
 800f532:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f534:	e143      	b.n	800f7be <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f9d2 	bl	800f8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f53c:	4b33      	ldr	r3, [pc, #204]	; (800f60c <tcp_process+0x58c>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	f003 0320 	and.w	r3, r3, #32
 800f544:	2b00      	cmp	r3, #0
 800f546:	d074      	beq.n	800f632 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f548:	4b25      	ldr	r3, [pc, #148]	; (800f5e0 <tcp_process+0x560>)
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	f003 0310 	and.w	r3, r3, #16
 800f550:	2b00      	cmp	r3, #0
 800f552:	d063      	beq.n	800f61c <tcp_process+0x59c>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f558:	4b22      	ldr	r3, [pc, #136]	; (800f5e4 <tcp_process+0x564>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d15d      	bne.n	800f61c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f564:	2b00      	cmp	r3, #0
 800f566:	d159      	bne.n	800f61c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	7e9b      	ldrb	r3, [r3, #26]
 800f56c:	f043 0302 	orr.w	r3, r3, #2
 800f570:	b2da      	uxtb	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7fe feea 	bl	800e350 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f57c:	4b24      	ldr	r3, [pc, #144]	; (800f610 <tcp_process+0x590>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	429a      	cmp	r2, r3
 800f584:	d105      	bne.n	800f592 <tcp_process+0x512>
 800f586:	4b22      	ldr	r3, [pc, #136]	; (800f610 <tcp_process+0x590>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	4a20      	ldr	r2, [pc, #128]	; (800f610 <tcp_process+0x590>)
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	e013      	b.n	800f5ba <tcp_process+0x53a>
 800f592:	4b1f      	ldr	r3, [pc, #124]	; (800f610 <tcp_process+0x590>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	617b      	str	r3, [r7, #20]
 800f598:	e00c      	b.n	800f5b4 <tcp_process+0x534>
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	68da      	ldr	r2, [r3, #12]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d104      	bne.n	800f5ae <tcp_process+0x52e>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	68da      	ldr	r2, [r3, #12]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	60da      	str	r2, [r3, #12]
 800f5ac:	e005      	b.n	800f5ba <tcp_process+0x53a>
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1ef      	bne.n	800f59a <tcp_process+0x51a>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	60da      	str	r2, [r3, #12]
 800f5c0:	4b14      	ldr	r3, [pc, #80]	; (800f614 <tcp_process+0x594>)
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	220a      	movs	r2, #10
 800f5ca:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f5cc:	4b12      	ldr	r3, [pc, #72]	; (800f618 <tcp_process+0x598>)
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	60da      	str	r2, [r3, #12]
 800f5d4:	4a10      	ldr	r2, [pc, #64]	; (800f618 <tcp_process+0x598>)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6013      	str	r3, [r2, #0]
 800f5da:	f002 fdd5 	bl	8012188 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f5de:	e0f0      	b.n	800f7c2 <tcp_process+0x742>
 800f5e0:	20003fb8 	.word	0x20003fb8
 800f5e4:	20003fb0 	.word	0x20003fb0
 800f5e8:	20003fb6 	.word	0x20003fb6
 800f5ec:	20003fac 	.word	0x20003fac
 800f5f0:	20003f9c 	.word	0x20003f9c
 800f5f4:	20004034 	.word	0x20004034
 800f5f8:	20004038 	.word	0x20004038
 800f5fc:	080173e8 	.word	0x080173e8
 800f600:	080175ec 	.word	0x080175ec
 800f604:	0801742c 	.word	0x0801742c
 800f608:	20003fb4 	.word	0x20003fb4
 800f60c:	20003fb9 	.word	0x20003fb9
 800f610:	20007734 	.word	0x20007734
 800f614:	20007730 	.word	0x20007730
 800f618:	20007744 	.word	0x20007744
        tcp_ack_now(pcb);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7e9b      	ldrb	r3, [r3, #26]
 800f620:	f043 0302 	orr.w	r3, r3, #2
 800f624:	b2da      	uxtb	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2208      	movs	r2, #8
 800f62e:	751a      	strb	r2, [r3, #20]
    break;
 800f630:	e0c7      	b.n	800f7c2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f632:	4b6a      	ldr	r3, [pc, #424]	; (800f7dc <tcp_process+0x75c>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	f003 0310 	and.w	r3, r3, #16
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 80c1 	beq.w	800f7c2 <tcp_process+0x742>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f644:	4b66      	ldr	r3, [pc, #408]	; (800f7e0 <tcp_process+0x760>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	f040 80ba 	bne.w	800f7c2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f652:	2b00      	cmp	r3, #0
 800f654:	f040 80b5 	bne.w	800f7c2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2206      	movs	r2, #6
 800f65c:	751a      	strb	r2, [r3, #20]
    break;
 800f65e:	e0b0      	b.n	800f7c2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 f93d 	bl	800f8e0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f666:	4b5f      	ldr	r3, [pc, #380]	; (800f7e4 <tcp_process+0x764>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	f003 0320 	and.w	r3, r3, #32
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 80a9 	beq.w	800f7c6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	7e9b      	ldrb	r3, [r3, #26]
 800f678:	f043 0302 	orr.w	r3, r3, #2
 800f67c:	b2da      	uxtb	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fe fe64 	bl	800e350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f688:	4b57      	ldr	r3, [pc, #348]	; (800f7e8 <tcp_process+0x768>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d105      	bne.n	800f69e <tcp_process+0x61e>
 800f692:	4b55      	ldr	r3, [pc, #340]	; (800f7e8 <tcp_process+0x768>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	4a53      	ldr	r2, [pc, #332]	; (800f7e8 <tcp_process+0x768>)
 800f69a:	6013      	str	r3, [r2, #0]
 800f69c:	e013      	b.n	800f6c6 <tcp_process+0x646>
 800f69e:	4b52      	ldr	r3, [pc, #328]	; (800f7e8 <tcp_process+0x768>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	613b      	str	r3, [r7, #16]
 800f6a4:	e00c      	b.n	800f6c0 <tcp_process+0x640>
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	68da      	ldr	r2, [r3, #12]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d104      	bne.n	800f6ba <tcp_process+0x63a>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	68da      	ldr	r2, [r3, #12]
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	60da      	str	r2, [r3, #12]
 800f6b8:	e005      	b.n	800f6c6 <tcp_process+0x646>
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	613b      	str	r3, [r7, #16]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1ef      	bne.n	800f6a6 <tcp_process+0x626>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	60da      	str	r2, [r3, #12]
 800f6cc:	4b47      	ldr	r3, [pc, #284]	; (800f7ec <tcp_process+0x76c>)
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	220a      	movs	r2, #10
 800f6d6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f6d8:	4b45      	ldr	r3, [pc, #276]	; (800f7f0 <tcp_process+0x770>)
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	60da      	str	r2, [r3, #12]
 800f6e0:	4a43      	ldr	r2, [pc, #268]	; (800f7f0 <tcp_process+0x770>)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6013      	str	r3, [r2, #0]
 800f6e6:	f002 fd4f 	bl	8012188 <tcp_timer_needed>
    }
    break;
 800f6ea:	e06c      	b.n	800f7c6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f8f7 	bl	800f8e0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6f2:	4b3a      	ldr	r3, [pc, #232]	; (800f7dc <tcp_process+0x75c>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	f003 0310 	and.w	r3, r3, #16
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d065      	beq.n	800f7ca <tcp_process+0x74a>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f702:	4b37      	ldr	r3, [pc, #220]	; (800f7e0 <tcp_process+0x760>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	429a      	cmp	r2, r3
 800f708:	d15f      	bne.n	800f7ca <tcp_process+0x74a>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d15b      	bne.n	800f7ca <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7fe fe1c 	bl	800e350 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f718:	4b33      	ldr	r3, [pc, #204]	; (800f7e8 <tcp_process+0x768>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d105      	bne.n	800f72e <tcp_process+0x6ae>
 800f722:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <tcp_process+0x768>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	4a2f      	ldr	r2, [pc, #188]	; (800f7e8 <tcp_process+0x768>)
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	e013      	b.n	800f756 <tcp_process+0x6d6>
 800f72e:	4b2e      	ldr	r3, [pc, #184]	; (800f7e8 <tcp_process+0x768>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	60fb      	str	r3, [r7, #12]
 800f734:	e00c      	b.n	800f750 <tcp_process+0x6d0>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	68da      	ldr	r2, [r3, #12]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d104      	bne.n	800f74a <tcp_process+0x6ca>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68da      	ldr	r2, [r3, #12]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	60da      	str	r2, [r3, #12]
 800f748:	e005      	b.n	800f756 <tcp_process+0x6d6>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1ef      	bne.n	800f736 <tcp_process+0x6b6>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	60da      	str	r2, [r3, #12]
 800f75c:	4b23      	ldr	r3, [pc, #140]	; (800f7ec <tcp_process+0x76c>)
 800f75e:	2201      	movs	r2, #1
 800f760:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	220a      	movs	r2, #10
 800f766:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f768:	4b21      	ldr	r3, [pc, #132]	; (800f7f0 <tcp_process+0x770>)
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	60da      	str	r2, [r3, #12]
 800f770:	4a1f      	ldr	r2, [pc, #124]	; (800f7f0 <tcp_process+0x770>)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6013      	str	r3, [r2, #0]
 800f776:	f002 fd07 	bl	8012188 <tcp_timer_needed>
    }
    break;
 800f77a:	e026      	b.n	800f7ca <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f8af 	bl	800f8e0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f782:	4b16      	ldr	r3, [pc, #88]	; (800f7dc <tcp_process+0x75c>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 0310 	and.w	r3, r3, #16
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d01f      	beq.n	800f7ce <tcp_process+0x74e>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f792:	4b13      	ldr	r3, [pc, #76]	; (800f7e0 <tcp_process+0x760>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	429a      	cmp	r2, r3
 800f798:	d119      	bne.n	800f7ce <tcp_process+0x74e>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d115      	bne.n	800f7ce <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f7a2:	4b10      	ldr	r3, [pc, #64]	; (800f7e4 <tcp_process+0x764>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	f043 0310 	orr.w	r3, r3, #16
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <tcp_process+0x764>)
 800f7ae:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f7b0:	e00d      	b.n	800f7ce <tcp_process+0x74e>
  default:
    break;
 800f7b2:	bf00      	nop
 800f7b4:	e00c      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7b6:	bf00      	nop
 800f7b8:	e00a      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7ba:	bf00      	nop
 800f7bc:	e008      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7be:	bf00      	nop
 800f7c0:	e006      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7c2:	bf00      	nop
 800f7c4:	e004      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7c6:	bf00      	nop
 800f7c8:	e002      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7ca:	bf00      	nop
 800f7cc:	e000      	b.n	800f7d0 <tcp_process+0x750>
    break;
 800f7ce:	bf00      	nop
  }
  return ERR_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3720      	adds	r7, #32
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20003fb8 	.word	0x20003fb8
 800f7e0:	20003fb0 	.word	0x20003fb0
 800f7e4:	20003fb9 	.word	0x20003fb9
 800f7e8:	20007734 	.word	0x20007734
 800f7ec:	20007730 	.word	0x20007730
 800f7f0:	20007744 	.word	0x20007744

0800f7f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f7f4:	b5b0      	push	{r4, r5, r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	899b      	ldrh	r3, [r3, #12]
 800f804:	b29b      	uxth	r3, r3
 800f806:	4618      	mov	r0, r3
 800f808:	f7f9 fc56 	bl	80090b8 <lwip_htons>
 800f80c:	4603      	mov	r3, r0
 800f80e:	f003 0301 	and.w	r3, r3, #1
 800f812:	2b00      	cmp	r3, #0
 800f814:	d026      	beq.n	800f864 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f816:	6838      	ldr	r0, [r7, #0]
 800f818:	f7fe fb31 	bl	800de7e <tcp_segs_free>
    next = NULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	603b      	str	r3, [r7, #0]
 800f820:	e054      	b.n	800f8cc <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	899b      	ldrh	r3, [r3, #12]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7f9 fc44 	bl	80090b8 <lwip_htons>
 800f830:	4603      	mov	r3, r0
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00c      	beq.n	800f854 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68dc      	ldr	r4, [r3, #12]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	899b      	ldrh	r3, [r3, #12]
 800f844:	b29d      	uxth	r5, r3
 800f846:	2001      	movs	r0, #1
 800f848:	f7f9 fc36 	bl	80090b8 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	432b      	orrs	r3, r5
 800f850:	b29b      	uxth	r3, r3
 800f852:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7fe fb21 	bl	800dea6 <tcp_seg_free>
    while (next &&
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00e      	beq.n	800f888 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	891b      	ldrh	r3, [r3, #8]
 800f86e:	461a      	mov	r2, r3
 800f870:	4b1a      	ldr	r3, [pc, #104]	; (800f8dc <tcp_oos_insert_segment+0xe8>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	441a      	add	r2, r3
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	8909      	ldrh	r1, [r1, #8]
 800f880:	440b      	add	r3, r1
 800f882:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f884:	2b00      	cmp	r3, #0
 800f886:	dacc      	bge.n	800f822 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d01e      	beq.n	800f8cc <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	891b      	ldrh	r3, [r3, #8]
 800f892:	461a      	mov	r2, r3
 800f894:	4b11      	ldr	r3, [pc, #68]	; (800f8dc <tcp_oos_insert_segment+0xe8>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	441a      	add	r2, r3
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dd12      	ble.n	800f8cc <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <tcp_oos_insert_segment+0xe8>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685a      	ldr	r2, [r3, #4]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	891b      	ldrh	r3, [r3, #8]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	f7fc fe94 	bl	800c5f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	601a      	str	r2, [r3, #0]
}
 800f8d2:	bf00      	nop
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20003fac 	.word	0x20003fac

0800f8e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	b08d      	sub	sp, #52	; 0x34
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d806      	bhi.n	800f902 <tcp_receive+0x22>
 800f8f4:	4b9a      	ldr	r3, [pc, #616]	; (800fb60 <tcp_receive+0x280>)
 800f8f6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f8fa:	499a      	ldr	r1, [pc, #616]	; (800fb64 <tcp_receive+0x284>)
 800f8fc:	489a      	ldr	r0, [pc, #616]	; (800fb68 <tcp_receive+0x288>)
 800f8fe:	f004 fe77 	bl	80145f0 <iprintf>

  if (flags & TCP_ACK) {
 800f902:	4b9a      	ldr	r3, [pc, #616]	; (800fb6c <tcp_receive+0x28c>)
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 0310 	and.w	r3, r3, #16
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f000 82c5 	beq.w	800fe9a <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f916:	461a      	mov	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f91c:	4413      	add	r3, r2
 800f91e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f924:	4b92      	ldr	r3, [pc, #584]	; (800fb70 <tcp_receive+0x290>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	db1b      	blt.n	800f966 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f932:	4b8f      	ldr	r3, [pc, #572]	; (800fb70 <tcp_receive+0x290>)
 800f934:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f936:	429a      	cmp	r2, r3
 800f938:	d106      	bne.n	800f948 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f93e:	4b8d      	ldr	r3, [pc, #564]	; (800fb74 <tcp_receive+0x294>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	db0e      	blt.n	800f966 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f94c:	4b89      	ldr	r3, [pc, #548]	; (800fb74 <tcp_receive+0x294>)
 800f94e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f950:	429a      	cmp	r2, r3
 800f952:	d141      	bne.n	800f9d8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f954:	4b88      	ldr	r3, [pc, #544]	; (800fb78 <tcp_receive+0x298>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	89db      	ldrh	r3, [r3, #14]
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f962:	429a      	cmp	r2, r3
 800f964:	d938      	bls.n	800f9d8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f966:	4b84      	ldr	r3, [pc, #528]	; (800fb78 <tcp_receive+0x298>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	89db      	ldrh	r3, [r3, #14]
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f980:	429a      	cmp	r2, r3
 800f982:	d205      	bcs.n	800f990 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f990:	4b77      	ldr	r3, [pc, #476]	; (800fb70 <tcp_receive+0x290>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f998:	4b76      	ldr	r3, [pc, #472]	; (800fb74 <tcp_receive+0x294>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d10d      	bne.n	800f9c6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d111      	bne.n	800f9d8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f9c4:	e008      	b.n	800f9d8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d003      	beq.n	800f9d8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f9d8:	4b66      	ldr	r3, [pc, #408]	; (800fb74 <tcp_receive+0x294>)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	dc58      	bgt.n	800fa98 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 800f9e6:	4b65      	ldr	r3, [pc, #404]	; (800fb7c <tcp_receive+0x29c>)
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d14b      	bne.n	800fa86 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f9f8:	441a      	add	r2, r3
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d142      	bne.n	800fa86 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	db3d      	blt.n	800fa86 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa0e:	4b59      	ldr	r3, [pc, #356]	; (800fb74 <tcp_receive+0x294>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d137      	bne.n	800fa86 <tcp_receive+0x1a6>
              found_dupack = 1;
 800fa16:	2301      	movs	r3, #1
 800fa18:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa20:	3301      	adds	r3, #1
 800fa22:	b2da      	uxtb	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d907      	bls.n	800fa3e <tcp_receive+0x15e>
                ++pcb->dupacks;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa34:	3301      	adds	r3, #1
 800fa36:	b2da      	uxtb	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa44:	2b03      	cmp	r3, #3
 800fa46:	d916      	bls.n	800fa76 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa52:	4413      	add	r3, r2
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d912      	bls.n	800fa86 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa6a:	4413      	add	r3, r2
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa74:	e007      	b.n	800fa86 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d102      	bne.n	800fa86 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f002 fa2d 	bl	8011ee0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f040 8169 	bne.w	800fd60 <tcp_receive+0x480>
        pcb->dupacks = 0;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa96:	e163      	b.n	800fd60 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fa98:	4b36      	ldr	r3, [pc, #216]	; (800fb74 <tcp_receive+0x294>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	3b01      	subs	r3, #1
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f2c0 8107 	blt.w	800fcb8 <tcp_receive+0x3d8>
 800faaa:	4b32      	ldr	r3, [pc, #200]	; (800fb74 <tcp_receive+0x294>)
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fab2:	1ad3      	subs	r3, r2, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f300 80ff 	bgt.w	800fcb8 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	7e9b      	ldrb	r3, [r3, #26]
 800fabe:	f003 0304 	and.w	r3, r3, #4
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00c      	beq.n	800fae0 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	7e9b      	ldrb	r3, [r3, #26]
 800faca:	f023 0304 	bic.w	r3, r3, #4
 800face:	b2da      	uxtb	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2200      	movs	r2, #0
 800fae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800faee:	10db      	asrs	r3, r3, #3
 800faf0:	b21b      	sxth	r3, r3
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	4413      	add	r3, r2
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	b21a      	sxth	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb10:	4b18      	ldr	r3, [pc, #96]	; (800fb74 <tcp_receive+0x294>)
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	2b03      	cmp	r3, #3
 800fb1e:	f240 8094 	bls.w	800fc4a <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d226      	bcs.n	800fb80 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb3c:	4413      	add	r3, r2
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d97f      	bls.n	800fc4a <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb54:	4413      	add	r3, r2
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb5e:	e074      	b.n	800fc4a <tcp_receive+0x36a>
 800fb60:	080173e8 	.word	0x080173e8
 800fb64:	0801760c 	.word	0x0801760c
 800fb68:	0801742c 	.word	0x0801742c
 800fb6c:	20003fb8 	.word	0x20003fb8
 800fb70:	20003fac 	.word	0x20003fac
 800fb74:	20003fb0 	.word	0x20003fb0
 800fb78:	20003f9c 	.word	0x20003f9c
 800fb7c:	20003fb6 	.word	0x20003fb6
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb90:	fb03 f301 	mul.w	r3, r3, r1
 800fb94:	6879      	ldr	r1, [r7, #4]
 800fb96:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800fb9a:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	4413      	add	r3, r2
 800fba2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbaa:	8a7a      	ldrh	r2, [r7, #18]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d94c      	bls.n	800fc4a <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	8a7a      	ldrh	r2, [r7, #18]
 800fbb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800fbb8:	e047      	b.n	800fc4a <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fc ff1b 	bl	800ca10 <pbuf_clen>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	429c      	cmp	r4, r3
 800fbde:	d206      	bcs.n	800fbee <tcp_receive+0x30e>
 800fbe0:	4b70      	ldr	r3, [pc, #448]	; (800fda4 <tcp_receive+0x4c4>)
 800fbe2:	f240 429e 	movw	r2, #1182	; 0x49e
 800fbe6:	4970      	ldr	r1, [pc, #448]	; (800fda8 <tcp_receive+0x4c8>)
 800fbe8:	4870      	ldr	r0, [pc, #448]	; (800fdac <tcp_receive+0x4cc>)
 800fbea:	f004 fd01 	bl	80145f0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fc ff0c 	bl	800ca10 <pbuf_clen>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc02:	1a9b      	subs	r3, r3, r2
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800fc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0e:	891a      	ldrh	r2, [r3, #8]
 800fc10:	4b67      	ldr	r3, [pc, #412]	; (800fdb0 <tcp_receive+0x4d0>)
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	4413      	add	r3, r2
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	4b65      	ldr	r3, [pc, #404]	; (800fdb0 <tcp_receive+0x4d0>)
 800fc1a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800fc1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc1e:	f7fe f942 	bl	800dea6 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00e      	beq.n	800fc4a <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10a      	bne.n	800fc4a <tcp_receive+0x36a>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d106      	bne.n	800fc4a <tcp_receive+0x36a>
 800fc3c:	4b59      	ldr	r3, [pc, #356]	; (800fda4 <tcp_receive+0x4c4>)
 800fc3e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800fc42:	495c      	ldr	r1, [pc, #368]	; (800fdb4 <tcp_receive+0x4d4>)
 800fc44:	4859      	ldr	r0, [pc, #356]	; (800fdac <tcp_receive+0x4cc>)
 800fc46:	f004 fcd3 	bl	80145f0 <iprintf>
      while (pcb->unacked != NULL &&
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d022      	beq.n	800fc98 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f9 fa3a 	bl	80090d4 <lwip_htonl>
 800fc60:	4604      	mov	r4, r0
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc66:	891b      	ldrh	r3, [r3, #8]
 800fc68:	461d      	mov	r5, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	899b      	ldrh	r3, [r3, #12]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7f9 fa1f 	bl	80090b8 <lwip_htons>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	f003 0303 	and.w	r3, r3, #3
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d001      	beq.n	800fc88 <tcp_receive+0x3a8>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e000      	b.n	800fc8a <tcp_receive+0x3aa>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	442b      	add	r3, r5
 800fc8c:	18e2      	adds	r2, r4, r3
 800fc8e:	4b4a      	ldr	r3, [pc, #296]	; (800fdb8 <tcp_receive+0x4d8>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	dd90      	ble.n	800fbba <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d104      	bne.n	800fcaa <tcp_receive+0x3ca>
        pcb->rtime = -1;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fca6:	861a      	strh	r2, [r3, #48]	; 0x30
 800fca8:	e002      	b.n	800fcb0 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	76da      	strb	r2, [r3, #27]
 800fcb6:	e002      	b.n	800fcbe <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f001 fd31 	bl	8011720 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800fcbe:	e04f      	b.n	800fd60 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fc fe90 	bl	800ca10 <pbuf_clen>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	429c      	cmp	r4, r3
 800fcf4:	d206      	bcs.n	800fd04 <tcp_receive+0x424>
 800fcf6:	4b2b      	ldr	r3, [pc, #172]	; (800fda4 <tcp_receive+0x4c4>)
 800fcf8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fcfc:	492a      	ldr	r1, [pc, #168]	; (800fda8 <tcp_receive+0x4c8>)
 800fcfe:	482b      	ldr	r0, [pc, #172]	; (800fdac <tcp_receive+0x4cc>)
 800fd00:	f004 fc76 	bl	80145f0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fc fe81 	bl	800ca10 <pbuf_clen>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	461a      	mov	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd18:	1a9b      	subs	r3, r3, r2
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd24:	891a      	ldrh	r2, [r3, #8]
 800fd26:	4b22      	ldr	r3, [pc, #136]	; (800fdb0 <tcp_receive+0x4d0>)
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	4b20      	ldr	r3, [pc, #128]	; (800fdb0 <tcp_receive+0x4d0>)
 800fd30:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fd32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd34:	f7fe f8b7 	bl	800dea6 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00e      	beq.n	800fd60 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10a      	bne.n	800fd60 <tcp_receive+0x480>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d106      	bne.n	800fd60 <tcp_receive+0x480>
 800fd52:	4b14      	ldr	r3, [pc, #80]	; (800fda4 <tcp_receive+0x4c4>)
 800fd54:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fd58:	4916      	ldr	r1, [pc, #88]	; (800fdb4 <tcp_receive+0x4d4>)
 800fd5a:	4814      	ldr	r0, [pc, #80]	; (800fdac <tcp_receive+0x4cc>)
 800fd5c:	f004 fc48 	bl	80145f0 <iprintf>
    while (pcb->unsent != NULL &&
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d037      	beq.n	800fdd8 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fd68:	4b13      	ldr	r3, [pc, #76]	; (800fdb8 <tcp_receive+0x4d8>)
 800fd6a:	681c      	ldr	r4, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f9 f9ad 	bl	80090d4 <lwip_htonl>
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd80:	891b      	ldrh	r3, [r3, #8]
 800fd82:	461e      	mov	r6, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	899b      	ldrh	r3, [r3, #12]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7f9 f992 	bl	80090b8 <lwip_htons>
 800fd94:	4603      	mov	r3, r0
 800fd96:	f003 0303 	and.w	r3, r3, #3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00e      	beq.n	800fdbc <tcp_receive+0x4dc>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e00d      	b.n	800fdbe <tcp_receive+0x4de>
 800fda2:	bf00      	nop
 800fda4:	080173e8 	.word	0x080173e8
 800fda8:	08017628 	.word	0x08017628
 800fdac:	0801742c 	.word	0x0801742c
 800fdb0:	20003fb4 	.word	0x20003fb4
 800fdb4:	08017650 	.word	0x08017650
 800fdb8:	20003fb0 	.word	0x20003fb0
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	4433      	add	r3, r6
 800fdc0:	442b      	add	r3, r5
 800fdc2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	db07      	blt.n	800fdd8 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fdc8:	4b8d      	ldr	r3, [pc, #564]	; (8010000 <tcp_receive+0x720>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f77f af74 	ble.w	800fcc0 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdde:	4b89      	ldr	r3, [pc, #548]	; (8010004 <tcp_receive+0x724>)
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	4413      	add	r3, r2
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d052      	beq.n	800fe9a <tcp_receive+0x5ba>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdf8:	4b81      	ldr	r3, [pc, #516]	; (8010000 <tcp_receive+0x720>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	da4b      	bge.n	800fe9a <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fe02:	4b81      	ldr	r3, [pc, #516]	; (8010008 <tcp_receive+0x728>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fe14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe1c:	10db      	asrs	r3, r3, #3
 800fe1e:	b21b      	sxth	r3, r3
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe32:	4413      	add	r3, r2
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	b21a      	sxth	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fe3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	da03      	bge.n	800fe4c <tcp_receive+0x56c>
        m = -m;
 800fe44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe46:	425b      	negs	r3, r3
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fe4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe54:	109b      	asrs	r3, r3, #2
 800fe56:	b21b      	sxth	r3, r3
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe6a:	4413      	add	r3, r2
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	b21a      	sxth	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe7a:	10db      	asrs	r3, r3, #3
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4413      	add	r3, r2
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	b21a      	sxth	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe9a:	4b5c      	ldr	r3, [pc, #368]	; (801000c <tcp_receive+0x72c>)
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 84ee 	beq.w	8010880 <tcp_receive+0xfa0>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	7d1b      	ldrb	r3, [r3, #20]
 800fea8:	2b06      	cmp	r3, #6
 800feaa:	f200 84e9 	bhi.w	8010880 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feb2:	4b57      	ldr	r3, [pc, #348]	; (8010010 <tcp_receive+0x730>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	1ad3      	subs	r3, r2, r3
 800feb8:	3b01      	subs	r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	f2c0 80b8 	blt.w	8010030 <tcp_receive+0x750>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fec4:	4b51      	ldr	r3, [pc, #324]	; (801000c <tcp_receive+0x72c>)
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	4619      	mov	r1, r3
 800feca:	4b51      	ldr	r3, [pc, #324]	; (8010010 <tcp_receive+0x730>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	440b      	add	r3, r1
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	3301      	adds	r3, #1
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f300 80ab 	bgt.w	8010030 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800feda:	4b4e      	ldr	r3, [pc, #312]	; (8010014 <tcp_receive+0x734>)
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fee4:	4b4a      	ldr	r3, [pc, #296]	; (8010010 <tcp_receive+0x730>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800feec:	4b49      	ldr	r3, [pc, #292]	; (8010014 <tcp_receive+0x734>)
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d106      	bne.n	800ff02 <tcp_receive+0x622>
 800fef4:	4b48      	ldr	r3, [pc, #288]	; (8010018 <tcp_receive+0x738>)
 800fef6:	f240 523c 	movw	r2, #1340	; 0x53c
 800fefa:	4948      	ldr	r1, [pc, #288]	; (801001c <tcp_receive+0x73c>)
 800fefc:	4848      	ldr	r0, [pc, #288]	; (8010020 <tcp_receive+0x740>)
 800fefe:	f004 fb77 	bl	80145f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	dd06      	ble.n	800ff1a <tcp_receive+0x63a>
 800ff0c:	4b42      	ldr	r3, [pc, #264]	; (8010018 <tcp_receive+0x738>)
 800ff0e:	f240 523d 	movw	r2, #1341	; 0x53d
 800ff12:	4944      	ldr	r1, [pc, #272]	; (8010024 <tcp_receive+0x744>)
 800ff14:	4842      	ldr	r0, [pc, #264]	; (8010020 <tcp_receive+0x740>)
 800ff16:	f004 fb6b 	bl	80145f0 <iprintf>
      if (inseg.p->len < off) {
 800ff1a:	4b3e      	ldr	r3, [pc, #248]	; (8010014 <tcp_receive+0x734>)
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	895b      	ldrh	r3, [r3, #10]
 800ff20:	461a      	mov	r2, r3
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	429a      	cmp	r2, r3
 800ff26:	da3e      	bge.n	800ffa6 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ff28:	4b3a      	ldr	r3, [pc, #232]	; (8010014 <tcp_receive+0x734>)
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	891b      	ldrh	r3, [r3, #8]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	429a      	cmp	r2, r3
 800ff34:	da06      	bge.n	800ff44 <tcp_receive+0x664>
 800ff36:	4b38      	ldr	r3, [pc, #224]	; (8010018 <tcp_receive+0x738>)
 800ff38:	f240 523f 	movw	r2, #1343	; 0x53f
 800ff3c:	493a      	ldr	r1, [pc, #232]	; (8010028 <tcp_receive+0x748>)
 800ff3e:	4838      	ldr	r0, [pc, #224]	; (8010020 <tcp_receive+0x740>)
 800ff40:	f004 fb56 	bl	80145f0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff44:	4b33      	ldr	r3, [pc, #204]	; (8010014 <tcp_receive+0x734>)
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	891a      	ldrh	r2, [r3, #8]
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800ff52:	e00e      	b.n	800ff72 <tcp_receive+0x692>
          off -= p->len;
 800ff54:	69bb      	ldr	r3, [r7, #24]
 800ff56:	895b      	ldrh	r3, [r3, #10]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	1a9b      	subs	r3, r3, r2
 800ff5e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	8a3a      	ldrh	r2, [r7, #16]
 800ff64:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	895b      	ldrh	r3, [r3, #10]
 800ff76:	461a      	mov	r2, r3
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	dbea      	blt.n	800ff54 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	425b      	negs	r3, r3
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	b21b      	sxth	r3, r3
 800ff88:	4619      	mov	r1, r3
 800ff8a:	69b8      	ldr	r0, [r7, #24]
 800ff8c:	f7fc fc82 	bl	800c894 <pbuf_header>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d01c      	beq.n	800ffd0 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ff96:	4b20      	ldr	r3, [pc, #128]	; (8010018 <tcp_receive+0x738>)
 800ff98:	f240 524c 	movw	r2, #1356	; 0x54c
 800ff9c:	4923      	ldr	r1, [pc, #140]	; (801002c <tcp_receive+0x74c>)
 800ff9e:	4820      	ldr	r0, [pc, #128]	; (8010020 <tcp_receive+0x740>)
 800ffa0:	f004 fb26 	bl	80145f0 <iprintf>
 800ffa4:	e014      	b.n	800ffd0 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ffa6:	4b1b      	ldr	r3, [pc, #108]	; (8010014 <tcp_receive+0x734>)
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffac:	b292      	uxth	r2, r2
 800ffae:	4252      	negs	r2, r2
 800ffb0:	b292      	uxth	r2, r2
 800ffb2:	b212      	sxth	r2, r2
 800ffb4:	4611      	mov	r1, r2
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fc fc6c 	bl	800c894 <pbuf_header>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d006      	beq.n	800ffd0 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ffc2:	4b15      	ldr	r3, [pc, #84]	; (8010018 <tcp_receive+0x738>)
 800ffc4:	f240 5251 	movw	r2, #1361	; 0x551
 800ffc8:	4918      	ldr	r1, [pc, #96]	; (801002c <tcp_receive+0x74c>)
 800ffca:	4815      	ldr	r0, [pc, #84]	; (8010020 <tcp_receive+0x740>)
 800ffcc:	f004 fb10 	bl	80145f0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800ffd0:	4b10      	ldr	r3, [pc, #64]	; (8010014 <tcp_receive+0x734>)
 800ffd2:	891a      	ldrh	r2, [r3, #8]
 800ffd4:	4b0e      	ldr	r3, [pc, #56]	; (8010010 <tcp_receive+0x730>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	b299      	uxth	r1, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	1acb      	subs	r3, r1, r3
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	4413      	add	r3, r2
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	4b0a      	ldr	r3, [pc, #40]	; (8010014 <tcp_receive+0x734>)
 800ffea:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ffec:	4b09      	ldr	r3, [pc, #36]	; (8010014 <tcp_receive+0x734>)
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fff4:	4906      	ldr	r1, [pc, #24]	; (8010010 <tcp_receive+0x730>)
 800fff6:	600a      	str	r2, [r1, #0]
 800fff8:	4a05      	ldr	r2, [pc, #20]	; (8010010 <tcp_receive+0x730>)
 800fffa:	6812      	ldr	r2, [r2, #0]
 800fffc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fffe:	e025      	b.n	801004c <tcp_receive+0x76c>
 8010000:	20003fb0 	.word	0x20003fb0
 8010004:	20003fb4 	.word	0x20003fb4
 8010008:	20007738 	.word	0x20007738
 801000c:	20003fb6 	.word	0x20003fb6
 8010010:	20003fac 	.word	0x20003fac
 8010014:	20003f8c 	.word	0x20003f8c
 8010018:	080173e8 	.word	0x080173e8
 801001c:	08017670 	.word	0x08017670
 8010020:	0801742c 	.word	0x0801742c
 8010024:	08017680 	.word	0x08017680
 8010028:	08017690 	.word	0x08017690
 801002c:	080176a0 	.word	0x080176a0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010030:	4b86      	ldr	r3, [pc, #536]	; (801024c <tcp_receive+0x96c>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	2b00      	cmp	r3, #0
 801003c:	da06      	bge.n	801004c <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7e9b      	ldrb	r3, [r3, #26]
 8010042:	f043 0302 	orr.w	r3, r3, #2
 8010046:	b2da      	uxtb	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801004c:	4b7f      	ldr	r3, [pc, #508]	; (801024c <tcp_receive+0x96c>)
 801004e:	681a      	ldr	r2, [r3, #0]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	2b00      	cmp	r3, #0
 8010058:	f2c0 840d 	blt.w	8010876 <tcp_receive+0xf96>
 801005c:	4b7b      	ldr	r3, [pc, #492]	; (801024c <tcp_receive+0x96c>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010064:	6879      	ldr	r1, [r7, #4]
 8010066:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010068:	440b      	add	r3, r1
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	3301      	adds	r3, #1
 801006e:	2b00      	cmp	r3, #0
 8010070:	f300 8401 	bgt.w	8010876 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010078:	4b74      	ldr	r3, [pc, #464]	; (801024c <tcp_receive+0x96c>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	429a      	cmp	r2, r3
 801007e:	f040 8285 	bne.w	801058c <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010082:	4b73      	ldr	r3, [pc, #460]	; (8010250 <tcp_receive+0x970>)
 8010084:	891c      	ldrh	r4, [r3, #8]
 8010086:	4b72      	ldr	r3, [pc, #456]	; (8010250 <tcp_receive+0x970>)
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	899b      	ldrh	r3, [r3, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	4618      	mov	r0, r3
 8010090:	f7f9 f812 	bl	80090b8 <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	f003 0303 	and.w	r3, r3, #3
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <tcp_receive+0x7c2>
 801009e:	2301      	movs	r3, #1
 80100a0:	e000      	b.n	80100a4 <tcp_receive+0x7c4>
 80100a2:	2300      	movs	r3, #0
 80100a4:	4423      	add	r3, r4
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	4b6a      	ldr	r3, [pc, #424]	; (8010254 <tcp_receive+0x974>)
 80100aa:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100b0:	4b68      	ldr	r3, [pc, #416]	; (8010254 <tcp_receive+0x974>)
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d26d      	bcs.n	8010194 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80100b8:	4b65      	ldr	r3, [pc, #404]	; (8010250 <tcp_receive+0x970>)
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f8 fff9 	bl	80090b8 <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d01a      	beq.n	8010106 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80100d0:	4b5f      	ldr	r3, [pc, #380]	; (8010250 <tcp_receive+0x970>)
 80100d2:	68dc      	ldr	r4, [r3, #12]
 80100d4:	4b5e      	ldr	r3, [pc, #376]	; (8010250 <tcp_receive+0x970>)
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	899b      	ldrh	r3, [r3, #12]
 80100da:	b29b      	uxth	r3, r3
 80100dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100e0:	b29d      	uxth	r5, r3
 80100e2:	4b5b      	ldr	r3, [pc, #364]	; (8010250 <tcp_receive+0x970>)
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	899b      	ldrh	r3, [r3, #12]
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7f8 ffe4 	bl	80090b8 <lwip_htons>
 80100f0:	4603      	mov	r3, r0
 80100f2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f8 ffdd 	bl	80090b8 <lwip_htons>
 80100fe:	4603      	mov	r3, r0
 8010100:	432b      	orrs	r3, r5
 8010102:	b29b      	uxth	r3, r3
 8010104:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801010a:	4b51      	ldr	r3, [pc, #324]	; (8010250 <tcp_receive+0x970>)
 801010c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801010e:	4b50      	ldr	r3, [pc, #320]	; (8010250 <tcp_receive+0x970>)
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	899b      	ldrh	r3, [r3, #12]
 8010114:	b29b      	uxth	r3, r3
 8010116:	4618      	mov	r0, r3
 8010118:	f7f8 ffce 	bl	80090b8 <lwip_htons>
 801011c:	4603      	mov	r3, r0
 801011e:	f003 0302 	and.w	r3, r3, #2
 8010122:	2b00      	cmp	r3, #0
 8010124:	d005      	beq.n	8010132 <tcp_receive+0x852>
            inseg.len -= 1;
 8010126:	4b4a      	ldr	r3, [pc, #296]	; (8010250 <tcp_receive+0x970>)
 8010128:	891b      	ldrh	r3, [r3, #8]
 801012a:	3b01      	subs	r3, #1
 801012c:	b29a      	uxth	r2, r3
 801012e:	4b48      	ldr	r3, [pc, #288]	; (8010250 <tcp_receive+0x970>)
 8010130:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010132:	4b47      	ldr	r3, [pc, #284]	; (8010250 <tcp_receive+0x970>)
 8010134:	685a      	ldr	r2, [r3, #4]
 8010136:	4b46      	ldr	r3, [pc, #280]	; (8010250 <tcp_receive+0x970>)
 8010138:	891b      	ldrh	r3, [r3, #8]
 801013a:	4619      	mov	r1, r3
 801013c:	4610      	mov	r0, r2
 801013e:	f7fc fa59 	bl	800c5f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010142:	4b43      	ldr	r3, [pc, #268]	; (8010250 <tcp_receive+0x970>)
 8010144:	891c      	ldrh	r4, [r3, #8]
 8010146:	4b42      	ldr	r3, [pc, #264]	; (8010250 <tcp_receive+0x970>)
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	899b      	ldrh	r3, [r3, #12]
 801014c:	b29b      	uxth	r3, r3
 801014e:	4618      	mov	r0, r3
 8010150:	f7f8 ffb2 	bl	80090b8 <lwip_htons>
 8010154:	4603      	mov	r3, r0
 8010156:	f003 0303 	and.w	r3, r3, #3
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <tcp_receive+0x882>
 801015e:	2301      	movs	r3, #1
 8010160:	e000      	b.n	8010164 <tcp_receive+0x884>
 8010162:	2300      	movs	r3, #0
 8010164:	4423      	add	r3, r4
 8010166:	b29a      	uxth	r2, r3
 8010168:	4b3a      	ldr	r3, [pc, #232]	; (8010254 <tcp_receive+0x974>)
 801016a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801016c:	4b39      	ldr	r3, [pc, #228]	; (8010254 <tcp_receive+0x974>)
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	4b36      	ldr	r3, [pc, #216]	; (801024c <tcp_receive+0x96c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	441a      	add	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010180:	440b      	add	r3, r1
 8010182:	429a      	cmp	r2, r3
 8010184:	d006      	beq.n	8010194 <tcp_receive+0x8b4>
 8010186:	4b34      	ldr	r3, [pc, #208]	; (8010258 <tcp_receive+0x978>)
 8010188:	f240 527f 	movw	r2, #1407	; 0x57f
 801018c:	4933      	ldr	r1, [pc, #204]	; (801025c <tcp_receive+0x97c>)
 801018e:	4834      	ldr	r0, [pc, #208]	; (8010260 <tcp_receive+0x980>)
 8010190:	f004 fa2e 	bl	80145f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010198:	2b00      	cmp	r3, #0
 801019a:	f000 80e0 	beq.w	801035e <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801019e:	4b2c      	ldr	r3, [pc, #176]	; (8010250 <tcp_receive+0x970>)
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	899b      	ldrh	r3, [r3, #12]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f8 ff86 	bl	80090b8 <lwip_htons>
 80101ac:	4603      	mov	r3, r0
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d010      	beq.n	80101d8 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80101b6:	e00a      	b.n	80101ce <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101bc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f7fd fe6c 	bl	800dea6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1f0      	bne.n	80101b8 <tcp_receive+0x8d8>
 80101d6:	e0c2      	b.n	801035e <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80101de:	e04e      	b.n	801027e <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	899b      	ldrh	r3, [r3, #12]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f8 ff65 	bl	80090b8 <lwip_htons>
 80101ee:	4603      	mov	r3, r0
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d03a      	beq.n	801026e <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80101f8:	4b15      	ldr	r3, [pc, #84]	; (8010250 <tcp_receive+0x970>)
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	4618      	mov	r0, r3
 8010202:	f7f8 ff59 	bl	80090b8 <lwip_htons>
 8010206:	4603      	mov	r3, r0
 8010208:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801020c:	2b00      	cmp	r3, #0
 801020e:	d12e      	bne.n	801026e <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010210:	4b0f      	ldr	r3, [pc, #60]	; (8010250 <tcp_receive+0x970>)
 8010212:	68dc      	ldr	r4, [r3, #12]
 8010214:	4b0e      	ldr	r3, [pc, #56]	; (8010250 <tcp_receive+0x970>)
 8010216:	68db      	ldr	r3, [r3, #12]
 8010218:	899b      	ldrh	r3, [r3, #12]
 801021a:	b29d      	uxth	r5, r3
 801021c:	2001      	movs	r0, #1
 801021e:	f7f8 ff4b 	bl	80090b8 <lwip_htons>
 8010222:	4603      	mov	r3, r0
 8010224:	432b      	orrs	r3, r5
 8010226:	b29b      	uxth	r3, r3
 8010228:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801022a:	4b09      	ldr	r3, [pc, #36]	; (8010250 <tcp_receive+0x970>)
 801022c:	891c      	ldrh	r4, [r3, #8]
 801022e:	4b08      	ldr	r3, [pc, #32]	; (8010250 <tcp_receive+0x970>)
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	899b      	ldrh	r3, [r3, #12]
 8010234:	b29b      	uxth	r3, r3
 8010236:	4618      	mov	r0, r3
 8010238:	f7f8 ff3e 	bl	80090b8 <lwip_htons>
 801023c:	4603      	mov	r3, r0
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	2b00      	cmp	r3, #0
 8010244:	d00e      	beq.n	8010264 <tcp_receive+0x984>
 8010246:	2301      	movs	r3, #1
 8010248:	e00d      	b.n	8010266 <tcp_receive+0x986>
 801024a:	bf00      	nop
 801024c:	20003fac 	.word	0x20003fac
 8010250:	20003f8c 	.word	0x20003f8c
 8010254:	20003fb6 	.word	0x20003fb6
 8010258:	080173e8 	.word	0x080173e8
 801025c:	080176b4 	.word	0x080176b4
 8010260:	0801742c 	.word	0x0801742c
 8010264:	2300      	movs	r3, #0
 8010266:	4423      	add	r3, r4
 8010268:	b29a      	uxth	r2, r3
 801026a:	4b95      	ldr	r3, [pc, #596]	; (80104c0 <tcp_receive+0xbe0>)
 801026c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801026e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010270:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801027a:	f7fd fe14 	bl	800dea6 <tcp_seg_free>
            while (next &&
 801027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00e      	beq.n	80102a2 <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010284:	4b8e      	ldr	r3, [pc, #568]	; (80104c0 <tcp_receive+0xbe0>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	4b8e      	ldr	r3, [pc, #568]	; (80104c4 <tcp_receive+0xbe4>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	441a      	add	r2, r3
 8010290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010298:	8909      	ldrh	r1, [r1, #8]
 801029a:	440b      	add	r3, r1
 801029c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801029e:	2b00      	cmp	r3, #0
 80102a0:	da9e      	bge.n	80101e0 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d057      	beq.n	8010358 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80102a8:	4b85      	ldr	r3, [pc, #532]	; (80104c0 <tcp_receive+0xbe0>)
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b85      	ldr	r3, [pc, #532]	; (80104c4 <tcp_receive+0xbe4>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	441a      	add	r2, r3
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80102bc:	2b00      	cmp	r3, #0
 80102be:	dd4b      	ble.n	8010358 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80102c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	4b7e      	ldr	r3, [pc, #504]	; (80104c4 <tcp_receive+0xbe4>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	4b7d      	ldr	r3, [pc, #500]	; (80104c8 <tcp_receive+0xbe8>)
 80102d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80102d6:	4b7c      	ldr	r3, [pc, #496]	; (80104c8 <tcp_receive+0xbe8>)
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	899b      	ldrh	r3, [r3, #12]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f8 feea 	bl	80090b8 <lwip_htons>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f003 0302 	and.w	r3, r3, #2
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d005      	beq.n	80102fa <tcp_receive+0xa1a>
                inseg.len -= 1;
 80102ee:	4b76      	ldr	r3, [pc, #472]	; (80104c8 <tcp_receive+0xbe8>)
 80102f0:	891b      	ldrh	r3, [r3, #8]
 80102f2:	3b01      	subs	r3, #1
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	4b74      	ldr	r3, [pc, #464]	; (80104c8 <tcp_receive+0xbe8>)
 80102f8:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80102fa:	4b73      	ldr	r3, [pc, #460]	; (80104c8 <tcp_receive+0xbe8>)
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	4b72      	ldr	r3, [pc, #456]	; (80104c8 <tcp_receive+0xbe8>)
 8010300:	891b      	ldrh	r3, [r3, #8]
 8010302:	4619      	mov	r1, r3
 8010304:	4610      	mov	r0, r2
 8010306:	f7fc f975 	bl	800c5f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801030a:	4b6f      	ldr	r3, [pc, #444]	; (80104c8 <tcp_receive+0xbe8>)
 801030c:	891c      	ldrh	r4, [r3, #8]
 801030e:	4b6e      	ldr	r3, [pc, #440]	; (80104c8 <tcp_receive+0xbe8>)
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	899b      	ldrh	r3, [r3, #12]
 8010314:	b29b      	uxth	r3, r3
 8010316:	4618      	mov	r0, r3
 8010318:	f7f8 fece 	bl	80090b8 <lwip_htons>
 801031c:	4603      	mov	r3, r0
 801031e:	f003 0303 	and.w	r3, r3, #3
 8010322:	2b00      	cmp	r3, #0
 8010324:	d001      	beq.n	801032a <tcp_receive+0xa4a>
 8010326:	2301      	movs	r3, #1
 8010328:	e000      	b.n	801032c <tcp_receive+0xa4c>
 801032a:	2300      	movs	r3, #0
 801032c:	4423      	add	r3, r4
 801032e:	b29a      	uxth	r2, r3
 8010330:	4b63      	ldr	r3, [pc, #396]	; (80104c0 <tcp_receive+0xbe0>)
 8010332:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010334:	4b62      	ldr	r3, [pc, #392]	; (80104c0 <tcp_receive+0xbe0>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	461a      	mov	r2, r3
 801033a:	4b62      	ldr	r3, [pc, #392]	; (80104c4 <tcp_receive+0xbe4>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	441a      	add	r2, r3
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	429a      	cmp	r2, r3
 8010348:	d006      	beq.n	8010358 <tcp_receive+0xa78>
 801034a:	4b60      	ldr	r3, [pc, #384]	; (80104cc <tcp_receive+0xbec>)
 801034c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010350:	495f      	ldr	r1, [pc, #380]	; (80104d0 <tcp_receive+0xbf0>)
 8010352:	4860      	ldr	r0, [pc, #384]	; (80104d4 <tcp_receive+0xbf4>)
 8010354:	f004 f94c 	bl	80145f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801035c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801035e:	4b58      	ldr	r3, [pc, #352]	; (80104c0 <tcp_receive+0xbe0>)
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	4b57      	ldr	r3, [pc, #348]	; (80104c4 <tcp_receive+0xbe4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	441a      	add	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010372:	4b53      	ldr	r3, [pc, #332]	; (80104c0 <tcp_receive+0xbe0>)
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	429a      	cmp	r2, r3
 8010378:	d206      	bcs.n	8010388 <tcp_receive+0xaa8>
 801037a:	4b54      	ldr	r3, [pc, #336]	; (80104cc <tcp_receive+0xbec>)
 801037c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010380:	4955      	ldr	r1, [pc, #340]	; (80104d8 <tcp_receive+0xbf8>)
 8010382:	4854      	ldr	r0, [pc, #336]	; (80104d4 <tcp_receive+0xbf4>)
 8010384:	f004 f934 	bl	80145f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801038c:	4b4c      	ldr	r3, [pc, #304]	; (80104c0 <tcp_receive+0xbe0>)
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	b29a      	uxth	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fd f801 	bl	800d3a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801039e:	4b4a      	ldr	r3, [pc, #296]	; (80104c8 <tcp_receive+0xbe8>)
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	891b      	ldrh	r3, [r3, #8]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d006      	beq.n	80103b6 <tcp_receive+0xad6>
          recv_data = inseg.p;
 80103a8:	4b47      	ldr	r3, [pc, #284]	; (80104c8 <tcp_receive+0xbe8>)
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	4a4b      	ldr	r2, [pc, #300]	; (80104dc <tcp_receive+0xbfc>)
 80103ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80103b0:	4b45      	ldr	r3, [pc, #276]	; (80104c8 <tcp_receive+0xbe8>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80103b6:	4b44      	ldr	r3, [pc, #272]	; (80104c8 <tcp_receive+0xbe8>)
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	899b      	ldrh	r3, [r3, #12]
 80103bc:	b29b      	uxth	r3, r3
 80103be:	4618      	mov	r0, r3
 80103c0:	f7f8 fe7a 	bl	80090b8 <lwip_htons>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f003 0301 	and.w	r3, r3, #1
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 80b4 	beq.w	8010538 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80103d0:	4b43      	ldr	r3, [pc, #268]	; (80104e0 <tcp_receive+0xc00>)
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	f043 0320 	orr.w	r3, r3, #32
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	4b41      	ldr	r3, [pc, #260]	; (80104e0 <tcp_receive+0xc00>)
 80103dc:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80103de:	e0ab      	b.n	8010538 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103e4:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	4a35      	ldr	r2, [pc, #212]	; (80104c4 <tcp_receive+0xbe4>)
 80103f0:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	891b      	ldrh	r3, [r3, #8]
 80103f6:	461c      	mov	r4, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	899b      	ldrh	r3, [r3, #12]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f7f8 fe59 	bl	80090b8 <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	f003 0303 	and.w	r3, r3, #3
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <tcp_receive+0xb34>
 8010410:	2301      	movs	r3, #1
 8010412:	e000      	b.n	8010416 <tcp_receive+0xb36>
 8010414:	2300      	movs	r3, #0
 8010416:	4423      	add	r3, r4
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801041c:	441a      	add	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010426:	461c      	mov	r4, r3
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	891b      	ldrh	r3, [r3, #8]
 801042c:	461d      	mov	r5, r3
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	899b      	ldrh	r3, [r3, #12]
 8010434:	b29b      	uxth	r3, r3
 8010436:	4618      	mov	r0, r3
 8010438:	f7f8 fe3e 	bl	80090b8 <lwip_htons>
 801043c:	4603      	mov	r3, r0
 801043e:	f003 0303 	and.w	r3, r3, #3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <tcp_receive+0xb6a>
 8010446:	2301      	movs	r3, #1
 8010448:	e000      	b.n	801044c <tcp_receive+0xb6c>
 801044a:	2300      	movs	r3, #0
 801044c:	442b      	add	r3, r5
 801044e:	429c      	cmp	r4, r3
 8010450:	d206      	bcs.n	8010460 <tcp_receive+0xb80>
 8010452:	4b1e      	ldr	r3, [pc, #120]	; (80104cc <tcp_receive+0xbec>)
 8010454:	f240 52de 	movw	r2, #1502	; 0x5de
 8010458:	4922      	ldr	r1, [pc, #136]	; (80104e4 <tcp_receive+0xc04>)
 801045a:	481e      	ldr	r0, [pc, #120]	; (80104d4 <tcp_receive+0xbf4>)
 801045c:	f004 f8c8 	bl	80145f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	891b      	ldrh	r3, [r3, #8]
 8010464:	461c      	mov	r4, r3
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	899b      	ldrh	r3, [r3, #12]
 801046c:	b29b      	uxth	r3, r3
 801046e:	4618      	mov	r0, r3
 8010470:	f7f8 fe22 	bl	80090b8 <lwip_htons>
 8010474:	4603      	mov	r3, r0
 8010476:	f003 0303 	and.w	r3, r3, #3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <tcp_receive+0xba2>
 801047e:	2301      	movs	r3, #1
 8010480:	e000      	b.n	8010484 <tcp_receive+0xba4>
 8010482:	2300      	movs	r3, #0
 8010484:	18e1      	adds	r1, r4, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801048a:	b28b      	uxth	r3, r1
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	b29a      	uxth	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7fc ff83 	bl	800d3a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	891b      	ldrh	r3, [r3, #8]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d028      	beq.n	80104f6 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80104a4:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <tcp_receive+0xbfc>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01d      	beq.n	80104e8 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80104ac:	4b0b      	ldr	r3, [pc, #44]	; (80104dc <tcp_receive+0xbfc>)
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	4619      	mov	r1, r3
 80104b6:	4610      	mov	r0, r2
 80104b8:	f7fc faea 	bl	800ca90 <pbuf_cat>
 80104bc:	e018      	b.n	80104f0 <tcp_receive+0xc10>
 80104be:	bf00      	nop
 80104c0:	20003fb6 	.word	0x20003fb6
 80104c4:	20003fac 	.word	0x20003fac
 80104c8:	20003f8c 	.word	0x20003f8c
 80104cc:	080173e8 	.word	0x080173e8
 80104d0:	080176ec 	.word	0x080176ec
 80104d4:	0801742c 	.word	0x0801742c
 80104d8:	08017728 	.word	0x08017728
 80104dc:	20003fbc 	.word	0x20003fbc
 80104e0:	20003fb9 	.word	0x20003fb9
 80104e4:	08017748 	.word	0x08017748
            } else {
              recv_data = cseg->p;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	685b      	ldr	r3, [r3, #4]
 80104ec:	4a71      	ldr	r2, [pc, #452]	; (80106b4 <tcp_receive+0xdd4>)
 80104ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2200      	movs	r2, #0
 80104f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	899b      	ldrh	r3, [r3, #12]
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	4618      	mov	r0, r3
 8010500:	f7f8 fdda 	bl	80090b8 <lwip_htons>
 8010504:	4603      	mov	r3, r0
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00d      	beq.n	801052a <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801050e:	4b6a      	ldr	r3, [pc, #424]	; (80106b8 <tcp_receive+0xdd8>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	f043 0320 	orr.w	r3, r3, #32
 8010516:	b2da      	uxtb	r2, r3
 8010518:	4b67      	ldr	r3, [pc, #412]	; (80106b8 <tcp_receive+0xdd8>)
 801051a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	7d1b      	ldrb	r3, [r3, #20]
 8010520:	2b04      	cmp	r3, #4
 8010522:	d102      	bne.n	801052a <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2207      	movs	r2, #7
 8010528:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8010532:	68b8      	ldr	r0, [r7, #8]
 8010534:	f7fd fcb7 	bl	800dea6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053c:	2b00      	cmp	r3, #0
 801053e:	d008      	beq.n	8010552 <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	685a      	ldr	r2, [r3, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801054c:	429a      	cmp	r2, r3
 801054e:	f43f af47 	beq.w	80103e0 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	7e9b      	ldrb	r3, [r3, #26]
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00e      	beq.n	801057c <tcp_receive+0xc9c>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	7e9b      	ldrb	r3, [r3, #26]
 8010562:	f023 0301 	bic.w	r3, r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	769a      	strb	r2, [r3, #26]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	7e9b      	ldrb	r3, [r3, #26]
 8010570:	f043 0302 	orr.w	r3, r3, #2
 8010574:	b2da      	uxtb	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801057a:	e180      	b.n	801087e <tcp_receive+0xf9e>
        tcp_ack(pcb);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	7e9b      	ldrb	r3, [r3, #26]
 8010580:	f043 0301 	orr.w	r3, r3, #1
 8010584:	b2da      	uxtb	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801058a:	e178      	b.n	801087e <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f001 f8c7 	bl	8011720 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010596:	2b00      	cmp	r3, #0
 8010598:	d106      	bne.n	80105a8 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801059a:	4848      	ldr	r0, [pc, #288]	; (80106bc <tcp_receive+0xddc>)
 801059c:	f7fd fc9b 	bl	800ded6 <tcp_seg_copy>
 80105a0:	4602      	mov	r2, r0
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80105a6:	e16a      	b.n	801087e <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80105a8:	2300      	movs	r3, #0
 80105aa:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105b2:	e14f      	b.n	8010854 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	685a      	ldr	r2, [r3, #4]
 80105ba:	4b41      	ldr	r3, [pc, #260]	; (80106c0 <tcp_receive+0xde0>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d11d      	bne.n	80105fe <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80105c2:	4b3e      	ldr	r3, [pc, #248]	; (80106bc <tcp_receive+0xddc>)
 80105c4:	891a      	ldrh	r2, [r3, #8]
 80105c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c8:	891b      	ldrh	r3, [r3, #8]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	f240 8147 	bls.w	801085e <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80105d0:	483a      	ldr	r0, [pc, #232]	; (80106bc <tcp_receive+0xddc>)
 80105d2:	f7fd fc80 	bl	800ded6 <tcp_seg_copy>
 80105d6:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 8141 	beq.w	8010862 <tcp_receive+0xf82>
                  if (prev != NULL) {
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <tcp_receive+0xd0e>
                    prev->next = cseg;
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	e002      	b.n	80105f4 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68ba      	ldr	r2, [r7, #8]
 80105f2:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80105f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105f6:	68b8      	ldr	r0, [r7, #8]
 80105f8:	f7ff f8fc 	bl	800f7f4 <tcp_oos_insert_segment>
                }
                break;
 80105fc:	e131      	b.n	8010862 <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80105fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010600:	2b00      	cmp	r3, #0
 8010602:	d117      	bne.n	8010634 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010604:	4b2e      	ldr	r3, [pc, #184]	; (80106c0 <tcp_receive+0xde0>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	2b00      	cmp	r3, #0
 8010612:	da57      	bge.n	80106c4 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8010614:	4829      	ldr	r0, [pc, #164]	; (80106bc <tcp_receive+0xddc>)
 8010616:	f7fd fc5e 	bl	800ded6 <tcp_seg_copy>
 801061a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 8121 	beq.w	8010866 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	68ba      	ldr	r2, [r7, #8]
 8010628:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801062a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801062c:	68b8      	ldr	r0, [r7, #8]
 801062e:	f7ff f8e1 	bl	800f7f4 <tcp_oos_insert_segment>
                  }
                  break;
 8010632:	e118      	b.n	8010866 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8010634:	4b22      	ldr	r3, [pc, #136]	; (80106c0 <tcp_receive+0xde0>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	3b01      	subs	r3, #1
 8010642:	2b00      	cmp	r3, #0
 8010644:	db3e      	blt.n	80106c4 <tcp_receive+0xde4>
 8010646:	4b1e      	ldr	r3, [pc, #120]	; (80106c0 <tcp_receive+0xde0>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	3301      	adds	r3, #1
 8010654:	2b00      	cmp	r3, #0
 8010656:	dc35      	bgt.n	80106c4 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010658:	4818      	ldr	r0, [pc, #96]	; (80106bc <tcp_receive+0xddc>)
 801065a:	f7fd fc3c 	bl	800ded6 <tcp_seg_copy>
 801065e:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 8101 	beq.w	801086a <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010670:	8912      	ldrh	r2, [r2, #8]
 8010672:	441a      	add	r2, r3
 8010674:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <tcp_receive+0xde0>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	dd12      	ble.n	80106a4 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801067e:	4b10      	ldr	r3, [pc, #64]	; (80106c0 <tcp_receive+0xde0>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	b29a      	uxth	r2, r3
 8010684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	b29b      	uxth	r3, r3
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	b29a      	uxth	r2, r3
 8010690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010692:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010696:	685a      	ldr	r2, [r3, #4]
 8010698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069a:	891b      	ldrh	r3, [r3, #8]
 801069c:	4619      	mov	r1, r3
 801069e:	4610      	mov	r0, r2
 80106a0:	f7fb ffa8 	bl	800c5f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	68ba      	ldr	r2, [r7, #8]
 80106a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80106aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106ac:	68b8      	ldr	r0, [r7, #8]
 80106ae:	f7ff f8a1 	bl	800f7f4 <tcp_oos_insert_segment>
                  }
                  break;
 80106b2:	e0da      	b.n	801086a <tcp_receive+0xf8a>
 80106b4:	20003fbc 	.word	0x20003fbc
 80106b8:	20003fb9 	.word	0x20003fb9
 80106bc:	20003f8c 	.word	0x20003f8c
 80106c0:	20003fac 	.word	0x20003fac
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80106c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f040 80be 	bne.w	801084a <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80106ce:	4b7b      	ldr	r3, [pc, #492]	; (80108bc <tcp_receive+0xfdc>)
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f340 80b5 	ble.w	801084a <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	899b      	ldrh	r3, [r3, #12]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f8 fce5 	bl	80090b8 <lwip_htons>
 80106ee:	4603      	mov	r3, r0
 80106f0:	f003 0301 	and.w	r3, r3, #1
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f040 80ba 	bne.w	801086e <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80106fa:	4871      	ldr	r0, [pc, #452]	; (80108c0 <tcp_receive+0xfe0>)
 80106fc:	f7fd fbeb 	bl	800ded6 <tcp_seg_copy>
 8010700:	4602      	mov	r2, r0
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	f000 80b1 	beq.w	8010872 <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010718:	8912      	ldrh	r2, [r2, #8]
 801071a:	441a      	add	r2, r3
 801071c:	4b67      	ldr	r3, [pc, #412]	; (80108bc <tcp_receive+0xfdc>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	dd12      	ble.n	801074c <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010726:	4b65      	ldr	r3, [pc, #404]	; (80108bc <tcp_receive+0xfdc>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	b29a      	uxth	r2, r3
 801072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	b29b      	uxth	r3, r3
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	b29a      	uxth	r2, r3
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073e:	685a      	ldr	r2, [r3, #4]
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	891b      	ldrh	r3, [r3, #8]
 8010744:	4619      	mov	r1, r3
 8010746:	4610      	mov	r0, r2
 8010748:	f7fb ff54 	bl	800c5f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801074c:	4b5d      	ldr	r3, [pc, #372]	; (80108c4 <tcp_receive+0xfe4>)
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	461a      	mov	r2, r3
 8010752:	4b5a      	ldr	r3, [pc, #360]	; (80108bc <tcp_receive+0xfdc>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	441a      	add	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801075c:	6879      	ldr	r1, [r7, #4]
 801075e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010760:	440b      	add	r3, r1
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	f340 8084 	ble.w	8010872 <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7f8 fc9f 	bl	80090b8 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	f003 0301 	and.w	r3, r3, #1
 8010780:	2b00      	cmp	r3, #0
 8010782:	d01d      	beq.n	80107c0 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68dc      	ldr	r4, [r3, #12]
 801078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	b29b      	uxth	r3, r3
 8010794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010798:	b29d      	uxth	r5, r3
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f8 fc87 	bl	80090b8 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f8 fc80 	bl	80090b8 <lwip_htons>
 80107b8:	4603      	mov	r3, r0
 80107ba:	432b      	orrs	r3, r5
 80107bc:	b29b      	uxth	r3, r3
 80107be:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80107c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80107c8:	b291      	uxth	r1, r2
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80107ce:	440a      	add	r2, r1
 80107d0:	b291      	uxth	r1, r2
 80107d2:	4a3a      	ldr	r2, [pc, #232]	; (80108bc <tcp_receive+0xfdc>)
 80107d4:	6812      	ldr	r2, [r2, #0]
 80107d6:	b292      	uxth	r2, r2
 80107d8:	1a8a      	subs	r2, r1, r2
 80107da:	b292      	uxth	r2, r2
 80107dc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80107de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	685a      	ldr	r2, [r3, #4]
 80107e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	891b      	ldrh	r3, [r3, #8]
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fb ff01 	bl	800c5f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	891c      	ldrh	r4, [r3, #8]
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	899b      	ldrh	r3, [r3, #12]
 8010800:	b29b      	uxth	r3, r3
 8010802:	4618      	mov	r0, r3
 8010804:	f7f8 fc58 	bl	80090b8 <lwip_htons>
 8010808:	4603      	mov	r3, r0
 801080a:	f003 0303 	and.w	r3, r3, #3
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <tcp_receive+0xf36>
 8010812:	2301      	movs	r3, #1
 8010814:	e000      	b.n	8010818 <tcp_receive+0xf38>
 8010816:	2300      	movs	r3, #0
 8010818:	4423      	add	r3, r4
 801081a:	b29a      	uxth	r2, r3
 801081c:	4b29      	ldr	r3, [pc, #164]	; (80108c4 <tcp_receive+0xfe4>)
 801081e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010820:	4b28      	ldr	r3, [pc, #160]	; (80108c4 <tcp_receive+0xfe4>)
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	461a      	mov	r2, r3
 8010826:	4b25      	ldr	r3, [pc, #148]	; (80108bc <tcp_receive+0xfdc>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	441a      	add	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010830:	6879      	ldr	r1, [r7, #4]
 8010832:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010834:	440b      	add	r3, r1
 8010836:	429a      	cmp	r2, r3
 8010838:	d01b      	beq.n	8010872 <tcp_receive+0xf92>
 801083a:	4b23      	ldr	r3, [pc, #140]	; (80108c8 <tcp_receive+0xfe8>)
 801083c:	f240 627b 	movw	r2, #1659	; 0x67b
 8010840:	4922      	ldr	r1, [pc, #136]	; (80108cc <tcp_receive+0xfec>)
 8010842:	4823      	ldr	r0, [pc, #140]	; (80108d0 <tcp_receive+0xff0>)
 8010844:	f003 fed4 	bl	80145f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010848:	e013      	b.n	8010872 <tcp_receive+0xf92>
              }
            }
            prev = next;
 801084a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084c:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010856:	2b00      	cmp	r3, #0
 8010858:	f47f aeac 	bne.w	80105b4 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 801085c:	e00f      	b.n	801087e <tcp_receive+0xf9e>
                break;
 801085e:	bf00      	nop
 8010860:	e00d      	b.n	801087e <tcp_receive+0xf9e>
                break;
 8010862:	bf00      	nop
 8010864:	e00b      	b.n	801087e <tcp_receive+0xf9e>
                  break;
 8010866:	bf00      	nop
 8010868:	e009      	b.n	801087e <tcp_receive+0xf9e>
                  break;
 801086a:	bf00      	nop
 801086c:	e007      	b.n	801087e <tcp_receive+0xf9e>
                  break;
 801086e:	bf00      	nop
 8010870:	e005      	b.n	801087e <tcp_receive+0xf9e>
                break;
 8010872:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8010874:	e003      	b.n	801087e <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 ff52 	bl	8011720 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801087c:	e01a      	b.n	80108b4 <tcp_receive+0xfd4>
 801087e:	e019      	b.n	80108b4 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010880:	4b0e      	ldr	r3, [pc, #56]	; (80108bc <tcp_receive+0xfdc>)
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	2b00      	cmp	r3, #0
 801088c:	db0a      	blt.n	80108a4 <tcp_receive+0xfc4>
 801088e:	4b0b      	ldr	r3, [pc, #44]	; (80108bc <tcp_receive+0xfdc>)
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010896:	6879      	ldr	r1, [r7, #4]
 8010898:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801089a:	440b      	add	r3, r1
 801089c:	1ad3      	subs	r3, r2, r3
 801089e:	3301      	adds	r3, #1
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	dd07      	ble.n	80108b4 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	7e9b      	ldrb	r3, [r3, #26]
 80108a8:	f043 0302 	orr.w	r3, r3, #2
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80108b2:	e7ff      	b.n	80108b4 <tcp_receive+0xfd4>
 80108b4:	bf00      	nop
 80108b6:	3734      	adds	r7, #52	; 0x34
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108bc:	20003fac 	.word	0x20003fac
 80108c0:	20003f8c 	.word	0x20003f8c
 80108c4:	20003fb6 	.word	0x20003fb6
 80108c8:	080173e8 	.word	0x080173e8
 80108cc:	080176b4 	.word	0x080176b4
 80108d0:	0801742c 	.word	0x0801742c

080108d4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80108da:	4b18      	ldr	r3, [pc, #96]	; (801093c <tcp_getoptbyte+0x68>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d005      	beq.n	80108ee <tcp_getoptbyte+0x1a>
 80108e2:	4b17      	ldr	r3, [pc, #92]	; (8010940 <tcp_getoptbyte+0x6c>)
 80108e4:	881a      	ldrh	r2, [r3, #0]
 80108e6:	4b17      	ldr	r3, [pc, #92]	; (8010944 <tcp_getoptbyte+0x70>)
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d20e      	bcs.n	801090c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80108ee:	4b16      	ldr	r3, [pc, #88]	; (8010948 <tcp_getoptbyte+0x74>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3314      	adds	r3, #20
 80108f4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80108f6:	4b12      	ldr	r3, [pc, #72]	; (8010940 <tcp_getoptbyte+0x6c>)
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	b291      	uxth	r1, r2
 80108fe:	4a10      	ldr	r2, [pc, #64]	; (8010940 <tcp_getoptbyte+0x6c>)
 8010900:	8011      	strh	r1, [r2, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	4413      	add	r3, r2
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	e010      	b.n	801092e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801090c:	4b0c      	ldr	r3, [pc, #48]	; (8010940 <tcp_getoptbyte+0x6c>)
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	b291      	uxth	r1, r2
 8010914:	4a0a      	ldr	r2, [pc, #40]	; (8010940 <tcp_getoptbyte+0x6c>)
 8010916:	8011      	strh	r1, [r2, #0]
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <tcp_getoptbyte+0x70>)
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	b2db      	uxtb	r3, r3
 8010920:	1ad3      	subs	r3, r2, r3
 8010922:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8010924:	4b05      	ldr	r3, [pc, #20]	; (801093c <tcp_getoptbyte+0x68>)
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	79fb      	ldrb	r3, [r7, #7]
 801092a:	4413      	add	r3, r2
 801092c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr
 801093a:	bf00      	nop
 801093c:	20003fa4 	.word	0x20003fa4
 8010940:	20003fa8 	.word	0x20003fa8
 8010944:	20003fa2 	.word	0x20003fa2
 8010948:	20003f9c 	.word	0x20003f9c

0801094c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010954:	4b2d      	ldr	r3, [pc, #180]	; (8010a0c <tcp_parseopt+0xc0>)
 8010956:	881b      	ldrh	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d053      	beq.n	8010a04 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801095c:	4b2c      	ldr	r3, [pc, #176]	; (8010a10 <tcp_parseopt+0xc4>)
 801095e:	2200      	movs	r2, #0
 8010960:	801a      	strh	r2, [r3, #0]
 8010962:	e043      	b.n	80109ec <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8010964:	f7ff ffb6 	bl	80108d4 <tcp_getoptbyte>
 8010968:	4603      	mov	r3, r0
 801096a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	2b01      	cmp	r3, #1
 8010970:	d03c      	beq.n	80109ec <tcp_parseopt+0xa0>
 8010972:	2b02      	cmp	r3, #2
 8010974:	d002      	beq.n	801097c <tcp_parseopt+0x30>
 8010976:	2b00      	cmp	r3, #0
 8010978:	d03f      	beq.n	80109fa <tcp_parseopt+0xae>
 801097a:	e026      	b.n	80109ca <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801097c:	f7ff ffaa 	bl	80108d4 <tcp_getoptbyte>
 8010980:	4603      	mov	r3, r0
 8010982:	2b04      	cmp	r3, #4
 8010984:	d13b      	bne.n	80109fe <tcp_parseopt+0xb2>
 8010986:	4b22      	ldr	r3, [pc, #136]	; (8010a10 <tcp_parseopt+0xc4>)
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	3302      	adds	r3, #2
 801098c:	4a1f      	ldr	r2, [pc, #124]	; (8010a0c <tcp_parseopt+0xc0>)
 801098e:	8812      	ldrh	r2, [r2, #0]
 8010990:	4293      	cmp	r3, r2
 8010992:	dc34      	bgt.n	80109fe <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010994:	f7ff ff9e 	bl	80108d4 <tcp_getoptbyte>
 8010998:	4603      	mov	r3, r0
 801099a:	b29b      	uxth	r3, r3
 801099c:	021b      	lsls	r3, r3, #8
 801099e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80109a0:	f7ff ff98 	bl	80108d4 <tcp_getoptbyte>
 80109a4:	4603      	mov	r3, r0
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	89bb      	ldrh	r3, [r7, #12]
 80109aa:	4313      	orrs	r3, r2
 80109ac:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80109ae:	89bb      	ldrh	r3, [r7, #12]
 80109b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80109b4:	d804      	bhi.n	80109c0 <tcp_parseopt+0x74>
 80109b6:	89bb      	ldrh	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d001      	beq.n	80109c0 <tcp_parseopt+0x74>
 80109bc:	89ba      	ldrh	r2, [r7, #12]
 80109be:	e001      	b.n	80109c4 <tcp_parseopt+0x78>
 80109c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80109c8:	e010      	b.n	80109ec <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80109ca:	f7ff ff83 	bl	80108d4 <tcp_getoptbyte>
 80109ce:	4603      	mov	r3, r0
 80109d0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80109d2:	7afb      	ldrb	r3, [r7, #11]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d914      	bls.n	8010a02 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80109d8:	7afb      	ldrb	r3, [r7, #11]
 80109da:	b29a      	uxth	r2, r3
 80109dc:	4b0c      	ldr	r3, [pc, #48]	; (8010a10 <tcp_parseopt+0xc4>)
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	4413      	add	r3, r2
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	3b02      	subs	r3, #2
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	4b09      	ldr	r3, [pc, #36]	; (8010a10 <tcp_parseopt+0xc4>)
 80109ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109ec:	4b08      	ldr	r3, [pc, #32]	; (8010a10 <tcp_parseopt+0xc4>)
 80109ee:	881a      	ldrh	r2, [r3, #0]
 80109f0:	4b06      	ldr	r3, [pc, #24]	; (8010a0c <tcp_parseopt+0xc0>)
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d3b5      	bcc.n	8010964 <tcp_parseopt+0x18>
 80109f8:	e004      	b.n	8010a04 <tcp_parseopt+0xb8>
        return;
 80109fa:	bf00      	nop
 80109fc:	e002      	b.n	8010a04 <tcp_parseopt+0xb8>
          return;
 80109fe:	bf00      	nop
 8010a00:	e000      	b.n	8010a04 <tcp_parseopt+0xb8>
          return;
 8010a02:	bf00      	nop
      }
    }
  }
}
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	20003fa0 	.word	0x20003fa0
 8010a10:	20003fa8 	.word	0x20003fa8

08010a14 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010a14:	b480      	push	{r7}
 8010a16:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010a18:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <tcp_trigger_input_pcb_close+0x1c>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f043 0310 	orr.w	r3, r3, #16
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	4b03      	ldr	r3, [pc, #12]	; (8010a30 <tcp_trigger_input_pcb_close+0x1c>)
 8010a24:	701a      	strb	r2, [r3, #0]
}
 8010a26:	bf00      	nop
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr
 8010a30:	20003fb9 	.word	0x20003fb9

08010a34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	607b      	str	r3, [r7, #4]
 8010a3e:	460b      	mov	r3, r1
 8010a40:	817b      	strh	r3, [r7, #10]
 8010a42:	4613      	mov	r3, r2
 8010a44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010a46:	897a      	ldrh	r2, [r7, #10]
 8010a48:	893b      	ldrh	r3, [r7, #8]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	3314      	adds	r3, #20
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	2200      	movs	r2, #0
 8010a54:	4619      	mov	r1, r3
 8010a56:	2001      	movs	r0, #1
 8010a58:	f7fb fbce 	bl	800c1f8 <pbuf_alloc>
 8010a5c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d057      	beq.n	8010b14 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	895b      	ldrh	r3, [r3, #10]
 8010a68:	461a      	mov	r2, r3
 8010a6a:	897b      	ldrh	r3, [r7, #10]
 8010a6c:	3314      	adds	r3, #20
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	da05      	bge.n	8010a7e <tcp_output_alloc_header+0x4a>
 8010a72:	4b2b      	ldr	r3, [pc, #172]	; (8010b20 <tcp_output_alloc_header+0xec>)
 8010a74:	2273      	movs	r2, #115	; 0x73
 8010a76:	492b      	ldr	r1, [pc, #172]	; (8010b24 <tcp_output_alloc_header+0xf0>)
 8010a78:	482b      	ldr	r0, [pc, #172]	; (8010b28 <tcp_output_alloc_header+0xf4>)
 8010a7a:	f003 fdb9 	bl	80145f0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	8adb      	ldrh	r3, [r3, #22]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7f8 fb15 	bl	80090b8 <lwip_htons>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	461a      	mov	r2, r3
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	8b1b      	ldrh	r3, [r3, #24]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f8 fb0c 	bl	80090b8 <lwip_htons>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7f8 fb0e 	bl	80090d4 <lwip_htonl>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010abe:	897b      	ldrh	r3, [r7, #10]
 8010ac0:	089b      	lsrs	r3, r3, #2
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	3305      	adds	r3, #5
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	031b      	lsls	r3, r3, #12
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	f043 0310 	orr.w	r3, r3, #16
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7f8 faf0 	bl	80090b8 <lwip_htons>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f8 fae7 	bl	80090b8 <lwip_htons>
 8010aea:	4603      	mov	r3, r0
 8010aec:	461a      	mov	r2, r3
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2200      	movs	r2, #0
 8010af6:	741a      	strb	r2, [r3, #16]
 8010af8:	2200      	movs	r2, #0
 8010afa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	2200      	movs	r2, #0
 8010b00:	749a      	strb	r2, [r3, #18]
 8010b02:	2200      	movs	r2, #0
 8010b04:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b0e:	441a      	add	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010b14:	697b      	ldr	r3, [r7, #20]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3718      	adds	r7, #24
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
 8010b1e:	bf00      	nop
 8010b20:	08017770 	.word	0x08017770
 8010b24:	080177a4 	.word	0x080177a4
 8010b28:	080177d4 	.word	0x080177d4

08010b2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010b2c:	b5b0      	push	{r4, r5, r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d02c      	beq.n	8010b96 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b40:	60fb      	str	r3, [r7, #12]
 8010b42:	e002      	b.n	8010b4a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1f8      	bne.n	8010b44 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	899b      	ldrh	r3, [r3, #12]
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7f8 faac 	bl	80090b8 <lwip_htons>
 8010b60:	4603      	mov	r3, r0
 8010b62:	f003 0307 	and.w	r3, r3, #7
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d115      	bne.n	8010b96 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	68dc      	ldr	r4, [r3, #12]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	899b      	ldrh	r3, [r3, #12]
 8010b74:	b29d      	uxth	r5, r3
 8010b76:	2001      	movs	r0, #1
 8010b78:	f7f8 fa9e 	bl	80090b8 <lwip_htons>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	432b      	orrs	r3, r5
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	7e9b      	ldrb	r3, [r3, #26]
 8010b88:	f043 0320 	orr.w	r3, r3, #32
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	e004      	b.n	8010ba0 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010b96:	2101      	movs	r1, #1
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 fcc3 	bl	8011524 <tcp_enqueue_flags>
 8010b9e:	4603      	mov	r3, r0
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3710      	adds	r7, #16
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bdb0      	pop	{r4, r5, r7, pc}

08010ba8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b087      	sub	sp, #28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	603b      	str	r3, [r7, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bbc:	f003 0301 	and.w	r3, r3, #1
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <tcp_create_segment+0x20>
 8010bc4:	2304      	movs	r3, #4
 8010bc6:	e000      	b.n	8010bca <tcp_create_segment+0x22>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010bcc:	2003      	movs	r0, #3
 8010bce:	f7fb f8d9 	bl	800bd84 <memp_malloc>
 8010bd2:	6138      	str	r0, [r7, #16]
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d104      	bne.n	8010be4 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010bda:	68b8      	ldr	r0, [r7, #8]
 8010bdc:	f7fb fe7e 	bl	800c8dc <pbuf_free>
    return NULL;
 8010be0:	2300      	movs	r3, #0
 8010be2:	e061      	b.n	8010ca8 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010bea:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	68ba      	ldr	r2, [r7, #8]
 8010bf6:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	891a      	ldrh	r2, [r3, #8]
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d205      	bcs.n	8010c10 <tcp_create_segment+0x68>
 8010c04:	4b2a      	ldr	r3, [pc, #168]	; (8010cb0 <tcp_create_segment+0x108>)
 8010c06:	22ba      	movs	r2, #186	; 0xba
 8010c08:	492a      	ldr	r1, [pc, #168]	; (8010cb4 <tcp_create_segment+0x10c>)
 8010c0a:	482b      	ldr	r0, [pc, #172]	; (8010cb8 <tcp_create_segment+0x110>)
 8010c0c:	f003 fcf0 	bl	80145f0 <iprintf>
  seg->len = p->tot_len - optlen;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	891a      	ldrh	r2, [r3, #8]
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010c20:	2114      	movs	r1, #20
 8010c22:	68b8      	ldr	r0, [r7, #8]
 8010c24:	f7fb fe36 	bl	800c894 <pbuf_header>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d004      	beq.n	8010c38 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010c2e:	6938      	ldr	r0, [r7, #16]
 8010c30:	f7fd f939 	bl	800dea6 <tcp_seg_free>
    return NULL;
 8010c34:	2300      	movs	r3, #0
 8010c36:	e037      	b.n	8010ca8 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	685a      	ldr	r2, [r3, #4]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	68dc      	ldr	r4, [r3, #12]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	8adb      	ldrh	r3, [r3, #22]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7f8 fa34 	bl	80090b8 <lwip_htons>
 8010c50:	4603      	mov	r3, r0
 8010c52:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	68dc      	ldr	r4, [r3, #12]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	8b1b      	ldrh	r3, [r3, #24]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7f8 fa2b 	bl	80090b8 <lwip_htons>
 8010c62:	4603      	mov	r3, r0
 8010c64:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	68dc      	ldr	r4, [r3, #12]
 8010c6a:	6838      	ldr	r0, [r7, #0]
 8010c6c:	f7f8 fa32 	bl	80090d4 <lwip_htonl>
 8010c70:	4603      	mov	r3, r0
 8010c72:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	68dc      	ldr	r4, [r3, #12]
 8010c78:	7dfb      	ldrb	r3, [r7, #23]
 8010c7a:	089b      	lsrs	r3, r3, #2
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	3305      	adds	r3, #5
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	031b      	lsls	r3, r3, #12
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	79fb      	ldrb	r3, [r7, #7]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f8 fa11 	bl	80090b8 <lwip_htons>
 8010c96:	4603      	mov	r3, r0
 8010c98:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	749a      	strb	r2, [r3, #18]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	74da      	strb	r2, [r3, #19]
  return seg;
 8010ca6:	693b      	ldr	r3, [r7, #16]
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	371c      	adds	r7, #28
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd90      	pop	{r4, r7, pc}
 8010cb0:	08017770 	.word	0x08017770
 8010cb4:	080177fc 	.word	0x080177fc
 8010cb8:	080177d4 	.word	0x080177d4

08010cbc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b086      	sub	sp, #24
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	607b      	str	r3, [r7, #4]
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	73fb      	strb	r3, [r7, #15]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	81bb      	strh	r3, [r7, #12]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010cd0:	89bb      	ldrh	r3, [r7, #12]
 8010cd2:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010cd4:	89ba      	ldrh	r2, [r7, #12]
 8010cd6:	897b      	ldrh	r3, [r7, #10]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d221      	bcs.n	8010d20 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ce0:	f003 0302 	and.w	r3, r3, #2
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d111      	bne.n	8010d0c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010ce8:	6a3b      	ldr	r3, [r7, #32]
 8010cea:	7e9b      	ldrb	r3, [r3, #26]
 8010cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d115      	bne.n	8010d20 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8010cf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d007      	beq.n	8010d0c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d103      	bne.n	8010d0c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8010d04:	6a3b      	ldr	r3, [r7, #32]
 8010d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d009      	beq.n	8010d20 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010d0c:	89bb      	ldrh	r3, [r7, #12]
 8010d0e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010d12:	f023 0203 	bic.w	r2, r3, #3
 8010d16:	897b      	ldrh	r3, [r7, #10]
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	bf28      	it	cs
 8010d1c:	4613      	movcs	r3, r2
 8010d1e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010d20:	8af9      	ldrh	r1, [r7, #22]
 8010d22:	7bfb      	ldrb	r3, [r7, #15]
 8010d24:	2200      	movs	r2, #0
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fb fa66 	bl	800c1f8 <pbuf_alloc>
 8010d2c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d101      	bne.n	8010d38 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8010d34:	2300      	movs	r3, #0
 8010d36:	e019      	b.n	8010d6c <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d006      	beq.n	8010d4e <tcp_pbuf_prealloc+0x92>
 8010d40:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <tcp_pbuf_prealloc+0xb8>)
 8010d42:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010d46:	490c      	ldr	r1, [pc, #48]	; (8010d78 <tcp_pbuf_prealloc+0xbc>)
 8010d48:	480c      	ldr	r0, [pc, #48]	; (8010d7c <tcp_pbuf_prealloc+0xc0>)
 8010d4a:	f003 fc51 	bl	80145f0 <iprintf>
  *oversize = p->len - length;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	895a      	ldrh	r2, [r3, #10]
 8010d52:	89bb      	ldrh	r3, [r7, #12]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	89ba      	ldrh	r2, [r7, #12]
 8010d60:	811a      	strh	r2, [r3, #8]
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	891a      	ldrh	r2, [r3, #8]
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	815a      	strh	r2, [r3, #10]
  return p;
 8010d6a:	693b      	ldr	r3, [r7, #16]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3718      	adds	r7, #24
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	08017770 	.word	0x08017770
 8010d78:	08017814 	.word	0x08017814
 8010d7c:	080177d4 	.word	0x080177d4

08010d80 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	2b04      	cmp	r3, #4
 8010d92:	d00e      	beq.n	8010db2 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010d98:	2b07      	cmp	r3, #7
 8010d9a:	d00a      	beq.n	8010db2 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d006      	beq.n	8010db2 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d002      	beq.n	8010db2 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010dac:	f06f 030a 	mvn.w	r3, #10
 8010db0:	e04f      	b.n	8010e52 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8010db2:	887b      	ldrh	r3, [r7, #2]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d101      	bne.n	8010dbc <tcp_write_checks+0x3c>
    return ERR_OK;
 8010db8:	2300      	movs	r3, #0
 8010dba:	e04a      	b.n	8010e52 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dc2:	887a      	ldrh	r2, [r7, #2]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d909      	bls.n	8010ddc <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	7e9b      	ldrb	r3, [r3, #26]
 8010dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dda:	e03a      	b.n	8010e52 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010de2:	2b08      	cmp	r3, #8
 8010de4:	d806      	bhi.n	8010df4 <tcp_write_checks+0x74>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010dec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d909      	bls.n	8010e08 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	7e9b      	ldrb	r3, [r3, #26]
 8010df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e06:	e024      	b.n	8010e52 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00f      	beq.n	8010e32 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d11a      	bne.n	8010e50 <tcp_write_checks+0xd0>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d116      	bne.n	8010e50 <tcp_write_checks+0xd0>
 8010e22:	4b0e      	ldr	r3, [pc, #56]	; (8010e5c <tcp_write_checks+0xdc>)
 8010e24:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010e28:	490d      	ldr	r1, [pc, #52]	; (8010e60 <tcp_write_checks+0xe0>)
 8010e2a:	480e      	ldr	r0, [pc, #56]	; (8010e64 <tcp_write_checks+0xe4>)
 8010e2c:	f003 fbe0 	bl	80145f0 <iprintf>
 8010e30:	e00e      	b.n	8010e50 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d103      	bne.n	8010e42 <tcp_write_checks+0xc2>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d006      	beq.n	8010e50 <tcp_write_checks+0xd0>
 8010e42:	4b06      	ldr	r3, [pc, #24]	; (8010e5c <tcp_write_checks+0xdc>)
 8010e44:	f240 1259 	movw	r2, #345	; 0x159
 8010e48:	4907      	ldr	r1, [pc, #28]	; (8010e68 <tcp_write_checks+0xe8>)
 8010e4a:	4806      	ldr	r0, [pc, #24]	; (8010e64 <tcp_write_checks+0xe4>)
 8010e4c:	f003 fbd0 	bl	80145f0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3708      	adds	r7, #8
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	08017770 	.word	0x08017770
 8010e60:	08017828 	.word	0x08017828
 8010e64:	080177d4 	.word	0x080177d4
 8010e68:	08017864 	.word	0x08017864

08010e6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010e6c:	b5b0      	push	{r4, r5, r7, lr}
 8010e6e:	b09a      	sub	sp, #104	; 0x68
 8010e70:	af04      	add	r7, sp, #16
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	4611      	mov	r1, r2
 8010e78:	461a      	mov	r2, r3
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	80fb      	strh	r3, [r7, #6]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010e82:	2300      	movs	r3, #0
 8010e84:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	653b      	str	r3, [r7, #80]	; 0x50
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e8e:	2300      	movs	r3, #0
 8010e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e92:	2300      	movs	r3, #0
 8010e94:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010e96:	2300      	movs	r3, #0
 8010e98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010eba:	085b      	lsrs	r3, r3, #1
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	bf28      	it	cs
 8010ec6:	4613      	movcs	r3, r2
 8010ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d102      	bne.n	8010ed6 <tcp_write+0x6a>
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ed4:	e000      	b.n	8010ed8 <tcp_write+0x6c>
 8010ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d109      	bne.n	8010ef4 <tcp_write+0x88>
 8010ee0:	4b94      	ldr	r3, [pc, #592]	; (8011134 <tcp_write+0x2c8>)
 8010ee2:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8010ee6:	4994      	ldr	r1, [pc, #592]	; (8011138 <tcp_write+0x2cc>)
 8010ee8:	4894      	ldr	r0, [pc, #592]	; (801113c <tcp_write+0x2d0>)
 8010eea:	f003 fb81 	bl	80145f0 <iprintf>
 8010eee:	f06f 030f 	mvn.w	r3, #15
 8010ef2:	e30d      	b.n	8011510 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010ef4:	88fb      	ldrh	r3, [r7, #6]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7ff ff41 	bl	8010d80 <tcp_write_checks>
 8010efe:	4603      	mov	r3, r0
 8010f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010f04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <tcp_write+0xa6>
    return err;
 8010f0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f10:	e2fe      	b.n	8011510 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010f18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 80f8 	beq.w	8011116 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8010f2c:	e002      	b.n	8010f34 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1f8      	bne.n	8010f2e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3e:	7a9b      	ldrb	r3, [r3, #10]
 8010f40:	f003 0301 	and.w	r3, r3, #1
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d001      	beq.n	8010f4c <tcp_write+0xe0>
 8010f48:	2304      	movs	r3, #4
 8010f4a:	e000      	b.n	8010f4e <tcp_write+0xe2>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010f50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f54:	891b      	ldrh	r3, [r3, #8]
 8010f56:	4619      	mov	r1, r3
 8010f58:	8c3b      	ldrh	r3, [r7, #32]
 8010f5a:	440b      	add	r3, r1
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	da06      	bge.n	8010f6e <tcp_write+0x102>
 8010f60:	4b74      	ldr	r3, [pc, #464]	; (8011134 <tcp_write+0x2c8>)
 8010f62:	f240 12c7 	movw	r2, #455	; 0x1c7
 8010f66:	4976      	ldr	r1, [pc, #472]	; (8011140 <tcp_write+0x2d4>)
 8010f68:	4874      	ldr	r0, [pc, #464]	; (801113c <tcp_write+0x2d0>)
 8010f6a:	f003 fb41 	bl	80145f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f70:	891a      	ldrh	r2, [r3, #8]
 8010f72:	8c3b      	ldrh	r3, [r7, #32]
 8010f74:	4413      	add	r3, r2
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010f84:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010f86:	8a7b      	ldrh	r3, [r7, #18]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d027      	beq.n	8010fdc <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010f8c:	8a7b      	ldrh	r3, [r7, #18]
 8010f8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d206      	bcs.n	8010fa2 <tcp_write+0x136>
 8010f94:	4b67      	ldr	r3, [pc, #412]	; (8011134 <tcp_write+0x2c8>)
 8010f96:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010f9a:	496a      	ldr	r1, [pc, #424]	; (8011144 <tcp_write+0x2d8>)
 8010f9c:	4867      	ldr	r0, [pc, #412]	; (801113c <tcp_write+0x2d0>)
 8010f9e:	f003 fb27 	bl	80145f0 <iprintf>
      seg = last_unsent;
 8010fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010fa6:	8a7b      	ldrh	r3, [r7, #18]
 8010fa8:	88fa      	ldrh	r2, [r7, #6]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d901      	bls.n	8010fb2 <tcp_write+0x146>
 8010fae:	8a7b      	ldrh	r3, [r7, #18]
 8010fb0:	e000      	b.n	8010fb4 <tcp_write+0x148>
 8010fb2:	88fb      	ldrh	r3, [r7, #6]
 8010fb4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	bfa8      	it	ge
 8010fba:	4613      	movge	r3, r2
 8010fbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010fbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010fca:	8a7a      	ldrh	r2, [r7, #18]
 8010fcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010fd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010fdc:	8a7b      	ldrh	r3, [r7, #18]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00b      	beq.n	8010ffa <tcp_write+0x18e>
 8010fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fe6:	88fb      	ldrh	r3, [r7, #6]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d006      	beq.n	8010ffa <tcp_write+0x18e>
 8010fec:	4b51      	ldr	r3, [pc, #324]	; (8011134 <tcp_write+0x2c8>)
 8010fee:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010ff2:	4955      	ldr	r1, [pc, #340]	; (8011148 <tcp_write+0x2dc>)
 8010ff4:	4851      	ldr	r0, [pc, #324]	; (801113c <tcp_write+0x2d0>)
 8010ff6:	f003 fafb 	bl	80145f0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010ffa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ffe:	88fb      	ldrh	r3, [r7, #6]
 8011000:	429a      	cmp	r2, r3
 8011002:	f080 8169 	bcs.w	80112d8 <tcp_write+0x46c>
 8011006:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011008:	2b00      	cmp	r3, #0
 801100a:	f000 8165 	beq.w	80112d8 <tcp_write+0x46c>
 801100e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011010:	891b      	ldrh	r3, [r3, #8]
 8011012:	2b00      	cmp	r3, #0
 8011014:	f000 8160 	beq.w	80112d8 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011018:	88fa      	ldrh	r2, [r7, #6]
 801101a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801101e:	1ad2      	subs	r2, r2, r3
 8011020:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011022:	4293      	cmp	r3, r2
 8011024:	bfa8      	it	ge
 8011026:	4613      	movge	r3, r2
 8011028:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801102a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801102c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801102e:	797b      	ldrb	r3, [r7, #5]
 8011030:	f003 0301 	and.w	r3, r3, #1
 8011034:	2b00      	cmp	r3, #0
 8011036:	d027      	beq.n	8011088 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011038:	f107 0012 	add.w	r0, r7, #18
 801103c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801103e:	8bf9      	ldrh	r1, [r7, #30]
 8011040:	2301      	movs	r3, #1
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	797b      	ldrb	r3, [r7, #5]
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	4603      	mov	r3, r0
 801104e:	2004      	movs	r0, #4
 8011050:	f7ff fe34 	bl	8010cbc <tcp_pbuf_prealloc>
 8011054:	6578      	str	r0, [r7, #84]	; 0x54
 8011056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011058:	2b00      	cmp	r3, #0
 801105a:	f000 8227 	beq.w	80114ac <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801105e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011060:	6858      	ldr	r0, [r3, #4]
 8011062:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011066:	68ba      	ldr	r2, [r7, #8]
 8011068:	4413      	add	r3, r2
 801106a:	8bfa      	ldrh	r2, [r7, #30]
 801106c:	4619      	mov	r1, r3
 801106e:	f003 faac 	bl	80145ca <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011072:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011074:	f7fb fccc 	bl	800ca10 <pbuf_clen>
 8011078:	4603      	mov	r3, r0
 801107a:	461a      	mov	r2, r3
 801107c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011080:	4413      	add	r3, r2
 8011082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011086:	e03f      	b.n	8011108 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	637b      	str	r3, [r7, #52]	; 0x34
 801108e:	e002      	b.n	8011096 <tcp_write+0x22a>
 8011090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	637b      	str	r3, [r7, #52]	; 0x34
 8011096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1f8      	bne.n	8011090 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801109e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a0:	7b1b      	ldrb	r3, [r3, #12]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d115      	bne.n	80110d2 <tcp_write+0x266>
 80110a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110ac:	8952      	ldrh	r2, [r2, #10]
 80110ae:	441a      	add	r2, r3
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d10d      	bne.n	80110d2 <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80110b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d006      	beq.n	80110cc <tcp_write+0x260>
 80110be:	4b1d      	ldr	r3, [pc, #116]	; (8011134 <tcp_write+0x2c8>)
 80110c0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80110c4:	4921      	ldr	r1, [pc, #132]	; (801114c <tcp_write+0x2e0>)
 80110c6:	481d      	ldr	r0, [pc, #116]	; (801113c <tcp_write+0x2d0>)
 80110c8:	f003 fa92 	bl	80145f0 <iprintf>
          extendlen = seglen;
 80110cc:	8bfb      	ldrh	r3, [r7, #30]
 80110ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80110d0:	e01a      	b.n	8011108 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80110d2:	8bfb      	ldrh	r3, [r7, #30]
 80110d4:	2201      	movs	r2, #1
 80110d6:	4619      	mov	r1, r3
 80110d8:	2004      	movs	r0, #4
 80110da:	f7fb f88d 	bl	800c1f8 <pbuf_alloc>
 80110de:	6578      	str	r0, [r7, #84]	; 0x54
 80110e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 81e4 	beq.w	80114b0 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80110e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	441a      	add	r2, r3
 80110f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110f2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80110f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80110f6:	f7fb fc8b 	bl	800ca10 <pbuf_clen>
 80110fa:	4603      	mov	r3, r0
 80110fc:	461a      	mov	r2, r3
 80110fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011102:	4413      	add	r3, r2
 8011104:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011108:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801110c:	8bfb      	ldrh	r3, [r7, #30]
 801110e:	4413      	add	r3, r2
 8011110:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011114:	e0e0      	b.n	80112d8 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80db 	beq.w	80112d8 <tcp_write+0x46c>
 8011122:	4b04      	ldr	r3, [pc, #16]	; (8011134 <tcp_write+0x2c8>)
 8011124:	f240 2225 	movw	r2, #549	; 0x225
 8011128:	4909      	ldr	r1, [pc, #36]	; (8011150 <tcp_write+0x2e4>)
 801112a:	4804      	ldr	r0, [pc, #16]	; (801113c <tcp_write+0x2d0>)
 801112c:	f003 fa60 	bl	80145f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011130:	e0d2      	b.n	80112d8 <tcp_write+0x46c>
 8011132:	bf00      	nop
 8011134:	08017770 	.word	0x08017770
 8011138:	08017898 	.word	0x08017898
 801113c:	080177d4 	.word	0x080177d4
 8011140:	080178cc 	.word	0x080178cc
 8011144:	080178e4 	.word	0x080178e4
 8011148:	08017904 	.word	0x08017904
 801114c:	08017924 	.word	0x08017924
 8011150:	08017950 	.word	0x08017950
    struct pbuf *p;
    u16_t left = len - pos;
 8011154:	88fa      	ldrh	r2, [r7, #6]
 8011156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801115e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011162:	b29b      	uxth	r3, r3
 8011164:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801116a:	8b7a      	ldrh	r2, [r7, #26]
 801116c:	8bbb      	ldrh	r3, [r7, #28]
 801116e:	4293      	cmp	r3, r2
 8011170:	bf28      	it	cs
 8011172:	4613      	movcs	r3, r2
 8011174:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011176:	797b      	ldrb	r3, [r7, #5]
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	2b00      	cmp	r3, #0
 801117e:	d036      	beq.n	80111ee <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011184:	b29a      	uxth	r2, r3
 8011186:	8b3b      	ldrh	r3, [r7, #24]
 8011188:	4413      	add	r3, r2
 801118a:	b299      	uxth	r1, r3
 801118c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801118e:	2b00      	cmp	r3, #0
 8011190:	bf0c      	ite	eq
 8011192:	2301      	moveq	r3, #1
 8011194:	2300      	movne	r3, #0
 8011196:	b2db      	uxtb	r3, r3
 8011198:	f107 0012 	add.w	r0, r7, #18
 801119c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801119e:	9302      	str	r3, [sp, #8]
 80111a0:	797b      	ldrb	r3, [r7, #5]
 80111a2:	9301      	str	r3, [sp, #4]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	4603      	mov	r3, r0
 80111aa:	2000      	movs	r0, #0
 80111ac:	f7ff fd86 	bl	8010cbc <tcp_pbuf_prealloc>
 80111b0:	6338      	str	r0, [r7, #48]	; 0x30
 80111b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f000 817d 	beq.w	80114b4 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80111ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111bc:	895b      	ldrh	r3, [r3, #10]
 80111be:	8b3a      	ldrh	r2, [r7, #24]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d906      	bls.n	80111d2 <tcp_write+0x366>
 80111c4:	4b8f      	ldr	r3, [pc, #572]	; (8011404 <tcp_write+0x598>)
 80111c6:	f240 2241 	movw	r2, #577	; 0x241
 80111ca:	498f      	ldr	r1, [pc, #572]	; (8011408 <tcp_write+0x59c>)
 80111cc:	488f      	ldr	r0, [pc, #572]	; (801140c <tcp_write+0x5a0>)
 80111ce:	f003 fa0f 	bl	80145f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	685a      	ldr	r2, [r3, #4]
 80111d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111da:	18d0      	adds	r0, r2, r3
 80111dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111e0:	68ba      	ldr	r2, [r7, #8]
 80111e2:	4413      	add	r3, r2
 80111e4:	8b3a      	ldrh	r2, [r7, #24]
 80111e6:	4619      	mov	r1, r3
 80111e8:	f003 f9ef 	bl	80145ca <memcpy>
 80111ec:	e02e      	b.n	801124c <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80111ee:	8a7b      	ldrh	r3, [r7, #18]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d006      	beq.n	8011202 <tcp_write+0x396>
 80111f4:	4b83      	ldr	r3, [pc, #524]	; (8011404 <tcp_write+0x598>)
 80111f6:	f240 224b 	movw	r2, #587	; 0x24b
 80111fa:	4985      	ldr	r1, [pc, #532]	; (8011410 <tcp_write+0x5a4>)
 80111fc:	4883      	ldr	r0, [pc, #524]	; (801140c <tcp_write+0x5a0>)
 80111fe:	f003 f9f7 	bl	80145f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011202:	8b3b      	ldrh	r3, [r7, #24]
 8011204:	2201      	movs	r2, #1
 8011206:	4619      	mov	r1, r3
 8011208:	2000      	movs	r0, #0
 801120a:	f7fa fff5 	bl	800c1f8 <pbuf_alloc>
 801120e:	6178      	str	r0, [r7, #20]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2b00      	cmp	r3, #0
 8011214:	f000 8150 	beq.w	80114b8 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	441a      	add	r2, r3
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011228:	b29b      	uxth	r3, r3
 801122a:	2200      	movs	r2, #0
 801122c:	4619      	mov	r1, r3
 801122e:	2000      	movs	r0, #0
 8011230:	f7fa ffe2 	bl	800c1f8 <pbuf_alloc>
 8011234:	6338      	str	r0, [r7, #48]	; 0x30
 8011236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011238:	2b00      	cmp	r3, #0
 801123a:	d103      	bne.n	8011244 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801123c:	6978      	ldr	r0, [r7, #20]
 801123e:	f7fb fb4d 	bl	800c8dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011242:	e13c      	b.n	80114be <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011244:	6979      	ldr	r1, [r7, #20]
 8011246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011248:	f7fb fc22 	bl	800ca90 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801124c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801124e:	f7fb fbdf 	bl	800ca10 <pbuf_clen>
 8011252:	4603      	mov	r3, r0
 8011254:	461a      	mov	r2, r3
 8011256:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801125a:	4413      	add	r3, r2
 801125c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011260:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011264:	2b09      	cmp	r3, #9
 8011266:	d805      	bhi.n	8011274 <tcp_write+0x408>
 8011268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801126c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011270:	4293      	cmp	r3, r2
 8011272:	d903      	bls.n	801127c <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011276:	f7fb fb31 	bl	800c8dc <pbuf_free>
      goto memerr;
 801127a:	e120      	b.n	80114be <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011284:	441a      	add	r2, r3
 8011286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	4613      	mov	r3, r2
 801128e:	2200      	movs	r2, #0
 8011290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f7ff fc88 	bl	8010ba8 <tcp_create_segment>
 8011298:	64f8      	str	r0, [r7, #76]	; 0x4c
 801129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801129c:	2b00      	cmp	r3, #0
 801129e:	f000 810d 	beq.w	80114bc <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80112a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d102      	bne.n	80112ae <tcp_write+0x442>
      queue = seg;
 80112a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112aa:	647b      	str	r3, [r7, #68]	; 0x44
 80112ac:	e00c      	b.n	80112c8 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80112ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d106      	bne.n	80112c2 <tcp_write+0x456>
 80112b4:	4b53      	ldr	r3, [pc, #332]	; (8011404 <tcp_write+0x598>)
 80112b6:	f240 2285 	movw	r2, #645	; 0x285
 80112ba:	4956      	ldr	r1, [pc, #344]	; (8011414 <tcp_write+0x5a8>)
 80112bc:	4853      	ldr	r0, [pc, #332]	; (801140c <tcp_write+0x5a0>)
 80112be:	f003 f997 	bl	80145f0 <iprintf>
      prev_seg->next = seg;
 80112c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112c6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80112c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ca:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80112cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112d0:	8b3b      	ldrh	r3, [r7, #24]
 80112d2:	4413      	add	r3, r2
 80112d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80112d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112dc:	88fb      	ldrh	r3, [r7, #6]
 80112de:	429a      	cmp	r2, r3
 80112e0:	f4ff af38 	bcc.w	8011154 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80112e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d02c      	beq.n	8011344 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80112ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112f0:	e01e      	b.n	8011330 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	891a      	ldrh	r2, [r3, #8]
 80112f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112f8:	4413      	add	r3, r2
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fe:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d110      	bne.n	801132a <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801130e:	8952      	ldrh	r2, [r2, #10]
 8011310:	4413      	add	r3, r2
 8011312:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011314:	68b9      	ldr	r1, [r7, #8]
 8011316:	4618      	mov	r0, r3
 8011318:	f003 f957 	bl	80145ca <memcpy>
        p->len += oversize_used;
 801131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131e:	895a      	ldrh	r2, [r3, #10]
 8011320:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011322:	4413      	add	r3, r2
 8011324:	b29a      	uxth	r2, r3
 8011326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011328:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1dd      	bne.n	80112f2 <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8011336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011338:	891a      	ldrh	r2, [r3, #8]
 801133a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801133c:	4413      	add	r3, r2
 801133e:	b29a      	uxth	r2, r3
 8011340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011342:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011344:	8a7a      	ldrh	r2, [r7, #18]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801134e:	2b00      	cmp	r3, #0
 8011350:	d018      	beq.n	8011384 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_write+0x4fa>
 8011358:	4b2a      	ldr	r3, [pc, #168]	; (8011404 <tcp_write+0x598>)
 801135a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801135e:	492e      	ldr	r1, [pc, #184]	; (8011418 <tcp_write+0x5ac>)
 8011360:	482a      	ldr	r0, [pc, #168]	; (801140c <tcp_write+0x5a0>)
 8011362:	f003 f945 	bl	80145f0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801136c:	4618      	mov	r0, r3
 801136e:	f7fb fb8f 	bl	800ca90 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011374:	891a      	ldrh	r2, [r3, #8]
 8011376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011378:	891b      	ldrh	r3, [r3, #8]
 801137a:	4413      	add	r3, r2
 801137c:	b29a      	uxth	r2, r3
 801137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011380:	811a      	strh	r2, [r3, #8]
 8011382:	e037      	b.n	80113f4 <tcp_write+0x588>
  } else if (extendlen > 0) {
 8011384:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011386:	2b00      	cmp	r3, #0
 8011388:	d034      	beq.n	80113f4 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801138a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801138c:	2b00      	cmp	r3, #0
 801138e:	d003      	beq.n	8011398 <tcp_write+0x52c>
 8011390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d106      	bne.n	80113a6 <tcp_write+0x53a>
 8011398:	4b1a      	ldr	r3, [pc, #104]	; (8011404 <tcp_write+0x598>)
 801139a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801139e:	491f      	ldr	r1, [pc, #124]	; (801141c <tcp_write+0x5b0>)
 80113a0:	481a      	ldr	r0, [pc, #104]	; (801140c <tcp_write+0x5a0>)
 80113a2:	f003 f925 	bl	80145f0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ac:	e009      	b.n	80113c2 <tcp_write+0x556>
      p->tot_len += extendlen;
 80113ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b0:	891a      	ldrh	r2, [r3, #8]
 80113b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113b4:	4413      	add	r3, r2
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ba:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80113c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d1f1      	bne.n	80113ae <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	891a      	ldrh	r2, [r3, #8]
 80113ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113d0:	4413      	add	r3, r2
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80113d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113da:	895a      	ldrh	r2, [r3, #10]
 80113dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113de:	4413      	add	r3, r2
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80113e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e8:	891a      	ldrh	r2, [r3, #8]
 80113ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113ec:	4413      	add	r3, r2
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80113f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d112      	bne.n	8011420 <tcp_write+0x5b4>
    pcb->unsent = queue;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113fe:	669a      	str	r2, [r3, #104]	; 0x68
 8011400:	e011      	b.n	8011426 <tcp_write+0x5ba>
 8011402:	bf00      	nop
 8011404:	08017770 	.word	0x08017770
 8011408:	08017980 	.word	0x08017980
 801140c:	080177d4 	.word	0x080177d4
 8011410:	080179c0 	.word	0x080179c0
 8011414:	080179d0 	.word	0x080179d0
 8011418:	080179e4 	.word	0x080179e4
 801141c:	08017a1c 	.word	0x08017a1c
  } else {
    last_unsent->next = queue;
 8011420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011424:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801142a:	88fb      	ldrh	r3, [r7, #6]
 801142c:	441a      	add	r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011438:	88fb      	ldrh	r3, [r7, #6]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	b29a      	uxth	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801144a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10a      	bne.n	8011476 <tcp_write+0x60a>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_write+0x60a>
 8011468:	4b2b      	ldr	r3, [pc, #172]	; (8011518 <tcp_write+0x6ac>)
 801146a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801146e:	492b      	ldr	r1, [pc, #172]	; (801151c <tcp_write+0x6b0>)
 8011470:	482b      	ldr	r0, [pc, #172]	; (8011520 <tcp_write+0x6b4>)
 8011472:	f003 f8bd 	bl	80145f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8011476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011478:	2b00      	cmp	r3, #0
 801147a:	d015      	beq.n	80114a8 <tcp_write+0x63c>
 801147c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d011      	beq.n	80114a8 <tcp_write+0x63c>
 8011484:	797b      	ldrb	r3, [r7, #5]
 8011486:	f003 0302 	and.w	r3, r3, #2
 801148a:	2b00      	cmp	r3, #0
 801148c:	d10c      	bne.n	80114a8 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801148e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011490:	68dc      	ldr	r4, [r3, #12]
 8011492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	899b      	ldrh	r3, [r3, #12]
 8011498:	b29d      	uxth	r5, r3
 801149a:	2008      	movs	r0, #8
 801149c:	f7f7 fe0c 	bl	80090b8 <lwip_htons>
 80114a0:	4603      	mov	r3, r0
 80114a2:	432b      	orrs	r3, r5
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	e031      	b.n	8011510 <tcp_write+0x6a4>
          goto memerr;
 80114ac:	bf00      	nop
 80114ae:	e006      	b.n	80114be <tcp_write+0x652>
            goto memerr;
 80114b0:	bf00      	nop
 80114b2:	e004      	b.n	80114be <tcp_write+0x652>
        goto memerr;
 80114b4:	bf00      	nop
 80114b6:	e002      	b.n	80114be <tcp_write+0x652>
        goto memerr;
 80114b8:	bf00      	nop
 80114ba:	e000      	b.n	80114be <tcp_write+0x652>
      goto memerr;
 80114bc:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	7e9b      	ldrb	r3, [r3, #26]
 80114c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80114cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d002      	beq.n	80114d8 <tcp_write+0x66c>
    pbuf_free(concat_p);
 80114d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80114d4:	f7fb fa02 	bl	800c8dc <pbuf_free>
  }
  if (queue != NULL) {
 80114d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d002      	beq.n	80114e4 <tcp_write+0x678>
    tcp_segs_free(queue);
 80114de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80114e0:	f7fc fccd 	bl	800de7e <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00e      	beq.n	801150c <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10a      	bne.n	801150c <tcp_write+0x6a0>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d106      	bne.n	801150c <tcp_write+0x6a0>
 80114fe:	4b06      	ldr	r3, [pc, #24]	; (8011518 <tcp_write+0x6ac>)
 8011500:	f240 3202 	movw	r2, #770	; 0x302
 8011504:	4905      	ldr	r1, [pc, #20]	; (801151c <tcp_write+0x6b0>)
 8011506:	4806      	ldr	r0, [pc, #24]	; (8011520 <tcp_write+0x6b4>)
 8011508:	f003 f872 	bl	80145f0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801150c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011510:	4618      	mov	r0, r3
 8011512:	3758      	adds	r7, #88	; 0x58
 8011514:	46bd      	mov	sp, r7
 8011516:	bdb0      	pop	{r4, r5, r7, pc}
 8011518:	08017770 	.word	0x08017770
 801151c:	08017a54 	.word	0x08017a54
 8011520:	080177d4 	.word	0x080177d4

08011524 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b08a      	sub	sp, #40	; 0x28
 8011528:	af02      	add	r7, sp, #8
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	460b      	mov	r3, r1
 801152e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011530:	2300      	movs	r3, #0
 8011532:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011534:	2300      	movs	r3, #0
 8011536:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011538:	78fb      	ldrb	r3, [r7, #3]
 801153a:	f003 0303 	and.w	r3, r3, #3
 801153e:	2b00      	cmp	r3, #0
 8011540:	d106      	bne.n	8011550 <tcp_enqueue_flags+0x2c>
 8011542:	4b70      	ldr	r3, [pc, #448]	; (8011704 <tcp_enqueue_flags+0x1e0>)
 8011544:	f240 321b 	movw	r2, #795	; 0x31b
 8011548:	496f      	ldr	r1, [pc, #444]	; (8011708 <tcp_enqueue_flags+0x1e4>)
 801154a:	4870      	ldr	r0, [pc, #448]	; (801170c <tcp_enqueue_flags+0x1e8>)
 801154c:	f003 f850 	bl	80145f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011556:	2b08      	cmp	r3, #8
 8011558:	d806      	bhi.n	8011568 <tcp_enqueue_flags+0x44>
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011560:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011564:	4293      	cmp	r3, r2
 8011566:	d90e      	bls.n	8011586 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011568:	78fb      	ldrb	r3, [r7, #3]
 801156a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801156e:	2b00      	cmp	r3, #0
 8011570:	d109      	bne.n	8011586 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	7e9b      	ldrb	r3, [r3, #26]
 8011576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801157a:	b2da      	uxtb	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011584:	e0ba      	b.n	80116fc <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8011586:	78fb      	ldrb	r3, [r7, #3]
 8011588:	f003 0302 	and.w	r3, r3, #2
 801158c:	2b00      	cmp	r3, #0
 801158e:	d001      	beq.n	8011594 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011590:	2301      	movs	r3, #1
 8011592:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011594:	7ffb      	ldrb	r3, [r7, #31]
 8011596:	f003 0301 	and.w	r3, r3, #1
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <tcp_enqueue_flags+0x7e>
 801159e:	2304      	movs	r3, #4
 80115a0:	e000      	b.n	80115a4 <tcp_enqueue_flags+0x80>
 80115a2:	2300      	movs	r3, #0
 80115a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	2200      	movs	r2, #0
 80115ac:	4619      	mov	r1, r3
 80115ae:	2000      	movs	r0, #0
 80115b0:	f7fa fe22 	bl	800c1f8 <pbuf_alloc>
 80115b4:	6138      	str	r0, [r7, #16]
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d109      	bne.n	80115d0 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	7e9b      	ldrb	r3, [r3, #26]
 80115c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80115c4:	b2da      	uxtb	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80115ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ce:	e095      	b.n	80116fc <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	895a      	ldrh	r2, [r3, #10]
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	429a      	cmp	r2, r3
 80115da:	d206      	bcs.n	80115ea <tcp_enqueue_flags+0xc6>
 80115dc:	4b49      	ldr	r3, [pc, #292]	; (8011704 <tcp_enqueue_flags+0x1e0>)
 80115de:	f240 3241 	movw	r2, #833	; 0x341
 80115e2:	494b      	ldr	r1, [pc, #300]	; (8011710 <tcp_enqueue_flags+0x1ec>)
 80115e4:	4849      	ldr	r0, [pc, #292]	; (801170c <tcp_enqueue_flags+0x1e8>)
 80115e6:	f003 f803 	bl	80145f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80115ee:	78fa      	ldrb	r2, [r7, #3]
 80115f0:	7ffb      	ldrb	r3, [r7, #31]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	460b      	mov	r3, r1
 80115f6:	6939      	ldr	r1, [r7, #16]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff fad5 	bl	8010ba8 <tcp_create_segment>
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d109      	bne.n	801161a <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	7e9b      	ldrb	r3, [r3, #26]
 801160a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801160e:	b2da      	uxtb	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011618:	e070      	b.n	80116fc <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	f003 0303 	and.w	r3, r3, #3
 8011622:	2b00      	cmp	r3, #0
 8011624:	d006      	beq.n	8011634 <tcp_enqueue_flags+0x110>
 8011626:	4b37      	ldr	r3, [pc, #220]	; (8011704 <tcp_enqueue_flags+0x1e0>)
 8011628:	f240 3249 	movw	r2, #841	; 0x349
 801162c:	4939      	ldr	r1, [pc, #228]	; (8011714 <tcp_enqueue_flags+0x1f0>)
 801162e:	4837      	ldr	r0, [pc, #220]	; (801170c <tcp_enqueue_flags+0x1e8>)
 8011630:	f002 ffde 	bl	80145f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	891b      	ldrh	r3, [r3, #8]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d006      	beq.n	801164a <tcp_enqueue_flags+0x126>
 801163c:	4b31      	ldr	r3, [pc, #196]	; (8011704 <tcp_enqueue_flags+0x1e0>)
 801163e:	f240 324a 	movw	r2, #842	; 0x34a
 8011642:	4935      	ldr	r1, [pc, #212]	; (8011718 <tcp_enqueue_flags+0x1f4>)
 8011644:	4831      	ldr	r0, [pc, #196]	; (801170c <tcp_enqueue_flags+0x1e8>)
 8011646:	f002 ffd3 	bl	80145f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801164e:	2b00      	cmp	r3, #0
 8011650:	d103      	bne.n	801165a <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	669a      	str	r2, [r3, #104]	; 0x68
 8011658:	e00d      	b.n	8011676 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801165e:	61bb      	str	r3, [r7, #24]
 8011660:	e002      	b.n	8011668 <tcp_enqueue_flags+0x144>
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	61bb      	str	r3, [r7, #24]
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d1f8      	bne.n	8011662 <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801167e:	78fb      	ldrb	r3, [r7, #3]
 8011680:	f003 0302 	and.w	r3, r3, #2
 8011684:	2b00      	cmp	r3, #0
 8011686:	d104      	bne.n	8011692 <tcp_enqueue_flags+0x16e>
 8011688:	78fb      	ldrb	r3, [r7, #3]
 801168a:	f003 0301 	and.w	r3, r3, #1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d004      	beq.n	801169c <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801169c:	78fb      	ldrb	r3, [r7, #3]
 801169e:	f003 0301 	and.w	r3, r3, #1
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d006      	beq.n	80116b4 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	7e9b      	ldrb	r3, [r3, #26]
 80116aa:	f043 0320 	orr.w	r3, r3, #32
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fb f9a9 	bl	800ca10 <pbuf_clen>
 80116be:	4603      	mov	r3, r0
 80116c0:	461a      	mov	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80116c8:	4413      	add	r3, r2
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00e      	beq.n	80116fa <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10a      	bne.n	80116fa <tcp_enqueue_flags+0x1d6>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d106      	bne.n	80116fa <tcp_enqueue_flags+0x1d6>
 80116ec:	4b05      	ldr	r3, [pc, #20]	; (8011704 <tcp_enqueue_flags+0x1e0>)
 80116ee:	f240 326d 	movw	r2, #877	; 0x36d
 80116f2:	490a      	ldr	r1, [pc, #40]	; (801171c <tcp_enqueue_flags+0x1f8>)
 80116f4:	4805      	ldr	r0, [pc, #20]	; (801170c <tcp_enqueue_flags+0x1e8>)
 80116f6:	f002 ff7b 	bl	80145f0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3720      	adds	r7, #32
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	08017770 	.word	0x08017770
 8011708:	08017a74 	.word	0x08017a74
 801170c:	080177d4 	.word	0x080177d4
 8011710:	08017acc 	.word	0x08017acc
 8011714:	08017b08 	.word	0x08017b08
 8011718:	08017b20 	.word	0x08017b20
 801171c:	08017b4c 	.word	0x08017b4c

08011720 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011720:	b590      	push	{r4, r7, lr}
 8011722:	b08b      	sub	sp, #44	; 0x2c
 8011724:	af04      	add	r7, sp, #16
 8011726:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801172c:	7dbb      	ldrb	r3, [r7, #22]
 801172e:	b29c      	uxth	r4, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011734:	4618      	mov	r0, r3
 8011736:	f7f7 fccd 	bl	80090d4 <lwip_htonl>
 801173a:	4603      	mov	r3, r0
 801173c:	2200      	movs	r2, #0
 801173e:	4621      	mov	r1, r4
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff f977 	bl	8010a34 <tcp_output_alloc_header>
 8011746:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d109      	bne.n	8011762 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	7e9b      	ldrb	r3, [r3, #26]
 8011752:	f043 0303 	orr.w	r3, r3, #3
 8011756:	b2da      	uxtb	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801175c:	f06f 0301 	mvn.w	r3, #1
 8011760:	e036      	b.n	80117d0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	3304      	adds	r3, #4
 8011766:	4618      	mov	r0, r3
 8011768:	f7f8 fd88 	bl	800a27c <ip4_route>
 801176c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011774:	23fc      	movs	r3, #252	; 0xfc
 8011776:	75fb      	strb	r3, [r7, #23]
 8011778:	e012      	b.n	80117a0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801177a:	6879      	ldr	r1, [r7, #4]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	1d18      	adds	r0, r3, #4
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	7a9c      	ldrb	r4, [r3, #10]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	7a5b      	ldrb	r3, [r3, #9]
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	9202      	str	r2, [sp, #8]
 801178c:	2206      	movs	r2, #6
 801178e:	9201      	str	r2, [sp, #4]
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	4623      	mov	r3, r4
 8011794:	4602      	mov	r2, r0
 8011796:	6938      	ldr	r0, [r7, #16]
 8011798:	f7f8 ff14 	bl	800a5c4 <ip4_output_if>
 801179c:	4603      	mov	r3, r0
 801179e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80117a0:	6938      	ldr	r0, [r7, #16]
 80117a2:	f7fb f89b 	bl	800c8dc <pbuf_free>

  if (err != ERR_OK) {
 80117a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	7e9b      	ldrb	r3, [r3, #26]
 80117b2:	f043 0303 	orr.w	r3, r3, #3
 80117b6:	b2da      	uxtb	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	769a      	strb	r2, [r3, #26]
 80117bc:	e006      	b.n	80117cc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7e9b      	ldrb	r3, [r3, #26]
 80117c2:	f023 0303 	bic.w	r3, r3, #3
 80117c6:	b2da      	uxtb	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80117cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	371c      	adds	r7, #28
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd90      	pop	{r4, r7, pc}

080117d8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80117d8:	b5b0      	push	{r4, r5, r7, lr}
 80117da:	b08a      	sub	sp, #40	; 0x28
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d106      	bne.n	80117f6 <tcp_output+0x1e>
 80117e8:	4b9b      	ldr	r3, [pc, #620]	; (8011a58 <tcp_output+0x280>)
 80117ea:	f240 32ed 	movw	r2, #1005	; 0x3ed
 80117ee:	499b      	ldr	r1, [pc, #620]	; (8011a5c <tcp_output+0x284>)
 80117f0:	489b      	ldr	r0, [pc, #620]	; (8011a60 <tcp_output+0x288>)
 80117f2:	f002 fefd 	bl	80145f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80117f6:	4b9b      	ldr	r3, [pc, #620]	; (8011a64 <tcp_output+0x28c>)
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d101      	bne.n	8011804 <tcp_output+0x2c>
    return ERR_OK;
 8011800:	2300      	movs	r3, #0
 8011802:	e1cd      	b.n	8011ba0 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011810:	429a      	cmp	r2, r3
 8011812:	d203      	bcs.n	801181c <tcp_output+0x44>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801181a:	e002      	b.n	8011822 <tcp_output+0x4a>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011822:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011828:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	7e9b      	ldrb	r3, [r3, #26]
 801182e:	f003 0302 	and.w	r3, r3, #2
 8011832:	2b00      	cmp	r3, #0
 8011834:	d017      	beq.n	8011866 <tcp_output+0x8e>
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00f      	beq.n	801185c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	f7f7 fc46 	bl	80090d4 <lwip_htonl>
 8011848:	4602      	mov	r2, r0
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011852:	8912      	ldrh	r2, [r2, #8]
 8011854:	441a      	add	r2, r3
     (seg == NULL ||
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	429a      	cmp	r2, r3
 801185a:	d904      	bls.n	8011866 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7ff ff5f 	bl	8011720 <tcp_send_empty_ack>
 8011862:	4603      	mov	r3, r0
 8011864:	e19c      	b.n	8011ba0 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801186a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801186c:	6a3b      	ldr	r3, [r7, #32]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d007      	beq.n	8011882 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8011872:	e002      	b.n	801187a <tcp_output+0xa2>
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	623b      	str	r3, [r7, #32]
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1f8      	bne.n	8011874 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	3304      	adds	r3, #4
 8011886:	4618      	mov	r0, r3
 8011888:	f7f8 fcf8 	bl	800a27c <ip4_route>
 801188c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d102      	bne.n	801189a <tcp_output+0xc2>
    return ERR_RTE;
 8011894:	f06f 0303 	mvn.w	r3, #3
 8011898:	e182      	b.n	8011ba0 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <tcp_output+0xd0>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d111      	bne.n	80118cc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d002      	beq.n	80118b4 <tcp_output+0xdc>
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	3304      	adds	r3, #4
 80118b2:	e000      	b.n	80118b6 <tcp_output+0xde>
 80118b4:	2300      	movs	r3, #0
 80118b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d102      	bne.n	80118c4 <tcp_output+0xec>
      return ERR_RTE;
 80118be:	f06f 0303 	mvn.w	r3, #3
 80118c2:	e16d      	b.n	8011ba0 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f000 813e 	beq.w	8011b50 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80118d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7f7 fbfa 	bl	80090d4 <lwip_htonl>
 80118e0:	4602      	mov	r2, r0
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118ea:	8912      	ldrh	r2, [r2, #8]
 80118ec:	441a      	add	r2, r3
  if (seg != NULL &&
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	f240 812d 	bls.w	8011b50 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 8129 	beq.w	8011b50 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011904:	461a      	mov	r2, r3
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	429a      	cmp	r2, r3
 801190a:	f040 8121 	bne.w	8011b50 <tcp_output+0x378>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011912:	2b00      	cmp	r3, #0
 8011914:	f040 811c 	bne.w	8011b50 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801191e:	2b00      	cmp	r3, #0
 8011920:	f040 812b 	bne.w	8011b7a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2201      	movs	r2, #1
 8011930:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011934:	e121      	b.n	8011b7a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	899b      	ldrh	r3, [r3, #12]
 801193c:	b29b      	uxth	r3, r3
 801193e:	4618      	mov	r0, r3
 8011940:	f7f7 fbba 	bl	80090b8 <lwip_htons>
 8011944:	4603      	mov	r3, r0
 8011946:	f003 0304 	and.w	r3, r3, #4
 801194a:	2b00      	cmp	r3, #0
 801194c:	d006      	beq.n	801195c <tcp_output+0x184>
 801194e:	4b42      	ldr	r3, [pc, #264]	; (8011a58 <tcp_output+0x280>)
 8011950:	f240 4246 	movw	r2, #1094	; 0x446
 8011954:	4944      	ldr	r1, [pc, #272]	; (8011a68 <tcp_output+0x290>)
 8011956:	4842      	ldr	r0, [pc, #264]	; (8011a60 <tcp_output+0x288>)
 8011958:	f002 fe4a 	bl	80145f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011960:	2b00      	cmp	r3, #0
 8011962:	d01f      	beq.n	80119a4 <tcp_output+0x1cc>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	7e9b      	ldrb	r3, [r3, #26]
 8011968:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801196c:	2b00      	cmp	r3, #0
 801196e:	d119      	bne.n	80119a4 <tcp_output+0x1cc>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011974:	2b00      	cmp	r3, #0
 8011976:	d00b      	beq.n	8011990 <tcp_output+0x1b8>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d110      	bne.n	80119a4 <tcp_output+0x1cc>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011986:	891a      	ldrh	r2, [r3, #8]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801198c:	429a      	cmp	r2, r3
 801198e:	d209      	bcs.n	80119a4 <tcp_output+0x1cc>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011996:	2b00      	cmp	r3, #0
 8011998:	d004      	beq.n	80119a4 <tcp_output+0x1cc>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119a0:	2b08      	cmp	r3, #8
 80119a2:	d901      	bls.n	80119a8 <tcp_output+0x1d0>
 80119a4:	2301      	movs	r3, #1
 80119a6:	e000      	b.n	80119aa <tcp_output+0x1d2>
 80119a8:	2300      	movs	r3, #0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d106      	bne.n	80119bc <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	7e9b      	ldrb	r3, [r3, #26]
 80119b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f000 80e1 	beq.w	8011b7e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	7d1b      	ldrb	r3, [r3, #20]
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d00c      	beq.n	80119de <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	68dc      	ldr	r4, [r3, #12]
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	899b      	ldrh	r3, [r3, #12]
 80119ce:	b29d      	uxth	r5, r3
 80119d0:	2010      	movs	r0, #16
 80119d2:	f7f7 fb71 	bl	80090b8 <lwip_htons>
 80119d6:	4603      	mov	r3, r0
 80119d8:	432b      	orrs	r3, r5
 80119da:	b29b      	uxth	r3, r3
 80119dc:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80119de:	697a      	ldr	r2, [r7, #20]
 80119e0:	6879      	ldr	r1, [r7, #4]
 80119e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119e4:	f000 f8e0 	bl	8011ba8 <tcp_output_segment>
 80119e8:	4603      	mov	r3, r0
 80119ea:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80119ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	7e9b      	ldrb	r3, [r3, #26]
 80119f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	769a      	strb	r2, [r3, #26]
      return err;
 8011a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a06:	e0cb      	b.n	8011ba0 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	7d1b      	ldrb	r3, [r3, #20]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d006      	beq.n	8011a26 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	7e9b      	ldrb	r3, [r3, #26]
 8011a1c:	f023 0303 	bic.w	r3, r3, #3
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a28:	68db      	ldr	r3, [r3, #12]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7f7 fb51 	bl	80090d4 <lwip_htonl>
 8011a32:	4604      	mov	r4, r0
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	891b      	ldrh	r3, [r3, #8]
 8011a38:	461d      	mov	r5, r3
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	899b      	ldrh	r3, [r3, #12]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7f7 fb38 	bl	80090b8 <lwip_htons>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	f003 0303 	and.w	r3, r3, #3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00c      	beq.n	8011a6c <tcp_output+0x294>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e00b      	b.n	8011a6e <tcp_output+0x296>
 8011a56:	bf00      	nop
 8011a58:	08017770 	.word	0x08017770
 8011a5c:	08017b74 	.word	0x08017b74
 8011a60:	080177d4 	.word	0x080177d4
 8011a64:	20007748 	.word	0x20007748
 8011a68:	08017b9c 	.word	0x08017b9c
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	442b      	add	r3, r5
 8011a70:	4423      	add	r3, r4
 8011a72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	da02      	bge.n	8011a86 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	891b      	ldrh	r3, [r3, #8]
 8011a8a:	461c      	mov	r4, r3
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	899b      	ldrh	r3, [r3, #12]
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7f7 fb0f 	bl	80090b8 <lwip_htons>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f003 0303 	and.w	r3, r3, #3
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d001      	beq.n	8011aa8 <tcp_output+0x2d0>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e000      	b.n	8011aaa <tcp_output+0x2d2>
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4423      	add	r3, r4
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d049      	beq.n	8011b44 <tcp_output+0x36c>
      seg->next = NULL;
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d105      	bne.n	8011aca <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	623b      	str	r3, [r7, #32]
 8011ac8:	e03f      	b.n	8011b4a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	68db      	ldr	r3, [r3, #12]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7f7 faff 	bl	80090d4 <lwip_htonl>
 8011ad6:	4604      	mov	r4, r0
 8011ad8:	6a3b      	ldr	r3, [r7, #32]
 8011ada:	68db      	ldr	r3, [r3, #12]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f7 faf8 	bl	80090d4 <lwip_htonl>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	1ae3      	subs	r3, r4, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	da24      	bge.n	8011b36 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	336c      	adds	r3, #108	; 0x6c
 8011af0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011af2:	e002      	b.n	8011afa <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d011      	beq.n	8011b26 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f7 fae2 	bl	80090d4 <lwip_htonl>
 8011b10:	4604      	mov	r4, r0
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7f7 fadb 	bl	80090d4 <lwip_htonl>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	dbe6      	blt.n	8011af4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	601a      	str	r2, [r3, #0]
 8011b34:	e009      	b.n	8011b4a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b36:	6a3b      	ldr	r3, [r7, #32]
 8011b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b3a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b3c:	6a3b      	ldr	r3, [r7, #32]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	623b      	str	r3, [r7, #32]
 8011b42:	e002      	b.n	8011b4a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b46:	f7fc f9ae 	bl	800dea6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d014      	beq.n	8011b80 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7f7 fab9 	bl	80090d4 <lwip_htonl>
 8011b62:	4602      	mov	r2, r0
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b6c:	8912      	ldrh	r2, [r2, #8]
 8011b6e:	441a      	add	r2, r3
  while (seg != NULL &&
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	f67f aedf 	bls.w	8011936 <tcp_output+0x15e>
 8011b78:	e002      	b.n	8011b80 <tcp_output+0x3a8>
    goto output_done;
 8011b7a:	bf00      	nop
 8011b7c:	e000      	b.n	8011b80 <tcp_output+0x3a8>
      break;
 8011b7e:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d103      	bne.n	8011b90 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	7e9b      	ldrb	r3, [r3, #26]
 8011b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011b9e:	2300      	movs	r3, #0
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3728      	adds	r7, #40	; 0x28
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bdb0      	pop	{r4, r5, r7, pc}

08011ba8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011ba8:	b5b0      	push	{r4, r5, r7, lr}
 8011baa:	b08c      	sub	sp, #48	; 0x30
 8011bac:	af04      	add	r7, sp, #16
 8011bae:	60f8      	str	r0, [r7, #12]
 8011bb0:	60b9      	str	r1, [r7, #8]
 8011bb2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	89db      	ldrh	r3, [r3, #14]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d001      	beq.n	8011bc2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e08b      	b.n	8011cda <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	68dc      	ldr	r4, [r3, #12]
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7f7 fa82 	bl	80090d4 <lwip_htonl>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	68dc      	ldr	r4, [r3, #12]
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7f7 fa6b 	bl	80090b8 <lwip_htons>
 8011be2:	4603      	mov	r3, r0
 8011be4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bea:	68ba      	ldr	r2, [r7, #8]
 8011bec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011bee:	441a      	add	r2, r3
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	3314      	adds	r3, #20
 8011bfa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	7a9b      	ldrb	r3, [r3, #10]
 8011c00:	f003 0301 	and.w	r3, r3, #1
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d014      	beq.n	8011c32 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011c12:	f7fc fc73 	bl	800e4fc <tcp_eff_send_mss_impl>
 8011c16:	4603      	mov	r3, r0
 8011c18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011c1a:	8b7b      	ldrh	r3, [r7, #26]
 8011c1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7f7 fa57 	bl	80090d4 <lwip_htonl>
 8011c26:	4602      	mov	r2, r0
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	3304      	adds	r3, #4
 8011c30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	da02      	bge.n	8011c42 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d10c      	bne.n	8011c64 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011c4a:	4b26      	ldr	r3, [pc, #152]	; (8011ce4 <tcp_output_segment+0x13c>)
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f7 fa3b 	bl	80090d4 <lwip_htonl>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	68db      	ldr	r3, [r3, #12]
 8011c68:	461a      	mov	r2, r3
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	1ad3      	subs	r3, r2, r3
 8011c72:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	68fa      	ldr	r2, [r7, #12]
 8011c7a:	6852      	ldr	r2, [r2, #4]
 8011c7c:	8951      	ldrh	r1, [r2, #10]
 8011c7e:	8b3a      	ldrh	r2, [r7, #24]
 8011c80:	1a8a      	subs	r2, r1, r2
 8011c82:	b292      	uxth	r2, r2
 8011c84:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	6852      	ldr	r2, [r2, #4]
 8011c8e:	8911      	ldrh	r1, [r2, #8]
 8011c90:	8b3a      	ldrh	r2, [r7, #24]
 8011c92:	1a8a      	subs	r2, r1, r2
 8011c94:	b292      	uxth	r2, r2
 8011c96:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	68fa      	ldr	r2, [r7, #12]
 8011c9e:	68d2      	ldr	r2, [r2, #12]
 8011ca0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	741a      	strb	r2, [r3, #16]
 8011caa:	2200      	movs	r2, #0
 8011cac:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6858      	ldr	r0, [r3, #4]
 8011cb2:	68b9      	ldr	r1, [r7, #8]
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	1d1c      	adds	r4, r3, #4
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	7a9d      	ldrb	r5, [r3, #10]
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	7a5b      	ldrb	r3, [r3, #9]
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	9202      	str	r2, [sp, #8]
 8011cc4:	2206      	movs	r2, #6
 8011cc6:	9201      	str	r2, [sp, #4]
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	462b      	mov	r3, r5
 8011ccc:	4622      	mov	r2, r4
 8011cce:	f7f8 fc79 	bl	800a5c4 <ip4_output_if>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3720      	adds	r7, #32
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20007738 	.word	0x20007738

08011ce8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b08c      	sub	sp, #48	; 0x30
 8011cec:	af04      	add	r7, sp, #16
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	607a      	str	r2, [r7, #4]
 8011cf4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	2114      	movs	r1, #20
 8011cfa:	2001      	movs	r0, #1
 8011cfc:	f7fa fa7c 	bl	800c1f8 <pbuf_alloc>
 8011d00:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d05b      	beq.n	8011dc0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	895b      	ldrh	r3, [r3, #10]
 8011d0c:	2b13      	cmp	r3, #19
 8011d0e:	d806      	bhi.n	8011d1e <tcp_rst+0x36>
 8011d10:	4b2d      	ldr	r3, [pc, #180]	; (8011dc8 <tcp_rst+0xe0>)
 8011d12:	f240 524d 	movw	r2, #1357	; 0x54d
 8011d16:	492d      	ldr	r1, [pc, #180]	; (8011dcc <tcp_rst+0xe4>)
 8011d18:	482d      	ldr	r0, [pc, #180]	; (8011dd0 <tcp_rst+0xe8>)
 8011d1a:	f002 fc69 	bl	80145f0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011d24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7f7 f9c6 	bl	80090b8 <lwip_htons>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	461a      	mov	r2, r3
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011d34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f7 f9be 	bl	80090b8 <lwip_htons>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011d44:	68f8      	ldr	r0, [r7, #12]
 8011d46:	f7f7 f9c5 	bl	80090d4 <lwip_htonl>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011d50:	68b8      	ldr	r0, [r7, #8]
 8011d52:	f7f7 f9bf 	bl	80090d4 <lwip_htonl>
 8011d56:	4602      	mov	r2, r0
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011d5c:	f245 0014 	movw	r0, #20500	; 0x5014
 8011d60:	f7f7 f9aa 	bl	80090b8 <lwip_htons>
 8011d64:	4603      	mov	r3, r0
 8011d66:	461a      	mov	r2, r3
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f042 0208 	orr.w	r2, r2, #8
 8011d74:	739a      	strb	r2, [r3, #14]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011d7c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	2200      	movs	r2, #0
 8011d82:	741a      	strb	r2, [r3, #16]
 8011d84:	2200      	movs	r2, #0
 8011d86:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	749a      	strb	r2, [r3, #18]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011d92:	6838      	ldr	r0, [r7, #0]
 8011d94:	f7f8 fa72 	bl	800a27c <ip4_route>
 8011d98:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00b      	beq.n	8011db8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	9302      	str	r3, [sp, #8]
 8011da4:	2306      	movs	r3, #6
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	2300      	movs	r3, #0
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	23ff      	movs	r3, #255	; 0xff
 8011dae:	683a      	ldr	r2, [r7, #0]
 8011db0:	6879      	ldr	r1, [r7, #4]
 8011db2:	69f8      	ldr	r0, [r7, #28]
 8011db4:	f7f8 fc06 	bl	800a5c4 <ip4_output_if>
  }
  pbuf_free(p);
 8011db8:	69f8      	ldr	r0, [r7, #28]
 8011dba:	f7fa fd8f 	bl	800c8dc <pbuf_free>
 8011dbe:	e000      	b.n	8011dc2 <tcp_rst+0xda>
    return;
 8011dc0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011dc2:	3720      	adds	r7, #32
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	08017770 	.word	0x08017770
 8011dcc:	080177a4 	.word	0x080177a4
 8011dd0:	080177d4 	.word	0x080177d4

08011dd4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d029      	beq.n	8011e38 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de8:	60fb      	str	r3, [r7, #12]
 8011dea:	e002      	b.n	8011df2 <tcp_rexmit_rto+0x1e>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	60fb      	str	r3, [r7, #12]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1f8      	bne.n	8011dec <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e16:	2bff      	cmp	r3, #255	; 0xff
 8011e18:	d007      	beq.n	8011e2a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e20:	3301      	adds	r3, #1
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7ff fcd1 	bl	80117d8 <tcp_output>
 8011e36:	e000      	b.n	8011e3a <tcp_rexmit_rto+0x66>
    return;
 8011e38:	bf00      	nop
}
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011e40:	b590      	push	{r4, r7, lr}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d043      	beq.n	8011ed8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e54:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	3368      	adds	r3, #104	; 0x68
 8011e62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011e64:	e002      	b.n	8011e6c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d011      	beq.n	8011e98 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7f7 f929 	bl	80090d4 <lwip_htonl>
 8011e82:	4604      	mov	r4, r0
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f7 f922 	bl	80090d4 <lwip_htonl>
 8011e90:	4603      	mov	r3, r0
 8011e92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	dbe6      	blt.n	8011e66 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d103      	bne.n	8011eb6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ebc:	2bff      	cmp	r3, #255	; 0xff
 8011ebe:	d007      	beq.n	8011ed0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8011ed6:	e000      	b.n	8011eda <tcp_rexmit+0x9a>
    return;
 8011ed8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011eda:	3714      	adds	r7, #20
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd90      	pop	{r4, r7, pc}

08011ee0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d04a      	beq.n	8011f86 <tcp_rexmit_fast+0xa6>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7e9b      	ldrb	r3, [r3, #26]
 8011ef4:	f003 0304 	and.w	r3, r3, #4
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d144      	bne.n	8011f86 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f7ff ff9f 	bl	8011e40 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d207      	bcs.n	8011f22 <tcp_rexmit_fast+0x42>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f18:	0fda      	lsrs	r2, r3, #31
 8011f1a:	4413      	add	r3, r2
 8011f1c:	105b      	asrs	r3, r3, #1
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	e006      	b.n	8011f30 <tcp_rexmit_fast+0x50>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f28:	0fda      	lsrs	r2, r3, #31
 8011f2a:	4413      	add	r3, r2
 8011f2c:	105b      	asrs	r3, r3, #1
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d206      	bcs.n	8011f56 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f60:	4619      	mov	r1, r3
 8011f62:	0049      	lsls	r1, r1, #1
 8011f64:	440b      	add	r3, r1
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4413      	add	r3, r2
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	7e9b      	ldrb	r3, [r3, #26]
 8011f76:	f043 0304 	orr.w	r3, r3, #4
 8011f7a:	b2da      	uxtb	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8011f86:	bf00      	nop
 8011f88:	3708      	adds	r7, #8
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b08a      	sub	sp, #40	; 0x28
 8011f92:	af04      	add	r7, sp, #16
 8011f94:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f9a:	3b01      	subs	r3, #1
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f7 f899 	bl	80090d4 <lwip_htonl>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7fe fd43 	bl	8010a34 <tcp_output_alloc_header>
 8011fae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d102      	bne.n	8011fbc <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fba:	e021      	b.n	8012000 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7f8 f95b 	bl	800a27c <ip4_route>
 8011fc6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d102      	bne.n	8011fd4 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011fce:	23fc      	movs	r3, #252	; 0xfc
 8011fd0:	75fb      	strb	r3, [r7, #23]
 8011fd2:	e010      	b.n	8011ff6 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011fd4:	6879      	ldr	r1, [r7, #4]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	1d1a      	adds	r2, r3, #4
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	7a98      	ldrb	r0, [r3, #10]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	9302      	str	r3, [sp, #8]
 8011fe2:	2306      	movs	r3, #6
 8011fe4:	9301      	str	r3, [sp, #4]
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	4603      	mov	r3, r0
 8011fec:	6938      	ldr	r0, [r7, #16]
 8011fee:	f7f8 fae9 	bl	800a5c4 <ip4_output_if>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011ff6:	6938      	ldr	r0, [r7, #16]
 8011ff8:	f7fa fc70 	bl	800c8dc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3718      	adds	r7, #24
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012008:	b590      	push	{r4, r7, lr}
 801200a:	b08f      	sub	sp, #60	; 0x3c
 801200c:	af04      	add	r7, sp, #16
 801200e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012014:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012016:	6a3b      	ldr	r3, [r7, #32]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d102      	bne.n	8012022 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012020:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012028:	2300      	movs	r3, #0
 801202a:	e085      	b.n	8012138 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801202c:	6a3b      	ldr	r3, [r7, #32]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	899b      	ldrh	r3, [r3, #12]
 8012032:	b29b      	uxth	r3, r3
 8012034:	4618      	mov	r0, r3
 8012036:	f7f7 f83f 	bl	80090b8 <lwip_htons>
 801203a:	4603      	mov	r3, r0
 801203c:	f003 0301 	and.w	r3, r3, #1
 8012040:	2b00      	cmp	r3, #0
 8012042:	d005      	beq.n	8012050 <tcp_zero_window_probe+0x48>
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	891b      	ldrh	r3, [r3, #8]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d101      	bne.n	8012050 <tcp_zero_window_probe+0x48>
 801204c:	2301      	movs	r3, #1
 801204e:	e000      	b.n	8012052 <tcp_zero_window_probe+0x4a>
 8012050:	2300      	movs	r3, #0
 8012052:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012054:	7ffb      	ldrb	r3, [r7, #31]
 8012056:	2b00      	cmp	r3, #0
 8012058:	bf0c      	ite	eq
 801205a:	2301      	moveq	r3, #1
 801205c:	2300      	movne	r3, #0
 801205e:	b2db      	uxtb	r3, r3
 8012060:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	8bba      	ldrh	r2, [r7, #28]
 801206a:	2100      	movs	r1, #0
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7fe fce1 	bl	8010a34 <tcp_output_alloc_header>
 8012072:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d102      	bne.n	8012080 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801207a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801207e:	e05b      	b.n	8012138 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00e      	beq.n	80120aa <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	899b      	ldrh	r3, [r3, #12]
 8012090:	b29b      	uxth	r3, r3
 8012092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012096:	b29c      	uxth	r4, r3
 8012098:	2011      	movs	r0, #17
 801209a:	f7f7 f80d 	bl	80090b8 <lwip_htons>
 801209e:	4603      	mov	r3, r0
 80120a0:	4323      	orrs	r3, r4
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	819a      	strh	r2, [r3, #12]
 80120a8:	e010      	b.n	80120cc <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	3314      	adds	r3, #20
 80120b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	6858      	ldr	r0, [r3, #4]
 80120b6:	6a3b      	ldr	r3, [r7, #32]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	891a      	ldrh	r2, [r3, #8]
 80120bc:	6a3b      	ldr	r3, [r7, #32]
 80120be:	891b      	ldrh	r3, [r3, #8]
 80120c0:	1ad3      	subs	r3, r2, r3
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	2201      	movs	r2, #1
 80120c6:	6939      	ldr	r1, [r7, #16]
 80120c8:	f7fa fe14 	bl	800ccf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7f6 fffe 	bl	80090d4 <lwip_htonl>
 80120d8:	4603      	mov	r3, r0
 80120da:	3301      	adds	r3, #1
 80120dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	da02      	bge.n	80120f0 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7f8 f8c1 	bl	800a27c <ip4_route>
 80120fa:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d103      	bne.n	801210a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012102:	23fc      	movs	r3, #252	; 0xfc
 8012104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012108:	e011      	b.n	801212e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801210a:	6879      	ldr	r1, [r7, #4]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	1d1a      	adds	r2, r3, #4
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	7a98      	ldrb	r0, [r3, #10]
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	9302      	str	r3, [sp, #8]
 8012118:	2306      	movs	r3, #6
 801211a:	9301      	str	r3, [sp, #4]
 801211c:	2300      	movs	r3, #0
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	4603      	mov	r3, r0
 8012122:	69b8      	ldr	r0, [r7, #24]
 8012124:	f7f8 fa4e 	bl	800a5c4 <ip4_output_if>
 8012128:	4603      	mov	r3, r0
 801212a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801212e:	69b8      	ldr	r0, [r7, #24]
 8012130:	f7fa fbd4 	bl	800c8dc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012138:	4618      	mov	r0, r3
 801213a:	372c      	adds	r7, #44	; 0x2c
 801213c:	46bd      	mov	sp, r7
 801213e:	bd90      	pop	{r4, r7, pc}

08012140 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012148:	f7fa fe56 	bl	800cdf8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801214c:	4b0a      	ldr	r3, [pc, #40]	; (8012178 <tcpip_tcp_timer+0x38>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d103      	bne.n	801215c <tcpip_tcp_timer+0x1c>
 8012154:	4b09      	ldr	r3, [pc, #36]	; (801217c <tcpip_tcp_timer+0x3c>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d005      	beq.n	8012168 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801215c:	2200      	movs	r2, #0
 801215e:	4908      	ldr	r1, [pc, #32]	; (8012180 <tcpip_tcp_timer+0x40>)
 8012160:	20fa      	movs	r0, #250	; 0xfa
 8012162:	f000 f86f 	bl	8012244 <sys_timeout>
 8012166:	e002      	b.n	801216e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012168:	4b06      	ldr	r3, [pc, #24]	; (8012184 <tcpip_tcp_timer+0x44>)
 801216a:	2200      	movs	r2, #0
 801216c:	601a      	str	r2, [r3, #0]
  }
}
 801216e:	bf00      	nop
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20007734 	.word	0x20007734
 801217c:	20007744 	.word	0x20007744
 8012180:	08012141 	.word	0x08012141
 8012184:	20003fc8 	.word	0x20003fc8

08012188 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801218c:	4b0a      	ldr	r3, [pc, #40]	; (80121b8 <tcp_timer_needed+0x30>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10f      	bne.n	80121b4 <tcp_timer_needed+0x2c>
 8012194:	4b09      	ldr	r3, [pc, #36]	; (80121bc <tcp_timer_needed+0x34>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d103      	bne.n	80121a4 <tcp_timer_needed+0x1c>
 801219c:	4b08      	ldr	r3, [pc, #32]	; (80121c0 <tcp_timer_needed+0x38>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d007      	beq.n	80121b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121a4:	4b04      	ldr	r3, [pc, #16]	; (80121b8 <tcp_timer_needed+0x30>)
 80121a6:	2201      	movs	r2, #1
 80121a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121aa:	2200      	movs	r2, #0
 80121ac:	4905      	ldr	r1, [pc, #20]	; (80121c4 <tcp_timer_needed+0x3c>)
 80121ae:	20fa      	movs	r0, #250	; 0xfa
 80121b0:	f000 f848 	bl	8012244 <sys_timeout>
  }
}
 80121b4:	bf00      	nop
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	20003fc8 	.word	0x20003fc8
 80121bc:	20007734 	.word	0x20007734
 80121c0:	20007744 	.word	0x20007744
 80121c4:	08012141 	.word	0x08012141

080121c8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	4903      	ldr	r1, [pc, #12]	; (80121f0 <cyclic_timer+0x28>)
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 f82e 	bl	8012244 <sys_timeout>
}
 80121e8:	bf00      	nop
 80121ea:	3710      	adds	r7, #16
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	080121c9 	.word	0x080121c9

080121f4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80121fa:	2301      	movs	r3, #1
 80121fc:	607b      	str	r3, [r7, #4]
 80121fe:	e00e      	b.n	801221e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012200:	4a0d      	ldr	r2, [pc, #52]	; (8012238 <sys_timeouts_init+0x44>)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	4a0a      	ldr	r2, [pc, #40]	; (8012238 <sys_timeouts_init+0x44>)
 801220e:	4413      	add	r3, r2
 8012210:	461a      	mov	r2, r3
 8012212:	490a      	ldr	r1, [pc, #40]	; (801223c <sys_timeouts_init+0x48>)
 8012214:	f000 f816 	bl	8012244 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	3301      	adds	r3, #1
 801221c:	607b      	str	r3, [r7, #4]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b02      	cmp	r3, #2
 8012222:	d9ed      	bls.n	8012200 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012224:	f001 fb44 	bl	80138b0 <sys_now>
 8012228:	4602      	mov	r2, r0
 801222a:	4b05      	ldr	r3, [pc, #20]	; (8012240 <sys_timeouts_init+0x4c>)
 801222c:	601a      	str	r2, [r3, #0]
}
 801222e:	bf00      	nop
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	08017fec 	.word	0x08017fec
 801223c:	080121c9 	.word	0x080121c9
 8012240:	20003fc4 	.word	0x20003fc4

08012244 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b088      	sub	sp, #32
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012250:	200a      	movs	r0, #10
 8012252:	f7f9 fd97 	bl	800bd84 <memp_malloc>
 8012256:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10a      	bne.n	8012274 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	f040 8084 	bne.w	801236e <sys_timeout+0x12a>
 8012266:	4b44      	ldr	r3, [pc, #272]	; (8012378 <sys_timeout+0x134>)
 8012268:	22d4      	movs	r2, #212	; 0xd4
 801226a:	4944      	ldr	r1, [pc, #272]	; (801237c <sys_timeout+0x138>)
 801226c:	4844      	ldr	r0, [pc, #272]	; (8012380 <sys_timeout+0x13c>)
 801226e:	f002 f9bf 	bl	80145f0 <iprintf>
    return;
 8012272:	e07c      	b.n	801236e <sys_timeout+0x12a>
  }

  now = sys_now();
 8012274:	f001 fb1c 	bl	80138b0 <sys_now>
 8012278:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801227a:	4b42      	ldr	r3, [pc, #264]	; (8012384 <sys_timeout+0x140>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d105      	bne.n	801228e <sys_timeout+0x4a>
    diff = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012286:	4a40      	ldr	r2, [pc, #256]	; (8012388 <sys_timeout+0x144>)
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	6013      	str	r3, [r2, #0]
 801228c:	e004      	b.n	8012298 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801228e:	4b3e      	ldr	r3, [pc, #248]	; (8012388 <sys_timeout+0x144>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	693a      	ldr	r2, [r7, #16]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	2200      	movs	r2, #0
 801229c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	68ba      	ldr	r2, [r7, #8]
 80122a2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	441a      	add	r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80122b4:	4b33      	ldr	r3, [pc, #204]	; (8012384 <sys_timeout+0x140>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d103      	bne.n	80122c4 <sys_timeout+0x80>
    next_timeout = timeout;
 80122bc:	4a31      	ldr	r2, [pc, #196]	; (8012384 <sys_timeout+0x140>)
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	6013      	str	r3, [r2, #0]
    return;
 80122c2:	e055      	b.n	8012370 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80122c4:	4b2f      	ldr	r3, [pc, #188]	; (8012384 <sys_timeout+0x140>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	685a      	ldr	r2, [r3, #4]
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d90f      	bls.n	80122f0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80122d0:	4b2c      	ldr	r3, [pc, #176]	; (8012384 <sys_timeout+0x140>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	4a2b      	ldr	r2, [pc, #172]	; (8012384 <sys_timeout+0x140>)
 80122d6:	6812      	ldr	r2, [r2, #0]
 80122d8:	6851      	ldr	r1, [r2, #4]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	1a8a      	subs	r2, r1, r2
 80122de:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80122e0:	4b28      	ldr	r3, [pc, #160]	; (8012384 <sys_timeout+0x140>)
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80122e8:	4a26      	ldr	r2, [pc, #152]	; (8012384 <sys_timeout+0x140>)
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	6013      	str	r3, [r2, #0]
 80122ee:	e03f      	b.n	8012370 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80122f0:	4b24      	ldr	r3, [pc, #144]	; (8012384 <sys_timeout+0x140>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	61fb      	str	r3, [r7, #28]
 80122f6:	e036      	b.n	8012366 <sys_timeout+0x122>
      timeout->time -= t->time;
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	1ad2      	subs	r2, r2, r3
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d006      	beq.n	801231c <sys_timeout+0xd8>
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	685a      	ldr	r2, [r3, #4]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	429a      	cmp	r2, r3
 801231a:	d921      	bls.n	8012360 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d009      	beq.n	8012338 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	69fa      	ldr	r2, [r7, #28]
 801232a:	6812      	ldr	r2, [r2, #0]
 801232c:	6851      	ldr	r1, [r2, #4]
 801232e:	697a      	ldr	r2, [r7, #20]
 8012330:	6852      	ldr	r2, [r2, #4]
 8012332:	1a8a      	subs	r2, r1, r2
 8012334:	605a      	str	r2, [r3, #4]
 8012336:	e00b      	b.n	8012350 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	429a      	cmp	r2, r3
 8012340:	d906      	bls.n	8012350 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012342:	4b10      	ldr	r3, [pc, #64]	; (8012384 <sys_timeout+0x140>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	685a      	ldr	r2, [r3, #4]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	441a      	add	r2, r3
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	697a      	ldr	r2, [r7, #20]
 801235c:	601a      	str	r2, [r3, #0]
        break;
 801235e:	e007      	b.n	8012370 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	61fb      	str	r3, [r7, #28]
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1c5      	bne.n	80122f8 <sys_timeout+0xb4>
 801236c:	e000      	b.n	8012370 <sys_timeout+0x12c>
    return;
 801236e:	bf00      	nop
      }
    }
  }
}
 8012370:	3720      	adds	r7, #32
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	08017bb4 	.word	0x08017bb4
 801237c:	08017be8 	.word	0x08017be8
 8012380:	08017c28 	.word	0x08017c28
 8012384:	20003fc0 	.word	0x20003fc0
 8012388:	20003fc4 	.word	0x20003fc4

0801238c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8012392:	4b21      	ldr	r3, [pc, #132]	; (8012418 <sys_check_timeouts+0x8c>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d039      	beq.n	801240e <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801239a:	f001 fa89 	bl	80138b0 <sys_now>
 801239e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80123a0:	4b1e      	ldr	r3, [pc, #120]	; (801241c <sys_check_timeouts+0x90>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80123aa:	2300      	movs	r3, #0
 80123ac:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80123ae:	4b1a      	ldr	r3, [pc, #104]	; (8012418 <sys_check_timeouts+0x8c>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d026      	beq.n	8012408 <sys_check_timeouts+0x7c>
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	685a      	ldr	r2, [r3, #4]
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d821      	bhi.n	8012408 <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 80123c4:	2301      	movs	r3, #1
 80123c6:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	4b13      	ldr	r3, [pc, #76]	; (801241c <sys_check_timeouts+0x90>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4413      	add	r3, r2
 80123d2:	4a12      	ldr	r2, [pc, #72]	; (801241c <sys_check_timeouts+0x90>)
 80123d4:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	697a      	ldr	r2, [r7, #20]
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a0c      	ldr	r2, [pc, #48]	; (8012418 <sys_check_timeouts+0x8c>)
 80123e6:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	68db      	ldr	r3, [r3, #12]
 80123f2:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80123f4:	68b9      	ldr	r1, [r7, #8]
 80123f6:	200a      	movs	r0, #10
 80123f8:	f7f9 fd16 	bl	800be28 <memp_free>
        if (handler != NULL) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6838      	ldr	r0, [r7, #0]
 8012406:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012408:	7cfb      	ldrb	r3, [r7, #19]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d1cd      	bne.n	80123aa <sys_check_timeouts+0x1e>
  }
}
 801240e:	bf00      	nop
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20003fc0 	.word	0x20003fc0
 801241c:	20003fc4 	.word	0x20003fc4

08012420 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012426:	4b0f      	ldr	r3, [pc, #60]	; (8012464 <sys_timeouts_sleeptime+0x44>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d102      	bne.n	8012434 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801242e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012432:	e013      	b.n	801245c <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012434:	f001 fa3c 	bl	80138b0 <sys_now>
 8012438:	4602      	mov	r2, r0
 801243a:	4b0b      	ldr	r3, [pc, #44]	; (8012468 <sys_timeouts_sleeptime+0x48>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8012442:	4b08      	ldr	r3, [pc, #32]	; (8012464 <sys_timeouts_sleeptime+0x44>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	685a      	ldr	r2, [r3, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	429a      	cmp	r2, r3
 801244c:	d201      	bcs.n	8012452 <sys_timeouts_sleeptime+0x32>
    return 0;
 801244e:	2300      	movs	r3, #0
 8012450:	e004      	b.n	801245c <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8012452:	4b04      	ldr	r3, [pc, #16]	; (8012464 <sys_timeouts_sleeptime+0x44>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	1ad3      	subs	r3, r2, r3
  }
}
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	20003fc0 	.word	0x20003fc0
 8012468:	20003fc4 	.word	0x20003fc4

0801246c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012476:	4b0f      	ldr	r3, [pc, #60]	; (80124b4 <sys_timeouts_mbox_fetch+0x48>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d105      	bne.n	801248a <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801247e:	2200      	movs	r2, #0
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 fd43 	bl	8012f0e <sys_arch_mbox_fetch>
    return;
 8012488:	e011      	b.n	80124ae <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 801248a:	f7ff ffc9 	bl	8012420 <sys_timeouts_sleeptime>
 801248e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d008      	beq.n	80124a8 <sys_timeouts_mbox_fetch+0x3c>
 8012496:	68fa      	ldr	r2, [r7, #12]
 8012498:	6839      	ldr	r1, [r7, #0]
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fd37 	bl	8012f0e <sys_arch_mbox_fetch>
 80124a0:	4603      	mov	r3, r0
 80124a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124a6:	d102      	bne.n	80124ae <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80124a8:	f7ff ff70 	bl	801238c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80124ac:	e7e3      	b.n	8012476 <sys_timeouts_mbox_fetch+0xa>
  }
}
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	20003fc0 	.word	0x20003fc0

080124b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80124b8:	b480      	push	{r7}
 80124ba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80124bc:	bf00      	nop
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr
	...

080124c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80124d2:	4b17      	ldr	r3, [pc, #92]	; (8012530 <udp_new_port+0x68>)
 80124d4:	881b      	ldrh	r3, [r3, #0]
 80124d6:	1c5a      	adds	r2, r3, #1
 80124d8:	b291      	uxth	r1, r2
 80124da:	4a15      	ldr	r2, [pc, #84]	; (8012530 <udp_new_port+0x68>)
 80124dc:	8011      	strh	r1, [r2, #0]
 80124de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d103      	bne.n	80124ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80124e6:	4b12      	ldr	r3, [pc, #72]	; (8012530 <udp_new_port+0x68>)
 80124e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80124ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124ee:	4b11      	ldr	r3, [pc, #68]	; (8012534 <udp_new_port+0x6c>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	e011      	b.n	801251a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	8a5a      	ldrh	r2, [r3, #18]
 80124fa:	4b0d      	ldr	r3, [pc, #52]	; (8012530 <udp_new_port+0x68>)
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d108      	bne.n	8012514 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012502:	88fb      	ldrh	r3, [r7, #6]
 8012504:	3301      	adds	r3, #1
 8012506:	80fb      	strh	r3, [r7, #6]
 8012508:	88fb      	ldrh	r3, [r7, #6]
 801250a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801250e:	d3e0      	bcc.n	80124d2 <udp_new_port+0xa>
        return 0;
 8012510:	2300      	movs	r3, #0
 8012512:	e007      	b.n	8012524 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	603b      	str	r3, [r7, #0]
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d1ea      	bne.n	80124f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012520:	4b03      	ldr	r3, [pc, #12]	; (8012530 <udp_new_port+0x68>)
 8012522:	881b      	ldrh	r3, [r3, #0]
}
 8012524:	4618      	mov	r0, r3
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr
 8012530:	20000010 	.word	0x20000010
 8012534:	2000774c 	.word	0x2000774c

08012538 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012538:	b480      	push	{r7}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	4613      	mov	r3, r2
 8012544:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012546:	79fb      	ldrb	r3, [r7, #7]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d018      	beq.n	801257e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d013      	beq.n	801257a <udp_input_local_match+0x42>
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00f      	beq.n	801257a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801255a:	4b14      	ldr	r3, [pc, #80]	; (80125ac <udp_input_local_match+0x74>)
 801255c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801255e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012562:	d00a      	beq.n	801257a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	4b10      	ldr	r3, [pc, #64]	; (80125ac <udp_input_local_match+0x74>)
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	405a      	eors	r2, r3
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	3308      	adds	r3, #8
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012576:	2b00      	cmp	r3, #0
 8012578:	d110      	bne.n	801259c <udp_input_local_match+0x64>
          return 1;
 801257a:	2301      	movs	r3, #1
 801257c:	e00f      	b.n	801259e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d009      	beq.n	8012598 <udp_input_local_match+0x60>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d005      	beq.n	8012598 <udp_input_local_match+0x60>
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	4b06      	ldr	r3, [pc, #24]	; (80125ac <udp_input_local_match+0x74>)
 8012592:	695b      	ldr	r3, [r3, #20]
 8012594:	429a      	cmp	r2, r3
 8012596:	d101      	bne.n	801259c <udp_input_local_match+0x64>
      return 1;
 8012598:	2301      	movs	r3, #1
 801259a:	e000      	b.n	801259e <udp_input_local_match+0x66>
    }
  }

  return 0;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3714      	adds	r7, #20
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop
 80125ac:	20004024 	.word	0x20004024

080125b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80125b0:	b590      	push	{r4, r7, lr}
 80125b2:	b08d      	sub	sp, #52	; 0x34
 80125b4:	af02      	add	r7, sp, #8
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	895b      	ldrh	r3, [r3, #10]
 80125c2:	2b07      	cmp	r3, #7
 80125c4:	d803      	bhi.n	80125ce <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f7fa f988 	bl	800c8dc <pbuf_free>
    goto end;
 80125cc:	e0c6      	b.n	801275c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80125d4:	4b63      	ldr	r3, [pc, #396]	; (8012764 <udp_input+0x1b4>)
 80125d6:	695a      	ldr	r2, [r3, #20]
 80125d8:	4b62      	ldr	r3, [pc, #392]	; (8012764 <udp_input+0x1b4>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4619      	mov	r1, r3
 80125de:	4610      	mov	r0, r2
 80125e0:	f7f8 f8c2 	bl	800a768 <ip4_addr_isbroadcast_u32>
 80125e4:	4603      	mov	r3, r0
 80125e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	881b      	ldrh	r3, [r3, #0]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f6 fd62 	bl	80090b8 <lwip_htons>
 80125f4:	4603      	mov	r3, r0
 80125f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	885b      	ldrh	r3, [r3, #2]
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f6 fd5a 	bl	80090b8 <lwip_htons>
 8012604:	4603      	mov	r3, r0
 8012606:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012608:	2300      	movs	r3, #0
 801260a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801260c:	2300      	movs	r3, #0
 801260e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012610:	2300      	movs	r3, #0
 8012612:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012614:	4b54      	ldr	r3, [pc, #336]	; (8012768 <udp_input+0x1b8>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	627b      	str	r3, [r7, #36]	; 0x24
 801261a:	e03b      	b.n	8012694 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	8a5b      	ldrh	r3, [r3, #18]
 8012620:	89fa      	ldrh	r2, [r7, #14]
 8012622:	429a      	cmp	r2, r3
 8012624:	d131      	bne.n	801268a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012626:	7cfb      	ldrb	r3, [r7, #19]
 8012628:	461a      	mov	r2, r3
 801262a:	6839      	ldr	r1, [r7, #0]
 801262c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801262e:	f7ff ff83 	bl	8012538 <udp_input_local_match>
 8012632:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012634:	2b00      	cmp	r3, #0
 8012636:	d028      	beq.n	801268a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263a:	7c1b      	ldrb	r3, [r3, #16]
 801263c:	f003 0304 	and.w	r3, r3, #4
 8012640:	2b00      	cmp	r3, #0
 8012642:	d104      	bne.n	801264e <udp_input+0x9e>
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	8a9b      	ldrh	r3, [r3, #20]
 8012652:	8a3a      	ldrh	r2, [r7, #16]
 8012654:	429a      	cmp	r2, r3
 8012656:	d118      	bne.n	801268a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801265c:	2b00      	cmp	r3, #0
 801265e:	d005      	beq.n	801266c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012662:	685a      	ldr	r2, [r3, #4]
 8012664:	4b3f      	ldr	r3, [pc, #252]	; (8012764 <udp_input+0x1b4>)
 8012666:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012668:	429a      	cmp	r2, r3
 801266a:	d10e      	bne.n	801268a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801266c:	6a3b      	ldr	r3, [r7, #32]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d014      	beq.n	801269c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	68da      	ldr	r2, [r3, #12]
 8012676:	6a3b      	ldr	r3, [r7, #32]
 8012678:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801267a:	4b3b      	ldr	r3, [pc, #236]	; (8012768 <udp_input+0x1b8>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012682:	4a39      	ldr	r2, [pc, #228]	; (8012768 <udp_input+0x1b8>)
 8012684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012686:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012688:	e008      	b.n	801269c <udp_input+0xec>
      }
    }

    prev = pcb;
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	627b      	str	r3, [r7, #36]	; 0x24
 8012694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1c0      	bne.n	801261c <udp_input+0x6c>
 801269a:	e000      	b.n	801269e <udp_input+0xee>
        break;
 801269c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <udp_input+0xf8>
    pcb = uncon_pcb;
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80126a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d002      	beq.n	80126b4 <udp_input+0x104>
    for_us = 1;
 80126ae:	2301      	movs	r3, #1
 80126b0:	76fb      	strb	r3, [r7, #27]
 80126b2:	e00a      	b.n	80126ca <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	3304      	adds	r3, #4
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	4b2a      	ldr	r3, [pc, #168]	; (8012764 <udp_input+0x1b4>)
 80126bc:	695b      	ldr	r3, [r3, #20]
 80126be:	429a      	cmp	r2, r3
 80126c0:	bf0c      	ite	eq
 80126c2:	2301      	moveq	r3, #1
 80126c4:	2300      	movne	r3, #0
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80126ca:	7efb      	ldrb	r3, [r7, #27]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d042      	beq.n	8012756 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80126d0:	f06f 0107 	mvn.w	r1, #7
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7fa f8dd 	bl	800c894 <pbuf_header>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00a      	beq.n	80126f6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80126e0:	4b22      	ldr	r3, [pc, #136]	; (801276c <udp_input+0x1bc>)
 80126e2:	f240 1255 	movw	r2, #341	; 0x155
 80126e6:	4922      	ldr	r1, [pc, #136]	; (8012770 <udp_input+0x1c0>)
 80126e8:	4822      	ldr	r0, [pc, #136]	; (8012774 <udp_input+0x1c4>)
 80126ea:	f001 ff81 	bl	80145f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7fa f8f4 	bl	800c8dc <pbuf_free>
      goto end;
 80126f4:	e032      	b.n	801275c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d012      	beq.n	8012722 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d00a      	beq.n	801271a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012706:	699c      	ldr	r4, [r3, #24]
 8012708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270a:	69d8      	ldr	r0, [r3, #28]
 801270c:	8a3b      	ldrh	r3, [r7, #16]
 801270e:	9300      	str	r3, [sp, #0]
 8012710:	4b19      	ldr	r3, [pc, #100]	; (8012778 <udp_input+0x1c8>)
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012716:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012718:	e021      	b.n	801275e <udp_input+0x1ae>
        pbuf_free(p);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7fa f8de 	bl	800c8dc <pbuf_free>
        goto end;
 8012720:	e01c      	b.n	801275c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012722:	7cfb      	ldrb	r3, [r7, #19]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d112      	bne.n	801274e <udp_input+0x19e>
 8012728:	4b0e      	ldr	r3, [pc, #56]	; (8012764 <udp_input+0x1b4>)
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012730:	2be0      	cmp	r3, #224	; 0xe0
 8012732:	d00c      	beq.n	801274e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012734:	4b0b      	ldr	r3, [pc, #44]	; (8012764 <udp_input+0x1b4>)
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	3308      	adds	r3, #8
 801273a:	b29b      	uxth	r3, r3
 801273c:	b21b      	sxth	r3, r3
 801273e:	4619      	mov	r1, r3
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7fa f8b9 	bl	800c8b8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012746:	2103      	movs	r1, #3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7f7 fd0f 	bl	800a16c <icmp_dest_unreach>
      pbuf_free(p);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7fa f8c4 	bl	800c8dc <pbuf_free>
  return;
 8012754:	e003      	b.n	801275e <udp_input+0x1ae>
    pbuf_free(p);
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7fa f8c0 	bl	800c8dc <pbuf_free>
  return;
 801275c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801275e:	372c      	adds	r7, #44	; 0x2c
 8012760:	46bd      	mov	sp, r7
 8012762:	bd90      	pop	{r4, r7, pc}
 8012764:	20004024 	.word	0x20004024
 8012768:	2000774c 	.word	0x2000774c
 801276c:	08017c50 	.word	0x08017c50
 8012770:	08017c80 	.word	0x08017c80
 8012774:	08017c94 	.word	0x08017c94
 8012778:	20004034 	.word	0x20004034

0801277c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d102      	bne.n	8012792 <udp_send+0x16>
    return ERR_VAL;
 801278c:	f06f 0305 	mvn.w	r3, #5
 8012790:	e008      	b.n	80127a4 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	1d1a      	adds	r2, r3, #4
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8a9b      	ldrh	r3, [r3, #20]
 801279a:	6839      	ldr	r1, [r7, #0]
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 f805 	bl	80127ac <udp_sendto>
 80127a2:	4603      	mov	r3, r0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b088      	sub	sp, #32
 80127b0:	af02      	add	r7, sp, #8
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	607a      	str	r2, [r7, #4]
 80127b8:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d002      	beq.n	80127ca <udp_sendto+0x1e>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d102      	bne.n	80127d0 <udp_sendto+0x24>
    return ERR_VAL;
 80127ca:	f06f 0305 	mvn.w	r3, #5
 80127ce:	e013      	b.n	80127f8 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 80127d0:	6978      	ldr	r0, [r7, #20]
 80127d2:	f7f7 fd53 	bl	800a27c <ip4_route>
 80127d6:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d102      	bne.n	80127e4 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80127de:	f06f 0303 	mvn.w	r3, #3
 80127e2:	e009      	b.n	80127f8 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80127e4:	887a      	ldrh	r2, [r7, #2]
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	4613      	mov	r3, r2
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f000 f805 	bl	8012800 <udp_sendto_if>
 80127f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3718      	adds	r7, #24
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b088      	sub	sp, #32
 8012804:	af02      	add	r7, sp, #8
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <udp_sendto_if+0x1a>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d102      	bne.n	8012820 <udp_sendto_if+0x20>
    return ERR_VAL;
 801281a:	f06f 0305 	mvn.w	r3, #5
 801281e:	e028      	b.n	8012872 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d009      	beq.n	801283a <udp_sendto_if+0x3a>
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d005      	beq.n	801283a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012836:	2be0      	cmp	r3, #224	; 0xe0
 8012838:	d103      	bne.n	8012842 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	3304      	adds	r3, #4
 801283e:	617b      	str	r3, [r7, #20]
 8012840:	e00b      	b.n	801285a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	6a3b      	ldr	r3, [r7, #32]
 8012848:	3304      	adds	r3, #4
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	429a      	cmp	r2, r3
 801284e:	d002      	beq.n	8012856 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012850:	f06f 0303 	mvn.w	r3, #3
 8012854:	e00d      	b.n	8012872 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801285a:	887a      	ldrh	r2, [r7, #2]
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	9301      	str	r3, [sp, #4]
 8012860:	6a3b      	ldr	r3, [r7, #32]
 8012862:	9300      	str	r3, [sp, #0]
 8012864:	4613      	mov	r3, r2
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	68b9      	ldr	r1, [r7, #8]
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f000 f806 	bl	801287c <udp_sendto_if_src>
 8012870:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012872:	4618      	mov	r0, r3
 8012874:	3718      	adds	r7, #24
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
	...

0801287c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b08c      	sub	sp, #48	; 0x30
 8012880:	af04      	add	r7, sp, #16
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	607a      	str	r2, [r7, #4]
 8012888:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <udp_sendto_if_src+0x1a>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d102      	bne.n	801289c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012896:	f06f 0305 	mvn.w	r3, #5
 801289a:	e07e      	b.n	801299a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	8a5b      	ldrh	r3, [r3, #18]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10f      	bne.n	80128c4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80128a4:	68f9      	ldr	r1, [r7, #12]
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	8a5b      	ldrh	r3, [r3, #18]
 80128aa:	461a      	mov	r2, r3
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 f87f 	bl	80129b0 <udp_bind>
 80128b2:	4603      	mov	r3, r0
 80128b4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80128b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d002      	beq.n	80128c4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80128be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80128c2:	e06a      	b.n	801299a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80128c4:	2108      	movs	r1, #8
 80128c6:	68b8      	ldr	r0, [r7, #8]
 80128c8:	f7f9 ffe4 	bl	800c894 <pbuf_header>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d014      	beq.n	80128fc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80128d2:	2200      	movs	r2, #0
 80128d4:	2108      	movs	r1, #8
 80128d6:	2001      	movs	r0, #1
 80128d8:	f7f9 fc8e 	bl	800c1f8 <pbuf_alloc>
 80128dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d102      	bne.n	80128ea <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128e8:	e057      	b.n	801299a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	891b      	ldrh	r3, [r3, #8]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d006      	beq.n	8012900 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80128f2:	68b9      	ldr	r1, [r7, #8]
 80128f4:	69f8      	ldr	r0, [r7, #28]
 80128f6:	f7fa f921 	bl	800cb3c <pbuf_chain>
 80128fa:	e001      	b.n	8012900 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	895b      	ldrh	r3, [r3, #10]
 8012904:	2b07      	cmp	r3, #7
 8012906:	d806      	bhi.n	8012916 <udp_sendto_if_src+0x9a>
 8012908:	4b26      	ldr	r3, [pc, #152]	; (80129a4 <udp_sendto_if_src+0x128>)
 801290a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801290e:	4926      	ldr	r1, [pc, #152]	; (80129a8 <udp_sendto_if_src+0x12c>)
 8012910:	4826      	ldr	r0, [pc, #152]	; (80129ac <udp_sendto_if_src+0x130>)
 8012912:	f001 fe6d 	bl	80145f0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	8a5b      	ldrh	r3, [r3, #18]
 8012920:	4618      	mov	r0, r3
 8012922:	f7f6 fbc9 	bl	80090b8 <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801292e:	887b      	ldrh	r3, [r7, #2]
 8012930:	4618      	mov	r0, r3
 8012932:	f7f6 fbc1 	bl	80090b8 <lwip_htons>
 8012936:	4603      	mov	r3, r0
 8012938:	461a      	mov	r2, r3
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	2200      	movs	r2, #0
 8012942:	719a      	strb	r2, [r3, #6]
 8012944:	2200      	movs	r2, #0
 8012946:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	891b      	ldrh	r3, [r3, #8]
 801294c:	4618      	mov	r0, r3
 801294e:	f7f6 fbb3 	bl	80090b8 <lwip_htons>
 8012952:	4603      	mov	r3, r0
 8012954:	461a      	mov	r2, r3
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801295a:	2311      	movs	r3, #17
 801295c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	7a9b      	ldrb	r3, [r3, #10]
 8012962:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	7a5b      	ldrb	r3, [r3, #9]
 8012968:	7cb9      	ldrb	r1, [r7, #18]
 801296a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801296c:	9202      	str	r2, [sp, #8]
 801296e:	7cfa      	ldrb	r2, [r7, #19]
 8012970:	9201      	str	r2, [sp, #4]
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	460b      	mov	r3, r1
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801297a:	69f8      	ldr	r0, [r7, #28]
 801297c:	f7f7 fe4c 	bl	800a618 <ip4_output_if_src>
 8012980:	4603      	mov	r3, r0
 8012982:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012984:	69fa      	ldr	r2, [r7, #28]
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	429a      	cmp	r2, r3
 801298a:	d004      	beq.n	8012996 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801298c:	69f8      	ldr	r0, [r7, #28]
 801298e:	f7f9 ffa5 	bl	800c8dc <pbuf_free>
    q = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012996:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801299a:	4618      	mov	r0, r3
 801299c:	3720      	adds	r7, #32
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	08017c50 	.word	0x08017c50
 80129a8:	08017cbc 	.word	0x08017cbc
 80129ac:	08017c94 	.word	0x08017c94

080129b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	4613      	mov	r3, r2
 80129bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80129c4:	4b30      	ldr	r3, [pc, #192]	; (8012a88 <udp_bind+0xd8>)
 80129c6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d002      	beq.n	80129d4 <udp_bind+0x24>
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d102      	bne.n	80129da <udp_bind+0x2a>
    return ERR_VAL;
 80129d4:	f06f 0305 	mvn.w	r3, #5
 80129d8:	e052      	b.n	8012a80 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80129da:	2300      	movs	r3, #0
 80129dc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129de:	4b2b      	ldr	r3, [pc, #172]	; (8012a8c <udp_bind+0xdc>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	e009      	b.n	80129fa <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80129e6:	68fa      	ldr	r2, [r7, #12]
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d102      	bne.n	80129f4 <udp_bind+0x44>
      rebind = 1;
 80129ee:	2301      	movs	r3, #1
 80129f0:	74fb      	strb	r3, [r7, #19]
      break;
 80129f2:	e005      	b.n	8012a00 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	617b      	str	r3, [r7, #20]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1f2      	bne.n	80129e6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012a00:	88fb      	ldrh	r3, [r7, #6]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d109      	bne.n	8012a1a <udp_bind+0x6a>
    port = udp_new_port();
 8012a06:	f7ff fd5f 	bl	80124c8 <udp_new_port>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a0e:	88fb      	ldrh	r3, [r7, #6]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d11e      	bne.n	8012a52 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012a14:	f06f 0307 	mvn.w	r3, #7
 8012a18:	e032      	b.n	8012a80 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a1a:	4b1c      	ldr	r3, [pc, #112]	; (8012a8c <udp_bind+0xdc>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	617b      	str	r3, [r7, #20]
 8012a20:	e014      	b.n	8012a4c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012a22:	68fa      	ldr	r2, [r7, #12]
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d00d      	beq.n	8012a46 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	8a5b      	ldrh	r3, [r3, #18]
 8012a2e:	88fa      	ldrh	r2, [r7, #6]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d108      	bne.n	8012a46 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d102      	bne.n	8012a46 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012a40:	f06f 0307 	mvn.w	r3, #7
 8012a44:	e01c      	b.n	8012a80 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	617b      	str	r3, [r7, #20]
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d1e7      	bne.n	8012a22 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <udp_bind+0xae>
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	e000      	b.n	8012a60 <udp_bind+0xb0>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	88fa      	ldrh	r2, [r7, #6]
 8012a68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012a6a:	7cfb      	ldrb	r3, [r7, #19]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d106      	bne.n	8012a7e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012a70:	4b06      	ldr	r3, [pc, #24]	; (8012a8c <udp_bind+0xdc>)
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012a78:	4a04      	ldr	r2, [pc, #16]	; (8012a8c <udp_bind+0xdc>)
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012a7e:	2300      	movs	r3, #0
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	08017ef0 	.word	0x08017ef0
 8012a8c:	2000774c 	.word	0x2000774c

08012a90 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b086      	sub	sp, #24
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	4613      	mov	r3, r2
 8012a9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d002      	beq.n	8012aaa <udp_connect+0x1a>
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d102      	bne.n	8012ab0 <udp_connect+0x20>
    return ERR_VAL;
 8012aaa:	f06f 0305 	mvn.w	r3, #5
 8012aae:	e03e      	b.n	8012b2e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	8a5b      	ldrh	r3, [r3, #18]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d10f      	bne.n	8012ad8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012ab8:	68f9      	ldr	r1, [r7, #12]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	8a5b      	ldrh	r3, [r3, #18]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f7ff ff75 	bl	80129b0 <udp_bind>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012aca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <udp_connect+0x48>
      return err;
 8012ad2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ad6:	e02a      	b.n	8012b2e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d002      	beq.n	8012ae4 <udp_connect+0x54>
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	e000      	b.n	8012ae6 <udp_connect+0x56>
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	88fa      	ldrh	r2, [r7, #6]
 8012aee:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	7c1b      	ldrb	r3, [r3, #16]
 8012af4:	f043 0304 	orr.w	r3, r3, #4
 8012af8:	b2da      	uxtb	r2, r3
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012afe:	4b0e      	ldr	r3, [pc, #56]	; (8012b38 <udp_connect+0xa8>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	617b      	str	r3, [r7, #20]
 8012b04:	e008      	b.n	8012b18 <udp_connect+0x88>
    if (pcb == ipcb) {
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d101      	bne.n	8012b12 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	e00d      	b.n	8012b2e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	617b      	str	r3, [r7, #20]
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1f3      	bne.n	8012b06 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012b1e:	4b06      	ldr	r3, [pc, #24]	; (8012b38 <udp_connect+0xa8>)
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012b26:	4a04      	ldr	r2, [pc, #16]	; (8012b38 <udp_connect+0xa8>)
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012b2c:	2300      	movs	r3, #0
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3718      	adds	r7, #24
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	2000774c 	.word	0x2000774c

08012b3c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	7c1b      	ldrb	r3, [r3, #16]
 8012b54:	f023 0304 	bic.w	r3, r3, #4
 8012b58:	b2da      	uxtb	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	741a      	strb	r2, [r3, #16]
}
 8012b5e:	bf00      	nop
 8012b60:	370c      	adds	r7, #12
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr

08012b6a <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012b6a:	b480      	push	{r7}
 8012b6c:	b085      	sub	sp, #20
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	60b9      	str	r1, [r7, #8]
 8012b74:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	68ba      	ldr	r2, [r7, #8]
 8012b7a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	61da      	str	r2, [r3, #28]
}
 8012b82:	bf00      	nop
 8012b84:	3714      	adds	r7, #20
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr
	...

08012b90 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012b98:	4b15      	ldr	r3, [pc, #84]	; (8012bf0 <udp_remove+0x60>)
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d105      	bne.n	8012bae <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012ba2:	4b13      	ldr	r3, [pc, #76]	; (8012bf0 <udp_remove+0x60>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	4a11      	ldr	r2, [pc, #68]	; (8012bf0 <udp_remove+0x60>)
 8012baa:	6013      	str	r3, [r2, #0]
 8012bac:	e017      	b.n	8012bde <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012bae:	4b10      	ldr	r3, [pc, #64]	; (8012bf0 <udp_remove+0x60>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	e010      	b.n	8012bd8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d009      	beq.n	8012bd2 <udp_remove+0x42>
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	68da      	ldr	r2, [r3, #12]
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d104      	bne.n	8012bd2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	68da      	ldr	r2, [r3, #12]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	60da      	str	r2, [r3, #12]
        break;
 8012bd0:	e005      	b.n	8012bde <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	60fb      	str	r3, [r7, #12]
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d1eb      	bne.n	8012bb6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012bde:	6879      	ldr	r1, [r7, #4]
 8012be0:	2000      	movs	r0, #0
 8012be2:	f7f9 f921 	bl	800be28 <memp_free>
}
 8012be6:	bf00      	nop
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	2000774c 	.word	0x2000774c

08012bf4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	f7f9 f8c2 	bl	800bd84 <memp_malloc>
 8012c00:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d007      	beq.n	8012c18 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012c08:	2220      	movs	r2, #32
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f001 fce7 	bl	80145e0 <memset>
    pcb->ttl = UDP_TTL;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	22ff      	movs	r2, #255	; 0xff
 8012c16:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012c18:	687b      	ldr	r3, [r7, #4]
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b084      	sub	sp, #16
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	4603      	mov	r3, r0
 8012c2a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012c2c:	f7ff ffe2 	bl	8012bf4 <udp_new>
 8012c30:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012c32:	68fb      	ldr	r3, [r7, #12]
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3710      	adds	r7, #16
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b085      	sub	sp, #20
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d01e      	beq.n	8012c8a <udp_netif_ip_addr_changed+0x4e>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d01a      	beq.n	8012c8a <udp_netif_ip_addr_changed+0x4e>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d017      	beq.n	8012c8a <udp_netif_ip_addr_changed+0x4e>
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d013      	beq.n	8012c8a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c62:	4b0d      	ldr	r3, [pc, #52]	; (8012c98 <udp_netif_ip_addr_changed+0x5c>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	60fb      	str	r3, [r7, #12]
 8012c68:	e00c      	b.n	8012c84 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d103      	bne.n	8012c7e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	68db      	ldr	r3, [r3, #12]
 8012c82:	60fb      	str	r3, [r7, #12]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1ef      	bne.n	8012c6a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012c8a:	bf00      	nop
 8012c8c:	3714      	adds	r7, #20
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c94:	4770      	bx	lr
 8012c96:	bf00      	nop
 8012c98:	2000774c 	.word	0x2000774c

08012c9c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012ca6:	230e      	movs	r3, #14
 8012ca8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	895b      	ldrh	r3, [r3, #10]
 8012cae:	2b0e      	cmp	r3, #14
 8012cb0:	d977      	bls.n	8012da2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	7b1a      	ldrb	r2, [r3, #12]
 8012cbc:	7b5b      	ldrb	r3, [r3, #13]
 8012cbe:	021b      	lsls	r3, r3, #8
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	f003 0301 	and.w	r3, r3, #1
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d023      	beq.n	8012d18 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d10f      	bne.n	8012cf8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	785b      	ldrb	r3, [r3, #1]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d11b      	bne.n	8012d18 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012ce4:	2b5e      	cmp	r3, #94	; 0x5e
 8012ce6:	d117      	bne.n	8012d18 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	7b5b      	ldrb	r3, [r3, #13]
 8012cec:	f043 0310 	orr.w	r3, r3, #16
 8012cf0:	b2da      	uxtb	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	735a      	strb	r2, [r3, #13]
 8012cf6:	e00f      	b.n	8012d18 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	2206      	movs	r2, #6
 8012cfc:	492f      	ldr	r1, [pc, #188]	; (8012dbc <ethernet_input+0x120>)
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f001 fc54 	bl	80145ac <memcmp>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d106      	bne.n	8012d18 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	7b5b      	ldrb	r3, [r3, #13]
 8012d0e:	f043 0308 	orr.w	r3, r3, #8
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012d18:	89fb      	ldrh	r3, [r7, #14]
 8012d1a:	2b08      	cmp	r3, #8
 8012d1c:	d003      	beq.n	8012d26 <ethernet_input+0x8a>
 8012d1e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012d22:	d01e      	beq.n	8012d62 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012d24:	e042      	b.n	8012dac <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d2c:	f003 0308 	and.w	r3, r3, #8
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d038      	beq.n	8012da6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	895b      	ldrh	r3, [r3, #10]
 8012d38:	461a      	mov	r2, r3
 8012d3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	db34      	blt.n	8012dac <ethernet_input+0x110>
 8012d42:	8afb      	ldrh	r3, [r7, #22]
 8012d44:	425b      	negs	r3, r3
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	b21b      	sxth	r3, r3
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7f9 fda1 	bl	800c894 <pbuf_header>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d129      	bne.n	8012dac <ethernet_input+0x110>
        ip4_input(p, netif);
 8012d58:	6839      	ldr	r1, [r7, #0]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7f7 faf6 	bl	800a34c <ip4_input>
      break;
 8012d60:	e01d      	b.n	8012d9e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d68:	f003 0308 	and.w	r3, r3, #8
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d01c      	beq.n	8012daa <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	895b      	ldrh	r3, [r3, #10]
 8012d74:	461a      	mov	r2, r3
 8012d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	db16      	blt.n	8012dac <ethernet_input+0x110>
 8012d7e:	8afb      	ldrh	r3, [r7, #22]
 8012d80:	425b      	negs	r3, r3
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	b21b      	sxth	r3, r3
 8012d86:	4619      	mov	r1, r3
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f7f9 fd83 	bl	800c894 <pbuf_header>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d10b      	bne.n	8012dac <ethernet_input+0x110>
        etharp_input(p, netif);
 8012d94:	6839      	ldr	r1, [r7, #0]
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f7f6 fcc6 	bl	8009728 <etharp_input>
      break;
 8012d9c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e008      	b.n	8012db4 <ethernet_input+0x118>
    goto free_and_return;
 8012da2:	bf00      	nop
 8012da4:	e002      	b.n	8012dac <ethernet_input+0x110>
        goto free_and_return;
 8012da6:	bf00      	nop
 8012da8:	e000      	b.n	8012dac <ethernet_input+0x110>
        goto free_and_return;
 8012daa:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7f9 fd95 	bl	800c8dc <pbuf_free>
  return ERR_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3718      	adds	r7, #24
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	08018004 	.word	0x08018004

08012dc0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012dce:	8c3b      	ldrh	r3, [r7, #32]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7f6 f971 	bl	80090b8 <lwip_htons>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012dda:	210e      	movs	r1, #14
 8012ddc:	68b8      	ldr	r0, [r7, #8]
 8012dde:	f7f9 fd59 	bl	800c894 <pbuf_header>
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d125      	bne.n	8012e34 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	8afa      	ldrh	r2, [r7, #22]
 8012df2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	2206      	movs	r2, #6
 8012df8:	6839      	ldr	r1, [r7, #0]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f001 fbe5 	bl	80145ca <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	3306      	adds	r3, #6
 8012e04:	2206      	movs	r2, #6
 8012e06:	6879      	ldr	r1, [r7, #4]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f001 fbde 	bl	80145ca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012e14:	2b06      	cmp	r3, #6
 8012e16:	d006      	beq.n	8012e26 <ethernet_output+0x66>
 8012e18:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <ethernet_output+0x84>)
 8012e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012e1e:	490a      	ldr	r1, [pc, #40]	; (8012e48 <ethernet_output+0x88>)
 8012e20:	480a      	ldr	r0, [pc, #40]	; (8012e4c <ethernet_output+0x8c>)
 8012e22:	f001 fbe5 	bl	80145f0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	699b      	ldr	r3, [r3, #24]
 8012e2a:	68b9      	ldr	r1, [r7, #8]
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	4798      	blx	r3
 8012e30:	4603      	mov	r3, r0
 8012e32:	e002      	b.n	8012e3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012e34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012e36:	f06f 0301 	mvn.w	r3, #1
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3718      	adds	r7, #24
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	08017cec 	.word	0x08017cec
 8012e48:	08017d24 	.word	0x08017d24
 8012e4c:	08017d58 	.word	0x08017d58

08012e50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	60bb      	str	r3, [r7, #8]
 8012e5e:	2304      	movs	r3, #4
 8012e60:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012e62:	f107 0308 	add.w	r3, r7, #8
 8012e66:	2100      	movs	r1, #0
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7f0 fd38 	bl	80038de <osMessageCreate>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d102      	bne.n	8012e82 <sys_mbox_new+0x32>
    return ERR_MEM;
 8012e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e80:	e000      	b.n	8012e84 <sys_mbox_new+0x34>

  return ERR_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7f0 fde7 	bl	8003a6c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7f0 fdf8 	bl	8003a98 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8012ea8:	bf00      	nop
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8012eba:	bf00      	nop
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	6839      	ldr	r1, [r7, #0]
 8012ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7f0 fd1c 	bl	8003904 <osMessagePut>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1f4      	bne.n	8012ebc <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8012ed2:	bf00      	nop
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b084      	sub	sp, #16
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	2200      	movs	r2, #0
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f0 fd09 	bl	8003904 <osMessagePut>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d102      	bne.n	8012efe <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	73fb      	strb	r3, [r7, #15]
 8012efc:	e001      	b.n	8012f02 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012efe:	23ff      	movs	r3, #255	; 0xff
 8012f00:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b08c      	sub	sp, #48	; 0x30
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	61f8      	str	r0, [r7, #28]
 8012f16:	61b9      	str	r1, [r7, #24]
 8012f18:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012f1a:	f7f0 fb50 	bl	80035be <osKernelSysTick>
 8012f1e:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d017      	beq.n	8012f56 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	6819      	ldr	r1, [r3, #0]
 8012f2a:	f107 0320 	add.w	r3, r7, #32
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f0 fd27 	bl	8003984 <osMessageGet>

    if(event.status == osEventMessage)
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	2b10      	cmp	r3, #16
 8012f3a:	d109      	bne.n	8012f50 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3e:	461a      	mov	r2, r3
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012f44:	f7f0 fb3b 	bl	80035be <osKernelSysTick>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	e019      	b.n	8012f84 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f54:	e016      	b.n	8012f84 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	6819      	ldr	r1, [r3, #0]
 8012f5a:	463b      	mov	r3, r7
 8012f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f0 fd0f 	bl	8003984 <osMessageGet>
 8012f66:	f107 0320 	add.w	r3, r7, #32
 8012f6a:	463a      	mov	r2, r7
 8012f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	461a      	mov	r2, r3
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012f7a:	f7f0 fb20 	bl	80035be <osKernelSysTick>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3730      	adds	r7, #48	; 0x30
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6819      	ldr	r1, [r3, #0]
 8012f9a:	f107 030c 	add.w	r3, r7, #12
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f0 fcef 	bl	8003984 <osMessageGet>

  if(event.status == osEventMessage)
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b10      	cmp	r3, #16
 8012faa:	d105      	bne.n	8012fb8 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	e001      	b.n	8012fbc <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8012fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d101      	bne.n	8012fd8 <sys_mbox_valid+0x14>
    return 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	e000      	b.n	8012fda <sys_mbox_valid+0x16>
  else
    return 1;
 8012fd8:	2301      	movs	r3, #1
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	370c      	adds	r7, #12
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr

08012fe6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8012fe6:	b480      	push	{r7}
 8012fe8:	b083      	sub	sp, #12
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
}
 8012ff4:	bf00      	nop
 8012ff6:	370c      	adds	r7, #12
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr

08013000 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801300c:	2300      	movs	r3, #0
 801300e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8013010:	f107 030c 	add.w	r3, r7, #12
 8013014:	2101      	movs	r1, #1
 8013016:	4618      	mov	r0, r3
 8013018:	f7f0 fbac 	bl	8003774 <osSemaphoreCreate>
 801301c:	4602      	mov	r2, r0
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d102      	bne.n	8013030 <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801302a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801302e:	e009      	b.n	8013044 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8013030:	78fb      	ldrb	r3, [r7, #3]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d105      	bne.n	8013042 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	2100      	movs	r1, #0
 801303c:	4618      	mov	r0, r3
 801303e:	f7f0 fbb7 	bl	80037b0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013042:	2300      	movs	r3, #0
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8013056:	f7f0 fab2 	bl	80035be <osKernelSysTick>
 801305a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d011      	beq.n	8013086 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6839      	ldr	r1, [r7, #0]
 8013068:	4618      	mov	r0, r3
 801306a:	f7f0 fba1 	bl	80037b0 <osSemaphoreWait>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d105      	bne.n	8013080 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8013074:	f7f0 faa3 	bl	80035be <osKernelSysTick>
 8013078:	4602      	mov	r2, r0
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	e012      	b.n	80130a6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013084:	e00f      	b.n	80130a6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8013086:	bf00      	nop
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013090:	4618      	mov	r0, r3
 8013092:	f7f0 fb8d 	bl	80037b0 <osSemaphoreWait>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d1f5      	bne.n	8013088 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801309c:	f7f0 fa8f 	bl	80035be <osKernelSysTick>
 80130a0:	4602      	mov	r2, r0
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b082      	sub	sp, #8
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f0 fbc6 	bl	800384c <osSemaphoreRelease>
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}

080130c8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7f0 fbef 	bl	80038b8 <osSemaphoreDelete>
}
 80130da:	bf00      	nop
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80130e2:	b480      	push	{r7}
 80130e4:	b083      	sub	sp, #12
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d101      	bne.n	80130f6 <sys_sem_valid+0x14>
    return 0;
 80130f2:	2300      	movs	r3, #0
 80130f4:	e000      	b.n	80130f8 <sys_sem_valid+0x16>
  else
    return 1;
 80130f6:	2301      	movs	r3, #1
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8013104:	b480      	push	{r7}
 8013106:	b083      	sub	sp, #12
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	601a      	str	r2, [r3, #0]
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr
	...

08013120 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013124:	4803      	ldr	r0, [pc, #12]	; (8013134 <sys_init+0x14>)
 8013126:	f7f0 fa95 	bl	8003654 <osMutexCreate>
 801312a:	4602      	mov	r2, r0
 801312c:	4b02      	ldr	r3, [pc, #8]	; (8013138 <sys_init+0x18>)
 801312e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013130:	bf00      	nop
 8013132:	bd80      	pop	{r7, pc}
 8013134:	08018014 	.word	0x08018014
 8013138:	20007754 	.word	0x20007754

0801313c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013144:	2300      	movs	r3, #0
 8013146:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013148:	f107 030c 	add.w	r3, r7, #12
 801314c:	4618      	mov	r0, r3
 801314e:	f7f0 fa81 	bl	8003654 <osMutexCreate>
 8013152:	4602      	mov	r2, r0
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d102      	bne.n	8013166 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013164:	e000      	b.n	8013168 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013166:	2300      	movs	r3, #0
}
 8013168:	4618      	mov	r0, r3
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013180:	4618      	mov	r0, r3
 8013182:	f7f0 fa73 	bl	800366c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013186:	bf00      	nop
 8013188:	3708      	adds	r7, #8
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b082      	sub	sp, #8
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4618      	mov	r0, r3
 801319c:	f7f0 fab4 	bl	8003708 <osMutexRelease>
}
 80131a0:	bf00      	nop
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}

080131a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b08a      	sub	sp, #40	; 0x28
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
 80131b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	617b      	str	r3, [r7, #20]
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	61bb      	str	r3, [r7, #24]
 80131be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c0:	b21b      	sxth	r3, r3
 80131c2:	83bb      	strh	r3, [r7, #28]
 80131c4:	2300      	movs	r3, #0
 80131c6:	623b      	str	r3, [r7, #32]
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80131cc:	f107 0314 	add.w	r3, r7, #20
 80131d0:	6879      	ldr	r1, [r7, #4]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f0 fa03 	bl	80035de <osThreadCreate>
 80131d8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80131da:	4618      	mov	r0, r3
 80131dc:	3728      	adds	r7, #40	; 0x28
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
	...

080131e4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80131e8:	4b04      	ldr	r3, [pc, #16]	; (80131fc <sys_arch_protect+0x18>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7f0 fa3b 	bl	800366c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80131f6:	2301      	movs	r3, #1
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	20007754 	.word	0x20007754

08013200 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013208:	4b04      	ldr	r3, [pc, #16]	; (801321c <sys_arch_unprotect+0x1c>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4618      	mov	r0, r3
 801320e:	f7f0 fa7b 	bl	8003708 <osMutexRelease>
}
 8013212:	bf00      	nop
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	20007754 	.word	0x20007754

08013220 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08e      	sub	sp, #56	; 0x38
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a59      	ldr	r2, [pc, #356]	; (8013394 <HAL_ETH_MspInit+0x174>)
 801322e:	4293      	cmp	r3, r2
 8013230:	f040 80ac 	bne.w	801338c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8013234:	2300      	movs	r3, #0
 8013236:	623b      	str	r3, [r7, #32]
 8013238:	4a57      	ldr	r2, [pc, #348]	; (8013398 <HAL_ETH_MspInit+0x178>)
 801323a:	4b57      	ldr	r3, [pc, #348]	; (8013398 <HAL_ETH_MspInit+0x178>)
 801323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801323e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013242:	6313      	str	r3, [r2, #48]	; 0x30
 8013244:	4b54      	ldr	r3, [pc, #336]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801324c:	623b      	str	r3, [r7, #32]
 801324e:	6a3b      	ldr	r3, [r7, #32]
 8013250:	2300      	movs	r3, #0
 8013252:	61fb      	str	r3, [r7, #28]
 8013254:	4a50      	ldr	r2, [pc, #320]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013256:	4b50      	ldr	r3, [pc, #320]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801325a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801325e:	6313      	str	r3, [r2, #48]	; 0x30
 8013260:	4b4d      	ldr	r3, [pc, #308]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013268:	61fb      	str	r3, [r7, #28]
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	2300      	movs	r3, #0
 801326e:	61bb      	str	r3, [r7, #24]
 8013270:	4a49      	ldr	r2, [pc, #292]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013272:	4b49      	ldr	r3, [pc, #292]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801327a:	6313      	str	r3, [r2, #48]	; 0x30
 801327c:	4b46      	ldr	r3, [pc, #280]	; (8013398 <HAL_ETH_MspInit+0x178>)
 801327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013284:	61bb      	str	r3, [r7, #24]
 8013286:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013288:	2300      	movs	r3, #0
 801328a:	617b      	str	r3, [r7, #20]
 801328c:	4a42      	ldr	r2, [pc, #264]	; (8013398 <HAL_ETH_MspInit+0x178>)
 801328e:	4b42      	ldr	r3, [pc, #264]	; (8013398 <HAL_ETH_MspInit+0x178>)
 8013290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013292:	f043 0304 	orr.w	r3, r3, #4
 8013296:	6313      	str	r3, [r2, #48]	; 0x30
 8013298:	4b3f      	ldr	r3, [pc, #252]	; (8013398 <HAL_ETH_MspInit+0x178>)
 801329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329c:	f003 0304 	and.w	r3, r3, #4
 80132a0:	617b      	str	r3, [r7, #20]
 80132a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132a4:	2300      	movs	r3, #0
 80132a6:	613b      	str	r3, [r7, #16]
 80132a8:	4a3b      	ldr	r2, [pc, #236]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132aa:	4b3b      	ldr	r3, [pc, #236]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132ae:	f043 0301 	orr.w	r3, r3, #1
 80132b2:	6313      	str	r3, [r2, #48]	; 0x30
 80132b4:	4b38      	ldr	r3, [pc, #224]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b8:	f003 0301 	and.w	r3, r3, #1
 80132bc:	613b      	str	r3, [r7, #16]
 80132be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80132c0:	2300      	movs	r3, #0
 80132c2:	60fb      	str	r3, [r7, #12]
 80132c4:	4a34      	ldr	r2, [pc, #208]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132c6:	4b34      	ldr	r3, [pc, #208]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132ca:	f043 0302 	orr.w	r3, r3, #2
 80132ce:	6313      	str	r3, [r2, #48]	; 0x30
 80132d0:	4b31      	ldr	r3, [pc, #196]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132d4:	f003 0302 	and.w	r3, r3, #2
 80132d8:	60fb      	str	r3, [r7, #12]
 80132da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80132dc:	2300      	movs	r3, #0
 80132de:	60bb      	str	r3, [r7, #8]
 80132e0:	4a2d      	ldr	r2, [pc, #180]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132e2:	4b2d      	ldr	r3, [pc, #180]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ea:	6313      	str	r3, [r2, #48]	; 0x30
 80132ec:	4b2a      	ldr	r3, [pc, #168]	; (8013398 <HAL_ETH_MspInit+0x178>)
 80132ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132f4:	60bb      	str	r3, [r7, #8]
 80132f6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80132f8:	2332      	movs	r3, #50	; 0x32
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132fc:	2302      	movs	r3, #2
 80132fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013300:	2300      	movs	r3, #0
 8013302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013304:	2303      	movs	r3, #3
 8013306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013308:	230b      	movs	r3, #11
 801330a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801330c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013310:	4619      	mov	r1, r3
 8013312:	4822      	ldr	r0, [pc, #136]	; (801339c <HAL_ETH_MspInit+0x17c>)
 8013314:	f7ee fa98 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013318:	2386      	movs	r3, #134	; 0x86
 801331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801331c:	2302      	movs	r3, #2
 801331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013320:	2300      	movs	r3, #0
 8013322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013324:	2303      	movs	r3, #3
 8013326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013328:	230b      	movs	r3, #11
 801332a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013330:	4619      	mov	r1, r3
 8013332:	481b      	ldr	r0, [pc, #108]	; (80133a0 <HAL_ETH_MspInit+0x180>)
 8013334:	f7ee fa88 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801333e:	2302      	movs	r3, #2
 8013340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013342:	2300      	movs	r3, #0
 8013344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013346:	2303      	movs	r3, #3
 8013348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801334a:	230b      	movs	r3, #11
 801334c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801334e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013352:	4619      	mov	r1, r3
 8013354:	4813      	ldr	r0, [pc, #76]	; (80133a4 <HAL_ETH_MspInit+0x184>)
 8013356:	f7ee fa77 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801335a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013360:	2302      	movs	r3, #2
 8013362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013364:	2300      	movs	r3, #0
 8013366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013368:	2303      	movs	r3, #3
 801336a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801336c:	230b      	movs	r3, #11
 801336e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013374:	4619      	mov	r1, r3
 8013376:	480c      	ldr	r0, [pc, #48]	; (80133a8 <HAL_ETH_MspInit+0x188>)
 8013378:	f7ee fa66 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 801337c:	2200      	movs	r2, #0
 801337e:	2105      	movs	r1, #5
 8013380:	203d      	movs	r0, #61	; 0x3d
 8013382:	f7ed fa27 	bl	80007d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8013386:	203d      	movs	r0, #61	; 0x3d
 8013388:	f7ed fa40 	bl	800080c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801338c:	bf00      	nop
 801338e:	3738      	adds	r7, #56	; 0x38
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	40028000 	.word	0x40028000
 8013398:	40023800 	.word	0x40023800
 801339c:	40020800 	.word	0x40020800
 80133a0:	40020000 	.word	0x40020000
 80133a4:	40020400 	.word	0x40020400
 80133a8:	40021800 	.word	0x40021800

080133ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80133b4:	4b04      	ldr	r3, [pc, #16]	; (80133c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f0 fa47 	bl	800384c <osSemaphoreRelease>
}
 80133be:	bf00      	nop
 80133c0:	3708      	adds	r7, #8
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	20003fcc 	.word	0x20003fcc

080133cc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80133cc:	b5b0      	push	{r4, r5, r7, lr}
 80133ce:	b08c      	sub	sp, #48	; 0x30
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80133d4:	2300      	movs	r3, #0
 80133d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80133d8:	4b5a      	ldr	r3, [pc, #360]	; (8013544 <low_level_init+0x178>)
 80133da:	4a5b      	ldr	r2, [pc, #364]	; (8013548 <low_level_init+0x17c>)
 80133dc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80133de:	4b59      	ldr	r3, [pc, #356]	; (8013544 <low_level_init+0x178>)
 80133e0:	2201      	movs	r2, #1
 80133e2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80133e4:	4b57      	ldr	r3, [pc, #348]	; (8013544 <low_level_init+0x178>)
 80133e6:	2200      	movs	r2, #0
 80133e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80133ea:	2300      	movs	r3, #0
 80133ec:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 80133f0:	2380      	movs	r3, #128	; 0x80
 80133f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 80133f6:	23e1      	movs	r3, #225	; 0xe1
 80133f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 80133fc:	2300      	movs	r3, #0
 80133fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x00;
 8013402:	2300      	movs	r3, #0
 8013404:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x00;
 8013408:	2300      	movs	r3, #0
 801340a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 801340e:	4a4d      	ldr	r2, [pc, #308]	; (8013544 <low_level_init+0x178>)
 8013410:	f107 0320 	add.w	r3, r7, #32
 8013414:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8013416:	4b4b      	ldr	r3, [pc, #300]	; (8013544 <low_level_init+0x178>)
 8013418:	2201      	movs	r2, #1
 801341a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801341c:	4b49      	ldr	r3, [pc, #292]	; (8013544 <low_level_init+0x178>)
 801341e:	2200      	movs	r2, #0
 8013420:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013422:	4b48      	ldr	r3, [pc, #288]	; (8013544 <low_level_init+0x178>)
 8013424:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013428:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801342a:	4846      	ldr	r0, [pc, #280]	; (8013544 <low_level_init+0x178>)
 801342c:	f7ed f9fc 	bl	8000828 <HAL_ETH_Init>
 8013430:	4603      	mov	r3, r0
 8013432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 8013436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801343a:	2b00      	cmp	r3, #0
 801343c:	d108      	bne.n	8013450 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013444:	f043 0304 	orr.w	r3, r3, #4
 8013448:	b2da      	uxtb	r2, r3
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8013450:	2304      	movs	r3, #4
 8013452:	4a3e      	ldr	r2, [pc, #248]	; (801354c <low_level_init+0x180>)
 8013454:	493e      	ldr	r1, [pc, #248]	; (8013550 <low_level_init+0x184>)
 8013456:	483b      	ldr	r0, [pc, #236]	; (8013544 <low_level_init+0x178>)
 8013458:	f7ed fb84 	bl	8000b64 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801345c:	2304      	movs	r3, #4
 801345e:	4a3d      	ldr	r2, [pc, #244]	; (8013554 <low_level_init+0x188>)
 8013460:	493d      	ldr	r1, [pc, #244]	; (8013558 <low_level_init+0x18c>)
 8013462:	4838      	ldr	r0, [pc, #224]	; (8013544 <low_level_init+0x178>)
 8013464:	f7ed fbe7 	bl	8000c36 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2206      	movs	r2, #6
 801346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8013470:	4b34      	ldr	r3, [pc, #208]	; (8013544 <low_level_init+0x178>)
 8013472:	695b      	ldr	r3, [r3, #20]
 8013474:	781a      	ldrb	r2, [r3, #0]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801347c:	4b31      	ldr	r3, [pc, #196]	; (8013544 <low_level_init+0x178>)
 801347e:	695b      	ldr	r3, [r3, #20]
 8013480:	785a      	ldrb	r2, [r3, #1]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013488:	4b2e      	ldr	r3, [pc, #184]	; (8013544 <low_level_init+0x178>)
 801348a:	695b      	ldr	r3, [r3, #20]
 801348c:	789a      	ldrb	r2, [r3, #2]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013494:	4b2b      	ldr	r3, [pc, #172]	; (8013544 <low_level_init+0x178>)
 8013496:	695b      	ldr	r3, [r3, #20]
 8013498:	78da      	ldrb	r2, [r3, #3]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80134a0:	4b28      	ldr	r3, [pc, #160]	; (8013544 <low_level_init+0x178>)
 80134a2:	695b      	ldr	r3, [r3, #20]
 80134a4:	791a      	ldrb	r2, [r3, #4]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80134ac:	4b25      	ldr	r3, [pc, #148]	; (8013544 <low_level_init+0x178>)
 80134ae:	695b      	ldr	r3, [r3, #20]
 80134b0:	795a      	ldrb	r2, [r3, #5]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80134be:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80134c6:	f043 030a 	orr.w	r3, r3, #10
 80134ca:	b2da      	uxtb	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80134d2:	2300      	movs	r3, #0
 80134d4:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80134d6:	f107 031c 	add.w	r3, r7, #28
 80134da:	2101      	movs	r1, #1
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f0 f949 	bl	8003774 <osSemaphoreCreate>
 80134e2:	4602      	mov	r2, r0
 80134e4:	4b1d      	ldr	r3, [pc, #116]	; (801355c <low_level_init+0x190>)
 80134e6:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80134e8:	4b1d      	ldr	r3, [pc, #116]	; (8013560 <low_level_init+0x194>)
 80134ea:	f107 0408 	add.w	r4, r7, #8
 80134ee:	461d      	mov	r5, r3
 80134f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 80134f8:	f107 0308 	add.w	r3, r7, #8
 80134fc:	6879      	ldr	r1, [r7, #4]
 80134fe:	4618      	mov	r0, r3
 8013500:	f7f0 f86d 	bl	80035de <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8013504:	480f      	ldr	r0, [pc, #60]	; (8013544 <low_level_init+0x178>)
 8013506:	f7ed febe 	bl	8001286 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801350a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801350e:	461a      	mov	r2, r3
 8013510:	211d      	movs	r1, #29
 8013512:	480c      	ldr	r0, [pc, #48]	; (8013544 <low_level_init+0x178>)
 8013514:	f7ed fde9 	bl	80010ea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8013518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351a:	f043 030b 	orr.w	r3, r3, #11
 801351e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013522:	461a      	mov	r2, r3
 8013524:	211d      	movs	r1, #29
 8013526:	4807      	ldr	r0, [pc, #28]	; (8013544 <low_level_init+0x178>)
 8013528:	f7ed fe47 	bl	80011ba <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801352c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013530:	461a      	mov	r2, r3
 8013532:	211d      	movs	r1, #29
 8013534:	4803      	ldr	r0, [pc, #12]	; (8013544 <low_level_init+0x178>)
 8013536:	f7ed fdd8 	bl	80010ea <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 801353a:	bf00      	nop
 801353c:	3730      	adds	r7, #48	; 0x30
 801353e:	46bd      	mov	sp, r7
 8013540:	bdb0      	pop	{r4, r5, r7, pc}
 8013542:	bf00      	nop
 8013544:	20009028 	.word	0x20009028
 8013548:	40028000 	.word	0x40028000
 801354c:	20009070 	.word	0x20009070
 8013550:	20007758 	.word	0x20007758
 8013554:	200077d8 	.word	0x200077d8
 8013558:	20008fa8 	.word	0x20008fa8
 801355c:	20003fcc 	.word	0x20003fcc
 8013560:	08017d88 	.word	0x08017d88

08013564 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b08a      	sub	sp, #40	; 0x28
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801356e:	4b4b      	ldr	r3, [pc, #300]	; (801369c <low_level_output+0x138>)
 8013570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013572:	689b      	ldr	r3, [r3, #8]
 8013574:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801357a:	2300      	movs	r3, #0
 801357c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8013586:	4b45      	ldr	r3, [pc, #276]	; (801369c <low_level_output+0x138>)
 8013588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 801358c:	2300      	movs	r3, #0
 801358e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	623b      	str	r3, [r7, #32]
 8013594:	e05a      	b.n	801364c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013596:	69bb      	ldr	r3, [r7, #24]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	da03      	bge.n	80135a6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801359e:	23f8      	movs	r3, #248	; 0xf8
 80135a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80135a4:	e05c      	b.n	8013660 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80135a6:	6a3b      	ldr	r3, [r7, #32]
 80135a8:	895b      	ldrh	r3, [r3, #10]
 80135aa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80135b0:	e02f      	b.n	8013612 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80135b2:	69fa      	ldr	r2, [r7, #28]
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	18d0      	adds	r0, r2, r3
 80135b8:	6a3b      	ldr	r3, [r7, #32]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	18d1      	adds	r1, r2, r3
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80135c6:	3304      	adds	r3, #4
 80135c8:	461a      	mov	r2, r3
 80135ca:	f000 fffe 	bl	80145ca <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	da03      	bge.n	80135e4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80135dc:	23f8      	movs	r3, #248	; 0xf8
 80135de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80135e2:	e03d      	b.n	8013660 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80135ea:	693a      	ldr	r2, [r7, #16]
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	4413      	add	r3, r2
 80135f0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80135f4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80135f6:	68ba      	ldr	r2, [r7, #8]
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013600:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8013602:	697a      	ldr	r2, [r7, #20]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	1ad3      	subs	r3, r2, r3
 8013608:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801360c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801360e:	2300      	movs	r3, #0
 8013610:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013612:	68fa      	ldr	r2, [r7, #12]
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	4413      	add	r3, r2
 8013618:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801361c:	4293      	cmp	r3, r2
 801361e:	d8c8      	bhi.n	80135b2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013620:	69fa      	ldr	r2, [r7, #28]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	18d0      	adds	r0, r2, r3
 8013626:	6a3b      	ldr	r3, [r7, #32]
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	4413      	add	r3, r2
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	4619      	mov	r1, r3
 8013632:	f000 ffca 	bl	80145ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013636:	693a      	ldr	r2, [r7, #16]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	4413      	add	r3, r2
 801363c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801363e:	697a      	ldr	r2, [r7, #20]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	4413      	add	r3, r2
 8013644:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8013646:	6a3b      	ldr	r3, [r7, #32]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	623b      	str	r3, [r7, #32]
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1a1      	bne.n	8013596 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8013652:	6979      	ldr	r1, [r7, #20]
 8013654:	4811      	ldr	r0, [pc, #68]	; (801369c <low_level_output+0x138>)
 8013656:	f7ed fb5b 	bl	8000d10 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801365a:	2300      	movs	r3, #0
 801365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013660:	4b0e      	ldr	r3, [pc, #56]	; (801369c <low_level_output+0x138>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013668:	3314      	adds	r3, #20
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	f003 0320 	and.w	r3, r3, #32
 8013670:	2b00      	cmp	r3, #0
 8013672:	d00d      	beq.n	8013690 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013674:	4b09      	ldr	r3, [pc, #36]	; (801369c <low_level_output+0x138>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801367c:	3314      	adds	r3, #20
 801367e:	2220      	movs	r2, #32
 8013680:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8013682:	4b06      	ldr	r3, [pc, #24]	; (801369c <low_level_output+0x138>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801368a:	3304      	adds	r3, #4
 801368c:	2200      	movs	r2, #0
 801368e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8013690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013694:	4618      	mov	r0, r3
 8013696:	3728      	adds	r7, #40	; 0x28
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	20009028 	.word	0x20009028

080136a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b08c      	sub	sp, #48	; 0x30
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80136a8:	2300      	movs	r3, #0
 80136aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80136b0:	2300      	movs	r3, #0
 80136b2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80136b4:	2300      	movs	r3, #0
 80136b6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80136b8:	2300      	movs	r3, #0
 80136ba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80136bc:	2300      	movs	r3, #0
 80136be:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80136c0:	2300      	movs	r3, #0
 80136c2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80136c4:	484e      	ldr	r0, [pc, #312]	; (8013800 <low_level_input+0x160>)
 80136c6:	f7ed fc0d 	bl	8000ee4 <HAL_ETH_GetReceivedFrame_IT>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d001      	beq.n	80136d4 <low_level_input+0x34>
    return NULL;
 80136d0:	2300      	movs	r3, #0
 80136d2:	e091      	b.n	80137f8 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80136d4:	4b4a      	ldr	r3, [pc, #296]	; (8013800 <low_level_input+0x160>)
 80136d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136d8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80136da:	4b49      	ldr	r3, [pc, #292]	; (8013800 <low_level_input+0x160>)
 80136dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136de:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80136e0:	89fb      	ldrh	r3, [r7, #14]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d006      	beq.n	80136f4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80136e6:	89fb      	ldrh	r3, [r7, #14]
 80136e8:	2203      	movs	r2, #3
 80136ea:	4619      	mov	r1, r3
 80136ec:	2004      	movs	r0, #4
 80136ee:	f7f8 fd83 	bl	800c1f8 <pbuf_alloc>
 80136f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80136f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d04b      	beq.n	8013792 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80136fa:	4b41      	ldr	r3, [pc, #260]	; (8013800 <low_level_input+0x160>)
 80136fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136fe:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013700:	2300      	movs	r3, #0
 8013702:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	62bb      	str	r3, [r7, #40]	; 0x28
 8013708:	e040      	b.n	801378c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	895b      	ldrh	r3, [r3, #10]
 801370e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8013710:	2300      	movs	r3, #0
 8013712:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013714:	e021      	b.n	801375a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013718:	685a      	ldr	r2, [r3, #4]
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	18d0      	adds	r0, r2, r3
 801371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	18d1      	adds	r1, r2, r3
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801372a:	3304      	adds	r3, #4
 801372c:	461a      	mov	r2, r3
 801372e:	f000 ff4c 	bl	80145ca <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013738:	6a3b      	ldr	r3, [r7, #32]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801373e:	69fa      	ldr	r2, [r7, #28]
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	4413      	add	r3, r2
 8013744:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013748:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801374a:	69ba      	ldr	r2, [r7, #24]
 801374c:	69fb      	ldr	r3, [r7, #28]
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013754:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8013756:	2300      	movs	r3, #0
 8013758:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801375a:	697a      	ldr	r2, [r7, #20]
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	4413      	add	r3, r2
 8013760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013764:	4293      	cmp	r3, r2
 8013766:	d8d6      	bhi.n	8013716 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376a:	685a      	ldr	r2, [r3, #4]
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	18d0      	adds	r0, r2, r3
 8013770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	4413      	add	r3, r2
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	4619      	mov	r1, r3
 801377a:	f000 ff26 	bl	80145ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801377e:	69fa      	ldr	r2, [r7, #28]
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	4413      	add	r3, r2
 8013784:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	62bb      	str	r3, [r7, #40]	; 0x28
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1bb      	bne.n	801370a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013792:	4b1b      	ldr	r3, [pc, #108]	; (8013800 <low_level_input+0x160>)
 8013794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013796:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013798:	2300      	movs	r3, #0
 801379a:	613b      	str	r3, [r7, #16]
 801379c:	e00b      	b.n	80137b6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801379e:	6a3b      	ldr	r3, [r7, #32]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80137a6:	6a3b      	ldr	r3, [r7, #32]
 80137a8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80137aa:	6a3b      	ldr	r3, [r7, #32]
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	3301      	adds	r3, #1
 80137b4:	613b      	str	r3, [r7, #16]
 80137b6:	4b12      	ldr	r3, [pc, #72]	; (8013800 <low_level_input+0x160>)
 80137b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	429a      	cmp	r2, r3
 80137be:	d8ee      	bhi.n	801379e <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80137c0:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <low_level_input+0x160>)
 80137c2:	2200      	movs	r2, #0
 80137c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80137c6:	4b0e      	ldr	r3, [pc, #56]	; (8013800 <low_level_input+0x160>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137ce:	3314      	adds	r3, #20
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00d      	beq.n	80137f6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80137da:	4b09      	ldr	r3, [pc, #36]	; (8013800 <low_level_input+0x160>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137e2:	3314      	adds	r3, #20
 80137e4:	2280      	movs	r2, #128	; 0x80
 80137e6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80137e8:	4b05      	ldr	r3, [pc, #20]	; (8013800 <low_level_input+0x160>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137f0:	3308      	adds	r3, #8
 80137f2:	2200      	movs	r2, #0
 80137f4:	601a      	str	r2, [r3, #0]
  }
  return p;
 80137f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3730      	adds	r7, #48	; 0x30
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	20009028 	.word	0x20009028

08013804 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8013810:	4b0f      	ldr	r3, [pc, #60]	; (8013850 <ethernetif_input+0x4c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013818:	4618      	mov	r0, r3
 801381a:	f7ef ffc9 	bl	80037b0 <osSemaphoreWait>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1f5      	bne.n	8013810 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f7ff ff3b 	bl	80136a0 <low_level_input>
 801382a:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d00a      	beq.n	8013848 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	68f9      	ldr	r1, [r7, #12]
 8013838:	68b8      	ldr	r0, [r7, #8]
 801383a:	4798      	blx	r3
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d002      	beq.n	8013848 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8013842:	68b8      	ldr	r0, [r7, #8]
 8013844:	f7f9 f84a 	bl	800c8dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1ea      	bne.n	8013824 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 801384e:	e7df      	b.n	8013810 <ethernetif_input+0xc>
 8013850:	20003fcc 	.word	0x20003fcc

08013854 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d106      	bne.n	8013870 <ethernetif_init+0x1c>
 8013862:	4b0e      	ldr	r3, [pc, #56]	; (801389c <ethernetif_init+0x48>)
 8013864:	f240 222d 	movw	r2, #557	; 0x22d
 8013868:	490d      	ldr	r1, [pc, #52]	; (80138a0 <ethernetif_init+0x4c>)
 801386a:	480e      	ldr	r0, [pc, #56]	; (80138a4 <ethernetif_init+0x50>)
 801386c:	f000 fec0 	bl	80145f0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2273      	movs	r2, #115	; 0x73
 8013874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2274      	movs	r2, #116	; 0x74
 801387c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4a09      	ldr	r2, [pc, #36]	; (80138a8 <ethernetif_init+0x54>)
 8013884:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4a08      	ldr	r2, [pc, #32]	; (80138ac <ethernetif_init+0x58>)
 801388a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7ff fd9d 	bl	80133cc <low_level_init>

  return ERR_OK;
 8013892:	2300      	movs	r3, #0
}
 8013894:	4618      	mov	r0, r3
 8013896:	3708      	adds	r7, #8
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	08017d9c 	.word	0x08017d9c
 80138a0:	08017db0 	.word	0x08017db0
 80138a4:	08017dc0 	.word	0x08017dc0
 80138a8:	08009971 	.word	0x08009971
 80138ac:	08013565 	.word	0x08013565

080138b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80138b4:	f7ec feaa 	bl	800060c <HAL_GetTick>
 80138b8:	4603      	mov	r3, r0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	bd80      	pop	{r7, pc}
	...

080138c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80138c6:	4b8b      	ldr	r3, [pc, #556]	; (8013af4 <MX_LWIP_Init+0x234>)
 80138c8:	22c0      	movs	r2, #192	; 0xc0
 80138ca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80138cc:	4b89      	ldr	r3, [pc, #548]	; (8013af4 <MX_LWIP_Init+0x234>)
 80138ce:	22a8      	movs	r2, #168	; 0xa8
 80138d0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80138d2:	4b88      	ldr	r3, [pc, #544]	; (8013af4 <MX_LWIP_Init+0x234>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 80138d8:	4b86      	ldr	r3, [pc, #536]	; (8013af4 <MX_LWIP_Init+0x234>)
 80138da:	220c      	movs	r2, #12
 80138dc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80138de:	4b86      	ldr	r3, [pc, #536]	; (8013af8 <MX_LWIP_Init+0x238>)
 80138e0:	22ff      	movs	r2, #255	; 0xff
 80138e2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80138e4:	4b84      	ldr	r3, [pc, #528]	; (8013af8 <MX_LWIP_Init+0x238>)
 80138e6:	22ff      	movs	r2, #255	; 0xff
 80138e8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80138ea:	4b83      	ldr	r3, [pc, #524]	; (8013af8 <MX_LWIP_Init+0x238>)
 80138ec:	22ff      	movs	r2, #255	; 0xff
 80138ee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80138f0:	4b81      	ldr	r3, [pc, #516]	; (8013af8 <MX_LWIP_Init+0x238>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80138f6:	4b81      	ldr	r3, [pc, #516]	; (8013afc <MX_LWIP_Init+0x23c>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80138fc:	4b7f      	ldr	r3, [pc, #508]	; (8013afc <MX_LWIP_Init+0x23c>)
 80138fe:	2200      	movs	r2, #0
 8013900:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8013902:	4b7e      	ldr	r3, [pc, #504]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013904:	2200      	movs	r2, #0
 8013906:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8013908:	4b7c      	ldr	r3, [pc, #496]	; (8013afc <MX_LWIP_Init+0x23c>)
 801390a:	2200      	movs	r2, #0
 801390c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801390e:	2100      	movs	r1, #0
 8013910:	2000      	movs	r0, #0
 8013912:	f7f5 fb99 	bl	8009048 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013916:	4b77      	ldr	r3, [pc, #476]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	061a      	lsls	r2, r3, #24
 801391c:	4b75      	ldr	r3, [pc, #468]	; (8013af4 <MX_LWIP_Init+0x234>)
 801391e:	785b      	ldrb	r3, [r3, #1]
 8013920:	041b      	lsls	r3, r3, #16
 8013922:	431a      	orrs	r2, r3
 8013924:	4b73      	ldr	r3, [pc, #460]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013926:	789b      	ldrb	r3, [r3, #2]
 8013928:	021b      	lsls	r3, r3, #8
 801392a:	4313      	orrs	r3, r2
 801392c:	4a71      	ldr	r2, [pc, #452]	; (8013af4 <MX_LWIP_Init+0x234>)
 801392e:	78d2      	ldrb	r2, [r2, #3]
 8013930:	4313      	orrs	r3, r2
 8013932:	061a      	lsls	r2, r3, #24
 8013934:	4b6f      	ldr	r3, [pc, #444]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	0619      	lsls	r1, r3, #24
 801393a:	4b6e      	ldr	r3, [pc, #440]	; (8013af4 <MX_LWIP_Init+0x234>)
 801393c:	785b      	ldrb	r3, [r3, #1]
 801393e:	041b      	lsls	r3, r3, #16
 8013940:	4319      	orrs	r1, r3
 8013942:	4b6c      	ldr	r3, [pc, #432]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013944:	789b      	ldrb	r3, [r3, #2]
 8013946:	021b      	lsls	r3, r3, #8
 8013948:	430b      	orrs	r3, r1
 801394a:	496a      	ldr	r1, [pc, #424]	; (8013af4 <MX_LWIP_Init+0x234>)
 801394c:	78c9      	ldrb	r1, [r1, #3]
 801394e:	430b      	orrs	r3, r1
 8013950:	021b      	lsls	r3, r3, #8
 8013952:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013956:	431a      	orrs	r2, r3
 8013958:	4b66      	ldr	r3, [pc, #408]	; (8013af4 <MX_LWIP_Init+0x234>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	0619      	lsls	r1, r3, #24
 801395e:	4b65      	ldr	r3, [pc, #404]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013960:	785b      	ldrb	r3, [r3, #1]
 8013962:	041b      	lsls	r3, r3, #16
 8013964:	4319      	orrs	r1, r3
 8013966:	4b63      	ldr	r3, [pc, #396]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013968:	789b      	ldrb	r3, [r3, #2]
 801396a:	021b      	lsls	r3, r3, #8
 801396c:	430b      	orrs	r3, r1
 801396e:	4961      	ldr	r1, [pc, #388]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013970:	78c9      	ldrb	r1, [r1, #3]
 8013972:	430b      	orrs	r3, r1
 8013974:	0a1b      	lsrs	r3, r3, #8
 8013976:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801397a:	431a      	orrs	r2, r3
 801397c:	4b5d      	ldr	r3, [pc, #372]	; (8013af4 <MX_LWIP_Init+0x234>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	0619      	lsls	r1, r3, #24
 8013982:	4b5c      	ldr	r3, [pc, #368]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013984:	785b      	ldrb	r3, [r3, #1]
 8013986:	041b      	lsls	r3, r3, #16
 8013988:	4319      	orrs	r1, r3
 801398a:	4b5a      	ldr	r3, [pc, #360]	; (8013af4 <MX_LWIP_Init+0x234>)
 801398c:	789b      	ldrb	r3, [r3, #2]
 801398e:	021b      	lsls	r3, r3, #8
 8013990:	430b      	orrs	r3, r1
 8013992:	4958      	ldr	r1, [pc, #352]	; (8013af4 <MX_LWIP_Init+0x234>)
 8013994:	78c9      	ldrb	r1, [r1, #3]
 8013996:	430b      	orrs	r3, r1
 8013998:	0e1b      	lsrs	r3, r3, #24
 801399a:	4313      	orrs	r3, r2
 801399c:	4a58      	ldr	r2, [pc, #352]	; (8013b00 <MX_LWIP_Init+0x240>)
 801399e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80139a0:	4b55      	ldr	r3, [pc, #340]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	061a      	lsls	r2, r3, #24
 80139a6:	4b54      	ldr	r3, [pc, #336]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139a8:	785b      	ldrb	r3, [r3, #1]
 80139aa:	041b      	lsls	r3, r3, #16
 80139ac:	431a      	orrs	r2, r3
 80139ae:	4b52      	ldr	r3, [pc, #328]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139b0:	789b      	ldrb	r3, [r3, #2]
 80139b2:	021b      	lsls	r3, r3, #8
 80139b4:	4313      	orrs	r3, r2
 80139b6:	4a50      	ldr	r2, [pc, #320]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139b8:	78d2      	ldrb	r2, [r2, #3]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	061a      	lsls	r2, r3, #24
 80139be:	4b4e      	ldr	r3, [pc, #312]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139c0:	781b      	ldrb	r3, [r3, #0]
 80139c2:	0619      	lsls	r1, r3, #24
 80139c4:	4b4c      	ldr	r3, [pc, #304]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139c6:	785b      	ldrb	r3, [r3, #1]
 80139c8:	041b      	lsls	r3, r3, #16
 80139ca:	4319      	orrs	r1, r3
 80139cc:	4b4a      	ldr	r3, [pc, #296]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139ce:	789b      	ldrb	r3, [r3, #2]
 80139d0:	021b      	lsls	r3, r3, #8
 80139d2:	430b      	orrs	r3, r1
 80139d4:	4948      	ldr	r1, [pc, #288]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139d6:	78c9      	ldrb	r1, [r1, #3]
 80139d8:	430b      	orrs	r3, r1
 80139da:	021b      	lsls	r3, r3, #8
 80139dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80139e0:	431a      	orrs	r2, r3
 80139e2:	4b45      	ldr	r3, [pc, #276]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	0619      	lsls	r1, r3, #24
 80139e8:	4b43      	ldr	r3, [pc, #268]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139ea:	785b      	ldrb	r3, [r3, #1]
 80139ec:	041b      	lsls	r3, r3, #16
 80139ee:	4319      	orrs	r1, r3
 80139f0:	4b41      	ldr	r3, [pc, #260]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139f2:	789b      	ldrb	r3, [r3, #2]
 80139f4:	021b      	lsls	r3, r3, #8
 80139f6:	430b      	orrs	r3, r1
 80139f8:	493f      	ldr	r1, [pc, #252]	; (8013af8 <MX_LWIP_Init+0x238>)
 80139fa:	78c9      	ldrb	r1, [r1, #3]
 80139fc:	430b      	orrs	r3, r1
 80139fe:	0a1b      	lsrs	r3, r3, #8
 8013a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013a04:	431a      	orrs	r2, r3
 8013a06:	4b3c      	ldr	r3, [pc, #240]	; (8013af8 <MX_LWIP_Init+0x238>)
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	0619      	lsls	r1, r3, #24
 8013a0c:	4b3a      	ldr	r3, [pc, #232]	; (8013af8 <MX_LWIP_Init+0x238>)
 8013a0e:	785b      	ldrb	r3, [r3, #1]
 8013a10:	041b      	lsls	r3, r3, #16
 8013a12:	4319      	orrs	r1, r3
 8013a14:	4b38      	ldr	r3, [pc, #224]	; (8013af8 <MX_LWIP_Init+0x238>)
 8013a16:	789b      	ldrb	r3, [r3, #2]
 8013a18:	021b      	lsls	r3, r3, #8
 8013a1a:	430b      	orrs	r3, r1
 8013a1c:	4936      	ldr	r1, [pc, #216]	; (8013af8 <MX_LWIP_Init+0x238>)
 8013a1e:	78c9      	ldrb	r1, [r1, #3]
 8013a20:	430b      	orrs	r3, r1
 8013a22:	0e1b      	lsrs	r3, r3, #24
 8013a24:	4313      	orrs	r3, r2
 8013a26:	4a37      	ldr	r2, [pc, #220]	; (8013b04 <MX_LWIP_Init+0x244>)
 8013a28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013a2a:	4b34      	ldr	r3, [pc, #208]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	061a      	lsls	r2, r3, #24
 8013a30:	4b32      	ldr	r3, [pc, #200]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a32:	785b      	ldrb	r3, [r3, #1]
 8013a34:	041b      	lsls	r3, r3, #16
 8013a36:	431a      	orrs	r2, r3
 8013a38:	4b30      	ldr	r3, [pc, #192]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a3a:	789b      	ldrb	r3, [r3, #2]
 8013a3c:	021b      	lsls	r3, r3, #8
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	4a2e      	ldr	r2, [pc, #184]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a42:	78d2      	ldrb	r2, [r2, #3]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	061a      	lsls	r2, r3, #24
 8013a48:	4b2c      	ldr	r3, [pc, #176]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	0619      	lsls	r1, r3, #24
 8013a4e:	4b2b      	ldr	r3, [pc, #172]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a50:	785b      	ldrb	r3, [r3, #1]
 8013a52:	041b      	lsls	r3, r3, #16
 8013a54:	4319      	orrs	r1, r3
 8013a56:	4b29      	ldr	r3, [pc, #164]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a58:	789b      	ldrb	r3, [r3, #2]
 8013a5a:	021b      	lsls	r3, r3, #8
 8013a5c:	430b      	orrs	r3, r1
 8013a5e:	4927      	ldr	r1, [pc, #156]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a60:	78c9      	ldrb	r1, [r1, #3]
 8013a62:	430b      	orrs	r3, r1
 8013a64:	021b      	lsls	r3, r3, #8
 8013a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a6a:	431a      	orrs	r2, r3
 8013a6c:	4b23      	ldr	r3, [pc, #140]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	0619      	lsls	r1, r3, #24
 8013a72:	4b22      	ldr	r3, [pc, #136]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a74:	785b      	ldrb	r3, [r3, #1]
 8013a76:	041b      	lsls	r3, r3, #16
 8013a78:	4319      	orrs	r1, r3
 8013a7a:	4b20      	ldr	r3, [pc, #128]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a7c:	789b      	ldrb	r3, [r3, #2]
 8013a7e:	021b      	lsls	r3, r3, #8
 8013a80:	430b      	orrs	r3, r1
 8013a82:	491e      	ldr	r1, [pc, #120]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a84:	78c9      	ldrb	r1, [r1, #3]
 8013a86:	430b      	orrs	r3, r1
 8013a88:	0a1b      	lsrs	r3, r3, #8
 8013a8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013a8e:	431a      	orrs	r2, r3
 8013a90:	4b1a      	ldr	r3, [pc, #104]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	0619      	lsls	r1, r3, #24
 8013a96:	4b19      	ldr	r3, [pc, #100]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013a98:	785b      	ldrb	r3, [r3, #1]
 8013a9a:	041b      	lsls	r3, r3, #16
 8013a9c:	4319      	orrs	r1, r3
 8013a9e:	4b17      	ldr	r3, [pc, #92]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013aa0:	789b      	ldrb	r3, [r3, #2]
 8013aa2:	021b      	lsls	r3, r3, #8
 8013aa4:	430b      	orrs	r3, r1
 8013aa6:	4915      	ldr	r1, [pc, #84]	; (8013afc <MX_LWIP_Init+0x23c>)
 8013aa8:	78c9      	ldrb	r1, [r1, #3]
 8013aaa:	430b      	orrs	r3, r1
 8013aac:	0e1b      	lsrs	r3, r3, #24
 8013aae:	4313      	orrs	r3, r2
 8013ab0:	4a15      	ldr	r2, [pc, #84]	; (8013b08 <MX_LWIP_Init+0x248>)
 8013ab2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013ab4:	4b15      	ldr	r3, [pc, #84]	; (8013b0c <MX_LWIP_Init+0x24c>)
 8013ab6:	9302      	str	r3, [sp, #8]
 8013ab8:	4b15      	ldr	r3, [pc, #84]	; (8013b10 <MX_LWIP_Init+0x250>)
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	2300      	movs	r3, #0
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	4b11      	ldr	r3, [pc, #68]	; (8013b08 <MX_LWIP_Init+0x248>)
 8013ac2:	4a10      	ldr	r2, [pc, #64]	; (8013b04 <MX_LWIP_Init+0x244>)
 8013ac4:	490e      	ldr	r1, [pc, #56]	; (8013b00 <MX_LWIP_Init+0x240>)
 8013ac6:	4813      	ldr	r0, [pc, #76]	; (8013b14 <MX_LWIP_Init+0x254>)
 8013ac8:	f7f8 f9e0 	bl	800be8c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013acc:	4811      	ldr	r0, [pc, #68]	; (8013b14 <MX_LWIP_Init+0x254>)
 8013ace:	f7f8 fabd 	bl	800c04c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013ad2:	4b10      	ldr	r3, [pc, #64]	; (8013b14 <MX_LWIP_Init+0x254>)
 8013ad4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013ad8:	f003 0304 	and.w	r3, r3, #4
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d003      	beq.n	8013ae8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013ae0:	480c      	ldr	r0, [pc, #48]	; (8013b14 <MX_LWIP_Init+0x254>)
 8013ae2:	f7f8 fac3 	bl	800c06c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013ae6:	e002      	b.n	8013aee <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8013ae8:	480a      	ldr	r0, [pc, #40]	; (8013b14 <MX_LWIP_Init+0x254>)
 8013aea:	f7f8 fb03 	bl	800c0f4 <netif_set_down>
}
 8013aee:	bf00      	nop
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}
 8013af4:	2000a87c 	.word	0x2000a87c
 8013af8:	2000a878 	.word	0x2000a878
 8013afc:	2000a840 	.word	0x2000a840
 8013b00:	2000a874 	.word	0x2000a874
 8013b04:	2000a880 	.word	0x2000a880
 8013b08:	2000a884 	.word	0x2000a884
 8013b0c:	08008ef1 	.word	0x08008ef1
 8013b10:	08013855 	.word	0x08013855
 8013b14:	2000a844 	.word	0x2000a844

08013b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013b18:	b5b0      	push	{r4, r5, r7, lr}
 8013b1a:	b09a      	sub	sp, #104	; 0x68
 8013b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013b1e:	f7ec fd3f 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013b22:	f000 f893 	bl	8013c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013b26:	f000 f953 	bl	8013dd0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8013b2a:	f000 f8f9 	bl	8013d20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8013b2e:	f000 f921 	bl	8013d74 <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of SocketReceiveStack */
  osMessageQDef(SocketReceiveStack, 16, uint16_t);
 8013b32:	4a3a      	ldr	r2, [pc, #232]	; (8013c1c <main+0x104>)
 8013b34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b3c:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketReceiveStackHandle = osMessageCreate(osMessageQ(SocketReceiveStack), NULL);
 8013b40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b44:	2100      	movs	r1, #0
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ef fec9 	bl	80038de <osMessageCreate>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	4b34      	ldr	r3, [pc, #208]	; (8013c20 <main+0x108>)
 8013b50:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketSendStack */
  osMessageQDef(SocketSendStack, 16, uint16_t);
 8013b52:	4a32      	ldr	r2, [pc, #200]	; (8013c1c <main+0x104>)
 8013b54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b5c:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketSendStackHandle = osMessageCreate(osMessageQ(SocketSendStack), NULL);
 8013b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b64:	2100      	movs	r1, #0
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7ef feb9 	bl	80038de <osMessageCreate>
 8013b6c:	4602      	mov	r2, r0
 8013b6e:	4b2d      	ldr	r3, [pc, #180]	; (8013c24 <main+0x10c>)
 8013b70:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketHandlerStack */
  osMessageQDef(SocketHandlerStack, 16, uint16_t);
 8013b72:	4a2a      	ldr	r2, [pc, #168]	; (8013c1c <main+0x104>)
 8013b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b7c:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketHandlerStackHandle = osMessageCreate(osMessageQ(SocketHandlerStack), NULL);
 8013b80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013b84:	2100      	movs	r1, #0
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7ef fea9 	bl	80038de <osMessageCreate>
 8013b8c:	4602      	mov	r2, r0
 8013b8e:	4b26      	ldr	r3, [pc, #152]	; (8013c28 <main+0x110>)
 8013b90:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8013b92:	4b26      	ldr	r3, [pc, #152]	; (8013c2c <main+0x114>)
 8013b94:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8013b98:	461d      	mov	r5, r3
 8013b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b9e:	682b      	ldr	r3, [r5, #0]
 8013ba0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8013ba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7ef fd18 	bl	80035de <osThreadCreate>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	4b1f      	ldr	r3, [pc, #124]	; (8013c30 <main+0x118>)
 8013bb2:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketSend */
  osThreadDef(SocketSend, SocketSendFunct, osPriorityNormal, 0, 128);
 8013bb4:	4b1f      	ldr	r3, [pc, #124]	; (8013c34 <main+0x11c>)
 8013bb6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8013bba:	461d      	mov	r5, r3
 8013bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bc0:	682b      	ldr	r3, [r5, #0]
 8013bc2:	6023      	str	r3, [r4, #0]
  SocketSendHandle = osThreadCreate(osThread(SocketSend), NULL);
 8013bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bc8:	2100      	movs	r1, #0
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7ef fd07 	bl	80035de <osThreadCreate>
 8013bd0:	4602      	mov	r2, r0
 8013bd2:	4b19      	ldr	r3, [pc, #100]	; (8013c38 <main+0x120>)
 8013bd4:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketReceived */
  osThreadDef(SocketReceived, SocketReceivedFunct, osPriorityNormal, 0, 128);
 8013bd6:	4b19      	ldr	r3, [pc, #100]	; (8013c3c <main+0x124>)
 8013bd8:	f107 0414 	add.w	r4, r7, #20
 8013bdc:	461d      	mov	r5, r3
 8013bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013be2:	682b      	ldr	r3, [r5, #0]
 8013be4:	6023      	str	r3, [r4, #0]
  SocketReceivedHandle = osThreadCreate(osThread(SocketReceived), NULL);
 8013be6:	f107 0314 	add.w	r3, r7, #20
 8013bea:	2100      	movs	r1, #0
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7ef fcf6 	bl	80035de <osThreadCreate>
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	4b12      	ldr	r3, [pc, #72]	; (8013c40 <main+0x128>)
 8013bf6:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketHandler */
  osThreadDef(SocketHandler, SocketHandlerFunct, osPriorityLow, 0, 128);
 8013bf8:	4b12      	ldr	r3, [pc, #72]	; (8013c44 <main+0x12c>)
 8013bfa:	463c      	mov	r4, r7
 8013bfc:	461d      	mov	r5, r3
 8013bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c02:	682b      	ldr	r3, [r5, #0]
 8013c04:	6023      	str	r3, [r4, #0]
  SocketHandlerHandle = osThreadCreate(osThread(SocketHandler), NULL);
 8013c06:	463b      	mov	r3, r7
 8013c08:	2100      	movs	r1, #0
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7ef fce7 	bl	80035de <osThreadCreate>
 8013c10:	4602      	mov	r2, r0
 8013c12:	4b0d      	ldr	r3, [pc, #52]	; (8013c48 <main+0x130>)
 8013c14:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8013c16:	f7ef fccb 	bl	80035b0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013c1a:	e7fe      	b.n	8013c1a <main+0x102>
 8013c1c:	08017de8 	.word	0x08017de8
 8013c20:	2000ace0 	.word	0x2000ace0
 8013c24:	2000acec 	.word	0x2000acec
 8013c28:	2000ace4 	.word	0x2000ace4
 8013c2c:	08017dfc 	.word	0x08017dfc
 8013c30:	2000a888 	.word	0x2000a888
 8013c34:	08017e1c 	.word	0x08017e1c
 8013c38:	2000ace8 	.word	0x2000ace8
 8013c3c:	08017e40 	.word	0x08017e40
 8013c40:	2000a890 	.word	0x2000a890
 8013c44:	08017e64 	.word	0x08017e64
 8013c48:	2000a88c 	.word	0x2000a88c

08013c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b094      	sub	sp, #80	; 0x50
 8013c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013c52:	f107 0320 	add.w	r3, r7, #32
 8013c56:	2230      	movs	r2, #48	; 0x30
 8013c58:	2100      	movs	r1, #0
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f000 fcc0 	bl	80145e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013c60:	f107 030c 	add.w	r3, r7, #12
 8013c64:	2200      	movs	r2, #0
 8013c66:	601a      	str	r2, [r3, #0]
 8013c68:	605a      	str	r2, [r3, #4]
 8013c6a:	609a      	str	r2, [r3, #8]
 8013c6c:	60da      	str	r2, [r3, #12]
 8013c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013c70:	2300      	movs	r3, #0
 8013c72:	60bb      	str	r3, [r7, #8]
 8013c74:	4a28      	ldr	r2, [pc, #160]	; (8013d18 <SystemClock_Config+0xcc>)
 8013c76:	4b28      	ldr	r3, [pc, #160]	; (8013d18 <SystemClock_Config+0xcc>)
 8013c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8013c80:	4b25      	ldr	r3, [pc, #148]	; (8013d18 <SystemClock_Config+0xcc>)
 8013c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c88:	60bb      	str	r3, [r7, #8]
 8013c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	607b      	str	r3, [r7, #4]
 8013c90:	4a22      	ldr	r2, [pc, #136]	; (8013d1c <SystemClock_Config+0xd0>)
 8013c92:	4b22      	ldr	r3, [pc, #136]	; (8013d1c <SystemClock_Config+0xd0>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013c9a:	6013      	str	r3, [r2, #0]
 8013c9c:	4b1f      	ldr	r3, [pc, #124]	; (8013d1c <SystemClock_Config+0xd0>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013ca4:	607b      	str	r3, [r7, #4]
 8013ca6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8013cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8013cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013cb2:	2302      	movs	r3, #2
 8013cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8013cbc:	2304      	movs	r3, #4
 8013cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013cc0:	23a8      	movs	r3, #168	; 0xa8
 8013cc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013cc4:	2302      	movs	r3, #2
 8013cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013cc8:	2307      	movs	r3, #7
 8013cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013ccc:	f107 0320 	add.w	r3, r7, #32
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7ee f88d 	bl	8001df0 <HAL_RCC_OscConfig>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d001      	beq.n	8013ce0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013cdc:	f000 f9e8 	bl	80140b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013ce0:	230f      	movs	r3, #15
 8013ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013cec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013cf8:	f107 030c 	add.w	r3, r7, #12
 8013cfc:	2105      	movs	r1, #5
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7ee fab8 	bl	8002274 <HAL_RCC_ClockConfig>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d001      	beq.n	8013d0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013d0a:	f000 f9d1 	bl	80140b0 <Error_Handler>
  }
}
 8013d0e:	bf00      	nop
 8013d10:	3750      	adds	r7, #80	; 0x50
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	40023800 	.word	0x40023800
 8013d1c:	40007000 	.word	0x40007000

08013d20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8013d24:	4b11      	ldr	r3, [pc, #68]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d26:	4a12      	ldr	r2, [pc, #72]	; (8013d70 <MX_USART3_UART_Init+0x50>)
 8013d28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8013d2a:	4b10      	ldr	r3, [pc, #64]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013d30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8013d32:	4b0e      	ldr	r3, [pc, #56]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d34:	2200      	movs	r2, #0
 8013d36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8013d38:	4b0c      	ldr	r3, [pc, #48]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8013d3e:	4b0b      	ldr	r3, [pc, #44]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d40:	2200      	movs	r2, #0
 8013d42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8013d44:	4b09      	ldr	r3, [pc, #36]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d46:	220c      	movs	r2, #12
 8013d48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013d4a:	4b08      	ldr	r3, [pc, #32]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8013d50:	4b06      	ldr	r3, [pc, #24]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d52:	2200      	movs	r2, #0
 8013d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8013d56:	4805      	ldr	r0, [pc, #20]	; (8013d6c <MX_USART3_UART_Init+0x4c>)
 8013d58:	f7ee feea 	bl	8002b30 <HAL_UART_Init>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d001      	beq.n	8013d66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8013d62:	f000 f9a5 	bl	80140b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8013d66:	bf00      	nop
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	2000a894 	.word	0x2000a894
 8013d70:	40004800 	.word	0x40004800

08013d74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013d78:	4b14      	ldr	r3, [pc, #80]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013d7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013d80:	4b12      	ldr	r3, [pc, #72]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d82:	2204      	movs	r2, #4
 8013d84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013d86:	4b11      	ldr	r3, [pc, #68]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d88:	2202      	movs	r2, #2
 8013d8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013d8c:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d8e:	2200      	movs	r2, #0
 8013d90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013d92:	4b0e      	ldr	r3, [pc, #56]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d94:	2202      	movs	r2, #2
 8013d96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8013d98:	4b0c      	ldr	r3, [pc, #48]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013d9e:	4b0b      	ldr	r3, [pc, #44]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013da0:	2200      	movs	r2, #0
 8013da2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013da4:	4b09      	ldr	r3, [pc, #36]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013da6:	2200      	movs	r2, #0
 8013da8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013daa:	4b08      	ldr	r3, [pc, #32]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dac:	2201      	movs	r2, #1
 8013dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013db0:	4b06      	ldr	r3, [pc, #24]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013db2:	2200      	movs	r2, #0
 8013db4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013db6:	4805      	ldr	r0, [pc, #20]	; (8013dcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013db8:	f7ed ff09 	bl	8001bce <HAL_PCD_Init>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d001      	beq.n	8013dc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8013dc2:	f000 f975 	bl	80140b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8013dc6:	bf00      	nop
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	2000a8d4 	.word	0x2000a8d4

08013dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08c      	sub	sp, #48	; 0x30
 8013dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013dd6:	f107 031c 	add.w	r3, r7, #28
 8013dda:	2200      	movs	r2, #0
 8013ddc:	601a      	str	r2, [r3, #0]
 8013dde:	605a      	str	r2, [r3, #4]
 8013de0:	609a      	str	r2, [r3, #8]
 8013de2:	60da      	str	r2, [r3, #12]
 8013de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013de6:	2300      	movs	r3, #0
 8013de8:	61bb      	str	r3, [r7, #24]
 8013dea:	4a56      	ldr	r2, [pc, #344]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013dec:	4b55      	ldr	r3, [pc, #340]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013df0:	f043 0304 	orr.w	r3, r3, #4
 8013df4:	6313      	str	r3, [r2, #48]	; 0x30
 8013df6:	4b53      	ldr	r3, [pc, #332]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dfa:	f003 0304 	and.w	r3, r3, #4
 8013dfe:	61bb      	str	r3, [r7, #24]
 8013e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013e02:	2300      	movs	r3, #0
 8013e04:	617b      	str	r3, [r7, #20]
 8013e06:	4a4f      	ldr	r2, [pc, #316]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e08:	4b4e      	ldr	r3, [pc, #312]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e10:	6313      	str	r3, [r2, #48]	; 0x30
 8013e12:	4b4c      	ldr	r3, [pc, #304]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e1a:	617b      	str	r3, [r7, #20]
 8013e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e1e:	2300      	movs	r3, #0
 8013e20:	613b      	str	r3, [r7, #16]
 8013e22:	4a48      	ldr	r2, [pc, #288]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e24:	4b47      	ldr	r3, [pc, #284]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e28:	f043 0301 	orr.w	r3, r3, #1
 8013e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e2e:	4b45      	ldr	r3, [pc, #276]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e32:	f003 0301 	and.w	r3, r3, #1
 8013e36:	613b      	str	r3, [r7, #16]
 8013e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	60fb      	str	r3, [r7, #12]
 8013e3e:	4a41      	ldr	r2, [pc, #260]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e40:	4b40      	ldr	r3, [pc, #256]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e44:	f043 0302 	orr.w	r3, r3, #2
 8013e48:	6313      	str	r3, [r2, #48]	; 0x30
 8013e4a:	4b3e      	ldr	r3, [pc, #248]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e4e:	f003 0302 	and.w	r3, r3, #2
 8013e52:	60fb      	str	r3, [r7, #12]
 8013e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013e56:	2300      	movs	r3, #0
 8013e58:	60bb      	str	r3, [r7, #8]
 8013e5a:	4a3a      	ldr	r2, [pc, #232]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e5c:	4b39      	ldr	r3, [pc, #228]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e60:	f043 0308 	orr.w	r3, r3, #8
 8013e64:	6313      	str	r3, [r2, #48]	; 0x30
 8013e66:	4b37      	ldr	r3, [pc, #220]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e6a:	f003 0308 	and.w	r3, r3, #8
 8013e6e:	60bb      	str	r3, [r7, #8]
 8013e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013e72:	2300      	movs	r3, #0
 8013e74:	607b      	str	r3, [r7, #4]
 8013e76:	4a33      	ldr	r2, [pc, #204]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e78:	4b32      	ldr	r3, [pc, #200]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e80:	6313      	str	r3, [r2, #48]	; 0x30
 8013e82:	4b30      	ldr	r3, [pc, #192]	; (8013f44 <MX_GPIO_Init+0x174>)
 8013e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e8a:	607b      	str	r3, [r7, #4]
 8013e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8013e94:	482c      	ldr	r0, [pc, #176]	; (8013f48 <MX_GPIO_Init+0x178>)
 8013e96:	f7ed fe81 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	2140      	movs	r1, #64	; 0x40
 8013e9e:	482b      	ldr	r0, [pc, #172]	; (8013f4c <MX_GPIO_Init+0x17c>)
 8013ea0:	f7ed fe7c 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013eaa:	4829      	ldr	r0, [pc, #164]	; (8013f50 <MX_GPIO_Init+0x180>)
 8013eac:	f7ed fe76 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8013eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013eb6:	4b27      	ldr	r3, [pc, #156]	; (8013f54 <MX_GPIO_Init+0x184>)
 8013eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8013ebe:	f107 031c 	add.w	r3, r7, #28
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	4822      	ldr	r0, [pc, #136]	; (8013f50 <MX_GPIO_Init+0x180>)
 8013ec6:	f7ed fcbf 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8013eca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8013ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013edc:	f107 031c 	add.w	r3, r7, #28
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4819      	ldr	r0, [pc, #100]	; (8013f48 <MX_GPIO_Init+0x178>)
 8013ee4:	f7ed fcb0 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8013ee8:	2340      	movs	r3, #64	; 0x40
 8013eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013eec:	2301      	movs	r3, #1
 8013eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8013ef8:	f107 031c 	add.w	r3, r7, #28
 8013efc:	4619      	mov	r1, r3
 8013efe:	4813      	ldr	r0, [pc, #76]	; (8013f4c <MX_GPIO_Init+0x17c>)
 8013f00:	f7ed fca2 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8013f04:	2380      	movs	r3, #128	; 0x80
 8013f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013f10:	f107 031c 	add.w	r3, r7, #28
 8013f14:	4619      	mov	r1, r3
 8013f16:	480d      	ldr	r0, [pc, #52]	; (8013f4c <MX_GPIO_Init+0x17c>)
 8013f18:	f7ed fc96 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8013f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f22:	2301      	movs	r3, #1
 8013f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f26:	2300      	movs	r3, #0
 8013f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8013f2e:	f107 031c 	add.w	r3, r7, #28
 8013f32:	4619      	mov	r1, r3
 8013f34:	4806      	ldr	r0, [pc, #24]	; (8013f50 <MX_GPIO_Init+0x180>)
 8013f36:	f7ed fc87 	bl	8001848 <HAL_GPIO_Init>

}
 8013f3a:	bf00      	nop
 8013f3c:	3730      	adds	r7, #48	; 0x30
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}
 8013f42:	bf00      	nop
 8013f44:	40023800 	.word	0x40023800
 8013f48:	40020400 	.word	0x40020400
 8013f4c:	40021800 	.word	0x40021800
 8013f50:	40020800 	.word	0x40020800
 8013f54:	10110000 	.word	0x10110000

08013f58 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8013f60:	f7ff fcae 	bl	80138c0 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8013f64:	2001      	movs	r0, #1
 8013f66:	f7ef fb61 	bl	800362c <osDelay>
 8013f6a:	e7fb      	b.n	8013f64 <StartDefaultTask+0xc>

08013f6c <SocketSendFunct>:
* @retval None
*/
int sock;
/* USER CODE END Header_SocketSendFunct */
void SocketSendFunct(void const * argument)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SocketSendFunct */
	int cpt = 0;
 8013f74:	2300      	movs	r3, #0
 8013f76:	60fb      	str	r3, [r7, #12]


	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(2000);
 8013f78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8013f7c:	f7ef fb56 	bl	800362c <osDelay>
	   	/* write something */
	    if(sock >=0)
 8013f80:	4b0e      	ldr	r3, [pc, #56]	; (8013fbc <SocketSendFunct+0x50>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	dbf7      	blt.n	8013f78 <SocketSendFunct+0xc>
	     {
	    	if (cpt ==0)
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d10b      	bne.n	8013fa6 <SocketSendFunct+0x3a>
	    	{
	   	  	 ret = send(sock,"BONjour\n", 8, 0); cpt++;}
 8013f8e:	4b0b      	ldr	r3, [pc, #44]	; (8013fbc <SocketSendFunct+0x50>)
 8013f90:	6818      	ldr	r0, [r3, #0]
 8013f92:	2300      	movs	r3, #0
 8013f94:	2208      	movs	r2, #8
 8013f96:	490a      	ldr	r1, [pc, #40]	; (8013fc0 <SocketSendFunct+0x54>)
 8013f98:	f7f4 fc74 	bl	8008884 <lwip_send>
 8013f9c:	60b8      	str	r0, [r7, #8]
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	60fb      	str	r3, [r7, #12]
 8013fa4:	e7e8      	b.n	8013f78 <SocketSendFunct+0xc>
	    	else{
	   	   	 ret = send(sock,"BANDONr\n", 8, 0);cpt =0;}
 8013fa6:	4b05      	ldr	r3, [pc, #20]	; (8013fbc <SocketSendFunct+0x50>)
 8013fa8:	6818      	ldr	r0, [r3, #0]
 8013faa:	2300      	movs	r3, #0
 8013fac:	2208      	movs	r2, #8
 8013fae:	4905      	ldr	r1, [pc, #20]	; (8013fc4 <SocketSendFunct+0x58>)
 8013fb0:	f7f4 fc68 	bl	8008884 <lwip_send>
 8013fb4:	60b8      	str	r0, [r7, #8]
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	60fb      	str	r3, [r7, #12]
	    osDelay(2000);
 8013fba:	e7dd      	b.n	8013f78 <SocketSendFunct+0xc>
 8013fbc:	2000acdc 	.word	0x2000acdc
 8013fc0:	08017e78 	.word	0x08017e78
 8013fc4:	08017e84 	.word	0x08017e84

08013fc8 <SocketReceivedFunct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SocketReceivedFunct */
void SocketReceivedFunct(void const * argument)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b09c      	sub	sp, #112	; 0x70
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SocketReceivedFunct */
	 int ret;
	 char RECEIVE[100];

  if(sock >=0)
 8013fd0:	4b0f      	ldr	r3, [pc, #60]	; (8014010 <SocketReceivedFunct+0x48>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	db17      	blt.n	8014008 <SocketReceivedFunct+0x40>
  {
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8013fd8:	2001      	movs	r0, #1
 8013fda:	f7ef fb27 	bl	800362c <osDelay>
	    ret =  recv(sock,RECEIVE,100,0);
 8013fde:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <SocketReceivedFunct+0x48>)
 8013fe0:	6818      	ldr	r0, [r3, #0]
 8013fe2:	f107 0108 	add.w	r1, r7, #8
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	2264      	movs	r2, #100	; 0x64
 8013fea:	f7f4 fc35 	bl	8008858 <lwip_recv>
 8013fee:	66f8      	str	r0, [r7, #108]	; 0x6c
	    if(ret!=0)
 8013ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d0f0      	beq.n	8013fd8 <SocketReceivedFunct+0x10>
	    {
	      ret = send(sock,"receive\n", 8, 0);
 8013ff6:	4b06      	ldr	r3, [pc, #24]	; (8014010 <SocketReceivedFunct+0x48>)
 8013ff8:	6818      	ldr	r0, [r3, #0]
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	2208      	movs	r2, #8
 8013ffe:	4905      	ldr	r1, [pc, #20]	; (8014014 <SocketReceivedFunct+0x4c>)
 8014000:	f7f4 fc40 	bl	8008884 <lwip_send>
 8014004:	66f8      	str	r0, [r7, #108]	; 0x6c
	    osDelay(1);
 8014006:	e7e7      	b.n	8013fd8 <SocketReceivedFunct+0x10>
	    }
	  }
  }
  /* USER CODE END SocketReceivedFunct */
}
 8014008:	bf00      	nop
 801400a:	3770      	adds	r7, #112	; 0x70
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	2000acdc 	.word	0x2000acdc
 8014014:	08017e90 	.word	0x08017e90

08014018 <SocketHandlerFunct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SocketHandlerFunct */
void SocketHandlerFunct(void const * argument)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b086      	sub	sp, #24
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SocketHandlerFunct */

	struct sockaddr_in address;

	    sock =-1;
 8014020:	4b18      	ldr	r3, [pc, #96]	; (8014084 <SocketHandlerFunct+0x6c>)
 8014022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014026:	601a      	str	r2, [r3, #0]
		osDelay(10);
 8014028:	200a      	movs	r0, #10
 801402a:	f7ef faff 	bl	800362c <osDelay>
		/* create a TCP socket */
		if ((sock = socket(AF_INET, SOCK_STREAM, 0)) >= 0)
 801402e:	2200      	movs	r2, #0
 8014030:	2101      	movs	r1, #1
 8014032:	2002      	movs	r0, #2
 8014034:	f7f4 fd3e 	bl	8008ab4 <lwip_socket>
 8014038:	4602      	mov	r2, r0
 801403a:	4b12      	ldr	r3, [pc, #72]	; (8014084 <SocketHandlerFunct+0x6c>)
 801403c:	601a      	str	r2, [r3, #0]
 801403e:	4b11      	ldr	r3, [pc, #68]	; (8014084 <SocketHandlerFunct+0x6c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	db1a      	blt.n	801407c <SocketHandlerFunct+0x64>
		    {
			address.sin_family = AF_INET;
 8014046:	2302      	movs	r3, #2
 8014048:	727b      	strb	r3, [r7, #9]
			address.sin_port = htons(80);
 801404a:	2050      	movs	r0, #80	; 0x50
 801404c:	f7f5 f834 	bl	80090b8 <lwip_htons>
 8014050:	4603      	mov	r3, r0
 8014052:	817b      	strh	r3, [r7, #10]
			address.sin_addr.s_addr = inet_addr("192.168.0.14");
 8014054:	480c      	ldr	r0, [pc, #48]	; (8014088 <SocketHandlerFunct+0x70>)
 8014056:	f7f6 fbc8 	bl	800a7ea <ipaddr_addr>
 801405a:	4603      	mov	r3, r0
 801405c:	60fb      	str	r3, [r7, #12]

			if (lwip_connect(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 801405e:	4b09      	ldr	r3, [pc, #36]	; (8014084 <SocketHandlerFunct+0x6c>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	f107 0108 	add.w	r1, r7, #8
 8014066:	2210      	movs	r2, #16
 8014068:	4618      	mov	r0, r3
 801406a:	f7f4 f9b1 	bl	80083d0 <lwip_connect>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	da03      	bge.n	801407c <SocketHandlerFunct+0x64>
				{
				  sock =-1;
 8014074:	4b03      	ldr	r3, [pc, #12]	; (8014084 <SocketHandlerFunct+0x6c>)
 8014076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801407a:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801407c:	2001      	movs	r0, #1
 801407e:	f7ef fad5 	bl	800362c <osDelay>
 8014082:	e7fb      	b.n	801407c <SocketHandlerFunct+0x64>
 8014084:	2000acdc 	.word	0x2000acdc
 8014088:	08017e9c 	.word	0x08017e9c

0801408c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a04      	ldr	r2, [pc, #16]	; (80140ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d101      	bne.n	80140a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801409e:	f7ec faa1 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80140a2:	bf00      	nop
 80140a4:	3708      	adds	r7, #8
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	40010000 	.word	0x40010000

080140b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80140b0:	b480      	push	{r7}
 80140b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80140b4:	bf00      	nop
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr
	...

080140c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80140c6:	2300      	movs	r3, #0
 80140c8:	607b      	str	r3, [r7, #4]
 80140ca:	4a12      	ldr	r2, [pc, #72]	; (8014114 <HAL_MspInit+0x54>)
 80140cc:	4b11      	ldr	r3, [pc, #68]	; (8014114 <HAL_MspInit+0x54>)
 80140ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80140d4:	6453      	str	r3, [r2, #68]	; 0x44
 80140d6:	4b0f      	ldr	r3, [pc, #60]	; (8014114 <HAL_MspInit+0x54>)
 80140d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80140de:	607b      	str	r3, [r7, #4]
 80140e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80140e2:	2300      	movs	r3, #0
 80140e4:	603b      	str	r3, [r7, #0]
 80140e6:	4a0b      	ldr	r2, [pc, #44]	; (8014114 <HAL_MspInit+0x54>)
 80140e8:	4b0a      	ldr	r3, [pc, #40]	; (8014114 <HAL_MspInit+0x54>)
 80140ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140f0:	6413      	str	r3, [r2, #64]	; 0x40
 80140f2:	4b08      	ldr	r3, [pc, #32]	; (8014114 <HAL_MspInit+0x54>)
 80140f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80140fa:	603b      	str	r3, [r7, #0]
 80140fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80140fe:	2200      	movs	r2, #0
 8014100:	210f      	movs	r1, #15
 8014102:	f06f 0001 	mvn.w	r0, #1
 8014106:	f7ec fb65 	bl	80007d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801410a:	bf00      	nop
 801410c:	3708      	adds	r7, #8
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	40023800 	.word	0x40023800

08014118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b08a      	sub	sp, #40	; 0x28
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014120:	f107 0314 	add.w	r3, r7, #20
 8014124:	2200      	movs	r2, #0
 8014126:	601a      	str	r2, [r3, #0]
 8014128:	605a      	str	r2, [r3, #4]
 801412a:	609a      	str	r2, [r3, #8]
 801412c:	60da      	str	r2, [r3, #12]
 801412e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	4a19      	ldr	r2, [pc, #100]	; (801419c <HAL_UART_MspInit+0x84>)
 8014136:	4293      	cmp	r3, r2
 8014138:	d12c      	bne.n	8014194 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801413a:	2300      	movs	r3, #0
 801413c:	613b      	str	r3, [r7, #16]
 801413e:	4a18      	ldr	r2, [pc, #96]	; (80141a0 <HAL_UART_MspInit+0x88>)
 8014140:	4b17      	ldr	r3, [pc, #92]	; (80141a0 <HAL_UART_MspInit+0x88>)
 8014142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014148:	6413      	str	r3, [r2, #64]	; 0x40
 801414a:	4b15      	ldr	r3, [pc, #84]	; (80141a0 <HAL_UART_MspInit+0x88>)
 801414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014152:	613b      	str	r3, [r7, #16]
 8014154:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014156:	2300      	movs	r3, #0
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	4a11      	ldr	r2, [pc, #68]	; (80141a0 <HAL_UART_MspInit+0x88>)
 801415c:	4b10      	ldr	r3, [pc, #64]	; (80141a0 <HAL_UART_MspInit+0x88>)
 801415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014160:	f043 0308 	orr.w	r3, r3, #8
 8014164:	6313      	str	r3, [r2, #48]	; 0x30
 8014166:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <HAL_UART_MspInit+0x88>)
 8014168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801416a:	f003 0308 	and.w	r3, r3, #8
 801416e:	60fb      	str	r3, [r7, #12]
 8014170:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8014172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014178:	2302      	movs	r3, #2
 801417a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801417c:	2301      	movs	r3, #1
 801417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014180:	2303      	movs	r3, #3
 8014182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014184:	2307      	movs	r3, #7
 8014186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014188:	f107 0314 	add.w	r3, r7, #20
 801418c:	4619      	mov	r1, r3
 801418e:	4805      	ldr	r0, [pc, #20]	; (80141a4 <HAL_UART_MspInit+0x8c>)
 8014190:	f7ed fb5a 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8014194:	bf00      	nop
 8014196:	3728      	adds	r7, #40	; 0x28
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	40004800 	.word	0x40004800
 80141a0:	40023800 	.word	0x40023800
 80141a4:	40020c00 	.word	0x40020c00

080141a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b08a      	sub	sp, #40	; 0x28
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80141b0:	f107 0314 	add.w	r3, r7, #20
 80141b4:	2200      	movs	r2, #0
 80141b6:	601a      	str	r2, [r3, #0]
 80141b8:	605a      	str	r2, [r3, #4]
 80141ba:	609a      	str	r2, [r3, #8]
 80141bc:	60da      	str	r2, [r3, #12]
 80141be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80141c8:	d13f      	bne.n	801424a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80141ca:	2300      	movs	r3, #0
 80141cc:	613b      	str	r3, [r7, #16]
 80141ce:	4a21      	ldr	r2, [pc, #132]	; (8014254 <HAL_PCD_MspInit+0xac>)
 80141d0:	4b20      	ldr	r3, [pc, #128]	; (8014254 <HAL_PCD_MspInit+0xac>)
 80141d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d4:	f043 0301 	orr.w	r3, r3, #1
 80141d8:	6313      	str	r3, [r2, #48]	; 0x30
 80141da:	4b1e      	ldr	r3, [pc, #120]	; (8014254 <HAL_PCD_MspInit+0xac>)
 80141dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141de:	f003 0301 	and.w	r3, r3, #1
 80141e2:	613b      	str	r3, [r7, #16]
 80141e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80141e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80141ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141ec:	2302      	movs	r3, #2
 80141ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141f0:	2300      	movs	r3, #0
 80141f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141f4:	2303      	movs	r3, #3
 80141f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80141f8:	230a      	movs	r3, #10
 80141fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141fc:	f107 0314 	add.w	r3, r7, #20
 8014200:	4619      	mov	r1, r3
 8014202:	4815      	ldr	r0, [pc, #84]	; (8014258 <HAL_PCD_MspInit+0xb0>)
 8014204:	f7ed fb20 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8014208:	f44f 7300 	mov.w	r3, #512	; 0x200
 801420c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801420e:	2300      	movs	r3, #0
 8014210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014212:	2300      	movs	r3, #0
 8014214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014216:	f107 0314 	add.w	r3, r7, #20
 801421a:	4619      	mov	r1, r3
 801421c:	480e      	ldr	r0, [pc, #56]	; (8014258 <HAL_PCD_MspInit+0xb0>)
 801421e:	f7ed fb13 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014222:	4a0c      	ldr	r2, [pc, #48]	; (8014254 <HAL_PCD_MspInit+0xac>)
 8014224:	4b0b      	ldr	r3, [pc, #44]	; (8014254 <HAL_PCD_MspInit+0xac>)
 8014226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801422c:	6353      	str	r3, [r2, #52]	; 0x34
 801422e:	2300      	movs	r3, #0
 8014230:	60fb      	str	r3, [r7, #12]
 8014232:	4a08      	ldr	r2, [pc, #32]	; (8014254 <HAL_PCD_MspInit+0xac>)
 8014234:	4b07      	ldr	r3, [pc, #28]	; (8014254 <HAL_PCD_MspInit+0xac>)
 8014236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801423c:	6453      	str	r3, [r2, #68]	; 0x44
 801423e:	4b05      	ldr	r3, [pc, #20]	; (8014254 <HAL_PCD_MspInit+0xac>)
 8014240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014246:	60fb      	str	r3, [r7, #12]
 8014248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 801424a:	bf00      	nop
 801424c:	3728      	adds	r7, #40	; 0x28
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}
 8014252:	bf00      	nop
 8014254:	40023800 	.word	0x40023800
 8014258:	40020000 	.word	0x40020000

0801425c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b08c      	sub	sp, #48	; 0x30
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014264:	2300      	movs	r3, #0
 8014266:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014268:	2300      	movs	r3, #0
 801426a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 801426c:	2200      	movs	r2, #0
 801426e:	6879      	ldr	r1, [r7, #4]
 8014270:	2019      	movs	r0, #25
 8014272:	f7ec faaf 	bl	80007d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8014276:	2019      	movs	r0, #25
 8014278:	f7ec fac8 	bl	800080c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 801427c:	2300      	movs	r3, #0
 801427e:	60fb      	str	r3, [r7, #12]
 8014280:	4a1f      	ldr	r2, [pc, #124]	; (8014300 <HAL_InitTick+0xa4>)
 8014282:	4b1f      	ldr	r3, [pc, #124]	; (8014300 <HAL_InitTick+0xa4>)
 8014284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014286:	f043 0301 	orr.w	r3, r3, #1
 801428a:	6453      	str	r3, [r2, #68]	; 0x44
 801428c:	4b1c      	ldr	r3, [pc, #112]	; (8014300 <HAL_InitTick+0xa4>)
 801428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	60fb      	str	r3, [r7, #12]
 8014296:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014298:	f107 0210 	add.w	r2, r7, #16
 801429c:	f107 0314 	add.w	r3, r7, #20
 80142a0:	4611      	mov	r1, r2
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7ee f9d4 	bl	8002650 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80142a8:	f7ee f9be 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 80142ac:	4603      	mov	r3, r0
 80142ae:	005b      	lsls	r3, r3, #1
 80142b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	4a13      	ldr	r2, [pc, #76]	; (8014304 <HAL_InitTick+0xa8>)
 80142b6:	fba2 2303 	umull	r2, r3, r2, r3
 80142ba:	0c9b      	lsrs	r3, r3, #18
 80142bc:	3b01      	subs	r3, #1
 80142be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80142c0:	4b11      	ldr	r3, [pc, #68]	; (8014308 <HAL_InitTick+0xac>)
 80142c2:	4a12      	ldr	r2, [pc, #72]	; (801430c <HAL_InitTick+0xb0>)
 80142c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80142c6:	4b10      	ldr	r3, [pc, #64]	; (8014308 <HAL_InitTick+0xac>)
 80142c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80142cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80142ce:	4a0e      	ldr	r2, [pc, #56]	; (8014308 <HAL_InitTick+0xac>)
 80142d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80142d4:	4b0c      	ldr	r3, [pc, #48]	; (8014308 <HAL_InitTick+0xac>)
 80142d6:	2200      	movs	r2, #0
 80142d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80142da:	4b0b      	ldr	r3, [pc, #44]	; (8014308 <HAL_InitTick+0xac>)
 80142dc:	2200      	movs	r2, #0
 80142de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80142e0:	4809      	ldr	r0, [pc, #36]	; (8014308 <HAL_InitTick+0xac>)
 80142e2:	f7ee f9e7 	bl	80026b4 <HAL_TIM_Base_Init>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d104      	bne.n	80142f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80142ec:	4806      	ldr	r0, [pc, #24]	; (8014308 <HAL_InitTick+0xac>)
 80142ee:	f7ee fa16 	bl	800271e <HAL_TIM_Base_Start_IT>
 80142f2:	4603      	mov	r3, r0
 80142f4:	e000      	b.n	80142f8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80142f6:	2301      	movs	r3, #1
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3730      	adds	r7, #48	; 0x30
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	40023800 	.word	0x40023800
 8014304:	431bde83 	.word	0x431bde83
 8014308:	2000acf0 	.word	0x2000acf0
 801430c:	40010000 	.word	0x40010000

08014310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014310:	b480      	push	{r7}
 8014312:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014314:	bf00      	nop
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801431e:	b480      	push	{r7}
 8014320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014322:	e7fe      	b.n	8014322 <HardFault_Handler+0x4>

08014324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014324:	b480      	push	{r7}
 8014326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014328:	e7fe      	b.n	8014328 <MemManage_Handler+0x4>

0801432a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801432a:	b480      	push	{r7}
 801432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801432e:	e7fe      	b.n	801432e <BusFault_Handler+0x4>

08014330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014330:	b480      	push	{r7}
 8014332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014334:	e7fe      	b.n	8014334 <UsageFault_Handler+0x4>

08014336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014336:	b480      	push	{r7}
 8014338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801433a:	bf00      	nop
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014348:	4802      	ldr	r0, [pc, #8]	; (8014354 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801434a:	f7ee fa0c 	bl	8002766 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801434e:	bf00      	nop
 8014350:	bd80      	pop	{r7, pc}
 8014352:	bf00      	nop
 8014354:	2000acf0 	.word	0x2000acf0

08014358 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801435c:	4802      	ldr	r0, [pc, #8]	; (8014368 <ETH_IRQHandler+0x10>)
 801435e:	f7ec fe49 	bl	8000ff4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8014362:	bf00      	nop
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	20009028 	.word	0x20009028

0801436c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801436c:	b590      	push	{r4, r7, lr}
 801436e:	b087      	sub	sp, #28
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014378:	2300      	movs	r3, #0
 801437a:	617b      	str	r3, [r7, #20]
 801437c:	e00a      	b.n	8014394 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801437e:	68bc      	ldr	r4, [r7, #8]
 8014380:	1c63      	adds	r3, r4, #1
 8014382:	60bb      	str	r3, [r7, #8]
 8014384:	f3af 8000 	nop.w
 8014388:	4603      	mov	r3, r0
 801438a:	b2db      	uxtb	r3, r3
 801438c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	3301      	adds	r3, #1
 8014392:	617b      	str	r3, [r7, #20]
 8014394:	697a      	ldr	r2, [r7, #20]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	429a      	cmp	r2, r3
 801439a:	dbf0      	blt.n	801437e <_read+0x12>
	}

return len;
 801439c:	687b      	ldr	r3, [r7, #4]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	371c      	adds	r7, #28
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd90      	pop	{r4, r7, pc}

080143a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b086      	sub	sp, #24
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	60f8      	str	r0, [r7, #12]
 80143ae:	60b9      	str	r1, [r7, #8]
 80143b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80143b2:	2300      	movs	r3, #0
 80143b4:	617b      	str	r3, [r7, #20]
 80143b6:	e009      	b.n	80143cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	1c5a      	adds	r2, r3, #1
 80143bc:	60ba      	str	r2, [r7, #8]
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	4618      	mov	r0, r3
 80143c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	3301      	adds	r3, #1
 80143ca:	617b      	str	r3, [r7, #20]
 80143cc:	697a      	ldr	r2, [r7, #20]
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	dbf1      	blt.n	80143b8 <_write+0x12>
	}
	return len;
 80143d4:	687b      	ldr	r3, [r7, #4]
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3718      	adds	r7, #24
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b085      	sub	sp, #20
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80143e8:	4b11      	ldr	r3, [pc, #68]	; (8014430 <_sbrk+0x50>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d102      	bne.n	80143f6 <_sbrk+0x16>
		heap_end = &end;
 80143f0:	4b0f      	ldr	r3, [pc, #60]	; (8014430 <_sbrk+0x50>)
 80143f2:	4a10      	ldr	r2, [pc, #64]	; (8014434 <_sbrk+0x54>)
 80143f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80143f6:	4b0e      	ldr	r3, [pc, #56]	; (8014430 <_sbrk+0x50>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80143fc:	4b0c      	ldr	r3, [pc, #48]	; (8014430 <_sbrk+0x50>)
 80143fe:	681a      	ldr	r2, [r3, #0]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	4413      	add	r3, r2
 8014404:	466a      	mov	r2, sp
 8014406:	4293      	cmp	r3, r2
 8014408:	d905      	bls.n	8014416 <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801440a:	4b0b      	ldr	r3, [pc, #44]	; (8014438 <_sbrk+0x58>)
 801440c:	220c      	movs	r2, #12
 801440e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014414:	e006      	b.n	8014424 <_sbrk+0x44>
	}

	heap_end += incr;
 8014416:	4b06      	ldr	r3, [pc, #24]	; (8014430 <_sbrk+0x50>)
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	4413      	add	r3, r2
 801441e:	4a04      	ldr	r2, [pc, #16]	; (8014430 <_sbrk+0x50>)
 8014420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014422:	68fb      	ldr	r3, [r7, #12]
}
 8014424:	4618      	mov	r0, r3
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	20003fd0 	.word	0x20003fd0
 8014434:	2000ad30 	.word	0x2000ad30
 8014438:	20007750 	.word	0x20007750

0801443c <_close>:

int _close(int file)
{
 801443c:	b480      	push	{r7}
 801443e:	b083      	sub	sp, #12
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
	return -1;
 8014444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014448:	4618      	mov	r0, r3
 801444a:	370c      	adds	r7, #12
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014464:	605a      	str	r2, [r3, #4]
	return 0;
 8014466:	2300      	movs	r3, #0
}
 8014468:	4618      	mov	r0, r3
 801446a:	370c      	adds	r7, #12
 801446c:	46bd      	mov	sp, r7
 801446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014472:	4770      	bx	lr

08014474 <_isatty>:

int _isatty(int file)
{
 8014474:	b480      	push	{r7}
 8014476:	b083      	sub	sp, #12
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
	return 1;
 801447c:	2301      	movs	r3, #1
}
 801447e:	4618      	mov	r0, r3
 8014480:	370c      	adds	r7, #12
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr

0801448a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801448a:	b480      	push	{r7}
 801448c:	b085      	sub	sp, #20
 801448e:	af00      	add	r7, sp, #0
 8014490:	60f8      	str	r0, [r7, #12]
 8014492:	60b9      	str	r1, [r7, #8]
 8014494:	607a      	str	r2, [r7, #4]
	return 0;
 8014496:	2300      	movs	r3, #0
}
 8014498:	4618      	mov	r0, r3
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr

080144a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80144a4:	b480      	push	{r7}
 80144a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80144a8:	4a16      	ldr	r2, [pc, #88]	; (8014504 <SystemInit+0x60>)
 80144aa:	4b16      	ldr	r3, [pc, #88]	; (8014504 <SystemInit+0x60>)
 80144ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80144b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80144b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80144b8:	4a13      	ldr	r2, [pc, #76]	; (8014508 <SystemInit+0x64>)
 80144ba:	4b13      	ldr	r3, [pc, #76]	; (8014508 <SystemInit+0x64>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	f043 0301 	orr.w	r3, r3, #1
 80144c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80144c4:	4b10      	ldr	r3, [pc, #64]	; (8014508 <SystemInit+0x64>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80144ca:	4a0f      	ldr	r2, [pc, #60]	; (8014508 <SystemInit+0x64>)
 80144cc:	4b0e      	ldr	r3, [pc, #56]	; (8014508 <SystemInit+0x64>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80144d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80144d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80144da:	4b0b      	ldr	r3, [pc, #44]	; (8014508 <SystemInit+0x64>)
 80144dc:	4a0b      	ldr	r2, [pc, #44]	; (801450c <SystemInit+0x68>)
 80144de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80144e0:	4a09      	ldr	r2, [pc, #36]	; (8014508 <SystemInit+0x64>)
 80144e2:	4b09      	ldr	r3, [pc, #36]	; (8014508 <SystemInit+0x64>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80144ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80144ec:	4b06      	ldr	r3, [pc, #24]	; (8014508 <SystemInit+0x64>)
 80144ee:	2200      	movs	r2, #0
 80144f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80144f2:	4b04      	ldr	r3, [pc, #16]	; (8014504 <SystemInit+0x60>)
 80144f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80144f8:	609a      	str	r2, [r3, #8]
#endif
}
 80144fa:	bf00      	nop
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	e000ed00 	.word	0xe000ed00
 8014508:	40023800 	.word	0x40023800
 801450c:	24003010 	.word	0x24003010

08014510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8014510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014548 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014516:	e003      	b.n	8014520 <LoopCopyDataInit>

08014518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014518:	4b0c      	ldr	r3, [pc, #48]	; (801454c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801451a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801451c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801451e:	3104      	adds	r1, #4

08014520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014520:	480b      	ldr	r0, [pc, #44]	; (8014550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014522:	4b0c      	ldr	r3, [pc, #48]	; (8014554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014528:	d3f6      	bcc.n	8014518 <CopyDataInit>
  ldr  r2, =_sbss
 801452a:	4a0b      	ldr	r2, [pc, #44]	; (8014558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801452c:	e002      	b.n	8014534 <LoopFillZerobss>

0801452e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801452e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014530:	f842 3b04 	str.w	r3, [r2], #4

08014534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014534:	4b09      	ldr	r3, [pc, #36]	; (801455c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014538:	d3f9      	bcc.n	801452e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801453a:	f7ff ffb3 	bl	80144a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801453e:	f000 f811 	bl	8014564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014542:	f7ff fae9 	bl	8013b18 <main>
  bx  lr    
 8014546:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8014548:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 801454c:	080180d8 	.word	0x080180d8
  ldr  r0, =_sdata
 8014550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014554:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8014558:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 801455c:	2000ad30 	.word	0x2000ad30

08014560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014560:	e7fe      	b.n	8014560 <ADC_IRQHandler>
	...

08014564 <__libc_init_array>:
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	4e0d      	ldr	r6, [pc, #52]	; (801459c <__libc_init_array+0x38>)
 8014568:	4c0d      	ldr	r4, [pc, #52]	; (80145a0 <__libc_init_array+0x3c>)
 801456a:	1ba4      	subs	r4, r4, r6
 801456c:	10a4      	asrs	r4, r4, #2
 801456e:	2500      	movs	r5, #0
 8014570:	42a5      	cmp	r5, r4
 8014572:	d109      	bne.n	8014588 <__libc_init_array+0x24>
 8014574:	4e0b      	ldr	r6, [pc, #44]	; (80145a4 <__libc_init_array+0x40>)
 8014576:	4c0c      	ldr	r4, [pc, #48]	; (80145a8 <__libc_init_array+0x44>)
 8014578:	f000 ff32 	bl	80153e0 <_init>
 801457c:	1ba4      	subs	r4, r4, r6
 801457e:	10a4      	asrs	r4, r4, #2
 8014580:	2500      	movs	r5, #0
 8014582:	42a5      	cmp	r5, r4
 8014584:	d105      	bne.n	8014592 <__libc_init_array+0x2e>
 8014586:	bd70      	pop	{r4, r5, r6, pc}
 8014588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801458c:	4798      	blx	r3
 801458e:	3501      	adds	r5, #1
 8014590:	e7ee      	b.n	8014570 <__libc_init_array+0xc>
 8014592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014596:	4798      	blx	r3
 8014598:	3501      	adds	r5, #1
 801459a:	e7f2      	b.n	8014582 <__libc_init_array+0x1e>
 801459c:	080180d0 	.word	0x080180d0
 80145a0:	080180d0 	.word	0x080180d0
 80145a4:	080180d0 	.word	0x080180d0
 80145a8:	080180d4 	.word	0x080180d4

080145ac <memcmp>:
 80145ac:	b510      	push	{r4, lr}
 80145ae:	3901      	subs	r1, #1
 80145b0:	4402      	add	r2, r0
 80145b2:	4290      	cmp	r0, r2
 80145b4:	d101      	bne.n	80145ba <memcmp+0xe>
 80145b6:	2000      	movs	r0, #0
 80145b8:	bd10      	pop	{r4, pc}
 80145ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80145be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80145c2:	42a3      	cmp	r3, r4
 80145c4:	d0f5      	beq.n	80145b2 <memcmp+0x6>
 80145c6:	1b18      	subs	r0, r3, r4
 80145c8:	bd10      	pop	{r4, pc}

080145ca <memcpy>:
 80145ca:	b510      	push	{r4, lr}
 80145cc:	1e43      	subs	r3, r0, #1
 80145ce:	440a      	add	r2, r1
 80145d0:	4291      	cmp	r1, r2
 80145d2:	d100      	bne.n	80145d6 <memcpy+0xc>
 80145d4:	bd10      	pop	{r4, pc}
 80145d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145de:	e7f7      	b.n	80145d0 <memcpy+0x6>

080145e0 <memset>:
 80145e0:	4402      	add	r2, r0
 80145e2:	4603      	mov	r3, r0
 80145e4:	4293      	cmp	r3, r2
 80145e6:	d100      	bne.n	80145ea <memset+0xa>
 80145e8:	4770      	bx	lr
 80145ea:	f803 1b01 	strb.w	r1, [r3], #1
 80145ee:	e7f9      	b.n	80145e4 <memset+0x4>

080145f0 <iprintf>:
 80145f0:	b40f      	push	{r0, r1, r2, r3}
 80145f2:	4b0a      	ldr	r3, [pc, #40]	; (801461c <iprintf+0x2c>)
 80145f4:	b513      	push	{r0, r1, r4, lr}
 80145f6:	681c      	ldr	r4, [r3, #0]
 80145f8:	b124      	cbz	r4, 8014604 <iprintf+0x14>
 80145fa:	69a3      	ldr	r3, [r4, #24]
 80145fc:	b913      	cbnz	r3, 8014604 <iprintf+0x14>
 80145fe:	4620      	mov	r0, r4
 8014600:	f000 f84e 	bl	80146a0 <__sinit>
 8014604:	ab05      	add	r3, sp, #20
 8014606:	9a04      	ldr	r2, [sp, #16]
 8014608:	68a1      	ldr	r1, [r4, #8]
 801460a:	9301      	str	r3, [sp, #4]
 801460c:	4620      	mov	r0, r4
 801460e:	f000 f959 	bl	80148c4 <_vfiprintf_r>
 8014612:	b002      	add	sp, #8
 8014614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014618:	b004      	add	sp, #16
 801461a:	4770      	bx	lr
 801461c:	20000018 	.word	0x20000018

08014620 <_cleanup_r>:
 8014620:	4901      	ldr	r1, [pc, #4]	; (8014628 <_cleanup_r+0x8>)
 8014622:	f000 b8a9 	b.w	8014778 <_fwalk_reent>
 8014626:	bf00      	nop
 8014628:	08015199 	.word	0x08015199

0801462c <std.isra.0>:
 801462c:	2300      	movs	r3, #0
 801462e:	b510      	push	{r4, lr}
 8014630:	4604      	mov	r4, r0
 8014632:	6003      	str	r3, [r0, #0]
 8014634:	6043      	str	r3, [r0, #4]
 8014636:	6083      	str	r3, [r0, #8]
 8014638:	8181      	strh	r1, [r0, #12]
 801463a:	6643      	str	r3, [r0, #100]	; 0x64
 801463c:	81c2      	strh	r2, [r0, #14]
 801463e:	6103      	str	r3, [r0, #16]
 8014640:	6143      	str	r3, [r0, #20]
 8014642:	6183      	str	r3, [r0, #24]
 8014644:	4619      	mov	r1, r3
 8014646:	2208      	movs	r2, #8
 8014648:	305c      	adds	r0, #92	; 0x5c
 801464a:	f7ff ffc9 	bl	80145e0 <memset>
 801464e:	4b05      	ldr	r3, [pc, #20]	; (8014664 <std.isra.0+0x38>)
 8014650:	6263      	str	r3, [r4, #36]	; 0x24
 8014652:	4b05      	ldr	r3, [pc, #20]	; (8014668 <std.isra.0+0x3c>)
 8014654:	62a3      	str	r3, [r4, #40]	; 0x28
 8014656:	4b05      	ldr	r3, [pc, #20]	; (801466c <std.isra.0+0x40>)
 8014658:	62e3      	str	r3, [r4, #44]	; 0x2c
 801465a:	4b05      	ldr	r3, [pc, #20]	; (8014670 <std.isra.0+0x44>)
 801465c:	6224      	str	r4, [r4, #32]
 801465e:	6323      	str	r3, [r4, #48]	; 0x30
 8014660:	bd10      	pop	{r4, pc}
 8014662:	bf00      	nop
 8014664:	08014e3d 	.word	0x08014e3d
 8014668:	08014e5f 	.word	0x08014e5f
 801466c:	08014e97 	.word	0x08014e97
 8014670:	08014ebb 	.word	0x08014ebb

08014674 <__sfmoreglue>:
 8014674:	b570      	push	{r4, r5, r6, lr}
 8014676:	1e4a      	subs	r2, r1, #1
 8014678:	2568      	movs	r5, #104	; 0x68
 801467a:	4355      	muls	r5, r2
 801467c:	460e      	mov	r6, r1
 801467e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014682:	f000 f897 	bl	80147b4 <_malloc_r>
 8014686:	4604      	mov	r4, r0
 8014688:	b140      	cbz	r0, 801469c <__sfmoreglue+0x28>
 801468a:	2100      	movs	r1, #0
 801468c:	e880 0042 	stmia.w	r0, {r1, r6}
 8014690:	300c      	adds	r0, #12
 8014692:	60a0      	str	r0, [r4, #8]
 8014694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014698:	f7ff ffa2 	bl	80145e0 <memset>
 801469c:	4620      	mov	r0, r4
 801469e:	bd70      	pop	{r4, r5, r6, pc}

080146a0 <__sinit>:
 80146a0:	6983      	ldr	r3, [r0, #24]
 80146a2:	b510      	push	{r4, lr}
 80146a4:	4604      	mov	r4, r0
 80146a6:	bb33      	cbnz	r3, 80146f6 <__sinit+0x56>
 80146a8:	6483      	str	r3, [r0, #72]	; 0x48
 80146aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80146ac:	6503      	str	r3, [r0, #80]	; 0x50
 80146ae:	4b12      	ldr	r3, [pc, #72]	; (80146f8 <__sinit+0x58>)
 80146b0:	4a12      	ldr	r2, [pc, #72]	; (80146fc <__sinit+0x5c>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	6282      	str	r2, [r0, #40]	; 0x28
 80146b6:	4298      	cmp	r0, r3
 80146b8:	bf04      	itt	eq
 80146ba:	2301      	moveq	r3, #1
 80146bc:	6183      	streq	r3, [r0, #24]
 80146be:	f000 f81f 	bl	8014700 <__sfp>
 80146c2:	6060      	str	r0, [r4, #4]
 80146c4:	4620      	mov	r0, r4
 80146c6:	f000 f81b 	bl	8014700 <__sfp>
 80146ca:	60a0      	str	r0, [r4, #8]
 80146cc:	4620      	mov	r0, r4
 80146ce:	f000 f817 	bl	8014700 <__sfp>
 80146d2:	2200      	movs	r2, #0
 80146d4:	60e0      	str	r0, [r4, #12]
 80146d6:	2104      	movs	r1, #4
 80146d8:	6860      	ldr	r0, [r4, #4]
 80146da:	f7ff ffa7 	bl	801462c <std.isra.0>
 80146de:	2201      	movs	r2, #1
 80146e0:	2109      	movs	r1, #9
 80146e2:	68a0      	ldr	r0, [r4, #8]
 80146e4:	f7ff ffa2 	bl	801462c <std.isra.0>
 80146e8:	2202      	movs	r2, #2
 80146ea:	2112      	movs	r1, #18
 80146ec:	68e0      	ldr	r0, [r4, #12]
 80146ee:	f7ff ff9d 	bl	801462c <std.isra.0>
 80146f2:	2301      	movs	r3, #1
 80146f4:	61a3      	str	r3, [r4, #24]
 80146f6:	bd10      	pop	{r4, pc}
 80146f8:	08018090 	.word	0x08018090
 80146fc:	08014621 	.word	0x08014621

08014700 <__sfp>:
 8014700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014702:	4b1c      	ldr	r3, [pc, #112]	; (8014774 <__sfp+0x74>)
 8014704:	681e      	ldr	r6, [r3, #0]
 8014706:	69b3      	ldr	r3, [r6, #24]
 8014708:	4607      	mov	r7, r0
 801470a:	b913      	cbnz	r3, 8014712 <__sfp+0x12>
 801470c:	4630      	mov	r0, r6
 801470e:	f7ff ffc7 	bl	80146a0 <__sinit>
 8014712:	3648      	adds	r6, #72	; 0x48
 8014714:	68b4      	ldr	r4, [r6, #8]
 8014716:	6873      	ldr	r3, [r6, #4]
 8014718:	3b01      	subs	r3, #1
 801471a:	d503      	bpl.n	8014724 <__sfp+0x24>
 801471c:	6833      	ldr	r3, [r6, #0]
 801471e:	b133      	cbz	r3, 801472e <__sfp+0x2e>
 8014720:	6836      	ldr	r6, [r6, #0]
 8014722:	e7f7      	b.n	8014714 <__sfp+0x14>
 8014724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014728:	b16d      	cbz	r5, 8014746 <__sfp+0x46>
 801472a:	3468      	adds	r4, #104	; 0x68
 801472c:	e7f4      	b.n	8014718 <__sfp+0x18>
 801472e:	2104      	movs	r1, #4
 8014730:	4638      	mov	r0, r7
 8014732:	f7ff ff9f 	bl	8014674 <__sfmoreglue>
 8014736:	6030      	str	r0, [r6, #0]
 8014738:	2800      	cmp	r0, #0
 801473a:	d1f1      	bne.n	8014720 <__sfp+0x20>
 801473c:	230c      	movs	r3, #12
 801473e:	603b      	str	r3, [r7, #0]
 8014740:	4604      	mov	r4, r0
 8014742:	4620      	mov	r0, r4
 8014744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801474a:	81e3      	strh	r3, [r4, #14]
 801474c:	2301      	movs	r3, #1
 801474e:	81a3      	strh	r3, [r4, #12]
 8014750:	6665      	str	r5, [r4, #100]	; 0x64
 8014752:	6025      	str	r5, [r4, #0]
 8014754:	60a5      	str	r5, [r4, #8]
 8014756:	6065      	str	r5, [r4, #4]
 8014758:	6125      	str	r5, [r4, #16]
 801475a:	6165      	str	r5, [r4, #20]
 801475c:	61a5      	str	r5, [r4, #24]
 801475e:	2208      	movs	r2, #8
 8014760:	4629      	mov	r1, r5
 8014762:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014766:	f7ff ff3b 	bl	80145e0 <memset>
 801476a:	6365      	str	r5, [r4, #52]	; 0x34
 801476c:	63a5      	str	r5, [r4, #56]	; 0x38
 801476e:	64a5      	str	r5, [r4, #72]	; 0x48
 8014770:	64e5      	str	r5, [r4, #76]	; 0x4c
 8014772:	e7e6      	b.n	8014742 <__sfp+0x42>
 8014774:	08018090 	.word	0x08018090

08014778 <_fwalk_reent>:
 8014778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801477c:	4680      	mov	r8, r0
 801477e:	4689      	mov	r9, r1
 8014780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014784:	2600      	movs	r6, #0
 8014786:	b914      	cbnz	r4, 801478e <_fwalk_reent+0x16>
 8014788:	4630      	mov	r0, r6
 801478a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801478e:	68a5      	ldr	r5, [r4, #8]
 8014790:	6867      	ldr	r7, [r4, #4]
 8014792:	3f01      	subs	r7, #1
 8014794:	d501      	bpl.n	801479a <_fwalk_reent+0x22>
 8014796:	6824      	ldr	r4, [r4, #0]
 8014798:	e7f5      	b.n	8014786 <_fwalk_reent+0xe>
 801479a:	89ab      	ldrh	r3, [r5, #12]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d907      	bls.n	80147b0 <_fwalk_reent+0x38>
 80147a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147a4:	3301      	adds	r3, #1
 80147a6:	d003      	beq.n	80147b0 <_fwalk_reent+0x38>
 80147a8:	4629      	mov	r1, r5
 80147aa:	4640      	mov	r0, r8
 80147ac:	47c8      	blx	r9
 80147ae:	4306      	orrs	r6, r0
 80147b0:	3568      	adds	r5, #104	; 0x68
 80147b2:	e7ee      	b.n	8014792 <_fwalk_reent+0x1a>

080147b4 <_malloc_r>:
 80147b4:	b570      	push	{r4, r5, r6, lr}
 80147b6:	1ccd      	adds	r5, r1, #3
 80147b8:	f025 0503 	bic.w	r5, r5, #3
 80147bc:	3508      	adds	r5, #8
 80147be:	2d0c      	cmp	r5, #12
 80147c0:	bf38      	it	cc
 80147c2:	250c      	movcc	r5, #12
 80147c4:	2d00      	cmp	r5, #0
 80147c6:	4606      	mov	r6, r0
 80147c8:	db01      	blt.n	80147ce <_malloc_r+0x1a>
 80147ca:	42a9      	cmp	r1, r5
 80147cc:	d903      	bls.n	80147d6 <_malloc_r+0x22>
 80147ce:	230c      	movs	r3, #12
 80147d0:	6033      	str	r3, [r6, #0]
 80147d2:	2000      	movs	r0, #0
 80147d4:	bd70      	pop	{r4, r5, r6, pc}
 80147d6:	f000 fd7f 	bl	80152d8 <__malloc_lock>
 80147da:	4a23      	ldr	r2, [pc, #140]	; (8014868 <_malloc_r+0xb4>)
 80147dc:	6814      	ldr	r4, [r2, #0]
 80147de:	4621      	mov	r1, r4
 80147e0:	b991      	cbnz	r1, 8014808 <_malloc_r+0x54>
 80147e2:	4c22      	ldr	r4, [pc, #136]	; (801486c <_malloc_r+0xb8>)
 80147e4:	6823      	ldr	r3, [r4, #0]
 80147e6:	b91b      	cbnz	r3, 80147f0 <_malloc_r+0x3c>
 80147e8:	4630      	mov	r0, r6
 80147ea:	f000 fb17 	bl	8014e1c <_sbrk_r>
 80147ee:	6020      	str	r0, [r4, #0]
 80147f0:	4629      	mov	r1, r5
 80147f2:	4630      	mov	r0, r6
 80147f4:	f000 fb12 	bl	8014e1c <_sbrk_r>
 80147f8:	1c43      	adds	r3, r0, #1
 80147fa:	d126      	bne.n	801484a <_malloc_r+0x96>
 80147fc:	230c      	movs	r3, #12
 80147fe:	6033      	str	r3, [r6, #0]
 8014800:	4630      	mov	r0, r6
 8014802:	f000 fd6a 	bl	80152da <__malloc_unlock>
 8014806:	e7e4      	b.n	80147d2 <_malloc_r+0x1e>
 8014808:	680b      	ldr	r3, [r1, #0]
 801480a:	1b5b      	subs	r3, r3, r5
 801480c:	d41a      	bmi.n	8014844 <_malloc_r+0x90>
 801480e:	2b0b      	cmp	r3, #11
 8014810:	d90f      	bls.n	8014832 <_malloc_r+0x7e>
 8014812:	600b      	str	r3, [r1, #0]
 8014814:	50cd      	str	r5, [r1, r3]
 8014816:	18cc      	adds	r4, r1, r3
 8014818:	4630      	mov	r0, r6
 801481a:	f000 fd5e 	bl	80152da <__malloc_unlock>
 801481e:	f104 000b 	add.w	r0, r4, #11
 8014822:	1d23      	adds	r3, r4, #4
 8014824:	f020 0007 	bic.w	r0, r0, #7
 8014828:	1ac3      	subs	r3, r0, r3
 801482a:	d01b      	beq.n	8014864 <_malloc_r+0xb0>
 801482c:	425a      	negs	r2, r3
 801482e:	50e2      	str	r2, [r4, r3]
 8014830:	bd70      	pop	{r4, r5, r6, pc}
 8014832:	428c      	cmp	r4, r1
 8014834:	bf0d      	iteet	eq
 8014836:	6863      	ldreq	r3, [r4, #4]
 8014838:	684b      	ldrne	r3, [r1, #4]
 801483a:	6063      	strne	r3, [r4, #4]
 801483c:	6013      	streq	r3, [r2, #0]
 801483e:	bf18      	it	ne
 8014840:	460c      	movne	r4, r1
 8014842:	e7e9      	b.n	8014818 <_malloc_r+0x64>
 8014844:	460c      	mov	r4, r1
 8014846:	6849      	ldr	r1, [r1, #4]
 8014848:	e7ca      	b.n	80147e0 <_malloc_r+0x2c>
 801484a:	1cc4      	adds	r4, r0, #3
 801484c:	f024 0403 	bic.w	r4, r4, #3
 8014850:	42a0      	cmp	r0, r4
 8014852:	d005      	beq.n	8014860 <_malloc_r+0xac>
 8014854:	1a21      	subs	r1, r4, r0
 8014856:	4630      	mov	r0, r6
 8014858:	f000 fae0 	bl	8014e1c <_sbrk_r>
 801485c:	3001      	adds	r0, #1
 801485e:	d0cd      	beq.n	80147fc <_malloc_r+0x48>
 8014860:	6025      	str	r5, [r4, #0]
 8014862:	e7d9      	b.n	8014818 <_malloc_r+0x64>
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	bf00      	nop
 8014868:	20003fd4 	.word	0x20003fd4
 801486c:	20003fd8 	.word	0x20003fd8

08014870 <__sfputc_r>:
 8014870:	6893      	ldr	r3, [r2, #8]
 8014872:	3b01      	subs	r3, #1
 8014874:	2b00      	cmp	r3, #0
 8014876:	b410      	push	{r4}
 8014878:	6093      	str	r3, [r2, #8]
 801487a:	da09      	bge.n	8014890 <__sfputc_r+0x20>
 801487c:	6994      	ldr	r4, [r2, #24]
 801487e:	42a3      	cmp	r3, r4
 8014880:	db02      	blt.n	8014888 <__sfputc_r+0x18>
 8014882:	b2cb      	uxtb	r3, r1
 8014884:	2b0a      	cmp	r3, #10
 8014886:	d103      	bne.n	8014890 <__sfputc_r+0x20>
 8014888:	f85d 4b04 	ldr.w	r4, [sp], #4
 801488c:	f000 bb1a 	b.w	8014ec4 <__swbuf_r>
 8014890:	6813      	ldr	r3, [r2, #0]
 8014892:	1c58      	adds	r0, r3, #1
 8014894:	6010      	str	r0, [r2, #0]
 8014896:	7019      	strb	r1, [r3, #0]
 8014898:	b2c8      	uxtb	r0, r1
 801489a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <__sfputs_r>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	4606      	mov	r6, r0
 80148a4:	460f      	mov	r7, r1
 80148a6:	4614      	mov	r4, r2
 80148a8:	18d5      	adds	r5, r2, r3
 80148aa:	42ac      	cmp	r4, r5
 80148ac:	d101      	bne.n	80148b2 <__sfputs_r+0x12>
 80148ae:	2000      	movs	r0, #0
 80148b0:	e007      	b.n	80148c2 <__sfputs_r+0x22>
 80148b2:	463a      	mov	r2, r7
 80148b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148b8:	4630      	mov	r0, r6
 80148ba:	f7ff ffd9 	bl	8014870 <__sfputc_r>
 80148be:	1c43      	adds	r3, r0, #1
 80148c0:	d1f3      	bne.n	80148aa <__sfputs_r+0xa>
 80148c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148c4 <_vfiprintf_r>:
 80148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c8:	b09d      	sub	sp, #116	; 0x74
 80148ca:	460c      	mov	r4, r1
 80148cc:	4617      	mov	r7, r2
 80148ce:	9303      	str	r3, [sp, #12]
 80148d0:	4606      	mov	r6, r0
 80148d2:	b118      	cbz	r0, 80148dc <_vfiprintf_r+0x18>
 80148d4:	6983      	ldr	r3, [r0, #24]
 80148d6:	b90b      	cbnz	r3, 80148dc <_vfiprintf_r+0x18>
 80148d8:	f7ff fee2 	bl	80146a0 <__sinit>
 80148dc:	4b7c      	ldr	r3, [pc, #496]	; (8014ad0 <_vfiprintf_r+0x20c>)
 80148de:	429c      	cmp	r4, r3
 80148e0:	d157      	bne.n	8014992 <_vfiprintf_r+0xce>
 80148e2:	6874      	ldr	r4, [r6, #4]
 80148e4:	89a3      	ldrh	r3, [r4, #12]
 80148e6:	0718      	lsls	r0, r3, #28
 80148e8:	d55d      	bpl.n	80149a6 <_vfiprintf_r+0xe2>
 80148ea:	6923      	ldr	r3, [r4, #16]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d05a      	beq.n	80149a6 <_vfiprintf_r+0xe2>
 80148f0:	2300      	movs	r3, #0
 80148f2:	9309      	str	r3, [sp, #36]	; 0x24
 80148f4:	2320      	movs	r3, #32
 80148f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148fa:	2330      	movs	r3, #48	; 0x30
 80148fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014900:	f04f 0b01 	mov.w	fp, #1
 8014904:	46b8      	mov	r8, r7
 8014906:	4645      	mov	r5, r8
 8014908:	f815 3b01 	ldrb.w	r3, [r5], #1
 801490c:	2b00      	cmp	r3, #0
 801490e:	d155      	bne.n	80149bc <_vfiprintf_r+0xf8>
 8014910:	ebb8 0a07 	subs.w	sl, r8, r7
 8014914:	d00b      	beq.n	801492e <_vfiprintf_r+0x6a>
 8014916:	4653      	mov	r3, sl
 8014918:	463a      	mov	r2, r7
 801491a:	4621      	mov	r1, r4
 801491c:	4630      	mov	r0, r6
 801491e:	f7ff ffbf 	bl	80148a0 <__sfputs_r>
 8014922:	3001      	adds	r0, #1
 8014924:	f000 80c4 	beq.w	8014ab0 <_vfiprintf_r+0x1ec>
 8014928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801492a:	4453      	add	r3, sl
 801492c:	9309      	str	r3, [sp, #36]	; 0x24
 801492e:	f898 3000 	ldrb.w	r3, [r8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	f000 80bc 	beq.w	8014ab0 <_vfiprintf_r+0x1ec>
 8014938:	2300      	movs	r3, #0
 801493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801493e:	9304      	str	r3, [sp, #16]
 8014940:	9307      	str	r3, [sp, #28]
 8014942:	9205      	str	r2, [sp, #20]
 8014944:	9306      	str	r3, [sp, #24]
 8014946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801494a:	931a      	str	r3, [sp, #104]	; 0x68
 801494c:	2205      	movs	r2, #5
 801494e:	7829      	ldrb	r1, [r5, #0]
 8014950:	4860      	ldr	r0, [pc, #384]	; (8014ad4 <_vfiprintf_r+0x210>)
 8014952:	f7eb fc4d 	bl	80001f0 <memchr>
 8014956:	f105 0801 	add.w	r8, r5, #1
 801495a:	9b04      	ldr	r3, [sp, #16]
 801495c:	2800      	cmp	r0, #0
 801495e:	d131      	bne.n	80149c4 <_vfiprintf_r+0x100>
 8014960:	06d9      	lsls	r1, r3, #27
 8014962:	bf44      	itt	mi
 8014964:	2220      	movmi	r2, #32
 8014966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801496a:	071a      	lsls	r2, r3, #28
 801496c:	bf44      	itt	mi
 801496e:	222b      	movmi	r2, #43	; 0x2b
 8014970:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014974:	782a      	ldrb	r2, [r5, #0]
 8014976:	2a2a      	cmp	r2, #42	; 0x2a
 8014978:	d02c      	beq.n	80149d4 <_vfiprintf_r+0x110>
 801497a:	9a07      	ldr	r2, [sp, #28]
 801497c:	2100      	movs	r1, #0
 801497e:	200a      	movs	r0, #10
 8014980:	46a8      	mov	r8, r5
 8014982:	3501      	adds	r5, #1
 8014984:	f898 3000 	ldrb.w	r3, [r8]
 8014988:	3b30      	subs	r3, #48	; 0x30
 801498a:	2b09      	cmp	r3, #9
 801498c:	d96d      	bls.n	8014a6a <_vfiprintf_r+0x1a6>
 801498e:	b371      	cbz	r1, 80149ee <_vfiprintf_r+0x12a>
 8014990:	e026      	b.n	80149e0 <_vfiprintf_r+0x11c>
 8014992:	4b51      	ldr	r3, [pc, #324]	; (8014ad8 <_vfiprintf_r+0x214>)
 8014994:	429c      	cmp	r4, r3
 8014996:	d101      	bne.n	801499c <_vfiprintf_r+0xd8>
 8014998:	68b4      	ldr	r4, [r6, #8]
 801499a:	e7a3      	b.n	80148e4 <_vfiprintf_r+0x20>
 801499c:	4b4f      	ldr	r3, [pc, #316]	; (8014adc <_vfiprintf_r+0x218>)
 801499e:	429c      	cmp	r4, r3
 80149a0:	bf08      	it	eq
 80149a2:	68f4      	ldreq	r4, [r6, #12]
 80149a4:	e79e      	b.n	80148e4 <_vfiprintf_r+0x20>
 80149a6:	4621      	mov	r1, r4
 80149a8:	4630      	mov	r0, r6
 80149aa:	f000 faef 	bl	8014f8c <__swsetup_r>
 80149ae:	2800      	cmp	r0, #0
 80149b0:	d09e      	beq.n	80148f0 <_vfiprintf_r+0x2c>
 80149b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149b6:	b01d      	add	sp, #116	; 0x74
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	2b25      	cmp	r3, #37	; 0x25
 80149be:	d0a7      	beq.n	8014910 <_vfiprintf_r+0x4c>
 80149c0:	46a8      	mov	r8, r5
 80149c2:	e7a0      	b.n	8014906 <_vfiprintf_r+0x42>
 80149c4:	4a43      	ldr	r2, [pc, #268]	; (8014ad4 <_vfiprintf_r+0x210>)
 80149c6:	1a80      	subs	r0, r0, r2
 80149c8:	fa0b f000 	lsl.w	r0, fp, r0
 80149cc:	4318      	orrs	r0, r3
 80149ce:	9004      	str	r0, [sp, #16]
 80149d0:	4645      	mov	r5, r8
 80149d2:	e7bb      	b.n	801494c <_vfiprintf_r+0x88>
 80149d4:	9a03      	ldr	r2, [sp, #12]
 80149d6:	1d11      	adds	r1, r2, #4
 80149d8:	6812      	ldr	r2, [r2, #0]
 80149da:	9103      	str	r1, [sp, #12]
 80149dc:	2a00      	cmp	r2, #0
 80149de:	db01      	blt.n	80149e4 <_vfiprintf_r+0x120>
 80149e0:	9207      	str	r2, [sp, #28]
 80149e2:	e004      	b.n	80149ee <_vfiprintf_r+0x12a>
 80149e4:	4252      	negs	r2, r2
 80149e6:	f043 0302 	orr.w	r3, r3, #2
 80149ea:	9207      	str	r2, [sp, #28]
 80149ec:	9304      	str	r3, [sp, #16]
 80149ee:	f898 3000 	ldrb.w	r3, [r8]
 80149f2:	2b2e      	cmp	r3, #46	; 0x2e
 80149f4:	d110      	bne.n	8014a18 <_vfiprintf_r+0x154>
 80149f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80149fa:	2b2a      	cmp	r3, #42	; 0x2a
 80149fc:	f108 0101 	add.w	r1, r8, #1
 8014a00:	d137      	bne.n	8014a72 <_vfiprintf_r+0x1ae>
 8014a02:	9b03      	ldr	r3, [sp, #12]
 8014a04:	1d1a      	adds	r2, r3, #4
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	9203      	str	r2, [sp, #12]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	bfb8      	it	lt
 8014a0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014a12:	f108 0802 	add.w	r8, r8, #2
 8014a16:	9305      	str	r3, [sp, #20]
 8014a18:	4d31      	ldr	r5, [pc, #196]	; (8014ae0 <_vfiprintf_r+0x21c>)
 8014a1a:	f898 1000 	ldrb.w	r1, [r8]
 8014a1e:	2203      	movs	r2, #3
 8014a20:	4628      	mov	r0, r5
 8014a22:	f7eb fbe5 	bl	80001f0 <memchr>
 8014a26:	b140      	cbz	r0, 8014a3a <_vfiprintf_r+0x176>
 8014a28:	2340      	movs	r3, #64	; 0x40
 8014a2a:	1b40      	subs	r0, r0, r5
 8014a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	4303      	orrs	r3, r0
 8014a34:	9304      	str	r3, [sp, #16]
 8014a36:	f108 0801 	add.w	r8, r8, #1
 8014a3a:	f898 1000 	ldrb.w	r1, [r8]
 8014a3e:	4829      	ldr	r0, [pc, #164]	; (8014ae4 <_vfiprintf_r+0x220>)
 8014a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a44:	2206      	movs	r2, #6
 8014a46:	f108 0701 	add.w	r7, r8, #1
 8014a4a:	f7eb fbd1 	bl	80001f0 <memchr>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d034      	beq.n	8014abc <_vfiprintf_r+0x1f8>
 8014a52:	4b25      	ldr	r3, [pc, #148]	; (8014ae8 <_vfiprintf_r+0x224>)
 8014a54:	bb03      	cbnz	r3, 8014a98 <_vfiprintf_r+0x1d4>
 8014a56:	9b03      	ldr	r3, [sp, #12]
 8014a58:	3307      	adds	r3, #7
 8014a5a:	f023 0307 	bic.w	r3, r3, #7
 8014a5e:	3308      	adds	r3, #8
 8014a60:	9303      	str	r3, [sp, #12]
 8014a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a64:	444b      	add	r3, r9
 8014a66:	9309      	str	r3, [sp, #36]	; 0x24
 8014a68:	e74c      	b.n	8014904 <_vfiprintf_r+0x40>
 8014a6a:	fb00 3202 	mla	r2, r0, r2, r3
 8014a6e:	2101      	movs	r1, #1
 8014a70:	e786      	b.n	8014980 <_vfiprintf_r+0xbc>
 8014a72:	2300      	movs	r3, #0
 8014a74:	9305      	str	r3, [sp, #20]
 8014a76:	4618      	mov	r0, r3
 8014a78:	250a      	movs	r5, #10
 8014a7a:	4688      	mov	r8, r1
 8014a7c:	3101      	adds	r1, #1
 8014a7e:	f898 2000 	ldrb.w	r2, [r8]
 8014a82:	3a30      	subs	r2, #48	; 0x30
 8014a84:	2a09      	cmp	r2, #9
 8014a86:	d903      	bls.n	8014a90 <_vfiprintf_r+0x1cc>
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d0c5      	beq.n	8014a18 <_vfiprintf_r+0x154>
 8014a8c:	9005      	str	r0, [sp, #20]
 8014a8e:	e7c3      	b.n	8014a18 <_vfiprintf_r+0x154>
 8014a90:	fb05 2000 	mla	r0, r5, r0, r2
 8014a94:	2301      	movs	r3, #1
 8014a96:	e7f0      	b.n	8014a7a <_vfiprintf_r+0x1b6>
 8014a98:	ab03      	add	r3, sp, #12
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	4622      	mov	r2, r4
 8014a9e:	4b13      	ldr	r3, [pc, #76]	; (8014aec <_vfiprintf_r+0x228>)
 8014aa0:	a904      	add	r1, sp, #16
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f3af 8000 	nop.w
 8014aa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014aac:	4681      	mov	r9, r0
 8014aae:	d1d8      	bne.n	8014a62 <_vfiprintf_r+0x19e>
 8014ab0:	89a3      	ldrh	r3, [r4, #12]
 8014ab2:	065b      	lsls	r3, r3, #25
 8014ab4:	f53f af7d 	bmi.w	80149b2 <_vfiprintf_r+0xee>
 8014ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aba:	e77c      	b.n	80149b6 <_vfiprintf_r+0xf2>
 8014abc:	ab03      	add	r3, sp, #12
 8014abe:	9300      	str	r3, [sp, #0]
 8014ac0:	4622      	mov	r2, r4
 8014ac2:	4b0a      	ldr	r3, [pc, #40]	; (8014aec <_vfiprintf_r+0x228>)
 8014ac4:	a904      	add	r1, sp, #16
 8014ac6:	4630      	mov	r0, r6
 8014ac8:	f000 f888 	bl	8014bdc <_printf_i>
 8014acc:	e7ec      	b.n	8014aa8 <_vfiprintf_r+0x1e4>
 8014ace:	bf00      	nop
 8014ad0:	08018050 	.word	0x08018050
 8014ad4:	08018094 	.word	0x08018094
 8014ad8:	08018070 	.word	0x08018070
 8014adc:	08018030 	.word	0x08018030
 8014ae0:	0801809a 	.word	0x0801809a
 8014ae4:	0801809e 	.word	0x0801809e
 8014ae8:	00000000 	.word	0x00000000
 8014aec:	080148a1 	.word	0x080148a1

08014af0 <_printf_common>:
 8014af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014af4:	4691      	mov	r9, r2
 8014af6:	461f      	mov	r7, r3
 8014af8:	688a      	ldr	r2, [r1, #8]
 8014afa:	690b      	ldr	r3, [r1, #16]
 8014afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b00:	4293      	cmp	r3, r2
 8014b02:	bfb8      	it	lt
 8014b04:	4613      	movlt	r3, r2
 8014b06:	f8c9 3000 	str.w	r3, [r9]
 8014b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b0e:	4606      	mov	r6, r0
 8014b10:	460c      	mov	r4, r1
 8014b12:	b112      	cbz	r2, 8014b1a <_printf_common+0x2a>
 8014b14:	3301      	adds	r3, #1
 8014b16:	f8c9 3000 	str.w	r3, [r9]
 8014b1a:	6823      	ldr	r3, [r4, #0]
 8014b1c:	0699      	lsls	r1, r3, #26
 8014b1e:	bf42      	ittt	mi
 8014b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014b24:	3302      	addmi	r3, #2
 8014b26:	f8c9 3000 	strmi.w	r3, [r9]
 8014b2a:	6825      	ldr	r5, [r4, #0]
 8014b2c:	f015 0506 	ands.w	r5, r5, #6
 8014b30:	d107      	bne.n	8014b42 <_printf_common+0x52>
 8014b32:	f104 0a19 	add.w	sl, r4, #25
 8014b36:	68e3      	ldr	r3, [r4, #12]
 8014b38:	f8d9 2000 	ldr.w	r2, [r9]
 8014b3c:	1a9b      	subs	r3, r3, r2
 8014b3e:	429d      	cmp	r5, r3
 8014b40:	db29      	blt.n	8014b96 <_printf_common+0xa6>
 8014b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014b46:	6822      	ldr	r2, [r4, #0]
 8014b48:	3300      	adds	r3, #0
 8014b4a:	bf18      	it	ne
 8014b4c:	2301      	movne	r3, #1
 8014b4e:	0692      	lsls	r2, r2, #26
 8014b50:	d42e      	bmi.n	8014bb0 <_printf_common+0xc0>
 8014b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b56:	4639      	mov	r1, r7
 8014b58:	4630      	mov	r0, r6
 8014b5a:	47c0      	blx	r8
 8014b5c:	3001      	adds	r0, #1
 8014b5e:	d021      	beq.n	8014ba4 <_printf_common+0xb4>
 8014b60:	6823      	ldr	r3, [r4, #0]
 8014b62:	68e5      	ldr	r5, [r4, #12]
 8014b64:	f8d9 2000 	ldr.w	r2, [r9]
 8014b68:	f003 0306 	and.w	r3, r3, #6
 8014b6c:	2b04      	cmp	r3, #4
 8014b6e:	bf08      	it	eq
 8014b70:	1aad      	subeq	r5, r5, r2
 8014b72:	68a3      	ldr	r3, [r4, #8]
 8014b74:	6922      	ldr	r2, [r4, #16]
 8014b76:	bf0c      	ite	eq
 8014b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b7c:	2500      	movne	r5, #0
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	bfc4      	itt	gt
 8014b82:	1a9b      	subgt	r3, r3, r2
 8014b84:	18ed      	addgt	r5, r5, r3
 8014b86:	f04f 0900 	mov.w	r9, #0
 8014b8a:	341a      	adds	r4, #26
 8014b8c:	454d      	cmp	r5, r9
 8014b8e:	d11b      	bne.n	8014bc8 <_printf_common+0xd8>
 8014b90:	2000      	movs	r0, #0
 8014b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b96:	2301      	movs	r3, #1
 8014b98:	4652      	mov	r2, sl
 8014b9a:	4639      	mov	r1, r7
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	47c0      	blx	r8
 8014ba0:	3001      	adds	r0, #1
 8014ba2:	d103      	bne.n	8014bac <_printf_common+0xbc>
 8014ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bac:	3501      	adds	r5, #1
 8014bae:	e7c2      	b.n	8014b36 <_printf_common+0x46>
 8014bb0:	18e1      	adds	r1, r4, r3
 8014bb2:	1c5a      	adds	r2, r3, #1
 8014bb4:	2030      	movs	r0, #48	; 0x30
 8014bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014bba:	4422      	add	r2, r4
 8014bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014bc4:	3302      	adds	r3, #2
 8014bc6:	e7c4      	b.n	8014b52 <_printf_common+0x62>
 8014bc8:	2301      	movs	r3, #1
 8014bca:	4622      	mov	r2, r4
 8014bcc:	4639      	mov	r1, r7
 8014bce:	4630      	mov	r0, r6
 8014bd0:	47c0      	blx	r8
 8014bd2:	3001      	adds	r0, #1
 8014bd4:	d0e6      	beq.n	8014ba4 <_printf_common+0xb4>
 8014bd6:	f109 0901 	add.w	r9, r9, #1
 8014bda:	e7d7      	b.n	8014b8c <_printf_common+0x9c>

08014bdc <_printf_i>:
 8014bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014be0:	4617      	mov	r7, r2
 8014be2:	7e0a      	ldrb	r2, [r1, #24]
 8014be4:	b085      	sub	sp, #20
 8014be6:	2a6e      	cmp	r2, #110	; 0x6e
 8014be8:	4698      	mov	r8, r3
 8014bea:	4606      	mov	r6, r0
 8014bec:	460c      	mov	r4, r1
 8014bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bf0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014bf4:	f000 80bc 	beq.w	8014d70 <_printf_i+0x194>
 8014bf8:	d81a      	bhi.n	8014c30 <_printf_i+0x54>
 8014bfa:	2a63      	cmp	r2, #99	; 0x63
 8014bfc:	d02e      	beq.n	8014c5c <_printf_i+0x80>
 8014bfe:	d80a      	bhi.n	8014c16 <_printf_i+0x3a>
 8014c00:	2a00      	cmp	r2, #0
 8014c02:	f000 80c8 	beq.w	8014d96 <_printf_i+0x1ba>
 8014c06:	2a58      	cmp	r2, #88	; 0x58
 8014c08:	f000 808a 	beq.w	8014d20 <_printf_i+0x144>
 8014c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c10:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014c14:	e02a      	b.n	8014c6c <_printf_i+0x90>
 8014c16:	2a64      	cmp	r2, #100	; 0x64
 8014c18:	d001      	beq.n	8014c1e <_printf_i+0x42>
 8014c1a:	2a69      	cmp	r2, #105	; 0x69
 8014c1c:	d1f6      	bne.n	8014c0c <_printf_i+0x30>
 8014c1e:	6821      	ldr	r1, [r4, #0]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014c26:	d023      	beq.n	8014c70 <_printf_i+0x94>
 8014c28:	1d11      	adds	r1, r2, #4
 8014c2a:	6019      	str	r1, [r3, #0]
 8014c2c:	6813      	ldr	r3, [r2, #0]
 8014c2e:	e027      	b.n	8014c80 <_printf_i+0xa4>
 8014c30:	2a73      	cmp	r2, #115	; 0x73
 8014c32:	f000 80b4 	beq.w	8014d9e <_printf_i+0x1c2>
 8014c36:	d808      	bhi.n	8014c4a <_printf_i+0x6e>
 8014c38:	2a6f      	cmp	r2, #111	; 0x6f
 8014c3a:	d02a      	beq.n	8014c92 <_printf_i+0xb6>
 8014c3c:	2a70      	cmp	r2, #112	; 0x70
 8014c3e:	d1e5      	bne.n	8014c0c <_printf_i+0x30>
 8014c40:	680a      	ldr	r2, [r1, #0]
 8014c42:	f042 0220 	orr.w	r2, r2, #32
 8014c46:	600a      	str	r2, [r1, #0]
 8014c48:	e003      	b.n	8014c52 <_printf_i+0x76>
 8014c4a:	2a75      	cmp	r2, #117	; 0x75
 8014c4c:	d021      	beq.n	8014c92 <_printf_i+0xb6>
 8014c4e:	2a78      	cmp	r2, #120	; 0x78
 8014c50:	d1dc      	bne.n	8014c0c <_printf_i+0x30>
 8014c52:	2278      	movs	r2, #120	; 0x78
 8014c54:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014c58:	496e      	ldr	r1, [pc, #440]	; (8014e14 <_printf_i+0x238>)
 8014c5a:	e064      	b.n	8014d26 <_printf_i+0x14a>
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014c62:	1d11      	adds	r1, r2, #4
 8014c64:	6019      	str	r1, [r3, #0]
 8014c66:	6813      	ldr	r3, [r2, #0]
 8014c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	e0a3      	b.n	8014db8 <_printf_i+0x1dc>
 8014c70:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014c74:	f102 0104 	add.w	r1, r2, #4
 8014c78:	6019      	str	r1, [r3, #0]
 8014c7a:	d0d7      	beq.n	8014c2c <_printf_i+0x50>
 8014c7c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	da03      	bge.n	8014c8c <_printf_i+0xb0>
 8014c84:	222d      	movs	r2, #45	; 0x2d
 8014c86:	425b      	negs	r3, r3
 8014c88:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014c8c:	4962      	ldr	r1, [pc, #392]	; (8014e18 <_printf_i+0x23c>)
 8014c8e:	220a      	movs	r2, #10
 8014c90:	e017      	b.n	8014cc2 <_printf_i+0xe6>
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	6819      	ldr	r1, [r3, #0]
 8014c96:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014c9a:	d003      	beq.n	8014ca4 <_printf_i+0xc8>
 8014c9c:	1d08      	adds	r0, r1, #4
 8014c9e:	6018      	str	r0, [r3, #0]
 8014ca0:	680b      	ldr	r3, [r1, #0]
 8014ca2:	e006      	b.n	8014cb2 <_printf_i+0xd6>
 8014ca4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ca8:	f101 0004 	add.w	r0, r1, #4
 8014cac:	6018      	str	r0, [r3, #0]
 8014cae:	d0f7      	beq.n	8014ca0 <_printf_i+0xc4>
 8014cb0:	880b      	ldrh	r3, [r1, #0]
 8014cb2:	4959      	ldr	r1, [pc, #356]	; (8014e18 <_printf_i+0x23c>)
 8014cb4:	2a6f      	cmp	r2, #111	; 0x6f
 8014cb6:	bf14      	ite	ne
 8014cb8:	220a      	movne	r2, #10
 8014cba:	2208      	moveq	r2, #8
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014cc2:	6865      	ldr	r5, [r4, #4]
 8014cc4:	60a5      	str	r5, [r4, #8]
 8014cc6:	2d00      	cmp	r5, #0
 8014cc8:	f2c0 809c 	blt.w	8014e04 <_printf_i+0x228>
 8014ccc:	6820      	ldr	r0, [r4, #0]
 8014cce:	f020 0004 	bic.w	r0, r0, #4
 8014cd2:	6020      	str	r0, [r4, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d13f      	bne.n	8014d58 <_printf_i+0x17c>
 8014cd8:	2d00      	cmp	r5, #0
 8014cda:	f040 8095 	bne.w	8014e08 <_printf_i+0x22c>
 8014cde:	4675      	mov	r5, lr
 8014ce0:	2a08      	cmp	r2, #8
 8014ce2:	d10b      	bne.n	8014cfc <_printf_i+0x120>
 8014ce4:	6823      	ldr	r3, [r4, #0]
 8014ce6:	07da      	lsls	r2, r3, #31
 8014ce8:	d508      	bpl.n	8014cfc <_printf_i+0x120>
 8014cea:	6923      	ldr	r3, [r4, #16]
 8014cec:	6862      	ldr	r2, [r4, #4]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	bfde      	ittt	le
 8014cf2:	2330      	movle	r3, #48	; 0x30
 8014cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014cf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014cfc:	ebae 0305 	sub.w	r3, lr, r5
 8014d00:	6123      	str	r3, [r4, #16]
 8014d02:	f8cd 8000 	str.w	r8, [sp]
 8014d06:	463b      	mov	r3, r7
 8014d08:	aa03      	add	r2, sp, #12
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f7ff feef 	bl	8014af0 <_printf_common>
 8014d12:	3001      	adds	r0, #1
 8014d14:	d155      	bne.n	8014dc2 <_printf_i+0x1e6>
 8014d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d1a:	b005      	add	sp, #20
 8014d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d20:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014d24:	493c      	ldr	r1, [pc, #240]	; (8014e18 <_printf_i+0x23c>)
 8014d26:	6822      	ldr	r2, [r4, #0]
 8014d28:	6818      	ldr	r0, [r3, #0]
 8014d2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014d2e:	f100 0504 	add.w	r5, r0, #4
 8014d32:	601d      	str	r5, [r3, #0]
 8014d34:	d001      	beq.n	8014d3a <_printf_i+0x15e>
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	e002      	b.n	8014d40 <_printf_i+0x164>
 8014d3a:	0655      	lsls	r5, r2, #25
 8014d3c:	d5fb      	bpl.n	8014d36 <_printf_i+0x15a>
 8014d3e:	8803      	ldrh	r3, [r0, #0]
 8014d40:	07d0      	lsls	r0, r2, #31
 8014d42:	bf44      	itt	mi
 8014d44:	f042 0220 	orrmi.w	r2, r2, #32
 8014d48:	6022      	strmi	r2, [r4, #0]
 8014d4a:	b91b      	cbnz	r3, 8014d54 <_printf_i+0x178>
 8014d4c:	6822      	ldr	r2, [r4, #0]
 8014d4e:	f022 0220 	bic.w	r2, r2, #32
 8014d52:	6022      	str	r2, [r4, #0]
 8014d54:	2210      	movs	r2, #16
 8014d56:	e7b1      	b.n	8014cbc <_printf_i+0xe0>
 8014d58:	4675      	mov	r5, lr
 8014d5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d5e:	fb02 3310 	mls	r3, r2, r0, r3
 8014d62:	5ccb      	ldrb	r3, [r1, r3]
 8014d64:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d1f5      	bne.n	8014d5a <_printf_i+0x17e>
 8014d6e:	e7b7      	b.n	8014ce0 <_printf_i+0x104>
 8014d70:	6808      	ldr	r0, [r1, #0]
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	6949      	ldr	r1, [r1, #20]
 8014d76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014d7a:	d004      	beq.n	8014d86 <_printf_i+0x1aa>
 8014d7c:	1d10      	adds	r0, r2, #4
 8014d7e:	6018      	str	r0, [r3, #0]
 8014d80:	6813      	ldr	r3, [r2, #0]
 8014d82:	6019      	str	r1, [r3, #0]
 8014d84:	e007      	b.n	8014d96 <_printf_i+0x1ba>
 8014d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d8a:	f102 0004 	add.w	r0, r2, #4
 8014d8e:	6018      	str	r0, [r3, #0]
 8014d90:	6813      	ldr	r3, [r2, #0]
 8014d92:	d0f6      	beq.n	8014d82 <_printf_i+0x1a6>
 8014d94:	8019      	strh	r1, [r3, #0]
 8014d96:	2300      	movs	r3, #0
 8014d98:	6123      	str	r3, [r4, #16]
 8014d9a:	4675      	mov	r5, lr
 8014d9c:	e7b1      	b.n	8014d02 <_printf_i+0x126>
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	1d11      	adds	r1, r2, #4
 8014da2:	6019      	str	r1, [r3, #0]
 8014da4:	6815      	ldr	r5, [r2, #0]
 8014da6:	6862      	ldr	r2, [r4, #4]
 8014da8:	2100      	movs	r1, #0
 8014daa:	4628      	mov	r0, r5
 8014dac:	f7eb fa20 	bl	80001f0 <memchr>
 8014db0:	b108      	cbz	r0, 8014db6 <_printf_i+0x1da>
 8014db2:	1b40      	subs	r0, r0, r5
 8014db4:	6060      	str	r0, [r4, #4]
 8014db6:	6863      	ldr	r3, [r4, #4]
 8014db8:	6123      	str	r3, [r4, #16]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dc0:	e79f      	b.n	8014d02 <_printf_i+0x126>
 8014dc2:	6923      	ldr	r3, [r4, #16]
 8014dc4:	462a      	mov	r2, r5
 8014dc6:	4639      	mov	r1, r7
 8014dc8:	4630      	mov	r0, r6
 8014dca:	47c0      	blx	r8
 8014dcc:	3001      	adds	r0, #1
 8014dce:	d0a2      	beq.n	8014d16 <_printf_i+0x13a>
 8014dd0:	6823      	ldr	r3, [r4, #0]
 8014dd2:	079b      	lsls	r3, r3, #30
 8014dd4:	d507      	bpl.n	8014de6 <_printf_i+0x20a>
 8014dd6:	2500      	movs	r5, #0
 8014dd8:	f104 0919 	add.w	r9, r4, #25
 8014ddc:	68e3      	ldr	r3, [r4, #12]
 8014dde:	9a03      	ldr	r2, [sp, #12]
 8014de0:	1a9b      	subs	r3, r3, r2
 8014de2:	429d      	cmp	r5, r3
 8014de4:	db05      	blt.n	8014df2 <_printf_i+0x216>
 8014de6:	68e0      	ldr	r0, [r4, #12]
 8014de8:	9b03      	ldr	r3, [sp, #12]
 8014dea:	4298      	cmp	r0, r3
 8014dec:	bfb8      	it	lt
 8014dee:	4618      	movlt	r0, r3
 8014df0:	e793      	b.n	8014d1a <_printf_i+0x13e>
 8014df2:	2301      	movs	r3, #1
 8014df4:	464a      	mov	r2, r9
 8014df6:	4639      	mov	r1, r7
 8014df8:	4630      	mov	r0, r6
 8014dfa:	47c0      	blx	r8
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	d08a      	beq.n	8014d16 <_printf_i+0x13a>
 8014e00:	3501      	adds	r5, #1
 8014e02:	e7eb      	b.n	8014ddc <_printf_i+0x200>
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d1a7      	bne.n	8014d58 <_printf_i+0x17c>
 8014e08:	780b      	ldrb	r3, [r1, #0]
 8014e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e12:	e765      	b.n	8014ce0 <_printf_i+0x104>
 8014e14:	080180b6 	.word	0x080180b6
 8014e18:	080180a5 	.word	0x080180a5

08014e1c <_sbrk_r>:
 8014e1c:	b538      	push	{r3, r4, r5, lr}
 8014e1e:	4c06      	ldr	r4, [pc, #24]	; (8014e38 <_sbrk_r+0x1c>)
 8014e20:	2300      	movs	r3, #0
 8014e22:	4605      	mov	r5, r0
 8014e24:	4608      	mov	r0, r1
 8014e26:	6023      	str	r3, [r4, #0]
 8014e28:	f7ff fada 	bl	80143e0 <_sbrk>
 8014e2c:	1c43      	adds	r3, r0, #1
 8014e2e:	d102      	bne.n	8014e36 <_sbrk_r+0x1a>
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	b103      	cbz	r3, 8014e36 <_sbrk_r+0x1a>
 8014e34:	602b      	str	r3, [r5, #0]
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
 8014e38:	20007750 	.word	0x20007750

08014e3c <__sread>:
 8014e3c:	b510      	push	{r4, lr}
 8014e3e:	460c      	mov	r4, r1
 8014e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e44:	f000 fa98 	bl	8015378 <_read_r>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	bfab      	itete	ge
 8014e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8014e50:	181b      	addge	r3, r3, r0
 8014e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014e56:	bfac      	ite	ge
 8014e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8014e5a:	81a3      	strhlt	r3, [r4, #12]
 8014e5c:	bd10      	pop	{r4, pc}

08014e5e <__swrite>:
 8014e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e62:	461f      	mov	r7, r3
 8014e64:	898b      	ldrh	r3, [r1, #12]
 8014e66:	05db      	lsls	r3, r3, #23
 8014e68:	4605      	mov	r5, r0
 8014e6a:	460c      	mov	r4, r1
 8014e6c:	4616      	mov	r6, r2
 8014e6e:	d505      	bpl.n	8014e7c <__swrite+0x1e>
 8014e70:	2302      	movs	r3, #2
 8014e72:	2200      	movs	r2, #0
 8014e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e78:	f000 f9b8 	bl	80151ec <_lseek_r>
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e86:	81a3      	strh	r3, [r4, #12]
 8014e88:	4632      	mov	r2, r6
 8014e8a:	463b      	mov	r3, r7
 8014e8c:	4628      	mov	r0, r5
 8014e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e92:	f000 b869 	b.w	8014f68 <_write_r>

08014e96 <__sseek>:
 8014e96:	b510      	push	{r4, lr}
 8014e98:	460c      	mov	r4, r1
 8014e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e9e:	f000 f9a5 	bl	80151ec <_lseek_r>
 8014ea2:	1c43      	adds	r3, r0, #1
 8014ea4:	89a3      	ldrh	r3, [r4, #12]
 8014ea6:	bf15      	itete	ne
 8014ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014eb2:	81a3      	strheq	r3, [r4, #12]
 8014eb4:	bf18      	it	ne
 8014eb6:	81a3      	strhne	r3, [r4, #12]
 8014eb8:	bd10      	pop	{r4, pc}

08014eba <__sclose>:
 8014eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ebe:	f000 b8d3 	b.w	8015068 <_close_r>
	...

08014ec4 <__swbuf_r>:
 8014ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ec6:	460e      	mov	r6, r1
 8014ec8:	4614      	mov	r4, r2
 8014eca:	4605      	mov	r5, r0
 8014ecc:	b118      	cbz	r0, 8014ed6 <__swbuf_r+0x12>
 8014ece:	6983      	ldr	r3, [r0, #24]
 8014ed0:	b90b      	cbnz	r3, 8014ed6 <__swbuf_r+0x12>
 8014ed2:	f7ff fbe5 	bl	80146a0 <__sinit>
 8014ed6:	4b21      	ldr	r3, [pc, #132]	; (8014f5c <__swbuf_r+0x98>)
 8014ed8:	429c      	cmp	r4, r3
 8014eda:	d12a      	bne.n	8014f32 <__swbuf_r+0x6e>
 8014edc:	686c      	ldr	r4, [r5, #4]
 8014ede:	69a3      	ldr	r3, [r4, #24]
 8014ee0:	60a3      	str	r3, [r4, #8]
 8014ee2:	89a3      	ldrh	r3, [r4, #12]
 8014ee4:	071a      	lsls	r2, r3, #28
 8014ee6:	d52e      	bpl.n	8014f46 <__swbuf_r+0x82>
 8014ee8:	6923      	ldr	r3, [r4, #16]
 8014eea:	b363      	cbz	r3, 8014f46 <__swbuf_r+0x82>
 8014eec:	6923      	ldr	r3, [r4, #16]
 8014eee:	6820      	ldr	r0, [r4, #0]
 8014ef0:	1ac0      	subs	r0, r0, r3
 8014ef2:	6963      	ldr	r3, [r4, #20]
 8014ef4:	b2f6      	uxtb	r6, r6
 8014ef6:	4298      	cmp	r0, r3
 8014ef8:	4637      	mov	r7, r6
 8014efa:	db04      	blt.n	8014f06 <__swbuf_r+0x42>
 8014efc:	4621      	mov	r1, r4
 8014efe:	4628      	mov	r0, r5
 8014f00:	f000 f94a 	bl	8015198 <_fflush_r>
 8014f04:	bb28      	cbnz	r0, 8014f52 <__swbuf_r+0x8e>
 8014f06:	68a3      	ldr	r3, [r4, #8]
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	60a3      	str	r3, [r4, #8]
 8014f0c:	6823      	ldr	r3, [r4, #0]
 8014f0e:	1c5a      	adds	r2, r3, #1
 8014f10:	6022      	str	r2, [r4, #0]
 8014f12:	701e      	strb	r6, [r3, #0]
 8014f14:	6963      	ldr	r3, [r4, #20]
 8014f16:	3001      	adds	r0, #1
 8014f18:	4298      	cmp	r0, r3
 8014f1a:	d004      	beq.n	8014f26 <__swbuf_r+0x62>
 8014f1c:	89a3      	ldrh	r3, [r4, #12]
 8014f1e:	07db      	lsls	r3, r3, #31
 8014f20:	d519      	bpl.n	8014f56 <__swbuf_r+0x92>
 8014f22:	2e0a      	cmp	r6, #10
 8014f24:	d117      	bne.n	8014f56 <__swbuf_r+0x92>
 8014f26:	4621      	mov	r1, r4
 8014f28:	4628      	mov	r0, r5
 8014f2a:	f000 f935 	bl	8015198 <_fflush_r>
 8014f2e:	b190      	cbz	r0, 8014f56 <__swbuf_r+0x92>
 8014f30:	e00f      	b.n	8014f52 <__swbuf_r+0x8e>
 8014f32:	4b0b      	ldr	r3, [pc, #44]	; (8014f60 <__swbuf_r+0x9c>)
 8014f34:	429c      	cmp	r4, r3
 8014f36:	d101      	bne.n	8014f3c <__swbuf_r+0x78>
 8014f38:	68ac      	ldr	r4, [r5, #8]
 8014f3a:	e7d0      	b.n	8014ede <__swbuf_r+0x1a>
 8014f3c:	4b09      	ldr	r3, [pc, #36]	; (8014f64 <__swbuf_r+0xa0>)
 8014f3e:	429c      	cmp	r4, r3
 8014f40:	bf08      	it	eq
 8014f42:	68ec      	ldreq	r4, [r5, #12]
 8014f44:	e7cb      	b.n	8014ede <__swbuf_r+0x1a>
 8014f46:	4621      	mov	r1, r4
 8014f48:	4628      	mov	r0, r5
 8014f4a:	f000 f81f 	bl	8014f8c <__swsetup_r>
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d0cc      	beq.n	8014eec <__swbuf_r+0x28>
 8014f52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014f56:	4638      	mov	r0, r7
 8014f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	08018050 	.word	0x08018050
 8014f60:	08018070 	.word	0x08018070
 8014f64:	08018030 	.word	0x08018030

08014f68 <_write_r>:
 8014f68:	b538      	push	{r3, r4, r5, lr}
 8014f6a:	4c07      	ldr	r4, [pc, #28]	; (8014f88 <_write_r+0x20>)
 8014f6c:	4605      	mov	r5, r0
 8014f6e:	4608      	mov	r0, r1
 8014f70:	4611      	mov	r1, r2
 8014f72:	2200      	movs	r2, #0
 8014f74:	6022      	str	r2, [r4, #0]
 8014f76:	461a      	mov	r2, r3
 8014f78:	f7ff fa15 	bl	80143a6 <_write>
 8014f7c:	1c43      	adds	r3, r0, #1
 8014f7e:	d102      	bne.n	8014f86 <_write_r+0x1e>
 8014f80:	6823      	ldr	r3, [r4, #0]
 8014f82:	b103      	cbz	r3, 8014f86 <_write_r+0x1e>
 8014f84:	602b      	str	r3, [r5, #0]
 8014f86:	bd38      	pop	{r3, r4, r5, pc}
 8014f88:	20007750 	.word	0x20007750

08014f8c <__swsetup_r>:
 8014f8c:	4b32      	ldr	r3, [pc, #200]	; (8015058 <__swsetup_r+0xcc>)
 8014f8e:	b570      	push	{r4, r5, r6, lr}
 8014f90:	681d      	ldr	r5, [r3, #0]
 8014f92:	4606      	mov	r6, r0
 8014f94:	460c      	mov	r4, r1
 8014f96:	b125      	cbz	r5, 8014fa2 <__swsetup_r+0x16>
 8014f98:	69ab      	ldr	r3, [r5, #24]
 8014f9a:	b913      	cbnz	r3, 8014fa2 <__swsetup_r+0x16>
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f7ff fb7f 	bl	80146a0 <__sinit>
 8014fa2:	4b2e      	ldr	r3, [pc, #184]	; (801505c <__swsetup_r+0xd0>)
 8014fa4:	429c      	cmp	r4, r3
 8014fa6:	d10f      	bne.n	8014fc8 <__swsetup_r+0x3c>
 8014fa8:	686c      	ldr	r4, [r5, #4]
 8014faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	0715      	lsls	r5, r2, #28
 8014fb2:	d42c      	bmi.n	801500e <__swsetup_r+0x82>
 8014fb4:	06d0      	lsls	r0, r2, #27
 8014fb6:	d411      	bmi.n	8014fdc <__swsetup_r+0x50>
 8014fb8:	2209      	movs	r2, #9
 8014fba:	6032      	str	r2, [r6, #0]
 8014fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fc0:	81a3      	strh	r3, [r4, #12]
 8014fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fc6:	bd70      	pop	{r4, r5, r6, pc}
 8014fc8:	4b25      	ldr	r3, [pc, #148]	; (8015060 <__swsetup_r+0xd4>)
 8014fca:	429c      	cmp	r4, r3
 8014fcc:	d101      	bne.n	8014fd2 <__swsetup_r+0x46>
 8014fce:	68ac      	ldr	r4, [r5, #8]
 8014fd0:	e7eb      	b.n	8014faa <__swsetup_r+0x1e>
 8014fd2:	4b24      	ldr	r3, [pc, #144]	; (8015064 <__swsetup_r+0xd8>)
 8014fd4:	429c      	cmp	r4, r3
 8014fd6:	bf08      	it	eq
 8014fd8:	68ec      	ldreq	r4, [r5, #12]
 8014fda:	e7e6      	b.n	8014faa <__swsetup_r+0x1e>
 8014fdc:	0751      	lsls	r1, r2, #29
 8014fde:	d512      	bpl.n	8015006 <__swsetup_r+0x7a>
 8014fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fe2:	b141      	cbz	r1, 8014ff6 <__swsetup_r+0x6a>
 8014fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fe8:	4299      	cmp	r1, r3
 8014fea:	d002      	beq.n	8014ff2 <__swsetup_r+0x66>
 8014fec:	4630      	mov	r0, r6
 8014fee:	f000 f975 	bl	80152dc <_free_r>
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	6363      	str	r3, [r4, #52]	; 0x34
 8014ff6:	89a3      	ldrh	r3, [r4, #12]
 8014ff8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ffc:	81a3      	strh	r3, [r4, #12]
 8014ffe:	2300      	movs	r3, #0
 8015000:	6063      	str	r3, [r4, #4]
 8015002:	6923      	ldr	r3, [r4, #16]
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	89a3      	ldrh	r3, [r4, #12]
 8015008:	f043 0308 	orr.w	r3, r3, #8
 801500c:	81a3      	strh	r3, [r4, #12]
 801500e:	6923      	ldr	r3, [r4, #16]
 8015010:	b94b      	cbnz	r3, 8015026 <__swsetup_r+0x9a>
 8015012:	89a3      	ldrh	r3, [r4, #12]
 8015014:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801501c:	d003      	beq.n	8015026 <__swsetup_r+0x9a>
 801501e:	4621      	mov	r1, r4
 8015020:	4630      	mov	r0, r6
 8015022:	f000 f919 	bl	8015258 <__smakebuf_r>
 8015026:	89a2      	ldrh	r2, [r4, #12]
 8015028:	f012 0301 	ands.w	r3, r2, #1
 801502c:	d00c      	beq.n	8015048 <__swsetup_r+0xbc>
 801502e:	2300      	movs	r3, #0
 8015030:	60a3      	str	r3, [r4, #8]
 8015032:	6963      	ldr	r3, [r4, #20]
 8015034:	425b      	negs	r3, r3
 8015036:	61a3      	str	r3, [r4, #24]
 8015038:	6923      	ldr	r3, [r4, #16]
 801503a:	b953      	cbnz	r3, 8015052 <__swsetup_r+0xc6>
 801503c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015040:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015044:	d1ba      	bne.n	8014fbc <__swsetup_r+0x30>
 8015046:	bd70      	pop	{r4, r5, r6, pc}
 8015048:	0792      	lsls	r2, r2, #30
 801504a:	bf58      	it	pl
 801504c:	6963      	ldrpl	r3, [r4, #20]
 801504e:	60a3      	str	r3, [r4, #8]
 8015050:	e7f2      	b.n	8015038 <__swsetup_r+0xac>
 8015052:	2000      	movs	r0, #0
 8015054:	e7f7      	b.n	8015046 <__swsetup_r+0xba>
 8015056:	bf00      	nop
 8015058:	20000018 	.word	0x20000018
 801505c:	08018050 	.word	0x08018050
 8015060:	08018070 	.word	0x08018070
 8015064:	08018030 	.word	0x08018030

08015068 <_close_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4c06      	ldr	r4, [pc, #24]	; (8015084 <_close_r+0x1c>)
 801506c:	2300      	movs	r3, #0
 801506e:	4605      	mov	r5, r0
 8015070:	4608      	mov	r0, r1
 8015072:	6023      	str	r3, [r4, #0]
 8015074:	f7ff f9e2 	bl	801443c <_close>
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	d102      	bne.n	8015082 <_close_r+0x1a>
 801507c:	6823      	ldr	r3, [r4, #0]
 801507e:	b103      	cbz	r3, 8015082 <_close_r+0x1a>
 8015080:	602b      	str	r3, [r5, #0]
 8015082:	bd38      	pop	{r3, r4, r5, pc}
 8015084:	20007750 	.word	0x20007750

08015088 <__sflush_r>:
 8015088:	898a      	ldrh	r2, [r1, #12]
 801508a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801508e:	4605      	mov	r5, r0
 8015090:	0710      	lsls	r0, r2, #28
 8015092:	460c      	mov	r4, r1
 8015094:	d45a      	bmi.n	801514c <__sflush_r+0xc4>
 8015096:	684b      	ldr	r3, [r1, #4]
 8015098:	2b00      	cmp	r3, #0
 801509a:	dc05      	bgt.n	80150a8 <__sflush_r+0x20>
 801509c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801509e:	2b00      	cmp	r3, #0
 80150a0:	dc02      	bgt.n	80150a8 <__sflush_r+0x20>
 80150a2:	2000      	movs	r0, #0
 80150a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150aa:	2e00      	cmp	r6, #0
 80150ac:	d0f9      	beq.n	80150a2 <__sflush_r+0x1a>
 80150ae:	2300      	movs	r3, #0
 80150b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80150b4:	682f      	ldr	r7, [r5, #0]
 80150b6:	602b      	str	r3, [r5, #0]
 80150b8:	d033      	beq.n	8015122 <__sflush_r+0x9a>
 80150ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80150bc:	89a3      	ldrh	r3, [r4, #12]
 80150be:	075a      	lsls	r2, r3, #29
 80150c0:	d505      	bpl.n	80150ce <__sflush_r+0x46>
 80150c2:	6863      	ldr	r3, [r4, #4]
 80150c4:	1ac0      	subs	r0, r0, r3
 80150c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80150c8:	b10b      	cbz	r3, 80150ce <__sflush_r+0x46>
 80150ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80150cc:	1ac0      	subs	r0, r0, r3
 80150ce:	2300      	movs	r3, #0
 80150d0:	4602      	mov	r2, r0
 80150d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150d4:	6a21      	ldr	r1, [r4, #32]
 80150d6:	4628      	mov	r0, r5
 80150d8:	47b0      	blx	r6
 80150da:	1c43      	adds	r3, r0, #1
 80150dc:	89a3      	ldrh	r3, [r4, #12]
 80150de:	d106      	bne.n	80150ee <__sflush_r+0x66>
 80150e0:	6829      	ldr	r1, [r5, #0]
 80150e2:	291d      	cmp	r1, #29
 80150e4:	d84b      	bhi.n	801517e <__sflush_r+0xf6>
 80150e6:	4a2b      	ldr	r2, [pc, #172]	; (8015194 <__sflush_r+0x10c>)
 80150e8:	40ca      	lsrs	r2, r1
 80150ea:	07d6      	lsls	r6, r2, #31
 80150ec:	d547      	bpl.n	801517e <__sflush_r+0xf6>
 80150ee:	2200      	movs	r2, #0
 80150f0:	6062      	str	r2, [r4, #4]
 80150f2:	04d9      	lsls	r1, r3, #19
 80150f4:	6922      	ldr	r2, [r4, #16]
 80150f6:	6022      	str	r2, [r4, #0]
 80150f8:	d504      	bpl.n	8015104 <__sflush_r+0x7c>
 80150fa:	1c42      	adds	r2, r0, #1
 80150fc:	d101      	bne.n	8015102 <__sflush_r+0x7a>
 80150fe:	682b      	ldr	r3, [r5, #0]
 8015100:	b903      	cbnz	r3, 8015104 <__sflush_r+0x7c>
 8015102:	6560      	str	r0, [r4, #84]	; 0x54
 8015104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015106:	602f      	str	r7, [r5, #0]
 8015108:	2900      	cmp	r1, #0
 801510a:	d0ca      	beq.n	80150a2 <__sflush_r+0x1a>
 801510c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015110:	4299      	cmp	r1, r3
 8015112:	d002      	beq.n	801511a <__sflush_r+0x92>
 8015114:	4628      	mov	r0, r5
 8015116:	f000 f8e1 	bl	80152dc <_free_r>
 801511a:	2000      	movs	r0, #0
 801511c:	6360      	str	r0, [r4, #52]	; 0x34
 801511e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015122:	6a21      	ldr	r1, [r4, #32]
 8015124:	2301      	movs	r3, #1
 8015126:	4628      	mov	r0, r5
 8015128:	47b0      	blx	r6
 801512a:	1c41      	adds	r1, r0, #1
 801512c:	d1c6      	bne.n	80150bc <__sflush_r+0x34>
 801512e:	682b      	ldr	r3, [r5, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d0c3      	beq.n	80150bc <__sflush_r+0x34>
 8015134:	2b1d      	cmp	r3, #29
 8015136:	d001      	beq.n	801513c <__sflush_r+0xb4>
 8015138:	2b16      	cmp	r3, #22
 801513a:	d101      	bne.n	8015140 <__sflush_r+0xb8>
 801513c:	602f      	str	r7, [r5, #0]
 801513e:	e7b0      	b.n	80150a2 <__sflush_r+0x1a>
 8015140:	89a3      	ldrh	r3, [r4, #12]
 8015142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015146:	81a3      	strh	r3, [r4, #12]
 8015148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801514c:	690f      	ldr	r7, [r1, #16]
 801514e:	2f00      	cmp	r7, #0
 8015150:	d0a7      	beq.n	80150a2 <__sflush_r+0x1a>
 8015152:	0793      	lsls	r3, r2, #30
 8015154:	680e      	ldr	r6, [r1, #0]
 8015156:	bf08      	it	eq
 8015158:	694b      	ldreq	r3, [r1, #20]
 801515a:	600f      	str	r7, [r1, #0]
 801515c:	bf18      	it	ne
 801515e:	2300      	movne	r3, #0
 8015160:	eba6 0807 	sub.w	r8, r6, r7
 8015164:	608b      	str	r3, [r1, #8]
 8015166:	f1b8 0f00 	cmp.w	r8, #0
 801516a:	dd9a      	ble.n	80150a2 <__sflush_r+0x1a>
 801516c:	4643      	mov	r3, r8
 801516e:	463a      	mov	r2, r7
 8015170:	6a21      	ldr	r1, [r4, #32]
 8015172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015174:	4628      	mov	r0, r5
 8015176:	47b0      	blx	r6
 8015178:	2800      	cmp	r0, #0
 801517a:	dc07      	bgt.n	801518c <__sflush_r+0x104>
 801517c:	89a3      	ldrh	r3, [r4, #12]
 801517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015182:	81a3      	strh	r3, [r4, #12]
 8015184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801518c:	4407      	add	r7, r0
 801518e:	eba8 0800 	sub.w	r8, r8, r0
 8015192:	e7e8      	b.n	8015166 <__sflush_r+0xde>
 8015194:	20400001 	.word	0x20400001

08015198 <_fflush_r>:
 8015198:	b538      	push	{r3, r4, r5, lr}
 801519a:	690b      	ldr	r3, [r1, #16]
 801519c:	4605      	mov	r5, r0
 801519e:	460c      	mov	r4, r1
 80151a0:	b1db      	cbz	r3, 80151da <_fflush_r+0x42>
 80151a2:	b118      	cbz	r0, 80151ac <_fflush_r+0x14>
 80151a4:	6983      	ldr	r3, [r0, #24]
 80151a6:	b90b      	cbnz	r3, 80151ac <_fflush_r+0x14>
 80151a8:	f7ff fa7a 	bl	80146a0 <__sinit>
 80151ac:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <_fflush_r+0x48>)
 80151ae:	429c      	cmp	r4, r3
 80151b0:	d109      	bne.n	80151c6 <_fflush_r+0x2e>
 80151b2:	686c      	ldr	r4, [r5, #4]
 80151b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151b8:	b17b      	cbz	r3, 80151da <_fflush_r+0x42>
 80151ba:	4621      	mov	r1, r4
 80151bc:	4628      	mov	r0, r5
 80151be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151c2:	f7ff bf61 	b.w	8015088 <__sflush_r>
 80151c6:	4b07      	ldr	r3, [pc, #28]	; (80151e4 <_fflush_r+0x4c>)
 80151c8:	429c      	cmp	r4, r3
 80151ca:	d101      	bne.n	80151d0 <_fflush_r+0x38>
 80151cc:	68ac      	ldr	r4, [r5, #8]
 80151ce:	e7f1      	b.n	80151b4 <_fflush_r+0x1c>
 80151d0:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <_fflush_r+0x50>)
 80151d2:	429c      	cmp	r4, r3
 80151d4:	bf08      	it	eq
 80151d6:	68ec      	ldreq	r4, [r5, #12]
 80151d8:	e7ec      	b.n	80151b4 <_fflush_r+0x1c>
 80151da:	2000      	movs	r0, #0
 80151dc:	bd38      	pop	{r3, r4, r5, pc}
 80151de:	bf00      	nop
 80151e0:	08018050 	.word	0x08018050
 80151e4:	08018070 	.word	0x08018070
 80151e8:	08018030 	.word	0x08018030

080151ec <_lseek_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	4c07      	ldr	r4, [pc, #28]	; (801520c <_lseek_r+0x20>)
 80151f0:	4605      	mov	r5, r0
 80151f2:	4608      	mov	r0, r1
 80151f4:	4611      	mov	r1, r2
 80151f6:	2200      	movs	r2, #0
 80151f8:	6022      	str	r2, [r4, #0]
 80151fa:	461a      	mov	r2, r3
 80151fc:	f7ff f945 	bl	801448a <_lseek>
 8015200:	1c43      	adds	r3, r0, #1
 8015202:	d102      	bne.n	801520a <_lseek_r+0x1e>
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	b103      	cbz	r3, 801520a <_lseek_r+0x1e>
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	bd38      	pop	{r3, r4, r5, pc}
 801520c:	20007750 	.word	0x20007750

08015210 <__swhatbuf_r>:
 8015210:	b570      	push	{r4, r5, r6, lr}
 8015212:	460e      	mov	r6, r1
 8015214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015218:	2900      	cmp	r1, #0
 801521a:	b090      	sub	sp, #64	; 0x40
 801521c:	4614      	mov	r4, r2
 801521e:	461d      	mov	r5, r3
 8015220:	da07      	bge.n	8015232 <__swhatbuf_r+0x22>
 8015222:	2300      	movs	r3, #0
 8015224:	602b      	str	r3, [r5, #0]
 8015226:	89b3      	ldrh	r3, [r6, #12]
 8015228:	061a      	lsls	r2, r3, #24
 801522a:	d410      	bmi.n	801524e <__swhatbuf_r+0x3e>
 801522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015230:	e00e      	b.n	8015250 <__swhatbuf_r+0x40>
 8015232:	aa01      	add	r2, sp, #4
 8015234:	f000 f8b2 	bl	801539c <_fstat_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	dbf2      	blt.n	8015222 <__swhatbuf_r+0x12>
 801523c:	9a02      	ldr	r2, [sp, #8]
 801523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015246:	425a      	negs	r2, r3
 8015248:	415a      	adcs	r2, r3
 801524a:	602a      	str	r2, [r5, #0]
 801524c:	e7ee      	b.n	801522c <__swhatbuf_r+0x1c>
 801524e:	2340      	movs	r3, #64	; 0x40
 8015250:	2000      	movs	r0, #0
 8015252:	6023      	str	r3, [r4, #0]
 8015254:	b010      	add	sp, #64	; 0x40
 8015256:	bd70      	pop	{r4, r5, r6, pc}

08015258 <__smakebuf_r>:
 8015258:	898b      	ldrh	r3, [r1, #12]
 801525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801525c:	079d      	lsls	r5, r3, #30
 801525e:	4606      	mov	r6, r0
 8015260:	460c      	mov	r4, r1
 8015262:	d507      	bpl.n	8015274 <__smakebuf_r+0x1c>
 8015264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015268:	6023      	str	r3, [r4, #0]
 801526a:	6123      	str	r3, [r4, #16]
 801526c:	2301      	movs	r3, #1
 801526e:	6163      	str	r3, [r4, #20]
 8015270:	b002      	add	sp, #8
 8015272:	bd70      	pop	{r4, r5, r6, pc}
 8015274:	ab01      	add	r3, sp, #4
 8015276:	466a      	mov	r2, sp
 8015278:	f7ff ffca 	bl	8015210 <__swhatbuf_r>
 801527c:	9900      	ldr	r1, [sp, #0]
 801527e:	4605      	mov	r5, r0
 8015280:	4630      	mov	r0, r6
 8015282:	f7ff fa97 	bl	80147b4 <_malloc_r>
 8015286:	b948      	cbnz	r0, 801529c <__smakebuf_r+0x44>
 8015288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801528c:	059a      	lsls	r2, r3, #22
 801528e:	d4ef      	bmi.n	8015270 <__smakebuf_r+0x18>
 8015290:	f023 0303 	bic.w	r3, r3, #3
 8015294:	f043 0302 	orr.w	r3, r3, #2
 8015298:	81a3      	strh	r3, [r4, #12]
 801529a:	e7e3      	b.n	8015264 <__smakebuf_r+0xc>
 801529c:	4b0d      	ldr	r3, [pc, #52]	; (80152d4 <__smakebuf_r+0x7c>)
 801529e:	62b3      	str	r3, [r6, #40]	; 0x28
 80152a0:	89a3      	ldrh	r3, [r4, #12]
 80152a2:	6020      	str	r0, [r4, #0]
 80152a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152a8:	81a3      	strh	r3, [r4, #12]
 80152aa:	9b00      	ldr	r3, [sp, #0]
 80152ac:	6163      	str	r3, [r4, #20]
 80152ae:	9b01      	ldr	r3, [sp, #4]
 80152b0:	6120      	str	r0, [r4, #16]
 80152b2:	b15b      	cbz	r3, 80152cc <__smakebuf_r+0x74>
 80152b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152b8:	4630      	mov	r0, r6
 80152ba:	f000 f881 	bl	80153c0 <_isatty_r>
 80152be:	b128      	cbz	r0, 80152cc <__smakebuf_r+0x74>
 80152c0:	89a3      	ldrh	r3, [r4, #12]
 80152c2:	f023 0303 	bic.w	r3, r3, #3
 80152c6:	f043 0301 	orr.w	r3, r3, #1
 80152ca:	81a3      	strh	r3, [r4, #12]
 80152cc:	89a3      	ldrh	r3, [r4, #12]
 80152ce:	431d      	orrs	r5, r3
 80152d0:	81a5      	strh	r5, [r4, #12]
 80152d2:	e7cd      	b.n	8015270 <__smakebuf_r+0x18>
 80152d4:	08014621 	.word	0x08014621

080152d8 <__malloc_lock>:
 80152d8:	4770      	bx	lr

080152da <__malloc_unlock>:
 80152da:	4770      	bx	lr

080152dc <_free_r>:
 80152dc:	b538      	push	{r3, r4, r5, lr}
 80152de:	4605      	mov	r5, r0
 80152e0:	2900      	cmp	r1, #0
 80152e2:	d045      	beq.n	8015370 <_free_r+0x94>
 80152e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152e8:	1f0c      	subs	r4, r1, #4
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	bfb8      	it	lt
 80152ee:	18e4      	addlt	r4, r4, r3
 80152f0:	f7ff fff2 	bl	80152d8 <__malloc_lock>
 80152f4:	4a1f      	ldr	r2, [pc, #124]	; (8015374 <_free_r+0x98>)
 80152f6:	6813      	ldr	r3, [r2, #0]
 80152f8:	4610      	mov	r0, r2
 80152fa:	b933      	cbnz	r3, 801530a <_free_r+0x2e>
 80152fc:	6063      	str	r3, [r4, #4]
 80152fe:	6014      	str	r4, [r2, #0]
 8015300:	4628      	mov	r0, r5
 8015302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015306:	f7ff bfe8 	b.w	80152da <__malloc_unlock>
 801530a:	42a3      	cmp	r3, r4
 801530c:	d90c      	bls.n	8015328 <_free_r+0x4c>
 801530e:	6821      	ldr	r1, [r4, #0]
 8015310:	1862      	adds	r2, r4, r1
 8015312:	4293      	cmp	r3, r2
 8015314:	bf04      	itt	eq
 8015316:	681a      	ldreq	r2, [r3, #0]
 8015318:	685b      	ldreq	r3, [r3, #4]
 801531a:	6063      	str	r3, [r4, #4]
 801531c:	bf04      	itt	eq
 801531e:	1852      	addeq	r2, r2, r1
 8015320:	6022      	streq	r2, [r4, #0]
 8015322:	6004      	str	r4, [r0, #0]
 8015324:	e7ec      	b.n	8015300 <_free_r+0x24>
 8015326:	4613      	mov	r3, r2
 8015328:	685a      	ldr	r2, [r3, #4]
 801532a:	b10a      	cbz	r2, 8015330 <_free_r+0x54>
 801532c:	42a2      	cmp	r2, r4
 801532e:	d9fa      	bls.n	8015326 <_free_r+0x4a>
 8015330:	6819      	ldr	r1, [r3, #0]
 8015332:	1858      	adds	r0, r3, r1
 8015334:	42a0      	cmp	r0, r4
 8015336:	d10b      	bne.n	8015350 <_free_r+0x74>
 8015338:	6820      	ldr	r0, [r4, #0]
 801533a:	4401      	add	r1, r0
 801533c:	1858      	adds	r0, r3, r1
 801533e:	4282      	cmp	r2, r0
 8015340:	6019      	str	r1, [r3, #0]
 8015342:	d1dd      	bne.n	8015300 <_free_r+0x24>
 8015344:	6810      	ldr	r0, [r2, #0]
 8015346:	6852      	ldr	r2, [r2, #4]
 8015348:	605a      	str	r2, [r3, #4]
 801534a:	4401      	add	r1, r0
 801534c:	6019      	str	r1, [r3, #0]
 801534e:	e7d7      	b.n	8015300 <_free_r+0x24>
 8015350:	d902      	bls.n	8015358 <_free_r+0x7c>
 8015352:	230c      	movs	r3, #12
 8015354:	602b      	str	r3, [r5, #0]
 8015356:	e7d3      	b.n	8015300 <_free_r+0x24>
 8015358:	6820      	ldr	r0, [r4, #0]
 801535a:	1821      	adds	r1, r4, r0
 801535c:	428a      	cmp	r2, r1
 801535e:	bf04      	itt	eq
 8015360:	6811      	ldreq	r1, [r2, #0]
 8015362:	6852      	ldreq	r2, [r2, #4]
 8015364:	6062      	str	r2, [r4, #4]
 8015366:	bf04      	itt	eq
 8015368:	1809      	addeq	r1, r1, r0
 801536a:	6021      	streq	r1, [r4, #0]
 801536c:	605c      	str	r4, [r3, #4]
 801536e:	e7c7      	b.n	8015300 <_free_r+0x24>
 8015370:	bd38      	pop	{r3, r4, r5, pc}
 8015372:	bf00      	nop
 8015374:	20003fd4 	.word	0x20003fd4

08015378 <_read_r>:
 8015378:	b538      	push	{r3, r4, r5, lr}
 801537a:	4c07      	ldr	r4, [pc, #28]	; (8015398 <_read_r+0x20>)
 801537c:	4605      	mov	r5, r0
 801537e:	4608      	mov	r0, r1
 8015380:	4611      	mov	r1, r2
 8015382:	2200      	movs	r2, #0
 8015384:	6022      	str	r2, [r4, #0]
 8015386:	461a      	mov	r2, r3
 8015388:	f7fe fff0 	bl	801436c <_read>
 801538c:	1c43      	adds	r3, r0, #1
 801538e:	d102      	bne.n	8015396 <_read_r+0x1e>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	b103      	cbz	r3, 8015396 <_read_r+0x1e>
 8015394:	602b      	str	r3, [r5, #0]
 8015396:	bd38      	pop	{r3, r4, r5, pc}
 8015398:	20007750 	.word	0x20007750

0801539c <_fstat_r>:
 801539c:	b538      	push	{r3, r4, r5, lr}
 801539e:	4c07      	ldr	r4, [pc, #28]	; (80153bc <_fstat_r+0x20>)
 80153a0:	2300      	movs	r3, #0
 80153a2:	4605      	mov	r5, r0
 80153a4:	4608      	mov	r0, r1
 80153a6:	4611      	mov	r1, r2
 80153a8:	6023      	str	r3, [r4, #0]
 80153aa:	f7ff f853 	bl	8014454 <_fstat>
 80153ae:	1c43      	adds	r3, r0, #1
 80153b0:	d102      	bne.n	80153b8 <_fstat_r+0x1c>
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	b103      	cbz	r3, 80153b8 <_fstat_r+0x1c>
 80153b6:	602b      	str	r3, [r5, #0]
 80153b8:	bd38      	pop	{r3, r4, r5, pc}
 80153ba:	bf00      	nop
 80153bc:	20007750 	.word	0x20007750

080153c0 <_isatty_r>:
 80153c0:	b538      	push	{r3, r4, r5, lr}
 80153c2:	4c06      	ldr	r4, [pc, #24]	; (80153dc <_isatty_r+0x1c>)
 80153c4:	2300      	movs	r3, #0
 80153c6:	4605      	mov	r5, r0
 80153c8:	4608      	mov	r0, r1
 80153ca:	6023      	str	r3, [r4, #0]
 80153cc:	f7ff f852 	bl	8014474 <_isatty>
 80153d0:	1c43      	adds	r3, r0, #1
 80153d2:	d102      	bne.n	80153da <_isatty_r+0x1a>
 80153d4:	6823      	ldr	r3, [r4, #0]
 80153d6:	b103      	cbz	r3, 80153da <_isatty_r+0x1a>
 80153d8:	602b      	str	r3, [r5, #0]
 80153da:	bd38      	pop	{r3, r4, r5, pc}
 80153dc:	20007750 	.word	0x20007750

080153e0 <_init>:
 80153e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153e2:	bf00      	nop
 80153e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153e6:	bc08      	pop	{r3}
 80153e8:	469e      	mov	lr, r3
 80153ea:	4770      	bx	lr

080153ec <_fini>:
 80153ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ee:	bf00      	nop
 80153f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153f2:	bc08      	pop	{r3}
 80153f4:	469e      	mov	lr, r3
 80153f6:	4770      	bx	lr
