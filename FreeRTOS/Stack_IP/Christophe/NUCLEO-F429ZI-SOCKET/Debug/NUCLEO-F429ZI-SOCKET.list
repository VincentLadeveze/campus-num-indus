
NUCLEO-F429ZI-SOCKET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001529c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ccc  0801544c  0801544c  0002544c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018118  08018118  00028118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018120  08018120  00028120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018124  08018124  00028124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08018128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
  8 .bss          0000acb8  2000007c  2000007c  0003007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000ad34  2000ad34  0003007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000401d1  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000076d2  00000000  00000000  0007027d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002270  00000000  00000000  00077950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002058  00000000  00000000  00079bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000149f4  00000000  00000000  0007bc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000ac65  00000000  00000000  0009060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009b271  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009368  00000000  00000000  0009b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015434 	.word	0x08015434

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08015434 	.word	0x08015434

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f8f8 	bl	80007be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f013 fe6e 	bl	80142b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f013 fd9e 	bl	8014114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20003fe0 	.word	0x20003fe0

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20003fe0 	.word	0x20003fe0

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff ffee 	bl	800060c <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_Delay+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800064a:	bf00      	nop
 800064c:	f7ff ffde 	bl	800060c <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f7      	bcc.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	79fa      	ldrb	r2, [r7, #7]
 80006e8:	f002 021f 	and.w	r2, r2, #31
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <__NVIC_SetPriority+0x4c>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	3b04      	subs	r3, #4
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	2201      	movs	r2, #1
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	401a      	ands	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a2:	2101      	movs	r1, #1
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	1e59      	subs	r1, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	4313      	orrs	r3, r2
         );
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3724      	adds	r7, #36	; 0x24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff4e 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e6:	f7ff ff63 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	6978      	ldr	r0, [r7, #20]
 80007f2:	f7ff ffb3 	bl	800075c <NVIC_EncodePriority>
 80007f6:	4602      	mov	r2, r0
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff82 	bl	8000708 <__NVIC_SetPriority>
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff56 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000838:	4baa      	ldr	r3, [pc, #680]	; (8000ae4 <HAL_ETH_Init+0x2bc>)
 800083a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e185      	b.n	8000b5a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f012 fcf4 	bl	8013250 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4a9e      	ldr	r2, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800086e:	4b9e      	ldr	r3, [pc, #632]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6453      	str	r3, [r2, #68]	; 0x44
 8000878:	4b9b      	ldr	r3, [pc, #620]	; (8000ae8 <HAL_ETH_Init+0x2c0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000884:	4a99      	ldr	r2, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000886:	4b99      	ldr	r3, [pc, #612]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800088e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000890:	4996      	ldr	r1, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000892:	4b96      	ldr	r3, [pc, #600]	; (8000aec <HAL_ETH_Init+0x2c4>)
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	4313      	orrs	r3, r2
 800089c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	f042 0201 	orr.w	r2, r2, #1
 80008b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008b6:	f7ff fea9 	bl	800060c <HAL_GetTick>
 80008ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008bc:	e011      	b.n	80008e2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008be:	f7ff fea5 	bl	800060c <HAL_GetTick>
 80008c2:	4602      	mov	r2, r0
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008cc:	d909      	bls.n	80008e2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2203      	movs	r2, #3
 80008d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80008de:	2303      	movs	r3, #3
 80008e0:	e13b      	b.n	8000b5a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e4      	bne.n	80008be <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f023 031c 	bic.w	r3, r3, #28
 8000902:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000904:	f001 fe8c 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8000908:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4a78      	ldr	r2, [pc, #480]	; (8000af0 <HAL_ETH_Init+0x2c8>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d908      	bls.n	8000924 <HAL_ETH_Init+0xfc>
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4a77      	ldr	r2, [pc, #476]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d804      	bhi.n	8000924 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	e027      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	4a73      	ldr	r2, [pc, #460]	; (8000af4 <HAL_ETH_Init+0x2cc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d908      	bls.n	800093e <HAL_ETH_Init+0x116>
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4a72      	ldr	r2, [pc, #456]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d804      	bhi.n	800093e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f043 030c 	orr.w	r3, r3, #12
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e01a      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	4a6d      	ldr	r2, [pc, #436]	; (8000af8 <HAL_ETH_Init+0x2d0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d903      	bls.n	800094e <HAL_ETH_Init+0x126>
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4a6c      	ldr	r2, [pc, #432]	; (8000afc <HAL_ETH_Init+0x2d4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d911      	bls.n	8000972 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	4a6a      	ldr	r2, [pc, #424]	; (8000afc <HAL_ETH_Init+0x2d4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d908      	bls.n	8000968 <HAL_ETH_Init+0x140>
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4a69      	ldr	r2, [pc, #420]	; (8000b00 <HAL_ETH_Init+0x2d8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d804      	bhi.n	8000968 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e005      	b.n	8000974 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	e000      	b.n	8000974 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000972:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800097c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fc19 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d00b      	beq.n	80009a6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 fca5 	bl	80012e4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e0d9      	b.n	8000b5a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	f7ff fe3c 	bl	8000624 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a7 	beq.w	8000b04 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009b6:	f7ff fe29 	bl	800060c <HAL_GetTick>
 80009ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	461a      	mov	r2, r3
 80009c2:	2101      	movs	r1, #1
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fb90 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009ca:	f7ff fe1f 	bl	800060c <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d8:	4293      	cmp	r3, r2
 80009da:	d90f      	bls.n	80009fc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009e0:	6939      	ldr	r1, [r7, #16]
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fc7e 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009f8:	2303      	movs	r3, #3
 80009fa:	e0ae      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0da      	beq.n	80009bc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fbd4 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a1c:	6939      	ldr	r1, [r7, #16]
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 fc60 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e094      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a30:	f7ff fdec 	bl	800060c <HAL_GetTick>
 8000a34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 fb53 	bl	80010ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a44:	f7ff fde2 	bl	800060c <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d90f      	bls.n	8000a76 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a5a:	6939      	ldr	r1, [r7, #16]
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fc41 	bl	80012e4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e071      	b.n	8000b5a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0da      	beq.n	8000a36 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	461a      	mov	r2, r3
 8000a86:	211f      	movs	r1, #31
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fb2e 	bl	80010ea <HAL_ETH_ReadPHYRegister>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fc22 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e056      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	e002      	b.n	8000ac6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	e037      	b.n	8000b48 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	e032      	b.n	8000b48 <HAL_ETH_Init+0x320>
 8000ae2:	bf00      	nop
 8000ae4:	03938700 	.word	0x03938700
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40013800 	.word	0x40013800
 8000af0:	01312cff 	.word	0x01312cff
 8000af4:	02160ebf 	.word	0x02160ebf
 8000af8:	039386ff 	.word	0x039386ff
 8000afc:	05f5e0ff 	.word	0x05f5e0ff
 8000b00:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb4c 	bl	80011ba <HAL_ETH_WritePHYRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fbd8 	bl	80012e4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e00c      	b.n	8000b5a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b40:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b44:	f7ff fd6e 	bl	8000624 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b48:	6939      	ldr	r1, [r7, #16]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 fbca 	bl	80012e4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop

08000b64 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_ETH_DMATxDescListInit+0x20>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e052      	b.n	8000c2a <HAL_ETH_DMATxDescListInit+0xc6>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e030      	b.n	8000c02 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d908      	bls.n	8000bf6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	461a      	mov	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	e002      	b.n	8000bfc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3ca      	bcc.n	8000ba0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c14:	3310      	adds	r3, #16
 8000c16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b087      	sub	sp, #28
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ETH_DMARxDescListInit+0x20>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e056      	b.n	8000d04 <HAL_ETH_DMARxDescListInit+0xce>
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2202      	movs	r2, #2
 8000c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e034      	b.n	8000cdc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	4413      	add	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c82:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000c8a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c92:	fb02 f303 	mul.w	r3, r2, r3
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d105      	bne.n	8000cb4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d908      	bls.n	8000cd0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	e002      	b.n	8000cd6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3c6      	bcc.n	8000c72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cee:	330c      	adds	r3, #12
 8000cf0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ETH_TransmitFrame+0x24>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e0cd      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0b8      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da09      	bge.n	8000d7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2212      	movs	r2, #18
 8000d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e0a9      	b.n	8000ed0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d915      	bls.n	8000db2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4a54      	ldr	r2, [pc, #336]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0a9b      	lsrs	r3, r3, #10
 8000d90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <HAL_ETH_TransmitFrame+0x1cc>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	0a9b      	lsrs	r3, r3, #10
 8000d9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e001      	b.n	8000db6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d11c      	bne.n	8000df6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dc4:	6812      	ldr	r2, [r2, #0]
 8000dc6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000dca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000dd6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000de6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df4:	e04b      	b.n	8000e8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e044      	b.n	8000e86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d116      	bne.n	8000e64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_ETH_TransmitFrame+0x1d0>)
 8000e4a:	fb02 f203 	mul.w	r2, r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000e56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3b6      	bcc.n	8000dfc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e96:	3314      	adds	r3, #20
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00d      	beq.n	8000ebe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eaa:	3314      	adds	r3, #20
 8000eac:	2204      	movs	r2, #4
 8000eae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	ac02b00b 	.word	0xac02b00b
 8000ee0:	fffffa0c 	.word	0xfffffa0c

08000ee4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e074      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000f0e:	e05a      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f24:	d10d      	bne.n	8000f42 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f40:	e041      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
 8000f66:	e02e      	b.n	8000fc6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d103      	bne.n	8000f8a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f96:	1f1a      	subs	r2, r3, #4
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e010      	b.n	8000fe8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db02      	blt.n	8000fd6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d99c      	bls.n	8000f10 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001004:	3314      	adds	r3, #20
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100c:	2b40      	cmp	r3, #64	; 0x40
 800100e:	d112      	bne.n	8001036 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f012 f9e3 	bl	80133dc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800101e:	3314      	adds	r3, #20
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001034:	e01b      	b.n	800106e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103e:	3314      	adds	r3, #20
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d111      	bne.n	800106e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f839 	bl	80010c2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001058:	3314      	adds	r3, #20
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001076:	3314      	adds	r3, #20
 8001078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001086:	3314      	adds	r3, #20
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001092:	d112      	bne.n	80010ba <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f81e 	bl	80010d6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010a2:	3314      	adds	r3, #20
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	460b      	mov	r3, r1
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b82      	cmp	r3, #130	; 0x82
 800110a:	d101      	bne.n	8001110 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800110c:	2302      	movs	r3, #2
 800110e:	e050      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2282      	movs	r2, #130	; 0x82
 8001114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 031c 	and.w	r3, r3, #28
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8a1b      	ldrh	r3, [r3, #16]
 800112c:	02db      	lsls	r3, r3, #11
 800112e:	b29b      	uxth	r3, r3
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff fa56 	bl	800060c <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001162:	e015      	b.n	8001190 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001164:	f7ff fa52 	bl	800060c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d309      	bcc.n	8001188 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e014      	b.n	80011b2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e4      	bne.n	8001164 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	460b      	mov	r3, r1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b42      	cmp	r3, #66	; 0x42
 80011da:	d101      	bne.n	80011e0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80011dc:	2302      	movs	r3, #2
 80011de:	e04e      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2242      	movs	r2, #66	; 0x42
 80011e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 031c 	and.w	r3, r3, #28
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8a1b      	ldrh	r3, [r3, #16]
 80011fc:	02db      	lsls	r3, r3, #11
 80011fe:	b29b      	uxth	r3, r3
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	b292      	uxth	r2, r2
 800122c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001236:	f7ff f9e9 	bl	800060c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800123c:	e015      	b.n	800126a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800123e:	f7ff f9e5 	bl	800060c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d309      	bcc.n	8001262 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00d      	b.n	800127e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e4      	bne.n	800123e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ETH_Start+0x16>
 8001298:	2302      	movs	r3, #2
 800129a:	e01f      	b.n	80012dc <HAL_ETH_Start+0x56>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fa19 	bl	80016e4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fa33 	bl	800171e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fa7d 	bl	80017b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fa4a 	bl	8001758 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fa5f 	bl	8001788 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	; 0xc0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001300:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001308:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001312:	2300      	movs	r3, #0
 8001314:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	663b      	str	r3, [r7, #96]	; 0x60
 8001330:	e001      	b.n	8001336 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001340:	2300      	movs	r3, #0
 8001342:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013bc:	4bab      	ldr	r3, [pc, #684]	; (800166c <ETH_MACDMAConfig+0x388>)
 80013be:	4013      	ands	r3, r2
 80013c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80013c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013c8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80013ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80013cc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80013ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80013d0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80013d6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80013da:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80013dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80013de:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80013e4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80013e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80013e8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80013ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80013ec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80013ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80013f0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80013f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80013f4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80013f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80013f8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80013fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013fe:	4313      	orrs	r3, r2
 8001400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800140c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff f903 	bl	8000624 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001426:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800142e:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001430:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001434:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800143a:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 800143c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001440:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001442:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001446:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001448:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800144c:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 800144e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001452:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001454:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff f8df 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001478:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001482:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800148e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001492:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001496:	4013      	ands	r3, r2
 8001498:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014a0:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80014a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014a6:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80014a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80014ac:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80014ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80014b2:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80014b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80014b8:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80014ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80014be:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014c4:	4313      	orrs	r3, r2
 80014c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d2:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff f8a0 	bl	8000624 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80014f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80014fa:	430a      	orrs	r2, r1
 80014fc:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff f88b 	bl	8000624 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001516:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800151c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001520:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800152a:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800153c:	2304      	movs	r3, #4
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800154c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800155c:	2300      	movs	r3, #0
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001560:	2300      	movs	r3, #0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	3318      	adds	r3, #24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ETH_MACDMAConfig+0x38c>)
 800157a:	4013      	ands	r3, r2
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001580:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001582:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001584:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001586:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001588:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800158a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800158c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800158e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001590:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001592:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001594:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001596:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001598:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800159c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80015a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a6:	4313      	orrs	r3, r2
 80015a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	3318      	adds	r3, #24
 80015b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ba:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	3318      	adds	r3, #24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff f829 	bl	8000624 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	3318      	adds	r3, #24
 80015dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015e0:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80015e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80015ea:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80015ee:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80015f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80015f2:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80015f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80015f6:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 80015f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015fa:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80015fc:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80015fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001600:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001602:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160a:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff f802 	bl	8000624 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800162c:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d10f      	bne.n	8001656 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	331c      	adds	r3, #28
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001652:	331c      	adds	r3, #28
 8001654:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	461a      	mov	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f808 	bl	8001674 <ETH_MACAddressConfig>
}
 8001664:	bf00      	nop
 8001666:	37c0      	adds	r7, #192	; 0xc0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	ff20810f 	.word	0xff20810f
 8001670:	f8de3f23 	.word	0xf8de3f23

08001674 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3305      	adds	r3, #5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	3204      	adds	r2, #4
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <ETH_MACAddressConfig+0x68>)
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3303      	adds	r3, #3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <ETH_MACAddressConfig+0x6c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40028040 	.word	0x40028040
 80016e0:	40028044 	.word	0x40028044

080016e4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 f87f 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	f042 0204 	orr.w	r2, r2, #4
 8001738:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f862 	bl	800180c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	3318      	adds	r3, #24
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001774:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001778:	3318      	adds	r3, #24
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	3318      	adds	r3, #24
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017a8:	3318      	adds	r3, #24
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	3318      	adds	r3, #24
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80017dc:	3318      	adds	r3, #24
 80017de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	3318      	adds	r3, #24
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 f80c 	bl	800180c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	3318      	adds	r3, #24
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <ETH_Delay+0x34>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <ETH_Delay+0x38>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a5b      	lsrs	r3, r3, #9
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001828:	bf00      	nop
  } 
  while (Delay --);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	60fa      	str	r2, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <ETH_Delay+0x1c>
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	20000014 	.word	0x20000014
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e177      	b.n	8001b54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8166 	bne.w	8001b4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x4a>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	69b9      	ldr	r1, [r7, #24]
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d00b      	beq.n	800192e <HAL_GPIO_Init+0xe6>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001922:	2b11      	cmp	r3, #17
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80c0 	beq.w	8001b4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_GPIO_Init+0x320>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a60      	ldr	r2, [pc, #384]	; (8001b6c <HAL_GPIO_Init+0x324>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x328>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d031      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x226>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a50      	ldr	r2, [pc, #320]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x222>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4f      	ldr	r2, [pc, #316]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x21e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a5e:	2309      	movs	r3, #9
 8001a60:	e012      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a62:	230a      	movs	r3, #10
 8001a64:	e010      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a66:	2308      	movs	r3, #8
 8001a68:	e00e      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x240>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aca:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f ae84 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40022400 	.word	0x40022400
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	401a      	ands	r2, r3
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d104      	bne.n	8001bf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b08f      	sub	sp, #60	; 0x3c
 8001c08:	af0a      	add	r7, sp, #40	; 0x28
 8001c0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e103      	b.n	8001e1e <HAL_PCD_Init+0x21a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f012 fae6 	bl	80141fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fa4c 	bl	80030da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	687e      	ldr	r6, [r7, #4]
 8001c4a:	466d      	mov	r5, sp
 8001c4c:	f106 0410 	add.w	r4, r6, #16
 8001c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c60:	1d33      	adds	r3, r6, #4
 8001c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f001 f9d7 	bl	8003018 <USB_CoreInit>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0d0      	b.n	8001e1e <HAL_PCD_Init+0x21a>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fa3a 	bl	80030fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e04a      	b.n	8001d24 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	333d      	adds	r3, #61	; 0x3d
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	333c      	adds	r3, #60	; 0x3c
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	4602      	mov	r2, r0
 8001ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	333f      	adds	r3, #63	; 0x3f
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3344      	adds	r3, #68	; 0x44
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3348      	adds	r3, #72	; 0x48
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3350      	adds	r3, #80	; 0x50
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	3301      	adds	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3af      	bcc.n	8001c8e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e044      	b.n	8001dbe <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3b5      	bcc.n	8001d34 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	687e      	ldr	r6, [r7, #4]
 8001dd0:	466d      	mov	r5, sp
 8001dd2:	f106 0410 	add.w	r4, r6, #16
 8001dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001de6:	1d33      	adds	r3, r6, #4
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	6838      	ldr	r0, [r7, #0]
 8001dec:	f001 f9b0 	bl	8003150 <USB_DevInit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00d      	b.n	8001e1e <HAL_PCD_Init+0x21a>
  }

  hpcd->USB_Address = 0U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fb6e 	bl	80034f8 <USB_DevDisconnect>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e22d      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	4ba3      	ldr	r3, [pc, #652]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d112      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4b9d      	ldr	r3, [pc, #628]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4b99      	ldr	r3, [pc, #612]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d157      	bne.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e208      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_OscConfig+0x74>
 8001e8e:	4a91      	ldr	r2, [pc, #580]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	4b90      	ldr	r3, [pc, #576]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	4b8a      	ldr	r3, [pc, #552]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4a88      	ldr	r2, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	4b87      	ldr	r3, [pc, #540]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001ec0:	4a84      	ldr	r2, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4a81      	ldr	r2, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fb94 	bl	800060c <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fb90 	bl	800060c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1cd      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b76      	ldr	r3, [pc, #472]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fb80 	bl	800060c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fb7c 	bl	800060c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1b9      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	4b65      	ldr	r3, [pc, #404]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e18d      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4956      	ldr	r1, [pc, #344]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <HAL_RCC_OscConfig+0x2b0>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fb35 	bl	800060c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7fe fb31 	bl	800060c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e16e      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4943      	ldr	r1, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x2b0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fb14 	bl	800060c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fb10 	bl	800060c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e14d      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d030      	beq.n	8002074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x2b4>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe faf4 	bl	800060c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe faf0 	bl	800060c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e12d      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x200>
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_OscConfig+0x2b4>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7fe fadd 	bl	800060c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe fad9 	bl	800060c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e116      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a0 	beq.w	80021c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x2b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d121      	bne.n	8002102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_RCC_OscConfig+0x2b8>)
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_RCC_OscConfig+0x2b8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7fe fa9f 	bl	800060c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e011      	b.n	80020f6 <HAL_RCC_OscConfig+0x2ce>
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	42470000 	.word	0x42470000
 80020dc:	42470e80 	.word	0x42470e80
 80020e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e4:	f7fe fa92 	bl	800060c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0cf      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <HAL_RCC_OscConfig+0x2f0>
 800210a:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800210c:	4b65      	ldr	r3, [pc, #404]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	e01c      	b.n	8002152 <HAL_RCC_OscConfig+0x32a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x312>
 8002120:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6713      	str	r3, [r2, #112]	; 0x70
 800212c:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	e00b      	b.n	8002152 <HAL_RCC_OscConfig+0x32a>
 800213a:	4a5a      	ldr	r2, [pc, #360]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	; 0x70
 8002146:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002148:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7fe fa57 	bl	800060c <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fa53 	bl	800060c <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e08e      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	4b4a      	ldr	r3, [pc, #296]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ee      	beq.n	8002162 <HAL_RCC_OscConfig+0x33a>
 8002184:	e014      	b.n	80021b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe fa41 	bl	800060c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7fe fa3d 	bl	800060c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e078      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b6:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 80021b8:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d064      	beq.n	8002294 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d05c      	beq.n	8002290 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d141      	bne.n	8002262 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x480>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fa12 	bl	800060c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fa0e 	bl	800060c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04b      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220a:	4926      	ldr	r1, [pc, #152]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_OscConfig+0x480>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe f9e7 	bl	800060c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe f9e3 	bl	800060c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e020      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x41a>
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_RCC_OscConfig+0x480>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe f9d0 	bl	800060c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe f9cc 	bl	800060c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e009      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_RCC_OscConfig+0x47c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x448>
 800228e:	e001      	b.n	8002294 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470060 	.word	0x42470060

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0ca      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20c      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b62      	ldr	r3, [pc, #392]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b6      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	494f      	ldr	r1, [pc, #316]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07d      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06d      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e065      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4936      	ldr	r1, [pc, #216]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7fe f936 	bl	800060c <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7fe f932 	bl	800060c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04d      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 020f 	and.w	r2, r3, #15
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d90c      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_RCC_ClockConfig+0x1b4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e030      	b.n	8002456 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4918      	ldr	r1, [pc, #96]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4911      	ldr	r1, [pc, #68]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f81d 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	fa21 f303 	lsr.w	r3, r1, r3
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800244e:	2000      	movs	r0, #0
 8002450:	f011 ff2e 	bl	80142b0 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	08018068 	.word	0x08018068
 800246c:	20000014 	.word	0x20000014

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002474:	b08f      	sub	sp, #60	; 0x3c
 8002476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002488:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d007      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002494:	2b08      	cmp	r3, #8
 8002496:	d008      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x3a>
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 80b2 	bne.w	8002602 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80024a2:	e0b1      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a8:	e0ae      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	4b57      	ldr	r3, [pc, #348]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d04e      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4b54      	ldr	r3, [pc, #336]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	f04f 0400 	mov.w	r4, #0
 80024ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	ea01 0103 	and.w	r1, r1, r3
 80024d6:	ea02 0204 	and.w	r2, r2, r4
 80024da:	460b      	mov	r3, r1
 80024dc:	4614      	mov	r4, r2
 80024de:	0160      	lsls	r0, r4, #5
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24
 80024e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80024e8:	6278      	str	r0, [r7, #36]	; 0x24
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024f2:	1a5b      	subs	r3, r3, r1
 80024f4:	eb64 0402 	sbc.w	r4, r4, r2
 80024f8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80024fc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002500:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002504:	ebb8 0803 	subs.w	r8, r8, r3
 8002508:	eb69 0904 	sbc.w	r9, r9, r4
 800250c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002524:	eb18 0801 	adds.w	r8, r8, r1
 8002528:	eb49 0902 	adc.w	r9, r9, r2
 800252c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002544:	4640      	mov	r0, r8
 8002546:	4649      	mov	r1, r9
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	f04f 0400 	mov.w	r4, #0
 800254e:	461a      	mov	r2, r3
 8002550:	4623      	mov	r3, r4
 8002552:	f7fd fe9d 	bl	8000290 <__aeabi_uldivmod>
 8002556:	4603      	mov	r3, r0
 8002558:	460c      	mov	r4, r1
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
 800255c:	e043      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	f04f 0400 	mov.w	r4, #0
 8002568:	f240 11ff 	movw	r1, #511	; 0x1ff
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea01 0103 	and.w	r1, r1, r3
 8002574:	ea02 0204 	and.w	r2, r2, r4
 8002578:	460b      	mov	r3, r1
 800257a:	4614      	mov	r4, r2
 800257c:	0160      	lsls	r0, r4, #5
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	015b      	lsls	r3, r3, #5
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002590:	1a5b      	subs	r3, r3, r1
 8002592:	eb64 0402 	sbc.w	r4, r4, r2
 8002596:	01a6      	lsls	r6, r4, #6
 8002598:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800259c:	019d      	lsls	r5, r3, #6
 800259e:	1aed      	subs	r5, r5, r3
 80025a0:	eb66 0604 	sbc.w	r6, r6, r4
 80025a4:	00f3      	lsls	r3, r6, #3
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	00eb      	lsls	r3, r5, #3
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80025b8:	186d      	adds	r5, r5, r1
 80025ba:	eb46 0602 	adc.w	r6, r6, r2
 80025be:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80025c2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80025c6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80025ca:	4655      	mov	r5, sl
 80025cc:	465e      	mov	r6, fp
 80025ce:	4628      	mov	r0, r5
 80025d0:	4631      	mov	r1, r6
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	461a      	mov	r2, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	f7fd fe58 	bl	8000290 <__aeabi_uldivmod>
 80025e0:	4603      	mov	r3, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c1b      	lsrs	r3, r3, #16
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	3301      	adds	r3, #1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80025f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800260a:	4618      	mov	r0, r3
 800260c:	373c      	adds	r7, #60	; 0x3c
 800260e:	46bd      	mov	sp, r7
 8002610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	007a1200 	.word	0x007a1200

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000014 	.word	0x20000014

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4601      	mov	r1, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08018078 	.word	0x08018078

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	4601      	mov	r1, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	08018078 	.word	0x08018078

08002688 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	220f      	movs	r2, #15
 8002696:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_GetClockConfig+0x5c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_RCC_GetClockConfig+0x60>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	601a      	str	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01d      	b.n	800273a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f815 	bl	8002742 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 f968 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	68d2      	ldr	r2, [r2, #12]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d007      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d122      	bne.n	80027fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d11b      	bne.n	80027fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0202 	mvn.w	r2, #2
 80027ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8ee 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80027e6:	e005      	b.n	80027f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8e0 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f1 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b04      	cmp	r3, #4
 8002806:	d122      	bne.n	800284e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d11b      	bne.n	800284e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0204 	mvn.w	r2, #4
 800281e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8c4 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 800283a:	e005      	b.n	8002848 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8b6 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8c7 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d122      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b08      	cmp	r3, #8
 8002868:	d11b      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0208 	mvn.w	r2, #8
 8002872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2204      	movs	r2, #4
 8002878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f89a 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 800288e:	e005      	b.n	800289c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f88c 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f89d 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d122      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d11b      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0210 	mvn.w	r2, #16
 80028c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2208      	movs	r2, #8
 80028cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f870 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80028e2:	e005      	b.n	80028f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f862 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f873 	bl	80029d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f06f 0201 	mvn.w	r2, #1
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f011 fbdf 	bl	80140e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d10e      	bne.n	800294e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b80      	cmp	r3, #128	; 0x80
 800293c:	d107      	bne.n	800294e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f903 	bl	8002b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f838 	bl	80029ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b20      	cmp	r3, #32
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b20      	cmp	r3, #32
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0220 	mvn.w	r2, #32
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8cd 	bl	8002b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a40      	ldr	r2, [pc, #256]	; (8002b14 <TIM_Base_SetConfig+0x114>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d013      	beq.n	8002a40 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d00f      	beq.n	8002a40 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	; (8002b18 <TIM_Base_SetConfig+0x118>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a3c      	ldr	r2, [pc, #240]	; (8002b1c <TIM_Base_SetConfig+0x11c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a3b      	ldr	r2, [pc, #236]	; (8002b20 <TIM_Base_SetConfig+0x120>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <TIM_Base_SetConfig+0x124>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <TIM_Base_SetConfig+0x114>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02b      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d027      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <TIM_Base_SetConfig+0x118>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d023      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <TIM_Base_SetConfig+0x11c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <TIM_Base_SetConfig+0x120>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01b      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <TIM_Base_SetConfig+0x124>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d017      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a28      	ldr	r2, [pc, #160]	; (8002b28 <TIM_Base_SetConfig+0x128>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <TIM_Base_SetConfig+0x12c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00f      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <TIM_Base_SetConfig+0x130>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <TIM_Base_SetConfig+0x134>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <TIM_Base_SetConfig+0x138>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <TIM_Base_SetConfig+0x13c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <TIM_Base_SetConfig+0x114>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <TIM_Base_SetConfig+0xf8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <TIM_Base_SetConfig+0x124>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	615a      	str	r2, [r3, #20]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40000800 	.word	0x40000800
 8002b20:	40000c00 	.word	0x40000c00
 8002b24:	40010400 	.word	0x40010400
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800
 8002b34:	40001800 	.word	0x40001800
 8002b38:	40001c00 	.word	0x40001c00
 8002b3c:	40002000 	.word	0x40002000

08002b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e03f      	b.n	8002bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f011 faec 	bl	801416c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f829 	bl	8002c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	6912      	ldr	r2, [r2, #16]
 8002bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	6952      	ldr	r2, [r2, #20]
 8002bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	6912      	ldr	r2, [r2, #16]
 8002c16:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c48:	f023 030c 	bic.w	r3, r3, #12
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6952      	ldr	r2, [r2, #20]
 8002c5c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6992      	ldr	r2, [r2, #24]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c70:	f040 80e4 	bne.w	8002e3c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4aab      	ldr	r2, [pc, #684]	; (8002f28 <UART_SetConfig+0x324>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <UART_SetConfig+0x84>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4aaa      	ldr	r2, [pc, #680]	; (8002f2c <UART_SetConfig+0x328>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d16c      	bne.n	8002d62 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681c      	ldr	r4, [r3, #0]
 8002c8c:	f7ff fce8 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	009a      	lsls	r2, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4aa2      	ldr	r2, [pc, #648]	; (8002f30 <UART_SetConfig+0x32c>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	011d      	lsls	r5, r3, #4
 8002cb0:	f7ff fcd6 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cca:	f7ff fcc9 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	4a92      	ldr	r2, [pc, #584]	; (8002f30 <UART_SetConfig+0x32c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2264      	movs	r2, #100	; 0x64
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	1af3      	subs	r3, r6, r3
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	3332      	adds	r3, #50	; 0x32
 8002cf8:	4a8d      	ldr	r2, [pc, #564]	; (8002f30 <UART_SetConfig+0x32c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d06:	441d      	add	r5, r3
 8002d08:	f7ff fcaa 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d22:	f7ff fc9d 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <UART_SetConfig+0x32c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	1af3      	subs	r3, r6, r3
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a77      	ldr	r2, [pc, #476]	; (8002f30 <UART_SetConfig+0x32c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	442b      	add	r3, r5
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	e154      	b.n	800300c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681c      	ldr	r4, [r3, #0]
 8002d66:	f7ff fc67 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009a      	lsls	r2, r3, #2
 8002d74:	441a      	add	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	4a6b      	ldr	r2, [pc, #428]	; (8002f30 <UART_SetConfig+0x32c>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011d      	lsls	r5, r3, #4
 8002d8a:	f7ff fc55 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002da4:	f7ff fc48 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4a5c      	ldr	r2, [pc, #368]	; (8002f30 <UART_SetConfig+0x32c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2264      	movs	r2, #100	; 0x64
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	1af3      	subs	r3, r6, r3
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <UART_SetConfig+0x32c>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002de0:	441d      	add	r5, r3
 8002de2:	f7ff fc29 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009a      	lsls	r2, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dfc:	f7ff fc1c 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4a46      	ldr	r2, [pc, #280]	; (8002f30 <UART_SetConfig+0x32c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2264      	movs	r2, #100	; 0x64
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	1af3      	subs	r3, r6, r3
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	3332      	adds	r3, #50	; 0x32
 8002e2a:	4a41      	ldr	r2, [pc, #260]	; (8002f30 <UART_SetConfig+0x32c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	442b      	add	r3, r5
 8002e38:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e3a:	e0e7      	b.n	800300c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <UART_SetConfig+0x324>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <UART_SetConfig+0x24c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <UART_SetConfig+0x328>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d171      	bne.n	8002f34 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681c      	ldr	r4, [r3, #0]
 8002e54:	f7ff fc04 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <UART_SetConfig+0x32c>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	011d      	lsls	r5, r3, #4
 8002e78:	f7ff fbf2 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009a      	lsls	r2, r3, #2
 8002e86:	441a      	add	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e92:	f7ff fbe5 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <UART_SetConfig+0x32c>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2264      	movs	r2, #100	; 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	1af3      	subs	r3, r6, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	; 0x32
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <UART_SetConfig+0x32c>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ecc:	441d      	add	r5, r3
 8002ece:	f7ff fbc7 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ee8:	f7ff fbba 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009a      	lsls	r2, r3, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <UART_SetConfig+0x32c>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2264      	movs	r2, #100	; 0x64
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	1af3      	subs	r3, r6, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	; 0x32
 8002f16:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <UART_SetConfig+0x32c>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	442b      	add	r3, r5
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	e071      	b.n	800300c <UART_SetConfig+0x408>
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40011400 	.word	0x40011400
 8002f30:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681c      	ldr	r4, [r3, #0]
 8002f38:	f7ff fb7e 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009a      	lsls	r2, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4a30      	ldr	r2, [pc, #192]	; (8003014 <UART_SetConfig+0x410>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	095b      	lsrs	r3, r3, #5
 8002f5a:	011d      	lsls	r5, r3, #4
 8002f5c:	f7ff fb6c 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009a      	lsls	r2, r3, #2
 8002f6a:	441a      	add	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f76:	f7ff fb5f 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009a      	lsls	r2, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <UART_SetConfig+0x410>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2264      	movs	r2, #100	; 0x64
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	1af3      	subs	r3, r6, r3
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	3332      	adds	r3, #50	; 0x32
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <UART_SetConfig+0x410>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb0:	441d      	add	r5, r3
 8002fb2:	f7ff fb41 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fcc:	f7ff fb34 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <UART_SetConfig+0x410>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2264      	movs	r2, #100	; 0x64
 8002ff0:	fb02 f303 	mul.w	r3, r2, r3
 8002ff4:	1af3      	subs	r3, r6, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <UART_SetConfig+0x410>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	442b      	add	r3, r5
 8003008:	60a3      	str	r3, [r4, #8]
}
 800300a:	e7ff      	b.n	800300c <UART_SetConfig+0x408>
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003014:	51eb851f 	.word	0x51eb851f

08003018 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003018:	b084      	sub	sp, #16
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	f107 001c 	add.w	r0, r7, #28
 8003026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2b01      	cmp	r3, #1
 800302e:	d122      	bne.n	8003076 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa5e 	bl	800352c <USB_CoreReset>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e01a      	b.n	80030ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa52 	bl	800352c <USB_CoreReset>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
 800309e:	e005      	b.n	80030ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d10b      	bne.n	80030ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f043 0206 	orr.w	r2, r3, #6
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f043 0220 	orr.w	r2, r3, #32
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030d6:	b004      	add	sp, #16
 80030d8:	4770      	bx	lr

080030da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0201 	bic.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d106      	bne.n	8003128 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e00b      	b.n	8003140 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	e001      	b.n	8003140 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e003      	b.n	8003148 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003140:	2032      	movs	r0, #50	; 0x32
 8003142:	f7fd fa6f 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003150:	b084      	sub	sp, #16
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800315e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e009      	b.n	8003184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3340      	adds	r3, #64	; 0x40
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	2200      	movs	r2, #0
 800317c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	3301      	adds	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0e      	cmp	r3, #14
 8003188:	d9f2      	bls.n	8003170 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800318a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d112      	bne.n	80031b6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
 80031b4:	e00b      	b.n	80031ce <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031d4:	461a      	mov	r2, r3
 80031d6:	2300      	movs	r3, #0
 80031d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e0:	461a      	mov	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10c      	bne.n	800320c <USB_DevInit+0xbc>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <USB_DevInit+0xb2>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031f8:	2100      	movs	r1, #0
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f962 	bl	80034c4 <USB_SetDevSpeed>
 8003200:	e008      	b.n	8003214 <USB_DevInit+0xc4>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003202:	2101      	movs	r1, #1
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f95d 	bl	80034c4 <USB_SetDevSpeed>
 800320a:	e003      	b.n	8003214 <USB_DevInit+0xc4>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800320c:	2103      	movs	r1, #3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f958 	bl	80034c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003214:	2110      	movs	r1, #16
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f90c 	bl	8003434 <USB_FlushTxFifo>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <USB_DevInit+0xd6>
  {
    ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f92a 	bl	8003480 <USB_FlushRxFifo>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <USB_DevInit+0xe6>
  {
    ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	461a      	mov	r2, r3
 800323e:	2300      	movs	r3, #0
 8003240:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003254:	461a      	mov	r2, r3
 8003256:	2300      	movs	r3, #0
 8003258:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e043      	b.n	80032e8 <USB_DevInit+0x198>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003276:	d118      	bne.n	80032aa <USB_DevInit+0x15a>
    {
      if (i == 0U)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <USB_DevInit+0x144>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328a:	461a      	mov	r2, r3
 800328c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e013      	b.n	80032bc <USB_DevInit+0x16c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	461a      	mov	r2, r3
 80032a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e008      	b.n	80032bc <USB_DevInit+0x16c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b6:	461a      	mov	r2, r3
 80032b8:	2300      	movs	r3, #0
 80032ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c8:	461a      	mov	r2, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032da:	461a      	mov	r2, r3
 80032dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	3301      	adds	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d8b7      	bhi.n	8003260 <USB_DevInit+0x110>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e043      	b.n	800337e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800330c:	d118      	bne.n	8003340 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e013      	b.n	8003352 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e008      	b.n	8003352 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2300      	movs	r3, #0
 8003350:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335e:	461a      	mov	r2, r3
 8003360:	2300      	movs	r3, #0
 8003362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	461a      	mov	r2, r3
 8003372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3301      	adds	r3, #1
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d8b7      	bhi.n	80032f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800339a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d112      	bne.n	80033c8 <USB_DevInit+0x278>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <USB_DevInit+0x2dc>)
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	f043 0303 	orr.w	r3, r3, #3
 80033c6:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <USB_DevInit+0x298>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f043 0210 	orr.w	r2, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <USB_DevInit+0x2e0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f043 0208 	orr.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003428:	b004      	add	sp, #16
 800342a:	4770      	bx	lr
 800342c:	00800100 	.word	0x00800100
 8003430:	803c3800 	.word	0x803c3800

08003434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	019b      	lsls	r3, r3, #6
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3301      	adds	r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a09      	ldr	r2, [pc, #36]	; (800347c <USB_FlushTxFifo+0x48>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e006      	b.n	800346e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b20      	cmp	r3, #32
 800346a:	d0f0      	beq.n	800344e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	00030d40 	.word	0x00030d40

08003480 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2210      	movs	r2, #16
 8003490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3301      	adds	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <USB_FlushRxFifo+0x40>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e006      	b.n	80034b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d0f0      	beq.n	8003492 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	00030d40 	.word	0x00030d40

080034c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	4619      	mov	r1, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800351a:	2003      	movs	r0, #3
 800351c:	f7fd f882 	bl	8000624 <HAL_Delay>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <USB_CoreReset+0x64>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e01b      	b.n	8003582 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	daf2      	bge.n	8003538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3301      	adds	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <USB_CoreReset+0x64>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d0f0      	beq.n	8003562 <USB_CoreReset+0x36>

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	00030d40 	.word	0x00030d40

08003594 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80035a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a6:	2b84      	cmp	r3, #132	; 0x84
 80035a8:	d005      	beq.n	80035b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	3303      	adds	r3, #3
 80035b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ca:	f3ef 8305 	mrs	r3, IPSR
 80035ce:	607b      	str	r3, [r7, #4]
  return(result);
 80035d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035ec:	f001 ff74 	bl	80054d8 <vTaskStartScheduler>
  
  return osOK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80035fa:	f7ff ffe3 	bl	80035c4 <inHandlerMode>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003604:	f002 f85a 	bl	80056bc <xTaskGetTickCountFromISR>
 8003608:	4603      	mov	r3, r0
 800360a:	e002      	b.n	8003612 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800360c:	f002 f846 	bl	800569c <xTaskGetTickCount>
 8003610:	4603      	mov	r3, r0
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	bd80      	pop	{r7, pc}

08003616 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003618:	b087      	sub	sp, #28
 800361a:	af02      	add	r7, sp, #8
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685c      	ldr	r4, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800362c:	b29e      	uxth	r6, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ffad 	bl	8003594 <makeFreeRtosPriority>
 800363a:	4602      	mov	r2, r0
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	9200      	str	r2, [sp, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4632      	mov	r2, r6
 8003648:	4629      	mov	r1, r5
 800364a:	4620      	mov	r0, r4
 800364c:	f001 fdf4 	bl	8005238 <xTaskCreate>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003664 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <osDelay+0x16>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	e000      	b.n	800367c <osDelay+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fef7 	bl	8005470 <vTaskDelay>
  
  return osOK;
 8003682:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003694:	2001      	movs	r0, #1
 8003696:	f000 ffc5 	bl	8004624 <xQueueCreateMutex>
 800369a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <osMutexWait+0x18>
    return osErrorParameter;
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	e03a      	b.n	8003732 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036c6:	d103      	bne.n	80036d0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e009      	b.n	80036e4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <osMutexWait+0x40>
      ticks = 1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80036e4:	f7ff ff6e 	bl	80035c4 <inHandlerMode>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d017      	beq.n	800371e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	461a      	mov	r2, r3
 80036f4:	2100      	movs	r1, #0
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 fb7a 	bl	8004df0 <xQueueReceiveFromISR>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <osMutexWait+0x62>
      return osErrorOS;
 8003702:	23ff      	movs	r3, #255	; 0xff
 8003704:	e015      	b.n	8003732 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <osMutexWait+0x8c>
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <osMutexWait+0x98>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	e008      	b.n	8003730 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 fa69 	bl	8004bf8 <xQueueSemaphoreTake>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <osMutexWait+0x8c>
    return osErrorOS;
 800372c:	23ff      	movs	r3, #255	; 0xff
 800372e:	e000      	b.n	8003732 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003750:	f7ff ff38 	bl	80035c4 <inHandlerMode>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f8ed 	bl	8004940 <xQueueGiveFromISR>
 8003766:	4603      	mov	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d001      	beq.n	8003770 <osMutexRelease+0x30>
      return osErrorOS;
 800376c:	23ff      	movs	r3, #255	; 0xff
 800376e:	e017      	b.n	80037a0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <osMutexRelease+0x5e>
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <osMutexRelease+0x68>)
 8003778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	e00a      	b.n	800379e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003788:	2300      	movs	r3, #0
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 ff60 	bl	8004654 <xQueueGenericSend>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800379a:	23ff      	movs	r3, #255	; 0xff
 800379c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80037bc:	2203      	movs	r2, #3
 80037be:	2100      	movs	r1, #0
 80037c0:	2001      	movs	r0, #1
 80037c2:	f000 febd 	bl	8004540 <xQueueGenericCreate>
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <osSemaphoreCreate+0x2e>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 ff3d 	bl	8004654 <xQueueGenericSend>
    return sema;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	e000      	b.n	80037e0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80037de:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	e03a      	b.n	8003876 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380a:	d103      	bne.n	8003814 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e009      	b.n	8003828 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d006      	beq.n	8003828 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <osSemaphoreWait+0x40>
      ticks = 1;
 8003824:	2301      	movs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003828:	f7ff fecc 	bl	80035c4 <inHandlerMode>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d017      	beq.n	8003862 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	461a      	mov	r2, r3
 8003838:	2100      	movs	r1, #0
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 fad8 	bl	8004df0 <xQueueReceiveFromISR>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003846:	23ff      	movs	r3, #255	; 0xff
 8003848:	e015      	b.n	8003876 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d011      	beq.n	8003874 <osSemaphoreWait+0x8c>
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <osSemaphoreWait+0x98>)
 8003852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	e008      	b.n	8003874 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f9c7 	bl	8004bf8 <xQueueSemaphoreTake>
 800386a:	4603      	mov	r3, r0
 800386c:	2b01      	cmp	r3, #1
 800386e:	d001      	beq.n	8003874 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003870:	23ff      	movs	r3, #255	; 0xff
 8003872:	e000      	b.n	8003876 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003890:	2300      	movs	r3, #0
 8003892:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003894:	f7ff fe96 	bl	80035c4 <inHandlerMode>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f001 f84b 	bl	8004940 <xQueueGiveFromISR>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80038b0:	23ff      	movs	r3, #255	; 0xff
 80038b2:	e017      	b.n	80038e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d013      	beq.n	80038e2 <osSemaphoreRelease+0x5e>
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <osSemaphoreRelease+0x68>)
 80038bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	e00a      	b.n	80038e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 febe 	bl	8004654 <xQueueGenericSend>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80038de:	23ff      	movs	r3, #255	; 0xff
 80038e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	e000ed04 	.word	0xe000ed04

080038f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80038f8:	f7ff fe64 	bl	80035c4 <inHandlerMode>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8003902:	2382      	movs	r3, #130	; 0x82
 8003904:	e003      	b.n	800390e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f001 fb27 	bl	8004f5a <vQueueDelete>

  return osOK; 
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	4619      	mov	r1, r3
 800392c:	f000 fe08 	bl	8004540 <xQueueGenericCreate>
 8003930:	4603      	mov	r3, r0
#endif
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <osMessagePut+0x1e>
    ticks = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800395a:	f7ff fe33 	bl	80035c4 <inHandlerMode>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d018      	beq.n	8003996 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003964:	f107 0210 	add.w	r2, r7, #16
 8003968:	f107 0108 	add.w	r1, r7, #8
 800396c:	2300      	movs	r3, #0
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 ff52 	bl	8004818 <xQueueGenericSendFromISR>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <osMessagePut+0x42>
      return osErrorOS;
 800397a:	23ff      	movs	r3, #255	; 0xff
 800397c:	e018      	b.n	80039b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d014      	beq.n	80039ae <osMessagePut+0x72>
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <osMessagePut+0x7c>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	e00b      	b.n	80039ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003996:	f107 0108 	add.w	r1, r7, #8
 800399a:	2300      	movs	r3, #0
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fe58 	bl	8004654 <xQueueGenericSend>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <osMessagePut+0x72>
      return osErrorOS;
 80039aa:	23ff      	movs	r3, #255	; 0xff
 80039ac:	e000      	b.n	80039b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b08b      	sub	sp, #44	; 0x2c
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	617b      	str	r3, [r7, #20]
    return event;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	461c      	mov	r4, r3
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039ea:	e054      	b.n	8003a96 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fa:	d103      	bne.n	8003a04 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	e009      	b.n	8003a18 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <osMessageGet+0x5c>
      ticks = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003a18:	f7ff fdd4 	bl	80035c4 <inHandlerMode>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01c      	beq.n	8003a5c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003a22:	f107 0220 	add.w	r2, r7, #32
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68b8      	ldr	r0, [r7, #8]
 8003a30:	f001 f9de 	bl	8004df0 <xQueueReceiveFromISR>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e001      	b.n	8003a44 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01d      	beq.n	8003a86 <osMessageGet+0xca>
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <osMessageGet+0xe4>)
 8003a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	e014      	b.n	8003a86 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	3304      	adds	r3, #4
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	4619      	mov	r1, r3
 8003a66:	68b8      	ldr	r0, [r7, #8]
 8003a68:	f000 fff4 	bl	8004a54 <xQueueReceive>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d102      	bne.n	8003a78 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003a72:	2310      	movs	r3, #16
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e006      	b.n	8003a86 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <osMessageGet+0xc6>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <osMessageGet+0xc8>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	461c      	mov	r4, r3
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	372c      	adds	r7, #44	; 0x2c
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003aac:	f7ff fd8a 	bl	80035c4 <inHandlerMode>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f001 fa34 	bl	8004f24 <uxQueueMessagesWaitingFromISR>
 8003abc:	4603      	mov	r3, r0
 8003abe:	e003      	b.n	8003ac8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 fa12 	bl	8004eea <uxQueueMessagesWaiting>
 8003ac6:	4603      	mov	r3, r0
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003ad8:	f7ff fd74 	bl	80035c4 <inHandlerMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <osMessageDelete+0x16>
    return osErrorISR;
 8003ae2:	2382      	movs	r3, #130	; 0x82
 8003ae4:	e003      	b.n	8003aee <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f001 fa37 	bl	8004f5a <vQueueDelete>

  return osOK; 
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f103 0208 	add.w	r2, r3, #8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f103 0208 	add.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bae:	d103      	bne.n	8003bb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e00c      	b.n	8003bd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <vListInsert+0x2e>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d9f6      	bls.n	8003bc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6852      	ldr	r2, [r2, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d103      	bne.n	8003c3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3b04      	subs	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c90:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <pxPortInitialiseStack+0x64>)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3b14      	subs	r3, #20
 8003c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f06f 0202 	mvn.w	r2, #2
 8003cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b20      	subs	r3, #32
 8003cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	08003cc9 	.word	0x08003cc9

08003cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <prvTaskExitError+0x50>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cda:	d009      	beq.n	8003cf0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e7fe      	b.n	8003cee <prvTaskExitError+0x26>
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d02:	bf00      	nop
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0fc      	beq.n	8003d04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	00000000 	.word	0x00000000

08003d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <pxCurrentTCBConst2>)
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	f380 8809 	msr	PSP, r0
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8811 	msr	BASEPRI, r0
 8003d3a:	4770      	bx	lr
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst2>:
 8003d40:	20003cb8 	.word	0x20003cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <prvPortStartFirstTask+0x24>)
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	6800      	ldr	r0, [r0, #0]
 8003d4e:	f380 8808 	msr	MSP, r0
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f380 8814 	msr	CONTROL, r0
 8003d5a:	b662      	cpsie	i
 8003d5c:	b661      	cpsie	f
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	df00      	svc	0
 8003d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d6a:	bf00      	nop
 8003d6c:	e000ed08 	.word	0xe000ed08

08003d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <xPortStartScheduler+0x118>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a44      	ldr	r2, [pc, #272]	; (8003e8c <xPortStartScheduler+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <xPortStartScheduler+0x24>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e7fe      	b.n	8003d92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d94:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <xPortStartScheduler+0x118>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <xPortStartScheduler+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d109      	bne.n	8003db2 <xPortStartScheduler+0x42>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e7fe      	b.n	8003db0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003db2:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <xPortStartScheduler+0x124>)
 8003db4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <xPortStartScheduler+0x128>)
 8003dd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003de0:	e009      	b.n	8003df6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003de2:	4b2e      	ldr	r3, [pc, #184]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003dea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b80      	cmp	r3, #128	; 0x80
 8003e00:	d0ef      	beq.n	8003de2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1c3 0307 	rsb	r3, r3, #7
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d009      	beq.n	8003e22 <xPortStartScheduler+0xb2>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	e7fe      	b.n	8003e20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <xPortStartScheduler+0x12c>)
 8003e36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e40:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <xPortStartScheduler+0x130>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e58:	f000 f8d6 	bl	8004008 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <xPortStartScheduler+0x134>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e62:	f000 f8f5 	bl	8004050 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <xPortStartScheduler+0x138>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e72:	f7ff ff69 	bl	8003d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e76:	f001 fccd 	bl	8005814 <vTaskSwitchContext>
	prvTaskExitError();
 8003e7a:	f7ff ff25 	bl	8003cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	e000ed00 	.word	0xe000ed00
 8003e8c:	410fc271 	.word	0x410fc271
 8003e90:	410fc270 	.word	0x410fc270
 8003e94:	e000e400 	.word	0xe000e400
 8003e98:	20000098 	.word	0x20000098
 8003e9c:	2000009c 	.word	0x2000009c
 8003ea0:	e000ed20 	.word	0xe000ed20
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	e000ef34 	.word	0xe000ef34

08003eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ecc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <vPortEnterCritical+0x54>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10e      	bne.n	8003ef4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <vPortEnterCritical+0x58>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <vPortEnterCritical+0x48>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	e7fe      	b.n	8003ef2 <vPortEnterCritical+0x46>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	20000004 	.word	0x20000004
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <vPortExitCritical+0x22>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	e7fe      	b.n	8003f28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <vPortExitCritical+0x4c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <vPortExitCritical+0x3e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000004 	.word	0x20000004
	...

08003f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f60:	f3ef 8009 	mrs	r0, PSP
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <pxCurrentTCBConst>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f01e 0f10 	tst.w	lr, #16
 8003f70:	bf08      	it	eq
 8003f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	6010      	str	r0, [r2, #0]
 8003f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f84:	f380 8811 	msr	BASEPRI, r0
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f001 fc40 	bl	8005814 <vTaskSwitchContext>
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f380 8811 	msr	BASEPRI, r0
 8003f9c:	bc09      	pop	{r0, r3}
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	6808      	ldr	r0, [r1, #0]
 8003fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa6:	f01e 0f10 	tst.w	lr, #16
 8003faa:	bf08      	it	eq
 8003fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fb0:	f380 8809 	msr	PSP, r0
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst>:
 8003fc0:	20003cb8 	.word	0x20003cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fe0:	f001 fb7e 	bl	80056e0 <xTaskIncrementTick>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SysTick_Handler+0x3c>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <vPortSetupTimerInterrupt+0x34>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortSetupTimerInterrupt+0x38>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004018:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <vPortSetupTimerInterrupt+0x3c>)
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <vPortSetupTimerInterrupt+0x40>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	490b      	ldr	r1, [pc, #44]	; (800404c <vPortSetupTimerInterrupt+0x44>)
 8004020:	fba1 1303 	umull	r1, r3, r1, r3
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	3b01      	subs	r3, #1
 8004028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <vPortSetupTimerInterrupt+0x34>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010
 8004040:	e000e018 	.word	0xe000e018
 8004044:	e000e014 	.word	0xe000e014
 8004048:	20000014 	.word	0x20000014
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004050:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004060 <vPortEnableVFP+0x10>
 8004054:	6801      	ldr	r1, [r0, #0]
 8004056:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800405a:	6001      	str	r1, [r0, #0]
 800405c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800405e:	bf00      	nop
 8004060:	e000ed88 	.word	0xe000ed88

08004064 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800406a:	f3ef 8305 	mrs	r3, IPSR
 800406e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d913      	bls.n	800409e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004076:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <vPortValidateInterruptPriority+0x6c>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <vPortValidateInterruptPriority+0x70>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	7afa      	ldrb	r2, [r7, #11]
 8004086:	429a      	cmp	r2, r3
 8004088:	d209      	bcs.n	800409e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	e7fe      	b.n	800409c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <vPortValidateInterruptPriority+0x74>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a6:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <vPortValidateInterruptPriority+0x78>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d909      	bls.n	80040c2 <vPortValidateInterruptPriority+0x5e>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	e7fe      	b.n	80040c0 <vPortValidateInterruptPriority+0x5c>
	}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e3f0 	.word	0xe000e3f0
 80040d4:	20000098 	.word	0x20000098
 80040d8:	e000ed0c 	.word	0xe000ed0c
 80040dc:	2000009c 	.word	0x2000009c

080040e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040ec:	f001 fa3a 	bl	8005564 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040f0:	4b57      	ldr	r3, [pc, #348]	; (8004250 <pvPortMalloc+0x170>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040f8:	f000 f90c 	bl	8004314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040fc:	4b55      	ldr	r3, [pc, #340]	; (8004254 <pvPortMalloc+0x174>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 808c 	bne.w	8004222 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01c      	beq.n	800414a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	3308      	adds	r3, #8
 800412a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <pvPortMalloc+0x6a>
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e7fe      	b.n	8004148 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d068      	beq.n	8004222 <pvPortMalloc+0x142>
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <pvPortMalloc+0x178>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d863      	bhi.n	8004222 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800415a:	4b40      	ldr	r3, [pc, #256]	; (800425c <pvPortMalloc+0x17c>)
 800415c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800415e:	4b3f      	ldr	r3, [pc, #252]	; (800425c <pvPortMalloc+0x17c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004164:	e004      	b.n	8004170 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d203      	bcs.n	8004182 <pvPortMalloc+0xa2>
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f1      	bne.n	8004166 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004182:	4b33      	ldr	r3, [pc, #204]	; (8004250 <pvPortMalloc+0x170>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	429a      	cmp	r2, r3
 800418a:	d04a      	beq.n	8004222 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	4413      	add	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad2      	subs	r2, r2, r3
 80041a6:	2308      	movs	r3, #8
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d91e      	bls.n	80041ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <pvPortMalloc+0xf4>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e7fe      	b.n	80041d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041e6:	69b8      	ldr	r0, [r7, #24]
 80041e8:	f000 f8f6 	bl	80043d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <pvPortMalloc+0x178>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x178>)
 80041f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <pvPortMalloc+0x178>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <pvPortMalloc+0x180>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d203      	bcs.n	800420e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <pvPortMalloc+0x178>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <pvPortMalloc+0x180>)
 800420c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <pvPortMalloc+0x174>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	431a      	orrs	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004222:	f001 f9ad 	bl	8005580 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <pvPortMalloc+0x164>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e7fe      	b.n	8004242 <pvPortMalloc+0x162>
	return pvReturn;
 8004244:	69fb      	ldr	r3, [r7, #28]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20003ca8 	.word	0x20003ca8
 8004254:	20003cb4 	.word	0x20003cb4
 8004258:	20003cac 	.word	0x20003cac
 800425c:	20003ca0 	.word	0x20003ca0
 8004260:	20003cb0 	.word	0x20003cb0

08004264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d046      	beq.n	8004304 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004276:	2308      	movs	r3, #8
 8004278:	425b      	negs	r3, r3
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <vPortFree+0xa8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <vPortFree+0x42>
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e7fe      	b.n	80042a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <vPortFree+0x5e>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <vPortFree+0xa8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d115      	bne.n	8004304 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <vPortFree+0xa8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f001 f93c 	bl	8005564 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <vPortFree+0xac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a06      	ldr	r2, [pc, #24]	; (8004310 <vPortFree+0xac>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f86c 	bl	80043d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004300:	f001 f93e 	bl	8005580 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20003cb4 	.word	0x20003cb4
 8004310:	20003cac 	.word	0x20003cac

08004314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800431a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800431e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <prvHeapInit+0xac>)
 8004322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3307      	adds	r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <prvHeapInit+0xac>)
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <prvHeapInit+0xb0>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <prvHeapInit+0xb0>)
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004360:	2208      	movs	r2, #8
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <prvHeapInit+0xb4>)
 8004374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <prvHeapInit+0xb4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <prvHeapInit+0xb4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvHeapInit+0xb4>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <prvHeapInit+0xb8>)
 80043a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <prvHeapInit+0xbc>)
 80043aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <prvHeapInit+0xc0>)
 80043ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200000a0 	.word	0x200000a0
 80043c4:	20003ca0 	.word	0x20003ca0
 80043c8:	20003ca8 	.word	0x20003ca8
 80043cc:	20003cb0 	.word	0x20003cb0
 80043d0:	20003cac 	.word	0x20003cac
 80043d4:	20003cb4 	.word	0x20003cb4

080043d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <prvInsertBlockIntoFreeList+0xac>)
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <prvInsertBlockIntoFreeList+0x14>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3f7      	bcc.n	80043e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d108      	bne.n	800441a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d118      	bne.n	8004460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d00d      	beq.n	8004456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e008      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e003      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d002      	beq.n	8004476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20003ca0 	.word	0x20003ca0
 8004488:	20003ca8 	.word	0x20003ca8

0800448c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <xQueueGenericReset+0x28>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80044b4:	f7ff fcfa 	bl	8003eac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	3b01      	subs	r3, #1
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3310      	adds	r3, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f001 f9fa 	bl	8005910 <xTaskRemoveFromEventList>
 800451c:	e009      	b.n	8004532 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3310      	adds	r3, #16
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fae7 	bl	8003af6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fae2 	bl	8003af6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004532:	f7ff fce9 	bl	8003f08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004536:	2301      	movs	r3, #1
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <xQueueGenericCreate+0x28>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	e7fe      	b.n	8004566 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	e004      	b.n	800457e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3348      	adds	r3, #72	; 0x48
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fdac 	bl	80040e0 <pvPortMalloc>
 8004588:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3348      	adds	r3, #72	; 0x48
 8004594:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004596:	79fa      	ldrb	r2, [r7, #7]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f805 	bl	80045b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045a8:	69bb      	ldr	r3, [r7, #24]
	}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045e0:	2101      	movs	r1, #1
 80045e2:	69b8      	ldr	r0, [r7, #24]
 80045e4:	f7ff ff52 	bl	800448c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00e      	beq.n	800461c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004610:	2300      	movs	r3, #0
 8004612:	2200      	movs	r2, #0
 8004614:	2100      	movs	r1, #0
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f81c 	bl	8004654 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800462e:	2301      	movs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	461a      	mov	r2, r3
 800463a:	6939      	ldr	r1, [r7, #16]
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f7ff ff7f 	bl	8004540 <xQueueGenericCreate>
 8004642:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff ffd3 	bl	80045f0 <prvInitialiseMutex>

		return pxNewQueue;
 800464a:	68fb      	ldr	r3, [r7, #12]
	}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004662:	2300      	movs	r3, #0
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <xQueueGenericSend+0x30>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
 8004682:	e7fe      	b.n	8004682 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueGenericSend+0x3e>
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueGenericSend+0x42>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericSend+0x44>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <xQueueGenericSend+0x5c>
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	e7fe      	b.n	80046ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d103      	bne.n	80046be <xQueueGenericSend+0x6a>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <xQueueGenericSend+0x6e>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <xQueueGenericSend+0x70>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d109      	bne.n	80046dc <xQueueGenericSend+0x88>
 80046c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	e7fe      	b.n	80046da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046dc:	f001 fab0 	bl	8005c40 <xTaskGetSchedulerState>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <xQueueGenericSend+0x98>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <xQueueGenericSend+0x9c>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <xQueueGenericSend+0x9e>
 80046f0:	2300      	movs	r3, #0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <xQueueGenericSend+0xb6>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e7fe      	b.n	8004708 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800470a:	f7ff fbcf 	bl	8003eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <xQueueGenericSend+0xcc>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d112      	bne.n	8004746 <xQueueGenericSend+0xf2>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004726:	f000 fc4d 	bl	8004fc4 <prvCopyDataToQueue>
 800472a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <xQueueGenericSend+0xea>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	3324      	adds	r3, #36	; 0x24
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f8e9 	bl	8005910 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800473e:	f7ff fbe3 	bl	8003f08 <vPortExitCritical>
				return pdPASS;
 8004742:	2301      	movs	r3, #1
 8004744:	e062      	b.n	800480c <xQueueGenericSend+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <xQueueGenericSend+0x100>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800474c:	f7ff fbdc 	bl	8003f08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004750:	2300      	movs	r3, #0
 8004752:	e05b      	b.n	800480c <xQueueGenericSend+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <xQueueGenericSend+0x114>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4618      	mov	r0, r3
 8004760:	f001 f938 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004768:	f7ff fbce 	bl	8003f08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800476c:	f000 fefa 	bl	8005564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004770:	f7ff fb9c 	bl	8003eac <vPortEnterCritical>
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004780:	d103      	bne.n	800478a <xQueueGenericSend+0x136>
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004790:	b25b      	sxtb	r3, r3
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004796:	d103      	bne.n	80047a0 <xQueueGenericSend+0x14c>
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a0:	f7ff fbb2 	bl	8003f08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047a4:	1d3a      	adds	r2, r7, #4
 80047a6:	f107 0314 	add.w	r3, r7, #20
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f927 	bl	8005a00 <xTaskCheckForTimeOut>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d123      	bne.n	8004800 <xQueueGenericSend+0x1ac>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fcfb 	bl	80051b4 <prvIsQueueFull>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <xQueueGenericSend+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	3310      	adds	r3, #16
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f87b 	bl	80058c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d4:	f000 fc86 	bl	80050e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047d8:	f000 fed2 	bl	8005580 <xTaskResumeAll>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d193      	bne.n	800470a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <xQueueGenericSend+0x1c0>)
 80047e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	e78a      	b.n	800470a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f6:	f000 fc75 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047fa:	f000 fec1 	bl	8005580 <xTaskResumeAll>
 80047fe:	e784      	b.n	800470a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004802:	f000 fc6f 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004806:	f000 febb 	bl	8005580 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800480a:	2300      	movs	r3, #0
		}
	}
}
 800480c:	4618      	mov	r0, r3
 800480e:	3738      	adds	r7, #56	; 0x38
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08e      	sub	sp, #56	; 0x38
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueGenericSendFromISR+0x2c>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	e7fe      	b.n	8004842 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <xQueueGenericSendFromISR+0x3a>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <xQueueGenericSendFromISR+0x3e>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xQueueGenericSendFromISR+0x40>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <xQueueGenericSendFromISR+0x58>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	e7fe      	b.n	800486e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d103      	bne.n	800487e <xQueueGenericSendFromISR+0x66>
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <xQueueGenericSendFromISR+0x6a>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <xQueueGenericSendFromISR+0x6c>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <xQueueGenericSendFromISR+0x84>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e7fe      	b.n	800489a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800489c:	f7ff fbe2 	bl	8004064 <vPortValidateInterruptPriority>
	__asm volatile
 80048a0:	f3ef 8211 	mrs	r2, BASEPRI
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	61ba      	str	r2, [r7, #24]
 80048b6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <xQueueGenericSendFromISR+0xb6>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d12c      	bne.n	8004928 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048de:	f000 fb71 	bl	8004fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ea:	d112      	bne.n	8004912 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d016      	beq.n	8004922 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 f809 	bl	8005910 <xTaskRemoveFromEventList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00e      	beq.n	8004922 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e007      	b.n	8004922 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004916:	3301      	adds	r3, #1
 8004918:	b2db      	uxtb	r3, r3
 800491a:	b25a      	sxtb	r2, r3
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004922:	2301      	movs	r3, #1
 8004924:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004926:	e001      	b.n	800492c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004928:	2300      	movs	r3, #0
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004938:	4618      	mov	r0, r3
 800493a:	3738      	adds	r7, #56	; 0x38
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08e      	sub	sp, #56	; 0x38
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	e7fe      	b.n	8004966 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <xQueueGiveFromISR+0x44>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e7fe      	b.n	8004982 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <xQueueGiveFromISR+0x54>
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <xQueueGiveFromISR+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <xQueueGiveFromISR+0x5a>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <xQueueGiveFromISR+0x72>
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e7fe      	b.n	80049b0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049b2:	f7ff fb57 	bl	8004064 <vPortValidateInterruptPriority>
	__asm volatile
 80049b6:	f3ef 8211 	mrs	r2, BASEPRI
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	617a      	str	r2, [r7, #20]
 80049cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80049ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	429a      	cmp	r2, r3
 80049e0:	d92b      	bls.n	8004a3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fc:	d112      	bne.n	8004a24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	3324      	adds	r3, #36	; 0x24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ff80 	bl	8005910 <xTaskRemoveFromEventList>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00e      	beq.n	8004a34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e007      	b.n	8004a34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a28:	3301      	adds	r3, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	b25a      	sxtb	r2, r3
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a34:	2301      	movs	r3, #1
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
 8004a38:	e001      	b.n	8004a3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3738      	adds	r7, #56	; 0x38
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <xQueueReceive+0x2e>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	623b      	str	r3, [r7, #32]
 8004a80:	e7fe      	b.n	8004a80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <xQueueReceive+0x3c>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <xQueueReceive+0x40>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <xQueueReceive+0x42>
 8004a94:	2300      	movs	r3, #0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <xQueueReceive+0x5a>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e7fe      	b.n	8004aac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aae:	f001 f8c7 	bl	8005c40 <xTaskGetSchedulerState>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <xQueueReceive+0x6a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <xQueueReceive+0x6e>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueReceive+0x70>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <xQueueReceive+0x88>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e7fe      	b.n	8004ada <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004adc:	f7ff f9e6 	bl	8003eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d014      	beq.n	8004b16 <xQueueReceive+0xc2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af0:	f000 fad2 	bl	8005098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	1e5a      	subs	r2, r3, #1
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <xQueueReceive+0xba>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	3310      	adds	r3, #16
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 ff01 	bl	8005910 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b0e:	f7ff f9fb 	bl	8003f08 <vPortExitCritical>
				return pdPASS;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e069      	b.n	8004bea <xQueueReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <xQueueReceive+0xd0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b1c:	f7ff f9f4 	bl	8003f08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e062      	b.n	8004bea <xQueueReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <xQueueReceive+0xe4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b2a:	f107 0310 	add.w	r3, r7, #16
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 ff50 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b38:	f7ff f9e6 	bl	8003f08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b3c:	f000 fd12 	bl	8005564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b40:	f7ff f9b4 	bl	8003eac <vPortEnterCritical>
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d103      	bne.n	8004b5a <xQueueReceive+0x106>
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b66:	d103      	bne.n	8004b70 <xQueueReceive+0x11c>
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b70:	f7ff f9ca 	bl	8003f08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b74:	1d3a      	adds	r2, r7, #4
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ff3f 	bl	8005a00 <xTaskCheckForTimeOut>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d123      	bne.n	8004bd0 <xQueueReceive+0x17c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b8a:	f000 fafd 	bl	8005188 <prvIsQueueEmpty>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <xQueueReceive+0x170>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	3324      	adds	r3, #36	; 0x24
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe93 	bl	80058c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba4:	f000 fa9e 	bl	80050e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ba8:	f000 fcea 	bl	8005580 <xTaskResumeAll>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d194      	bne.n	8004adc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <xQueueReceive+0x1a0>)
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	e78b      	b.n	8004adc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc6:	f000 fa8d 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bca:	f000 fcd9 	bl	8005580 <xTaskResumeAll>
 8004bce:	e785      	b.n	8004adc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bd2:	f000 fa87 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd6:	f000 fcd3 	bl	8005580 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bdc:	f000 fad4 	bl	8005188 <prvIsQueueEmpty>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f43f af7a 	beq.w	8004adc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004be8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3730      	adds	r7, #48	; 0x30
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xQueueSemaphoreTake+0x30>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e7fe      	b.n	8004c26 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <xQueueSemaphoreTake+0x4c>
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e7fe      	b.n	8004c42 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c44:	f000 fffc 	bl	8005c40 <xTaskGetSchedulerState>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <xQueueSemaphoreTake+0x5c>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <xQueueSemaphoreTake+0x60>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <xQueueSemaphoreTake+0x62>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <xQueueSemaphoreTake+0x7a>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e7fe      	b.n	8004c70 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c72:	f7ff f91b 	bl	8003eac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d019      	beq.n	8004cb6 <xQueueSemaphoreTake+0xbe>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004c92:	f001 f99b 	bl	8005fcc <pvTaskIncrementMutexHeldCount>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <xQueueSemaphoreTake+0xb6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fe31 	bl	8005910 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cae:	f7ff f92b 	bl	8003f08 <vPortExitCritical>
				return pdPASS;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e096      	b.n	8004de4 <xQueueSemaphoreTake+0x1ec>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d110      	bne.n	8004cde <xQueueSemaphoreTake+0xe6>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <xQueueSemaphoreTake+0xde>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueSemaphoreTake+0xdc>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004cd6:	f7ff f917 	bl	8003f08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e082      	b.n	8004de4 <xQueueSemaphoreTake+0x1ec>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <xQueueSemaphoreTake+0xfa>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fe73 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cf2:	f7ff f909 	bl	8003f08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cf6:	f000 fc35 	bl	8005564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cfa:	f7ff f8d7 	bl	8003eac <vPortEnterCritical>
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d103      	bne.n	8004d14 <xQueueSemaphoreTake+0x11c>
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d1a:	b25b      	sxtb	r3, r3
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d20:	d103      	bne.n	8004d2a <xQueueSemaphoreTake+0x132>
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2a:	f7ff f8ed 	bl	8003f08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d2e:	463a      	mov	r2, r7
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fe62 	bl	8005a00 <xTaskCheckForTimeOut>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d132      	bne.n	8004da8 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d44:	f000 fa20 	bl	8005188 <prvIsQueueEmpty>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d026      	beq.n	8004d9c <xQueueSemaphoreTake+0x1a4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <xQueueSemaphoreTake+0x172>
					{
						taskENTER_CRITICAL();
 8004d56:	f7ff f8a9 	bl	8003eac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 ff8c 	bl	8005c7c <xTaskPriorityInherit>
 8004d64:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004d66:	f7ff f8cf 	bl	8003f08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	3324      	adds	r3, #36	; 0x24
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fda8 	bl	80058c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d7a:	f000 f9b3 	bl	80050e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d7e:	f000 fbff 	bl	8005580 <xTaskResumeAll>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f af74 	bne.w	8004c72 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <xQueueSemaphoreTake+0x1f4>)
 8004d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	e76a      	b.n	8004c72 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d9e:	f000 f9a1 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004da2:	f000 fbed 	bl	8005580 <xTaskResumeAll>
 8004da6:	e764      	b.n	8004c72 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004daa:	f000 f99b 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dae:	f000 fbe7 	bl	8005580 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004db4:	f000 f9e8 	bl	8005188 <prvIsQueueEmpty>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f43f af59 	beq.w	8004c72 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <xQueueSemaphoreTake+0x1ea>
					{
						taskENTER_CRITICAL();
 8004dc6:	f7ff f871 	bl	8003eac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004dca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dcc:	f000 f8e2 	bl	8004f94 <prvGetDisinheritPriorityAfterTimeout>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f859 	bl	8005e90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004dde:	f7ff f893 	bl	8003f08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004de2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3738      	adds	r7, #56	; 0x38
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08e      	sub	sp, #56	; 0x38
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <xQueueReceiveFromISR+0x2a>
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	e7fe      	b.n	8004e18 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <xQueueReceiveFromISR+0x38>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <xQueueReceiveFromISR+0x3c>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <xQueueReceiveFromISR+0x3e>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <xQueueReceiveFromISR+0x56>
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	e7fe      	b.n	8004e44 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e46:	f7ff f90d 	bl	8004064 <vPortValidateInterruptPriority>
	__asm volatile
 8004e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	61ba      	str	r2, [r7, #24]
 8004e60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02f      	beq.n	8004ed2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e80:	f000 f90a 	bl	8005098 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e94:	d112      	bne.n	8004ebc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fd34 	bl	8005910 <xTaskRemoveFromEventList>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00e      	beq.n	8004ecc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	b25a      	sxtb	r2, r3
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed0:	e001      	b.n	8004ed6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3738      	adds	r7, #56	; 0x38
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	e7fe      	b.n	8004f0a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004f0c:	f7fe ffce 	bl	8003eac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004f16:	f7fe fff7 	bl	8003f08 <vPortExitCritical>

	return uxReturn;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <uxQueueMessagesWaitingFromISR+0x22>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	e7fe      	b.n	8004f44 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <vQueueDelete+0x26>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	e7fe      	b.n	8004f7e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f92f 	bl	80051e4 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff f96c 	bl	8004264 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d006      	beq.n	8004fb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1c3 0307 	rsb	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e001      	b.n	8004fb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14d      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 feca 	bl	8005d88 <xTaskPriorityDisinherit>
 8004ff4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e043      	b.n	8005086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d119      	bne.n	8005038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6898      	ldr	r0, [r3, #8]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f00f fb05 	bl	801461e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d32b      	bcc.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	e026      	b.n	8005086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68d8      	ldr	r0, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f00f faeb 	bl	801461e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	425b      	negs	r3, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	425b      	negs	r3, r3
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d105      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d303      	bcc.n	80050cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	461a      	mov	r2, r3
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f00f faa1 	bl	801461e <memcpy>
	}
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ec:	f7fe fede 	bl	8003eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f8:	e011      	b.n	800511e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	; 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fc02 	bl	8005910 <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005112:	f000 fcd5 	bl	8005ac0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dce9      	bgt.n	80050fa <prvUnlockQueue+0x16>
 8005126:	e000      	b.n	800512a <prvUnlockQueue+0x46>
					break;
 8005128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005132:	f7fe fee9 	bl	8003f08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005136:	f7fe feb9 	bl	8003eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005142:	e011      	b.n	8005168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3310      	adds	r3, #16
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fbdd 	bl	8005910 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800515c:	f000 fcb0 	bl	8005ac0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	3b01      	subs	r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dce9      	bgt.n	8005144 <prvUnlockQueue+0x60>
 8005170:	e000      	b.n	8005174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	22ff      	movs	r2, #255	; 0xff
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800517c:	f7fe fec4 	bl	8003f08 <vPortExitCritical>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005190:	f7fe fe8c 	bl	8003eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e001      	b.n	80051a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f7fe feaf 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f7fe fe76 	bl	8003eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f7fe fe97 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e016      	b.n	8005220 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <vQueueUnregisterQueue+0x50>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d10b      	bne.n	800521a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005202:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <vQueueUnregisterQueue+0x50>)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2100      	movs	r1, #0
 8005208:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vQueueUnregisterQueue+0x50>)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]
				break;
 8005218:	e005      	b.n	8005226 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3301      	adds	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b07      	cmp	r3, #7
 8005224:	d9e5      	bls.n	80051f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20003fe4 	.word	0x20003fe4

08005238 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08c      	sub	sp, #48	; 0x30
 800523c:	af04      	add	r7, sp, #16
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe ff47 	bl	80040e0 <pvPortMalloc>
 8005252:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800525a:	2054      	movs	r0, #84	; 0x54
 800525c:	f7fe ff40 	bl	80040e0 <pvPortMalloc>
 8005260:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	e005      	b.n	800527c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005270:	6978      	ldr	r0, [r7, #20]
 8005272:	f7fe fff7 	bl	8004264 <vPortFree>
 8005276:	e001      	b.n	800527c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d013      	beq.n	80052aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	2300      	movs	r3, #0
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f80e 	bl	80052ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800529e:	69f8      	ldr	r0, [r7, #28]
 80052a0:	f000 f88a 	bl	80053b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052a4:	2301      	movs	r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e002      	b.n	80052b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052b0:	69bb      	ldr	r3, [r7, #24]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d2:	3b01      	subs	r3, #1
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <prvInitialiseNewTask+0x46>
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e7fe      	b.n	80052fe <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	e012      	b.n	800532c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	7819      	ldrb	r1, [r3, #0]
 800530e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	3334      	adds	r3, #52	; 0x34
 8005316:	460a      	mov	r2, r1
 8005318:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d006      	beq.n	8005334 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d9e9      	bls.n	8005306 <prvInitialiseNewTask+0x4c>
 8005332:	e000      	b.n	8005336 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005334:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	2b06      	cmp	r3, #6
 8005342:	d901      	bls.n	8005348 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005344:	2306      	movs	r3, #6
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005352:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fbe9 	bl	8003b36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	3318      	adds	r3, #24
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fbe4 	bl	8003b36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	f1c3 0207 	rsb	r2, r3, #7
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	69b8      	ldr	r0, [r7, #24]
 8005398:	f7fe fc62 	bl	8003c60 <pxPortInitialiseStack>
 800539c:	4602      	mov	r2, r0
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ae:	bf00      	nop
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c0:	f7fe fd74 	bl	8003eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c4:	4b24      	ldr	r3, [pc, #144]	; (8005458 <prvAddNewTaskToReadyList+0xa0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3301      	adds	r3, #1
 80053ca:	4a23      	ldr	r2, [pc, #140]	; (8005458 <prvAddNewTaskToReadyList+0xa0>)
 80053cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ce:	4b23      	ldr	r3, [pc, #140]	; (800545c <prvAddNewTaskToReadyList+0xa4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053d6:	4a21      	ldr	r2, [pc, #132]	; (800545c <prvAddNewTaskToReadyList+0xa4>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053dc:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <prvAddNewTaskToReadyList+0xa0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d110      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e4:	f000 fb8a 	bl	8005afc <prvInitialiseTaskLists>
 80053e8:	e00d      	b.n	8005406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <prvAddNewTaskToReadyList+0xa8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053f2:	4b1a      	ldr	r3, [pc, #104]	; (800545c <prvAddNewTaskToReadyList+0xa4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d802      	bhi.n	8005406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <prvAddNewTaskToReadyList+0xa4>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <prvAddNewTaskToReadyList+0xac>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <prvAddNewTaskToReadyList+0xac>)
 800540e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	2201      	movs	r2, #1
 8005416:	409a      	lsls	r2, r3
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <prvAddNewTaskToReadyList+0xb0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <prvAddNewTaskToReadyList+0xb0>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a0f      	ldr	r2, [pc, #60]	; (800546c <prvAddNewTaskToReadyList+0xb4>)
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fe fb89 	bl	8003b50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800543e:	f7fe fd63 	bl	8003f08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <prvAddNewTaskToReadyList+0xa8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <prvAddNewTaskToReadyList+0xa4>)
 800544c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20003db8 	.word	0x20003db8
 800545c:	20003cb8 	.word	0x20003cb8
 8005460:	20003dc4 	.word	0x20003dc4
 8005464:	20003dd4 	.word	0x20003dd4
 8005468:	20003dc0 	.word	0x20003dc0
 800546c:	20003cbc 	.word	0x20003cbc

08005470 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <vTaskDelay+0x60>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <vTaskDelay+0x2e>
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	e7fe      	b.n	800549c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800549e:	f000 f861 	bl	8005564 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fda5 	bl	8005ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054aa:	f000 f869 	bl	8005580 <xTaskResumeAll>
 80054ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <vTaskDelay+0x64>)
 80054b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20003de0 	.word	0x20003de0
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <vTaskStartScheduler+0x74>)
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	2280      	movs	r2, #128	; 0x80
 80054ea:	4919      	ldr	r1, [pc, #100]	; (8005550 <vTaskStartScheduler+0x78>)
 80054ec:	4819      	ldr	r0, [pc, #100]	; (8005554 <vTaskStartScheduler+0x7c>)
 80054ee:	f7ff fea3 	bl	8005238 <xTaskCreate>
 80054f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d115      	bne.n	8005526 <vTaskStartScheduler+0x4e>
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800550c:	4b12      	ldr	r3, [pc, #72]	; (8005558 <vTaskStartScheduler+0x80>)
 800550e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005512:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <vTaskStartScheduler+0x84>)
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <vTaskStartScheduler+0x88>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005520:	f7fe fc26 	bl	8003d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005524:	e00d      	b.n	8005542 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800552c:	d109      	bne.n	8005542 <vTaskStartScheduler+0x6a>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	e7fe      	b.n	8005540 <vTaskStartScheduler+0x68>
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20003ddc 	.word	0x20003ddc
 8005550:	0801544c 	.word	0x0801544c
 8005554:	08005ad9 	.word	0x08005ad9
 8005558:	20003dd8 	.word	0x20003dd8
 800555c:	20003dc4 	.word	0x20003dc4
 8005560:	20003dbc 	.word	0x20003dbc

08005564 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <vTaskSuspendAll+0x18>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a03      	ldr	r2, [pc, #12]	; (800557c <vTaskSuspendAll+0x18>)
 8005570:	6013      	str	r3, [r2, #0]
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20003de0 	.word	0x20003de0

08005580 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800558e:	4b3b      	ldr	r3, [pc, #236]	; (800567c <xTaskResumeAll+0xfc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <xTaskResumeAll+0x2a>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	e7fe      	b.n	80055a8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055aa:	f7fe fc7f 	bl	8003eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <xTaskResumeAll+0xfc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	4a31      	ldr	r2, [pc, #196]	; (800567c <xTaskResumeAll+0xfc>)
 80055b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b8:	4b30      	ldr	r3, [pc, #192]	; (800567c <xTaskResumeAll+0xfc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d155      	bne.n	800566c <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055c0:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <xTaskResumeAll+0x100>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d051      	beq.n	800566c <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c8:	e02e      	b.n	8005628 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055ca:	4b2e      	ldr	r3, [pc, #184]	; (8005684 <xTaskResumeAll+0x104>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3318      	adds	r3, #24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fb17 	bl	8003c0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3304      	adds	r3, #4
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fb12 	bl	8003c0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	2201      	movs	r2, #1
 80055ec:	409a      	lsls	r2, r3
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <xTaskResumeAll+0x108>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	4a24      	ldr	r2, [pc, #144]	; (8005688 <xTaskResumeAll+0x108>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a21      	ldr	r2, [pc, #132]	; (800568c <xTaskResumeAll+0x10c>)
 8005606:	441a      	add	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fe fa9e 	bl	8003b50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <xTaskResumeAll+0x110>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <xTaskResumeAll+0x114>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005628:	4b16      	ldr	r3, [pc, #88]	; (8005684 <xTaskResumeAll+0x104>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1cc      	bne.n	80055ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005636:	f000 fadd 	bl	8005bf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <xTaskResumeAll+0x118>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005646:	f000 f84b 	bl	80056e0 <xTaskIncrementTick>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <xTaskResumeAll+0x114>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3b01      	subs	r3, #1
 800565a:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f1      	bne.n	8005646 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <xTaskResumeAll+0x118>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <xTaskResumeAll+0x114>)
 800566a:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800566c:	f7fe fc4c 	bl	8003f08 <vPortExitCritical>

	return xAlreadyYielded;
 8005670:	687b      	ldr	r3, [r7, #4]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20003de0 	.word	0x20003de0
 8005680:	20003db8 	.word	0x20003db8
 8005684:	20003d78 	.word	0x20003d78
 8005688:	20003dc0 	.word	0x20003dc0
 800568c:	20003cbc 	.word	0x20003cbc
 8005690:	20003cb8 	.word	0x20003cb8
 8005694:	20003dcc 	.word	0x20003dcc
 8005698:	20003dc8 	.word	0x20003dc8

0800569c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <xTaskGetTickCount+0x1c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a8:	687b      	ldr	r3, [r7, #4]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20003dbc 	.word	0x20003dbc

080056bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056c2:	f7fe fccf 	bl	8004064 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80056ca:	4b04      	ldr	r3, [pc, #16]	; (80056dc <xTaskGetTickCountFromISR+0x20>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d0:	683b      	ldr	r3, [r7, #0]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20003dbc 	.word	0x20003dbc

080056e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ea:	4b41      	ldr	r3, [pc, #260]	; (80057f0 <xTaskIncrementTick+0x110>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d173      	bne.n	80057da <xTaskIncrementTick+0xfa>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f2:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <xTaskIncrementTick+0x114>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056fa:	4a3e      	ldr	r2, [pc, #248]	; (80057f4 <xTaskIncrementTick+0x114>)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11f      	bne.n	8005746 <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 8005706:	4b3c      	ldr	r3, [pc, #240]	; (80057f8 <xTaskIncrementTick+0x118>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <xTaskIncrementTick+0x44>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	e7fe      	b.n	8005722 <xTaskIncrementTick+0x42>
 8005724:	4b34      	ldr	r3, [pc, #208]	; (80057f8 <xTaskIncrementTick+0x118>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	4b34      	ldr	r3, [pc, #208]	; (80057fc <xTaskIncrementTick+0x11c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a32      	ldr	r2, [pc, #200]	; (80057f8 <xTaskIncrementTick+0x118>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4a32      	ldr	r2, [pc, #200]	; (80057fc <xTaskIncrementTick+0x11c>)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	4b31      	ldr	r3, [pc, #196]	; (8005800 <xTaskIncrementTick+0x120>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	4a30      	ldr	r2, [pc, #192]	; (8005800 <xTaskIncrementTick+0x120>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	f000 fa57 	bl	8005bf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005746:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <xTaskIncrementTick+0x124>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	429a      	cmp	r2, r3
 800574e:	d349      	bcc.n	80057e4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005750:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <xTaskIncrementTick+0x118>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <xTaskIncrementTick+0x7e>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <xTaskIncrementTick+0x80>
 800575e:	2300      	movs	r3, #0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <xTaskIncrementTick+0x124>)
 8005766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800576a:	601a      	str	r2, [r3, #0]
					break;
 800576c:	e03a      	b.n	80057e4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <xTaskIncrementTick+0x118>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d203      	bcs.n	800578e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005786:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <xTaskIncrementTick+0x124>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]
						break;
 800578c:	e02a      	b.n	80057e4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fa39 	bl	8003c0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	3318      	adds	r3, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe fa30 	bl	8003c0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	2201      	movs	r2, #1
 80057b0:	409a      	lsls	r2, r3
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <xTaskIncrementTick+0x128>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	4a13      	ldr	r2, [pc, #76]	; (8005808 <xTaskIncrementTick+0x128>)
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4a10      	ldr	r2, [pc, #64]	; (800580c <xTaskIncrementTick+0x12c>)
 80057ca:	441a      	add	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f7fe f9bc 	bl	8003b50 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d8:	e7ba      	b.n	8005750 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <xTaskIncrementTick+0x130>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <xTaskIncrementTick+0x130>)
 80057e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057e4:	697b      	ldr	r3, [r7, #20]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20003de0 	.word	0x20003de0
 80057f4:	20003dbc 	.word	0x20003dbc
 80057f8:	20003d70 	.word	0x20003d70
 80057fc:	20003d74 	.word	0x20003d74
 8005800:	20003dd0 	.word	0x20003dd0
 8005804:	20003dd8 	.word	0x20003dd8
 8005808:	20003dc0 	.word	0x20003dc0
 800580c:	20003cbc 	.word	0x20003cbc
 8005810:	20003dc8 	.word	0x20003dc8

08005814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <vTaskSwitchContext+0xa0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <vTaskSwitchContext+0xa4>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005828:	e03e      	b.n	80058a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800582a:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <vTaskSwitchContext+0xa4>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005830:	4b22      	ldr	r3, [pc, #136]	; (80058bc <vTaskSwitchContext+0xa8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	fab3 f383 	clz	r3, r3
 800583c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	f1c3 031f 	rsb	r3, r3, #31
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	491e      	ldr	r1, [pc, #120]	; (80058c0 <vTaskSwitchContext+0xac>)
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <vTaskSwitchContext+0x5a>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e7fe      	b.n	800586c <vTaskSwitchContext+0x58>
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4a11      	ldr	r2, [pc, #68]	; (80058c0 <vTaskSwitchContext+0xac>)
 800587a:	4413      	add	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3308      	adds	r3, #8
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <vTaskSwitchContext+0x8a>
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a07      	ldr	r2, [pc, #28]	; (80058c4 <vTaskSwitchContext+0xb0>)
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20003de0 	.word	0x20003de0
 80058b8:	20003dcc 	.word	0x20003dcc
 80058bc:	20003dc0 	.word	0x20003dc0
 80058c0:	20003cbc 	.word	0x20003cbc
 80058c4:	20003cb8 	.word	0x20003cb8

080058c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <vTaskPlaceOnEventList+0x24>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e7fe      	b.n	80058ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ec:	4b07      	ldr	r3, [pc, #28]	; (800590c <vTaskPlaceOnEventList+0x44>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3318      	adds	r3, #24
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fe f94f 	bl	8003b98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058fa:	2101      	movs	r1, #1
 80058fc:	6838      	ldr	r0, [r7, #0]
 80058fe:	f000 fb79 	bl	8005ff4 <prvAddCurrentTaskToDelayedList>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20003cb8 	.word	0x20003cb8

08005910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <xTaskRemoveFromEventList+0x2a>
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e7fe      	b.n	8005938 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3318      	adds	r3, #24
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe f963 	bl	8003c0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <xTaskRemoveFromEventList+0xac>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11c      	bne.n	8005986 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3304      	adds	r3, #4
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe f95a 	bl	8003c0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	2201      	movs	r2, #1
 800595c:	409a      	lsls	r2, r3
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <xTaskRemoveFromEventList+0xb0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <xTaskRemoveFromEventList+0xb0>)
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <xTaskRemoveFromEventList+0xb4>)
 8005976:	441a      	add	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fe f8e6 	bl	8003b50 <vListInsertEnd>
 8005984:	e005      	b.n	8005992 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3318      	adds	r3, #24
 800598a:	4619      	mov	r1, r3
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <xTaskRemoveFromEventList+0xb8>)
 800598e:	f7fe f8df 	bl	8003b50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <xTaskRemoveFromEventList+0xbc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d905      	bls.n	80059ac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <xTaskRemoveFromEventList+0xc0>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e001      	b.n	80059b0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059b0:	697b      	ldr	r3, [r7, #20]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20003de0 	.word	0x20003de0
 80059c0:	20003dc0 	.word	0x20003dc0
 80059c4:	20003cbc 	.word	0x20003cbc
 80059c8:	20003d78 	.word	0x20003d78
 80059cc:	20003cb8 	.word	0x20003cb8
 80059d0:	20003dcc 	.word	0x20003dcc

080059d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <vTaskInternalSetTimeOutState+0x24>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <vTaskInternalSetTimeOutState+0x28>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20003dd0 	.word	0x20003dd0
 80059fc:	20003dbc 	.word	0x20003dbc

08005a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <xTaskCheckForTimeOut+0x24>
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e7fe      	b.n	8005a22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <xTaskCheckForTimeOut+0x3e>
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e7fe      	b.n	8005a3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a3e:	f7fe fa35 	bl	8003eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <xTaskCheckForTimeOut+0xb8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5a:	d102      	bne.n	8005a62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e023      	b.n	8005aaa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b15      	ldr	r3, [pc, #84]	; (8005abc <xTaskCheckForTimeOut+0xbc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d007      	beq.n	8005a7e <xTaskCheckForTimeOut+0x7e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d802      	bhi.n	8005a7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e015      	b.n	8005aaa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d90b      	bls.n	8005aa0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ff9d 	bl	80059d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e004      	b.n	8005aaa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aaa:	f7fe fa2d 	bl	8003f08 <vPortExitCritical>

	return xReturn;
 8005aae:	69fb      	ldr	r3, [r7, #28]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20003dbc 	.word	0x20003dbc
 8005abc:	20003dd0 	.word	0x20003dd0

08005ac0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ac4:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <vTaskMissedYield+0x14>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20003dcc 	.word	0x20003dcc

08005ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ae0:	f000 f84c 	bl	8005b7c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <prvIdleTask+0x20>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005af4:	e7f4      	b.n	8005ae0 <prvIdleTask+0x8>
 8005af6:	bf00      	nop
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e00c      	b.n	8005b22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <prvInitialiseTaskLists+0x60>)
 8005b14:	4413      	add	r3, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fd ffed 	bl	8003af6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b06      	cmp	r3, #6
 8005b26:	d9ef      	bls.n	8005b08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b28:	480d      	ldr	r0, [pc, #52]	; (8005b60 <prvInitialiseTaskLists+0x64>)
 8005b2a:	f7fd ffe4 	bl	8003af6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b2e:	480d      	ldr	r0, [pc, #52]	; (8005b64 <prvInitialiseTaskLists+0x68>)
 8005b30:	f7fd ffe1 	bl	8003af6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b34:	480c      	ldr	r0, [pc, #48]	; (8005b68 <prvInitialiseTaskLists+0x6c>)
 8005b36:	f7fd ffde 	bl	8003af6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b3a:	480c      	ldr	r0, [pc, #48]	; (8005b6c <prvInitialiseTaskLists+0x70>)
 8005b3c:	f7fd ffdb 	bl	8003af6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b40:	480b      	ldr	r0, [pc, #44]	; (8005b70 <prvInitialiseTaskLists+0x74>)
 8005b42:	f7fd ffd8 	bl	8003af6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <prvInitialiseTaskLists+0x78>)
 8005b48:	4a05      	ldr	r2, [pc, #20]	; (8005b60 <prvInitialiseTaskLists+0x64>)
 8005b4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <prvInitialiseTaskLists+0x7c>)
 8005b4e:	4a05      	ldr	r2, [pc, #20]	; (8005b64 <prvInitialiseTaskLists+0x68>)
 8005b50:	601a      	str	r2, [r3, #0]
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20003cbc 	.word	0x20003cbc
 8005b60:	20003d48 	.word	0x20003d48
 8005b64:	20003d5c 	.word	0x20003d5c
 8005b68:	20003d78 	.word	0x20003d78
 8005b6c:	20003d8c 	.word	0x20003d8c
 8005b70:	20003da4 	.word	0x20003da4
 8005b74:	20003d70 	.word	0x20003d70
 8005b78:	20003d74 	.word	0x20003d74

08005b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b82:	e019      	b.n	8005bb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b84:	f7fe f992 	bl	8003eac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <prvCheckTasksWaitingTermination+0x4c>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe f838 	bl	8003c0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <prvCheckTasksWaitingTermination+0x50>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <prvCheckTasksWaitingTermination+0x50>)
 8005ba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <prvCheckTasksWaitingTermination+0x54>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <prvCheckTasksWaitingTermination+0x54>)
 8005bac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bae:	f7fe f9ab 	bl	8003f08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f80e 	bl	8005bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <prvCheckTasksWaitingTermination+0x54>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e1      	bne.n	8005b84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20003d8c 	.word	0x20003d8c
 8005bcc:	20003db8 	.word	0x20003db8
 8005bd0:	20003da0 	.word	0x20003da0

08005bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fb3f 	bl	8004264 <vPortFree>
			vPortFree( pxTCB );
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fe fb3c 	bl	8004264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <prvResetNextTaskUnblockTime+0x44>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <prvResetNextTaskUnblockTime+0x14>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <prvResetNextTaskUnblockTime+0x16>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <prvResetNextTaskUnblockTime+0x48>)
 8005c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c16:	e008      	b.n	8005c2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <prvResetNextTaskUnblockTime+0x44>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <prvResetNextTaskUnblockTime+0x48>)
 8005c28:	6013      	str	r3, [r2, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20003d70 	.word	0x20003d70
 8005c3c:	20003dd8 	.word	0x20003dd8

08005c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <xTaskGetSchedulerState+0x34>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	e008      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <xTaskGetSchedulerState+0x38>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	e001      	b.n	8005c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c66:	687b      	ldr	r3, [r7, #4]
	}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20003dc4 	.word	0x20003dc4
 8005c78:	20003de0 	.word	0x20003de0

08005c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d06e      	beq.n	8005d70 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <xTaskPriorityInherit+0x100>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d25e      	bcs.n	8005d5e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	db06      	blt.n	8005cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca8:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <xTaskPriorityInherit+0x100>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f1c3 0207 	rsb	r2, r3, #7
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <xTaskPriorityInherit+0x104>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	d101      	bne.n	8005cd2 <xTaskPriorityInherit+0x56>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <xTaskPriorityInherit+0x58>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d03a      	beq.n	8005d4e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd ff94 	bl	8003c0a <uxListRemove>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d115      	bne.n	8005d14 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4924      	ldr	r1, [pc, #144]	; (8005d80 <xTaskPriorityInherit+0x104>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <xTaskPriorityInherit+0x98>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	2201      	movs	r2, #1
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	43da      	mvns	r2, r3
 8005d0a:	4b1e      	ldr	r3, [pc, #120]	; (8005d84 <xTaskPriorityInherit+0x108>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <xTaskPriorityInherit+0x108>)
 8005d12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <xTaskPriorityInherit+0x100>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	2201      	movs	r2, #1
 8005d24:	409a      	lsls	r2, r3
 8005d26:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <xTaskPriorityInherit+0x108>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <xTaskPriorityInherit+0x108>)
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <xTaskPriorityInherit+0x104>)
 8005d3e:	441a      	add	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7fd ff02 	bl	8003b50 <vListInsertEnd>
 8005d4c:	e004      	b.n	8005d58 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <xTaskPriorityInherit+0x100>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e008      	b.n	8005d70 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <xTaskPriorityInherit+0x100>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d201      	bcs.n	8005d70 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d70:	68fb      	ldr	r3, [r7, #12]
	}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20003cb8 	.word	0x20003cb8
 8005d80:	20003cbc 	.word	0x20003cbc
 8005d84:	20003dc0 	.word	0x20003dc0

08005d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d06c      	beq.n	8005e78 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d9e:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <xTaskPriorityDisinherit+0xfc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d009      	beq.n	8005dbc <xTaskPriorityDisinherit+0x34>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e7fe      	b.n	8005dba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <xTaskPriorityDisinherit+0x50>
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	e7fe      	b.n	8005dd6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ddc:	1e5a      	subs	r2, r3, #1
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d044      	beq.n	8005e78 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d140      	bne.n	8005e78 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fd ff05 	bl	8003c0a <uxListRemove>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d115      	bne.n	8005e32 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	491f      	ldr	r1, [pc, #124]	; (8005e88 <xTaskPriorityDisinherit+0x100>)
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <xTaskPriorityDisinherit+0xaa>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	2201      	movs	r2, #1
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43da      	mvns	r2, r3
 8005e28:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <xTaskPriorityDisinherit+0x104>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <xTaskPriorityDisinherit+0x104>)
 8005e30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	f1c3 0207 	rsb	r2, r3, #7
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xTaskPriorityDisinherit+0x104>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <xTaskPriorityDisinherit+0x104>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <xTaskPriorityDisinherit+0x100>)
 8005e66:	441a      	add	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fd fe6e 	bl	8003b50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e78:	697b      	ldr	r3, [r7, #20]
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20003cb8 	.word	0x20003cb8
 8005e88:	20003cbc 	.word	0x20003cbc
 8005e8c:	20003dc0 	.word	0x20003dc0

08005e90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8086 	beq.w	8005fb6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e7fe      	b.n	8005ec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d202      	bcs.n	8005ed6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e002      	b.n	8005edc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d067      	beq.n	8005fb6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d162      	bne.n	8005fb6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ef0:	4b33      	ldr	r3, [pc, #204]	; (8005fc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d109      	bne.n	8005f0e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	e7fe      	b.n	8005f0c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db04      	blt.n	8005f2c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f1c3 0207 	rsb	r2, r3, #7
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6959      	ldr	r1, [r3, #20]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4a22      	ldr	r2, [pc, #136]	; (8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	d101      	bne.n	8005f46 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d034      	beq.n	8005fb6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fd fe5a 	bl	8003c0a <uxListRemove>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d115      	bne.n	8005f88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4918      	ldr	r1, [pc, #96]	; (8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4013      	ands	r3, r2
 8005f84:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f86:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005fa8:	441a      	add	r2, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7fd fdcd 	bl	8003b50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fb6:	bf00      	nop
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20003cb8 	.word	0x20003cb8
 8005fc4:	20003cbc 	.word	0x20003cbc
 8005fc8:	20003dc0 	.word	0x20003dc0

08005fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d004      	beq.n	8005fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fde:	3201      	adds	r2, #1
 8005fe0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
	}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20003cb8 	.word	0x20003cb8

08005ff4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7fd fdfd 	bl	8003c0a <uxListRemove>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	2201      	movs	r2, #1
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43da      	mvns	r2, r3
 8006024:	4b21      	ldr	r3, [pc, #132]	; (80060ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4013      	ands	r3, r2
 800602a:	4a20      	ldr	r2, [pc, #128]	; (80060ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800602c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006034:	d10a      	bne.n	800604c <prvAddCurrentTaskToDelayedList+0x58>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603c:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	481a      	ldr	r0, [pc, #104]	; (80060b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006046:	f7fd fd83 	bl	8003b50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800604a:	e026      	b.n	800609a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006054:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	429a      	cmp	r2, r3
 8006062:	d209      	bcs.n	8006078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006064:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7fd fd91 	bl	8003b98 <vListInsert>
}
 8006076:	e010      	b.n	800609a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fd fd87 	bl	8003b98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d202      	bcs.n	800609a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006094:	4a09      	ldr	r2, [pc, #36]	; (80060bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6013      	str	r3, [r2, #0]
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20003dbc 	.word	0x20003dbc
 80060a8:	20003cb8 	.word	0x20003cb8
 80060ac:	20003dc0 	.word	0x20003dc0
 80060b0:	20003da4 	.word	0x20003da4
 80060b4:	20003d74 	.word	0x20003d74
 80060b8:	20003d70 	.word	0x20003d70
 80060bc:	20003dd8 	.word	0x20003dd8

080060c0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	330c      	adds	r3, #12
 80060d0:	461a      	mov	r2, r3
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 ff8f 	bl	8008ff8 <tcpip_send_msg_wait_sem>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80060de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <netconn_apimsg+0x2e>
    return apimsg->err;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80060ec:	e001      	b.n	80060f2 <netconn_apimsg+0x32>
  }
  return err;
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	603a      	str	r2, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
 8006108:	460b      	mov	r3, r1
 800610a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fef9 	bl	8006f08 <netconn_alloc>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d054      	beq.n	80061c8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800611e:	79bb      	ldrb	r3, [r7, #6]
 8006120:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006126:	f107 030c 	add.w	r3, r7, #12
 800612a:	4619      	mov	r1, r3
 800612c:	4829      	ldr	r0, [pc, #164]	; (80061d4 <netconn_new_with_proto_and_callback+0xd8>)
 800612e:	f7ff ffc7 	bl	80060c0 <netconn_apimsg>
 8006132:	4603      	mov	r3, r0
 8006134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8006138:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800613c:	2b00      	cmp	r3, #0
 800613e:	d043      	beq.n	80061c8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <netconn_new_with_proto_and_callback+0x58>
 8006148:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <netconn_new_with_proto_and_callback+0xdc>)
 800614a:	2289      	movs	r2, #137	; 0x89
 800614c:	4923      	ldr	r1, [pc, #140]	; (80061dc <netconn_new_with_proto_and_callback+0xe0>)
 800614e:	4824      	ldr	r0, [pc, #144]	; (80061e0 <netconn_new_with_proto_and_callback+0xe4>)
 8006150:	f00e fa78 	bl	8014644 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3310      	adds	r3, #16
 8006158:	4618      	mov	r0, r3
 800615a:	f00c ff4b 	bl	8012ff4 <sys_mbox_valid>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <netconn_new_with_proto_and_callback+0x74>
 8006164:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <netconn_new_with_proto_and_callback+0xdc>)
 8006166:	228a      	movs	r2, #138	; 0x8a
 8006168:	491e      	ldr	r1, [pc, #120]	; (80061e4 <netconn_new_with_proto_and_callback+0xe8>)
 800616a:	481d      	ldr	r0, [pc, #116]	; (80061e0 <netconn_new_with_proto_and_callback+0xe4>)
 800616c:	f00e fa6a 	bl	8014644 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	3314      	adds	r3, #20
 8006174:	4618      	mov	r0, r3
 8006176:	f00c ff3d 	bl	8012ff4 <sys_mbox_valid>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <netconn_new_with_proto_and_callback+0x90>
 8006180:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <netconn_new_with_proto_and_callback+0xdc>)
 8006182:	228c      	movs	r2, #140	; 0x8c
 8006184:	4918      	ldr	r1, [pc, #96]	; (80061e8 <netconn_new_with_proto_and_callback+0xec>)
 8006186:	4816      	ldr	r0, [pc, #88]	; (80061e0 <netconn_new_with_proto_and_callback+0xe4>)
 8006188:	f00e fa5c 	bl	8014644 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	330c      	adds	r3, #12
 8006190:	4618      	mov	r0, r3
 8006192:	f00c ffbe 	bl	8013112 <sys_sem_valid>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <netconn_new_with_proto_and_callback+0xac>
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <netconn_new_with_proto_and_callback+0xdc>)
 800619e:	228f      	movs	r2, #143	; 0x8f
 80061a0:	4912      	ldr	r1, [pc, #72]	; (80061ec <netconn_new_with_proto_and_callback+0xf0>)
 80061a2:	480f      	ldr	r0, [pc, #60]	; (80061e0 <netconn_new_with_proto_and_callback+0xe4>)
 80061a4:	f00e fa4e 	bl	8014644 <iprintf>
      sys_sem_free(&conn->op_completed);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	330c      	adds	r3, #12
 80061ac:	4618      	mov	r0, r3
 80061ae:	f00c ffa3 	bl	80130f8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	3310      	adds	r3, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f00c fe80 	bl	8012ebc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80061bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061be:	2007      	movs	r0, #7
 80061c0:	f005 fe4a 	bl	800be58 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	08006ea5 	.word	0x08006ea5
 80061d8:	08015454 	.word	0x08015454
 80061dc:	08015488 	.word	0x08015488
 80061e0:	080154ac 	.word	0x080154ac
 80061e4:	080154d4 	.word	0x080154d4
 80061e8:	080154ec 	.word	0x080154ec
 80061ec:	08015510 	.word	0x08015510

080061f0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <netconn_delete+0x12>
    return ERR_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e016      	b.n	8006230 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006206:	2329      	movs	r3, #41	; 0x29
 8006208:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4619      	mov	r1, r3
 8006210:	4809      	ldr	r0, [pc, #36]	; (8006238 <netconn_delete+0x48>)
 8006212:	f7ff ff55 	bl	80060c0 <netconn_apimsg>
 8006216:	4603      	mov	r3, r0
 8006218:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800621a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <netconn_delete+0x38>
    return err;
 8006222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006226:	e003      	b.n	8006230 <netconn_delete+0x40>
  }

  netconn_free(conn);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fedd 	bl	8006fe8 <netconn_free>

  return ERR_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	08007461 	.word	0x08007461

0800623c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d108      	bne.n	8006262 <netconn_getaddr+0x26>
 8006250:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <netconn_getaddr+0x88>)
 8006252:	22d9      	movs	r2, #217	; 0xd9
 8006254:	491c      	ldr	r1, [pc, #112]	; (80062c8 <netconn_getaddr+0x8c>)
 8006256:	481d      	ldr	r0, [pc, #116]	; (80062cc <netconn_getaddr+0x90>)
 8006258:	f00e f9f4 	bl	8014644 <iprintf>
 800625c:	f06f 030f 	mvn.w	r3, #15
 8006260:	e02b      	b.n	80062ba <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d108      	bne.n	800627a <netconn_getaddr+0x3e>
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <netconn_getaddr+0x88>)
 800626a:	22da      	movs	r2, #218	; 0xda
 800626c:	4918      	ldr	r1, [pc, #96]	; (80062d0 <netconn_getaddr+0x94>)
 800626e:	4817      	ldr	r0, [pc, #92]	; (80062cc <netconn_getaddr+0x90>)
 8006270:	f00e f9e8 	bl	8014644 <iprintf>
 8006274:	f06f 030f 	mvn.w	r3, #15
 8006278:	e01f      	b.n	80062ba <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d108      	bne.n	8006292 <netconn_getaddr+0x56>
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <netconn_getaddr+0x88>)
 8006282:	22db      	movs	r2, #219	; 0xdb
 8006284:	4913      	ldr	r1, [pc, #76]	; (80062d4 <netconn_getaddr+0x98>)
 8006286:	4811      	ldr	r0, [pc, #68]	; (80062cc <netconn_getaddr+0x90>)
 8006288:	f00e f9dc 	bl	8014644 <iprintf>
 800628c:	f06f 030f 	mvn.w	r3, #15
 8006290:	e013      	b.n	80062ba <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	f887 3020 	strb.w	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	61bb      	str	r3, [r7, #24]
  msg.msg.ad.port = port;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	61fb      	str	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80062a4:	f107 0310 	add.w	r3, r7, #16
 80062a8:	4619      	mov	r1, r3
 80062aa:	480b      	ldr	r0, [pc, #44]	; (80062d8 <netconn_getaddr+0x9c>)
 80062ac:	f7ff ff08 	bl	80060c0 <netconn_apimsg>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 80062b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3728      	adds	r7, #40	; 0x28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08015454 	.word	0x08015454
 80062c8:	0801552c 	.word	0x0801552c
 80062cc:	080154ac 	.word	0x080154ac
 80062d0:	0801554c 	.word	0x0801554c
 80062d4:	0801556c 	.word	0x0801556c
 80062d8:	08007ef9 	.word	0x08007ef9

080062dc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <netconn_connect+0x28>
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <netconn_connect+0x5c>)
 80062f2:	f240 122b 	movw	r2, #299	; 0x12b
 80062f6:	4911      	ldr	r1, [pc, #68]	; (800633c <netconn_connect+0x60>)
 80062f8:	4811      	ldr	r0, [pc, #68]	; (8006340 <netconn_connect+0x64>)
 80062fa:	f00e f9a3 	bl	8014644 <iprintf>
 80062fe:	f06f 030f 	mvn.w	r3, #15
 8006302:	e015      	b.n	8006330 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800630a:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <netconn_connect+0x68>)
 800630c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800631a:	f107 0310 	add.w	r3, r7, #16
 800631e:	4619      	mov	r1, r3
 8006320:	4809      	ldr	r0, [pc, #36]	; (8006348 <netconn_connect+0x6c>)
 8006322:	f7ff fecd 	bl	80060c0 <netconn_apimsg>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800632c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	08015454 	.word	0x08015454
 800633c:	080155a8 	.word	0x080155a8
 8006340:	080154ac 	.word	0x080154ac
 8006344:	08017f40 	.word	0x08017f40
 8006348:	08007759 	.word	0x08007759

0800634c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <netconn_disconnect+0x22>
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <netconn_disconnect+0x44>)
 800635c:	f240 124b 	movw	r2, #331	; 0x14b
 8006360:	490c      	ldr	r1, [pc, #48]	; (8006394 <netconn_disconnect+0x48>)
 8006362:	480d      	ldr	r0, [pc, #52]	; (8006398 <netconn_disconnect+0x4c>)
 8006364:	f00e f96e 	bl	8014644 <iprintf>
 8006368:	f06f 030f 	mvn.w	r3, #15
 800636c:	e00b      	b.n	8006386 <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	4619      	mov	r1, r3
 8006378:	4808      	ldr	r0, [pc, #32]	; (800639c <netconn_disconnect+0x50>)
 800637a:	f7ff fea1 	bl	80060c0 <netconn_apimsg>
 800637e:	4603      	mov	r3, r0
 8006380:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006382:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	08015454 	.word	0x08015454
 8006394:	080155c8 	.word	0x080155c8
 8006398:	080154ac 	.word	0x080154ac
 800639c:	080078c5 	.word	0x080078c5

080063a0 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <netconn_recv_data+0x28>
 80063b4:	4b5c      	ldr	r3, [pc, #368]	; (8006528 <netconn_recv_data+0x188>)
 80063b6:	f240 12e7 	movw	r2, #487	; 0x1e7
 80063ba:	495c      	ldr	r1, [pc, #368]	; (800652c <netconn_recv_data+0x18c>)
 80063bc:	485c      	ldr	r0, [pc, #368]	; (8006530 <netconn_recv_data+0x190>)
 80063be:	f00e f941 	bl	8014644 <iprintf>
 80063c2:	f06f 030f 	mvn.w	r3, #15
 80063c6:	e0aa      	b.n	800651e <netconn_recv_data+0x17e>
  *new_buf = NULL;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <netconn_recv_data+0x48>
 80063d4:	4b54      	ldr	r3, [pc, #336]	; (8006528 <netconn_recv_data+0x188>)
 80063d6:	f240 12e9 	movw	r2, #489	; 0x1e9
 80063da:	4956      	ldr	r1, [pc, #344]	; (8006534 <netconn_recv_data+0x194>)
 80063dc:	4854      	ldr	r0, [pc, #336]	; (8006530 <netconn_recv_data+0x190>)
 80063de:	f00e f931 	bl	8014644 <iprintf>
 80063e2:	f06f 030f 	mvn.w	r3, #15
 80063e6:	e09a      	b.n	800651e <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d115      	bne.n	8006420 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3310      	adds	r3, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	f00c fdfb 	bl	8012ff4 <sys_mbox_valid>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10d      	bne.n	8006420 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3314      	adds	r3, #20
 8006408:	4618      	mov	r0, r3
 800640a:	f00c fdf3 	bl	8012ff4 <sys_mbox_valid>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <netconn_recv_data+0x7a>
 8006414:	f06f 030a 	mvn.w	r3, #10
 8006418:	e081      	b.n	800651e <netconn_recv_data+0x17e>
 800641a:	f06f 030e 	mvn.w	r3, #14
 800641e:	e07e      	b.n	800651e <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3310      	adds	r3, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f00c fde5 	bl	8012ff4 <sys_mbox_valid>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <netconn_recv_data+0xa4>
 8006430:	4b3d      	ldr	r3, [pc, #244]	; (8006528 <netconn_recv_data+0x188>)
 8006432:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006436:	4940      	ldr	r1, [pc, #256]	; (8006538 <netconn_recv_data+0x198>)
 8006438:	483d      	ldr	r0, [pc, #244]	; (8006530 <netconn_recv_data+0x190>)
 800643a:	f00e f903 	bl	8014644 <iprintf>
 800643e:	f06f 030a 	mvn.w	r3, #10
 8006442:	e06c      	b.n	800651e <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800644a:	f113 0f0c 	cmn.w	r3, #12
 800644e:	da03      	bge.n	8006458 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006456:	e062      	b.n	800651e <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3310      	adds	r3, #16
 800645c:	f107 0120 	add.w	r1, r7, #32
 8006460:	2200      	movs	r2, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f00c fd6b 	bl	8012f3e <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006470:	2b10      	cmp	r3, #16
 8006472:	d138      	bne.n	80064e6 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	891b      	ldrh	r3, [r3, #8]
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e001      	b.n	800648a <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800648a:	f107 030c 	add.w	r3, r7, #12
 800648e:	4619      	mov	r1, r3
 8006490:	482a      	ldr	r0, [pc, #168]	; (800653c <netconn_recv_data+0x19c>)
 8006492:	f7ff fe15 	bl	80060c0 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d120      	bne.n	80064de <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <netconn_recv_data+0x110>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	2200      	movs	r2, #0
 80064aa:	2101      	movs	r1, #1
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <netconn_recv_data+0x12a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80064c8:	e029      	b.n	800651e <netconn_recv_data+0x17e>
 80064ca:	f06f 030d 	mvn.w	r3, #13
 80064ce:	e026      	b.n	800651e <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80064d0:	2101      	movs	r1, #1
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f97a 	bl	80067cc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80064d8:	f06f 030e 	mvn.w	r3, #14
 80064dc:	e01f      	b.n	800651e <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	891b      	ldrh	r3, [r3, #8]
 80064e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064e4:	e00d      	b.n	8006502 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <netconn_recv_data+0x15a>
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <netconn_recv_data+0x188>)
 80064ee:	f240 223e 	movw	r2, #574	; 0x23e
 80064f2:	4913      	ldr	r1, [pc, #76]	; (8006540 <netconn_recv_data+0x1a0>)
 80064f4:	480e      	ldr	r0, [pc, #56]	; (8006530 <netconn_recv_data+0x190>)
 80064f6:	f00e f8a5 	bl	8014644 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	891b      	ldrh	r3, [r3, #8]
 8006500:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <netconn_recv_data+0x176>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006510:	2101      	movs	r1, #1
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3728      	adds	r7, #40	; 0x28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	08015454 	.word	0x08015454
 800652c:	0801564c 	.word	0x0801564c
 8006530:	080154ac 	.word	0x080154ac
 8006534:	0801566c 	.word	0x0801566c
 8006538:	08015688 	.word	0x08015688
 800653c:	08007a15 	.word	0x08007a15
 8006540:	080156a8 	.word	0x080156a8

08006544 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <netconn_recv_tcp_pbuf+0x1c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800655c:	2b10      	cmp	r3, #16
 800655e:	d009      	beq.n	8006574 <netconn_recv_tcp_pbuf+0x30>
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <netconn_recv_tcp_pbuf+0x44>)
 8006562:	f240 225e 	movw	r2, #606	; 0x25e
 8006566:	4909      	ldr	r1, [pc, #36]	; (800658c <netconn_recv_tcp_pbuf+0x48>)
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <netconn_recv_tcp_pbuf+0x4c>)
 800656a:	f00e f86b 	bl	8014644 <iprintf>
 800656e:	f06f 030f 	mvn.w	r3, #15
 8006572:	e004      	b.n	800657e <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff12 	bl	80063a0 <netconn_recv_data>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	08015454 	.word	0x08015454
 800658c:	0801566c 	.word	0x0801566c
 8006590:	080154ac 	.word	0x080154ac

08006594 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <netconn_recv+0x28>
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <netconn_recv+0xdc>)
 80065aa:	f44f 721d 	mov.w	r2, #628	; 0x274
 80065ae:	4931      	ldr	r1, [pc, #196]	; (8006674 <netconn_recv+0xe0>)
 80065b0:	4831      	ldr	r0, [pc, #196]	; (8006678 <netconn_recv+0xe4>)
 80065b2:	f00e f847 	bl	8014644 <iprintf>
 80065b6:	f06f 030f 	mvn.w	r3, #15
 80065ba:	e054      	b.n	8006666 <netconn_recv+0xd2>
  *new_buf = NULL;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <netconn_recv+0x48>
 80065c8:	4b29      	ldr	r3, [pc, #164]	; (8006670 <netconn_recv+0xdc>)
 80065ca:	f240 2276 	movw	r2, #630	; 0x276
 80065ce:	492b      	ldr	r1, [pc, #172]	; (800667c <netconn_recv+0xe8>)
 80065d0:	4829      	ldr	r0, [pc, #164]	; (8006678 <netconn_recv+0xe4>)
 80065d2:	f00e f837 	bl	8014644 <iprintf>
 80065d6:	f06f 030f 	mvn.w	r3, #15
 80065da:	e044      	b.n	8006666 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d139      	bne.n	800665c <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80065ec:	2006      	movs	r0, #6
 80065ee:	f005 fbe1 	bl	800bdb4 <memp_malloc>
 80065f2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <netconn_recv+0x6c>
      return ERR_MEM;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065fe:	e032      	b.n	8006666 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff feca 	bl	80063a0 <netconn_recv_data>
 800660c:	4603      	mov	r3, r0
 800660e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8006610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8006618:	6979      	ldr	r1, [r7, #20]
 800661a:	2006      	movs	r0, #6
 800661c:	f005 fc1c 	bl	800be58 <memp_free>
      return err;
 8006620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006624:	e01f      	b.n	8006666 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <netconn_recv+0xa6>
 800662c:	4b10      	ldr	r3, [pc, #64]	; (8006670 <netconn_recv+0xdc>)
 800662e:	f240 228a 	movw	r2, #650	; 0x28a
 8006632:	4913      	ldr	r1, [pc, #76]	; (8006680 <netconn_recv+0xec>)
 8006634:	4810      	ldr	r0, [pc, #64]	; (8006678 <netconn_recv+0xe4>)
 8006636:	f00e f805 	bl	8014644 <iprintf>

    buf->p = p;
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e004      	b.n	8006666 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fe9e 	bl	80063a0 <netconn_recv_data>
 8006664:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	08015454 	.word	0x08015454
 8006674:	0801564c 	.word	0x0801564c
 8006678:	080154ac 	.word	0x080154ac
 800667c:	0801566c 	.word	0x0801566c
 8006680:	080156b4 	.word	0x080156b4

08006684 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <netconn_send+0x24>
 8006694:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <netconn_send+0x48>)
 8006696:	f240 22c3 	movw	r2, #707	; 0x2c3
 800669a:	490d      	ldr	r1, [pc, #52]	; (80066d0 <netconn_send+0x4c>)
 800669c:	480d      	ldr	r0, [pc, #52]	; (80066d4 <netconn_send+0x50>)
 800669e:	f00d ffd1 	bl	8014644 <iprintf>
 80066a2:	f06f 030f 	mvn.w	r3, #15
 80066a6:	e00d      	b.n	80066c4 <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80066b0:	f107 0308 	add.w	r3, r7, #8
 80066b4:	4619      	mov	r1, r3
 80066b6:	4808      	ldr	r0, [pc, #32]	; (80066d8 <netconn_send+0x54>)
 80066b8:	f7ff fd02 	bl	80060c0 <netconn_apimsg>
 80066bc:	4603      	mov	r3, r0
 80066be:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80066c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3720      	adds	r7, #32
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	08015454 	.word	0x08015454
 80066d0:	080156c0 	.word	0x080156c0
 80066d4:	080154ac 	.word	0x080154ac
 80066d8:	0800793b 	.word	0x0800793b

080066dc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <netconn_write_partly+0x28>
 80066f0:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <netconn_write_partly+0xdc>)
 80066f2:	f240 22e6 	movw	r2, #742	; 0x2e6
 80066f6:	4931      	ldr	r1, [pc, #196]	; (80067bc <netconn_write_partly+0xe0>)
 80066f8:	4831      	ldr	r0, [pc, #196]	; (80067c0 <netconn_write_partly+0xe4>)
 80066fa:	f00d ffa3 	bl	8014644 <iprintf>
 80066fe:	f06f 030f 	mvn.w	r3, #15
 8006702:	e054      	b.n	80067ae <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670c:	2b10      	cmp	r3, #16
 800670e:	d009      	beq.n	8006724 <netconn_write_partly+0x48>
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <netconn_write_partly+0xdc>)
 8006712:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006716:	492b      	ldr	r1, [pc, #172]	; (80067c4 <netconn_write_partly+0xe8>)
 8006718:	4829      	ldr	r0, [pc, #164]	; (80067c0 <netconn_write_partly+0xe4>)
 800671a:	f00d ff93 	bl	8014644 <iprintf>
 800671e:	f06f 0305 	mvn.w	r3, #5
 8006722:	e044      	b.n	80067ae <netconn_write_partly+0xd2>
  if (size == 0) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <netconn_write_partly+0x52>
    return ERR_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e03f      	b.n	80067ae <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	7f1b      	ldrb	r3, [r3, #28]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d104      	bne.n	8006744 <netconn_write_partly+0x68>
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <netconn_write_partly+0x6c>
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <netconn_write_partly+0x6e>
 8006748:	2300      	movs	r3, #0
 800674a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800674e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <netconn_write_partly+0x86>
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800675c:	f06f 0305 	mvn.w	r3, #5
 8006760:	e025      	b.n	80067ae <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	4619      	mov	r1, r3
 800677a:	4813      	ldr	r0, [pc, #76]	; (80067c8 <netconn_write_partly+0xec>)
 800677c:	f7ff fca0 	bl	80060c0 <netconn_apimsg>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8006786:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <netconn_write_partly+0xce>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <netconn_write_partly+0xce>
    if (dontblock) {
 8006794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e002      	b.n	80067aa <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80067aa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3728      	adds	r7, #40	; 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	08015454 	.word	0x08015454
 80067bc:	080156dc 	.word	0x080156dc
 80067c0:	080154ac 	.word	0x080154ac
 80067c4:	080156f8 	.word	0x080156f8
 80067c8:	08007ded 	.word	0x08007ded

080067cc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <netconn_close_shutdown+0x26>
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <netconn_close_shutdown+0x50>)
 80067e0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80067e4:	490e      	ldr	r1, [pc, #56]	; (8006820 <netconn_close_shutdown+0x54>)
 80067e6:	480f      	ldr	r0, [pc, #60]	; (8006824 <netconn_close_shutdown+0x58>)
 80067e8:	f00d ff2c 	bl	8014644 <iprintf>
 80067ec:	f06f 030f 	mvn.w	r3, #15
 80067f0:	e00f      	b.n	8006812 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80067fa:	2329      	movs	r3, #41	; 0x29
 80067fc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80067fe:	f107 0308 	add.w	r3, r7, #8
 8006802:	4619      	mov	r1, r3
 8006804:	4808      	ldr	r0, [pc, #32]	; (8006828 <netconn_close_shutdown+0x5c>)
 8006806:	f7ff fc5b 	bl	80060c0 <netconn_apimsg>
 800680a:	4603      	mov	r3, r0
 800680c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800680e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	08015454 	.word	0x08015454
 8006820:	0801571c 	.word	0x0801571c
 8006824:	080154ac 	.word	0x080154ac
 8006828:	0800803d 	.word	0x0800803d

0800682c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d105      	bne.n	800684c <recv_udp+0x20>
 8006840:	4b34      	ldr	r3, [pc, #208]	; (8006914 <recv_udp+0xe8>)
 8006842:	22b1      	movs	r2, #177	; 0xb1
 8006844:	4934      	ldr	r1, [pc, #208]	; (8006918 <recv_udp+0xec>)
 8006846:	4835      	ldr	r0, [pc, #212]	; (800691c <recv_udp+0xf0>)
 8006848:	f00d fefc 	bl	8014644 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <recv_udp+0x32>
 8006852:	4b30      	ldr	r3, [pc, #192]	; (8006914 <recv_udp+0xe8>)
 8006854:	22b2      	movs	r2, #178	; 0xb2
 8006856:	4932      	ldr	r1, [pc, #200]	; (8006920 <recv_udp+0xf4>)
 8006858:	4830      	ldr	r0, [pc, #192]	; (800691c <recv_udp+0xf0>)
 800685a:	f00d fef3 	bl	8014644 <iprintf>
  conn = (struct netconn *)arg;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <recv_udp+0x44>
    pbuf_free(p);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f006 f84f 	bl	800c90c <pbuf_free>
    return;
 800686e:	e04d      	b.n	800690c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d005      	beq.n	8006886 <recv_udp+0x5a>
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <recv_udp+0xe8>)
 800687c:	22ba      	movs	r2, #186	; 0xba
 800687e:	4929      	ldr	r1, [pc, #164]	; (8006924 <recv_udp+0xf8>)
 8006880:	4826      	ldr	r0, [pc, #152]	; (800691c <recv_udp+0xf0>)
 8006882:	f00d fedf 	bl	8014644 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	3310      	adds	r3, #16
 800688a:	4618      	mov	r0, r3
 800688c:	f00c fbb2 	bl	8012ff4 <sys_mbox_valid>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f006 f838 	bl	800c90c <pbuf_free>
    return;
 800689c:	e036      	b.n	800690c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800689e:	2006      	movs	r0, #6
 80068a0:	f005 fa88 	bl	800bdb4 <memp_malloc>
 80068a4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <recv_udp+0x88>
    pbuf_free(p);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f006 f82d 	bl	800c90c <pbuf_free>
    return;
 80068b2:	e02b      	b.n	800690c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <recv_udp+0xa0>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	e000      	b.n	80068ce <recv_udp+0xa2>
 80068cc:	2300      	movs	r3, #0
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80068d6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	891b      	ldrh	r3, [r3, #8]
 80068dc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	3310      	adds	r3, #16
 80068e2:	69b9      	ldr	r1, [r7, #24]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f00c fb10 	bl	8012f0a <sys_mbox_trypost>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <recv_udp+0xcc>
    netbuf_delete(buf);
 80068f0:	69b8      	ldr	r0, [r7, #24]
 80068f2:	f001 fc3f 	bl	8008174 <netbuf_delete>
    return;
 80068f6:	e009      	b.n	800690c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <recv_udp+0xe0>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	8afa      	ldrh	r2, [r7, #22]
 8006906:	2100      	movs	r1, #0
 8006908:	69f8      	ldr	r0, [r7, #28]
 800690a:	4798      	blx	r3
  }
}
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	08015738 	.word	0x08015738
 8006918:	0801576c 	.word	0x0801576c
 800691c:	08015790 	.word	0x08015790
 8006920:	080157b8 	.word	0x080157b8
 8006924:	080157d8 	.word	0x080157d8

08006928 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <recv_tcp+0x20>
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <recv_tcp+0xfc>)
 800693e:	22f9      	movs	r2, #249	; 0xf9
 8006940:	4939      	ldr	r1, [pc, #228]	; (8006a28 <recv_tcp+0x100>)
 8006942:	483a      	ldr	r0, [pc, #232]	; (8006a2c <recv_tcp+0x104>)
 8006944:	f00d fe7e 	bl	8014644 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <recv_tcp+0x32>
 800694e:	4b35      	ldr	r3, [pc, #212]	; (8006a24 <recv_tcp+0xfc>)
 8006950:	22fa      	movs	r2, #250	; 0xfa
 8006952:	4937      	ldr	r1, [pc, #220]	; (8006a30 <recv_tcp+0x108>)
 8006954:	4835      	ldr	r0, [pc, #212]	; (8006a2c <recv_tcp+0x104>)
 8006956:	f00d fe75 	bl	8014644 <iprintf>
  conn = (struct netconn *)arg;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <recv_tcp+0x42>
    return ERR_VAL;
 8006964:	f06f 0305 	mvn.w	r3, #5
 8006968:	e057      	b.n	8006a1a <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	d006      	beq.n	8006982 <recv_tcp+0x5a>
 8006974:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <recv_tcp+0xfc>)
 8006976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697a:	492e      	ldr	r1, [pc, #184]	; (8006a34 <recv_tcp+0x10c>)
 800697c:	482b      	ldr	r0, [pc, #172]	; (8006a2c <recv_tcp+0x104>)
 800697e:	f00d fe61 	bl	8014644 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	3310      	adds	r3, #16
 8006986:	4618      	mov	r0, r3
 8006988:	f00c fb34 	bl	8012ff4 <sys_mbox_valid>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10d      	bne.n	80069ae <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	891b      	ldrh	r3, [r3, #8]
 800699c:	4619      	mov	r1, r3
 800699e:	68b8      	ldr	r0, [r7, #8]
 80069a0:	f006 fd66 	bl	800d470 <tcp_recved>
      pbuf_free(p);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f005 ffb1 	bl	800c90c <pbuf_free>
    }
    return ERR_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e035      	b.n	8006a1a <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80069ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00e      	beq.n	80069da <recv_tcp+0xb2>
 80069bc:	f00c fc2a 	bl	8013214 <sys_arch_protect>
 80069c0:	6178      	str	r0, [r7, #20]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80069c8:	f113 0f0c 	cmn.w	r3, #12
 80069cc:	db02      	blt.n	80069d4 <recv_tcp+0xac>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	721a      	strb	r2, [r3, #8]
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	f00c fc2b 	bl	8013230 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <recv_tcp+0xc0>
    len = p->tot_len;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	891b      	ldrh	r3, [r3, #8]
 80069e4:	83fb      	strh	r3, [r7, #30]
 80069e6:	e001      	b.n	80069ec <recv_tcp+0xc4>
  } else {
    len = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3310      	adds	r3, #16
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f00c fa89 	bl	8012f0a <sys_mbox_trypost>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a02:	e00a      	b.n	8006a1a <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <recv_tcp+0xf0>
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	8bfa      	ldrh	r2, [r7, #30]
 8006a12:	2100      	movs	r1, #0
 8006a14:	69b8      	ldr	r0, [r7, #24]
 8006a16:	4798      	blx	r3
  }

  return ERR_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3720      	adds	r7, #32
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	08015738 	.word	0x08015738
 8006a28:	080157f8 	.word	0x080157f8
 8006a2c:	08015790 	.word	0x08015790
 8006a30:	0801581c 	.word	0x0801581c
 8006a34:	0801583c 	.word	0x0801583c

08006a38 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <poll_tcp+0x22>
 8006a4c:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <poll_tcp+0xb8>)
 8006a4e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006a52:	4928      	ldr	r1, [pc, #160]	; (8006af4 <poll_tcp+0xbc>)
 8006a54:	4828      	ldr	r0, [pc, #160]	; (8006af8 <poll_tcp+0xc0>)
 8006a56:	f00d fdf5 	bl	8014644 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d103      	bne.n	8006a6a <poll_tcp+0x32>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f001 f828 	bl	8007ab8 <lwip_netconn_do_writemore>
 8006a68:	e015      	b.n	8006a96 <poll_tcp+0x5e>
  } else if (conn->state == NETCONN_CLOSE) {
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d111      	bne.n	8006a96 <poll_tcp+0x5e>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <poll_tcp+0x58>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	7a5b      	ldrb	r3, [r3, #9]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <poll_tcp+0x58>
      conn->current_msg->msg.sd.polls_left--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	7a5a      	ldrb	r2, [r3, #9]
 8006a8a:	3a01      	subs	r2, #1
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 fb73 	bl	800717c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	7f1b      	ldrb	r3, [r3, #28]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d021      	beq.n	8006ae6 <poll_tcp+0xae>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01d      	beq.n	8006ae6 <poll_tcp+0xae>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ab2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006ab6:	d316      	bcc.n	8006ae6 <poll_tcp+0xae>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d810      	bhi.n	8006ae6 <poll_tcp+0xae>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	7f1b      	ldrb	r3, [r3, #28]
 8006ac8:	f023 0310 	bic.w	r3, r3, #16
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <poll_tcp+0xae>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2102      	movs	r1, #2
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	08015738 	.word	0x08015738
 8006af4:	0801585c 	.word	0x0801585c
 8006af8:	08015790 	.word	0x08015790

08006afc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <sent_tcp+0x26>
 8006b14:	4b1f      	ldr	r3, [pc, #124]	; (8006b94 <sent_tcp+0x98>)
 8006b16:	f240 1261 	movw	r2, #353	; 0x161
 8006b1a:	491f      	ldr	r1, [pc, #124]	; (8006b98 <sent_tcp+0x9c>)
 8006b1c:	481f      	ldr	r0, [pc, #124]	; (8006b9c <sent_tcp+0xa0>)
 8006b1e:	f00d fd91 	bl	8014644 <iprintf>

  if (conn) {
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d030      	beq.n	8006b8a <sent_tcp+0x8e>
    if (conn->state == NETCONN_WRITE) {
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d103      	bne.n	8006b38 <sent_tcp+0x3c>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006b30:	6978      	ldr	r0, [r7, #20]
 8006b32:	f000 ffc1 	bl	8007ab8 <lwip_netconn_do_writemore>
 8006b36:	e006      	b.n	8006b46 <sent_tcp+0x4a>
    } else if (conn->state == NETCONN_CLOSE) {
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d102      	bne.n	8006b46 <sent_tcp+0x4a>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006b40:	6978      	ldr	r0, [r7, #20]
 8006b42:	f000 fb1b 	bl	800717c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01d      	beq.n	8006b8a <sent_tcp+0x8e>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b56:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006b5a:	d316      	bcc.n	8006b8a <sent_tcp+0x8e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d810      	bhi.n	8006b8a <sent_tcp+0x8e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	7f1b      	ldrb	r3, [r3, #28]
 8006b6c:	f023 0310 	bic.w	r3, r3, #16
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <sent_tcp+0x8e>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	2102      	movs	r1, #2
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	08015738 	.word	0x08015738
 8006b98:	0801585c 	.word	0x0801585c
 8006b9c:	08015790 	.word	0x08015790

08006ba0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <err_tcp+0x24>
 8006bb6:	4b6c      	ldr	r3, [pc, #432]	; (8006d68 <err_tcp+0x1c8>)
 8006bb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006bbc:	496b      	ldr	r1, [pc, #428]	; (8006d6c <err_tcp+0x1cc>)
 8006bbe:	486c      	ldr	r0, [pc, #432]	; (8006d70 <err_tcp+0x1d0>)
 8006bc0:	f00d fd40 	bl	8014644 <iprintf>

  conn->pcb.tcp = NULL;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8006bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d114      	bne.n	8006c0a <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <err_tcp+0x7c>
 8006bea:	f00c fb13 	bl	8013214 <sys_arch_protect>
 8006bee:	61f8      	str	r0, [r7, #28]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006bf6:	f113 0f0c 	cmn.w	r3, #12
 8006bfa:	db02      	blt.n	8006c02 <err_tcp+0x62>
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2200      	movs	r2, #0
 8006c00:	721a      	strb	r2, [r3, #8]
 8006c02:	69f8      	ldr	r0, [r7, #28]
 8006c04:	f00c fb14 	bl	8013230 <sys_arch_unprotect>
 8006c08:	e008      	b.n	8006c1c <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8006c0a:	f00c fb03 	bl	8013214 <sys_arch_protect>
 8006c0e:	61b8      	str	r0, [r7, #24]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	721a      	strb	r2, [r3, #8]
 8006c16:	69b8      	ldr	r0, [r7, #24]
 8006c18:	f00c fb0a 	bl	8013230 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <err_tcp+0x90>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2104      	movs	r1, #4
 8006c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2e:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <err_tcp+0xa4>
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c42:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <err_tcp+0xb8>
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	2200      	movs	r2, #0
 8006c52:	2102      	movs	r1, #2
 8006c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c56:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f00c f9c9 	bl	8012ff4 <sys_mbox_valid>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	3310      	adds	r3, #16
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f00c f94b 	bl	8012f0a <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	3314      	adds	r3, #20
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f00c f9bb 	bl	8012ff4 <sys_mbox_valid>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	3314      	adds	r3, #20
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f00c f93d 	bl	8012f0a <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006c90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d007      	beq.n	8006ca8 <err_tcp+0x108>
 8006c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d003      	beq.n	8006ca8 <err_tcp+0x108>
 8006ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d14d      	bne.n	8006d44 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	7f1b      	ldrb	r3, [r3, #28]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bf14      	ite	ne
 8006cb4:	2301      	movne	r3, #1
 8006cb6:	2300      	moveq	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	7f1b      	ldrb	r3, [r3, #28]
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d145      	bne.n	8006d5c <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <err_tcp+0x146>
 8006cd8:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <err_tcp+0x1c8>)
 8006cda:	f240 12b3 	movw	r2, #435	; 0x1b3
 8006cde:	4925      	ldr	r1, [pc, #148]	; (8006d74 <err_tcp+0x1d4>)
 8006ce0:	4823      	ldr	r0, [pc, #140]	; (8006d70 <err_tcp+0x1d0>)
 8006ce2:	f00d fcaf 	bl	8014644 <iprintf>
      conn->current_msg->err = err;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006cf8:	6938      	ldr	r0, [r7, #16]
 8006cfa:	f00c fa0a 	bl	8013112 <sys_sem_valid>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d106      	bne.n	8006d12 <err_tcp+0x172>
 8006d04:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <err_tcp+0x1c8>)
 8006d06:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8006d0a:	491b      	ldr	r1, [pc, #108]	; (8006d78 <err_tcp+0x1d8>)
 8006d0c:	4818      	ldr	r0, [pc, #96]	; (8006d70 <err_tcp+0x1d0>)
 8006d0e:	f00d fc99 	bl	8014644 <iprintf>
      conn->current_msg = NULL;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	2200      	movs	r2, #0
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <err_tcp+0x19c>
 8006d1e:	f00c fa79 	bl	8013214 <sys_arch_protect>
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006d2a:	f113 0f0c 	cmn.w	r3, #12
 8006d2e:	db02      	blt.n	8006d36 <err_tcp+0x196>
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	721a      	strb	r2, [r3, #8]
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f00c fa7a 	bl	8013230 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8006d3c:	6938      	ldr	r0, [r7, #16]
 8006d3e:	f00c f9ce 	bl	80130de <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8006d42:	e00b      	b.n	8006d5c <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <err_tcp+0x1be>
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <err_tcp+0x1c8>)
 8006d4e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006d52:	490a      	ldr	r1, [pc, #40]	; (8006d7c <err_tcp+0x1dc>)
 8006d54:	4806      	ldr	r0, [pc, #24]	; (8006d70 <err_tcp+0x1d0>)
 8006d56:	f00d fc75 	bl	8014644 <iprintf>
  }
}
 8006d5a:	e000      	b.n	8006d5e <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8006d5c:	bf00      	nop
}
 8006d5e:	bf00      	nop
 8006d60:	3728      	adds	r7, #40	; 0x28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08015738 	.word	0x08015738
 8006d6c:	0801585c 	.word	0x0801585c
 8006d70:	08015790 	.word	0x08015790
 8006d74:	0801586c 	.word	0x0801586c
 8006d78:	08015888 	.word	0x08015888
 8006d7c:	080158a4 	.word	0x080158a4

08006d80 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f007 fa43 	bl	800e21c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006d96:	490a      	ldr	r1, [pc, #40]	; (8006dc0 <setup_tcp+0x40>)
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f007 fa51 	bl	800e240 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006d9e:	4909      	ldr	r1, [pc, #36]	; (8006dc4 <setup_tcp+0x44>)
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f007 fa6f 	bl	800e284 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006da6:	2202      	movs	r2, #2
 8006da8:	4907      	ldr	r1, [pc, #28]	; (8006dc8 <setup_tcp+0x48>)
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f007 fac4 	bl	800e338 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006db0:	4906      	ldr	r1, [pc, #24]	; (8006dcc <setup_tcp+0x4c>)
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f007 fa86 	bl	800e2c4 <tcp_err>
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	08006929 	.word	0x08006929
 8006dc4:	08006afd 	.word	0x08006afd
 8006dc8:	08006a39 	.word	0x08006a39
 8006dcc:	08006ba1 	.word	0x08006ba1

08006dd0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d006      	beq.n	8006df4 <pcb_new+0x24>
 8006de6:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <pcb_new+0xc4>)
 8006de8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006dec:	492a      	ldr	r1, [pc, #168]	; (8006e98 <pcb_new+0xc8>)
 8006dee:	482b      	ldr	r0, [pc, #172]	; (8006e9c <pcb_new+0xcc>)
 8006df0:	f00d fc28 	bl	8014644 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d022      	beq.n	8006e48 <pcb_new+0x78>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d133      	bne.n	8006e6e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681c      	ldr	r4, [r3, #0]
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f00b ff20 	bl	8012c52 <udp_new_ip_type>
 8006e12:	4603      	mov	r3, r0
 8006e14:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02a      	beq.n	8006e76 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b22      	cmp	r3, #34	; 0x22
 8006e28:	d104      	bne.n	8006e34 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6858      	ldr	r0, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4917      	ldr	r1, [pc, #92]	; (8006ea0 <pcb_new+0xd0>)
 8006e42:	f00b feaa 	bl	8012b9a <udp_recv>
    }
    break;
 8006e46:	e016      	b.n	8006e76 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681c      	ldr	r4, [r3, #0]
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f007 f9d6 	bl	800e200 <tcp_new_ip_type>
 8006e54:	4603      	mov	r3, r0
 8006e56:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00b      	beq.n	8006e7a <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff8a 	bl	8006d80 <setup_tcp>
    }
    break;
 8006e6c:	e005      	b.n	8006e7a <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	22fa      	movs	r2, #250	; 0xfa
 8006e72:	711a      	strb	r2, [r3, #4]
    return;
 8006e74:	e00a      	b.n	8006e8c <pcb_new+0xbc>
    break;
 8006e76:	bf00      	nop
 8006e78:	e000      	b.n	8006e7c <pcb_new+0xac>
    break;
 8006e7a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	22ff      	movs	r2, #255	; 0xff
 8006e8a:	711a      	strb	r2, [r3, #4]
  }
}
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd90      	pop	{r4, r7, pc}
 8006e92:	bf00      	nop
 8006e94:	08015738 	.word	0x08015738
 8006e98:	080158c0 	.word	0x080158c0
 8006e9c:	08015790 	.word	0x08015790
 8006ea0:	0800682d 	.word	0x0800682d

08006ea4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff ff85 	bl	8006dd0 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d012      	beq.n	8006ef4 <lwip_netconn_do_newconn+0x50>
 8006ece:	f00c f9a1 	bl	8013214 <sys_arch_protect>
 8006ed2:	60b8      	str	r0, [r7, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006edc:	f113 0f0c 	cmn.w	r3, #12
 8006ee0:	db05      	blt.n	8006eee <lwip_netconn_do_newconn+0x4a>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006eec:	721a      	strb	r2, [r3, #8]
 8006eee:	68b8      	ldr	r0, [r7, #8]
 8006ef0:	f00c f99e 	bl	8013230 <sys_arch_unprotect>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	4618      	mov	r0, r3
 8006efc:	f00c f8ef 	bl	80130de <sys_sem_signal>
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006f14:	2007      	movs	r0, #7
 8006f16:	f004 ff4d 	bl	800bdb4 <memp_malloc>
 8006f1a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <netconn_alloc+0x1e>
    return NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e055      	b.n	8006fd2 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	79fa      	ldrb	r2, [r7, #7]
 8006f30:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d004      	beq.n	8006f4c <netconn_alloc+0x44>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d105      	bne.n	8006f52 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8006f46:	2306      	movs	r3, #6
 8006f48:	60fb      	str	r3, [r7, #12]
    break;
 8006f4a:	e00a      	b.n	8006f62 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8006f4c:	2306      	movs	r3, #6
 8006f4e:	60fb      	str	r3, [r7, #12]
    break;
 8006f50:	e007      	b.n	8006f62 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006f52:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <netconn_alloc+0xd4>)
 8006f54:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006f58:	4921      	ldr	r1, [pc, #132]	; (8006fe0 <netconn_alloc+0xd8>)
 8006f5a:	4822      	ldr	r0, [pc, #136]	; (8006fe4 <netconn_alloc+0xdc>)
 8006f5c:	f00d fb72 	bl	8014644 <iprintf>
    goto free_and_return;
 8006f60:	e032      	b.n	8006fc8 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3310      	adds	r3, #16
 8006f66:	68f9      	ldr	r1, [r7, #12]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f00b ff89 	bl	8012e80 <sys_mbox_new>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d128      	bne.n	8006fc6 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	330c      	adds	r3, #12
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f00c f858 	bl	8013030 <sys_sem_new>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	3310      	adds	r3, #16
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f00b ff96 	bl	8012ebc <sys_mbox_free>
    goto free_and_return;
 8006f90:	e01a      	b.n	8006fc8 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3314      	adds	r3, #20
 8006f96:	4618      	mov	r0, r3
 8006f98:	f00c f83d 	bl	8013016 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	771a      	strb	r2, [r3, #28]
  return conn;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	e005      	b.n	8006fd2 <netconn_alloc+0xca>
    goto free_and_return;
 8006fc6:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	2007      	movs	r0, #7
 8006fcc:	f004 ff44 	bl	800be58 <memp_free>
  return NULL;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	08015738 	.word	0x08015738
 8006fe0:	080158e0 	.word	0x080158e0
 8006fe4:	08015790 	.word	0x08015790

08006fe8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <netconn_free+0x1e>
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <netconn_free+0x80>)
 8006ffa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8006ffe:	491b      	ldr	r1, [pc, #108]	; (800706c <netconn_free+0x84>)
 8007000:	481b      	ldr	r0, [pc, #108]	; (8007070 <netconn_free+0x88>)
 8007002:	f00d fb1f 	bl	8014644 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3310      	adds	r3, #16
 800700a:	4618      	mov	r0, r3
 800700c:	f00b fff2 	bl	8012ff4 <sys_mbox_valid>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <netconn_free+0x3c>
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <netconn_free+0x80>)
 8007018:	f240 22e2 	movw	r2, #738	; 0x2e2
 800701c:	4915      	ldr	r1, [pc, #84]	; (8007074 <netconn_free+0x8c>)
 800701e:	4814      	ldr	r0, [pc, #80]	; (8007070 <netconn_free+0x88>)
 8007020:	f00d fb10 	bl	8014644 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3314      	adds	r3, #20
 8007028:	4618      	mov	r0, r3
 800702a:	f00b ffe3 	bl	8012ff4 <sys_mbox_valid>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <netconn_free+0x5a>
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <netconn_free+0x80>)
 8007036:	f240 22e5 	movw	r2, #741	; 0x2e5
 800703a:	490f      	ldr	r1, [pc, #60]	; (8007078 <netconn_free+0x90>)
 800703c:	480c      	ldr	r0, [pc, #48]	; (8007070 <netconn_free+0x88>)
 800703e:	f00d fb01 	bl	8014644 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	330c      	adds	r3, #12
 8007046:	4618      	mov	r0, r3
 8007048:	f00c f856 	bl	80130f8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	330c      	adds	r3, #12
 8007050:	4618      	mov	r0, r3
 8007052:	f00c f86f 	bl	8013134 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	2007      	movs	r0, #7
 800705a:	f004 fefd 	bl	800be58 <memp_free>
}
 800705e:	bf00      	nop
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	08015738 	.word	0x08015738
 800706c:	08015908 	.word	0x08015908
 8007070:	08015790 	.word	0x08015790
 8007074:	08015938 	.word	0x08015938
 8007078:	08015974 	.word	0x08015974

0800707c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3310      	adds	r3, #16
 8007088:	4618      	mov	r0, r3
 800708a:	f00b ffb3 	bl	8012ff4 <sys_mbox_valid>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d035      	beq.n	8007100 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007094:	e01e      	b.n	80070d4 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800709e:	2b10      	cmp	r3, #16
 80070a0:	d114      	bne.n	80070cc <netconn_drain+0x50>
        if (mem != NULL) {
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d015      	beq.n	80070d4 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	891b      	ldrh	r3, [r3, #8]
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f006 f9d6 	bl	800d470 <tcp_recved>
          }
          pbuf_free(p);
 80070c4:	6978      	ldr	r0, [r7, #20]
 80070c6:	f005 fc21 	bl	800c90c <pbuf_free>
 80070ca:	e003      	b.n	80070d4 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f850 	bl	8008174 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3310      	adds	r3, #16
 80070d8:	f107 020c 	add.w	r2, r7, #12
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f00b ff6c 	bl	8012fbc <sys_arch_mbox_tryfetch>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ea:	d1d4      	bne.n	8007096 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3310      	adds	r3, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	f00b fee3 	bl	8012ebc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3310      	adds	r3, #16
 80070fa:	4618      	mov	r0, r3
 80070fc:	f00b ff8b 	bl	8013016 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3314      	adds	r3, #20
 8007104:	4618      	mov	r0, r3
 8007106:	f00b ff75 	bl	8012ff4 <sys_mbox_valid>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d02e      	beq.n	800716e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007110:	e017      	b.n	8007142 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4a18      	ldr	r2, [pc, #96]	; (8007178 <netconn_drain+0xfc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800711e:	6938      	ldr	r0, [r7, #16]
 8007120:	f7ff ffac 	bl	800707c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	f006 f941 	bl	800d3b8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2200      	movs	r2, #0
 800713a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800713c:	6938      	ldr	r0, [r7, #16]
 800713e:	f7ff ff53 	bl	8006fe8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3314      	adds	r3, #20
 8007146:	f107 020c 	add.w	r2, r7, #12
 800714a:	4611      	mov	r1, r2
 800714c:	4618      	mov	r0, r3
 800714e:	f00b ff35 	bl	8012fbc <sys_arch_mbox_tryfetch>
 8007152:	4603      	mov	r3, r0
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007158:	d1db      	bne.n	8007112 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3314      	adds	r3, #20
 800715e:	4618      	mov	r0, r3
 8007160:	f00b feac 	bl	8012ebc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3314      	adds	r3, #20
 8007168:	4618      	mov	r0, r3
 800716a:	f00b ff54 	bl	8013016 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20004024 	.word	0x20004024

0800717c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8007184:	2300      	movs	r3, #0
 8007186:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <lwip_netconn_do_close_internal+0x20>
 800718e:	4ba8      	ldr	r3, [pc, #672]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 8007190:	f240 3243 	movw	r2, #835	; 0x343
 8007194:	49a7      	ldr	r1, [pc, #668]	; (8007434 <lwip_netconn_do_close_internal+0x2b8>)
 8007196:	48a8      	ldr	r0, [pc, #672]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 8007198:	f00d fa54 	bl	8014644 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d006      	beq.n	80071b6 <lwip_netconn_do_close_internal+0x3a>
 80071a8:	4ba1      	ldr	r3, [pc, #644]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 80071aa:	f44f 7251 	mov.w	r2, #836	; 0x344
 80071ae:	49a3      	ldr	r1, [pc, #652]	; (800743c <lwip_netconn_do_close_internal+0x2c0>)
 80071b0:	48a1      	ldr	r0, [pc, #644]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 80071b2:	f00d fa47 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d006      	beq.n	80071cc <lwip_netconn_do_close_internal+0x50>
 80071be:	4b9c      	ldr	r3, [pc, #624]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 80071c0:	f240 3245 	movw	r2, #837	; 0x345
 80071c4:	499e      	ldr	r1, [pc, #632]	; (8007440 <lwip_netconn_do_close_internal+0x2c4>)
 80071c6:	489c      	ldr	r0, [pc, #624]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 80071c8:	f00d fa3c 	bl	8014644 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <lwip_netconn_do_close_internal+0x66>
 80071d4:	4b96      	ldr	r3, [pc, #600]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 80071d6:	f240 3246 	movw	r2, #838	; 0x346
 80071da:	499a      	ldr	r1, [pc, #616]	; (8007444 <lwip_netconn_do_close_internal+0x2c8>)
 80071dc:	4896      	ldr	r0, [pc, #600]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 80071de:	f00d fa31 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <lwip_netconn_do_close_internal+0x7c>
 80071ea:	4b91      	ldr	r3, [pc, #580]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 80071ec:	f240 3247 	movw	r2, #839	; 0x347
 80071f0:	4995      	ldr	r1, [pc, #596]	; (8007448 <lwip_netconn_do_close_internal+0x2cc>)
 80071f2:	4891      	ldr	r0, [pc, #580]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 80071f4:	f00d fa26 	bl	8014644 <iprintf>

  tpcb = conn->pcb.tcp;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	7a1b      	ldrb	r3, [r3, #8]
 8007204:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d102      	bne.n	8007222 <lwip_netconn_do_close_internal+0xa6>
    close = 1;
 800721c:	2301      	movs	r3, #1
 800721e:	77bb      	strb	r3, [r7, #30]
 8007220:	e01f      	b.n	8007262 <lwip_netconn_do_close_internal+0xe6>
  } else if (shut_rx &&
 8007222:	7dbb      	ldrb	r3, [r7, #22]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <lwip_netconn_do_close_internal+0xca>
             ((tpcb->state == FIN_WAIT_1) ||
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800722c:	2b05      	cmp	r3, #5
 800722e:	d007      	beq.n	8007240 <lwip_netconn_do_close_internal+0xc4>
              (tpcb->state == FIN_WAIT_2) ||
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007234:	2b06      	cmp	r3, #6
 8007236:	d003      	beq.n	8007240 <lwip_netconn_do_close_internal+0xc4>
              (tpcb->state == CLOSING))) {
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800723c:	2b08      	cmp	r3, #8
 800723e:	d102      	bne.n	8007246 <lwip_netconn_do_close_internal+0xca>
    close = 1;
 8007240:	2301      	movs	r3, #1
 8007242:	77bb      	strb	r3, [r7, #30]
 8007244:	e00d      	b.n	8007262 <lwip_netconn_do_close_internal+0xe6>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007246:	7d7b      	ldrb	r3, [r7, #21]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <lwip_netconn_do_close_internal+0xe2>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	7e9b      	ldrb	r3, [r3, #26]
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <lwip_netconn_do_close_internal+0xe2>
    close = 1;
 8007258:	2301      	movs	r3, #1
 800725a:	77bb      	strb	r3, [r7, #30]
 800725c:	e001      	b.n	8007262 <lwip_netconn_do_close_internal+0xe6>
  } else {
    close = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8007262:	7fbb      	ldrb	r3, [r7, #30]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <lwip_netconn_do_close_internal+0xf4>
    tcp_arg(tpcb, NULL);
 8007268:	2100      	movs	r1, #0
 800726a:	69b8      	ldr	r0, [r7, #24]
 800726c:	f006 ffd6 	bl	800e21c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	7d1b      	ldrb	r3, [r3, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d104      	bne.n	8007282 <lwip_netconn_do_close_internal+0x106>
    tcp_accept(tpcb, NULL);
 8007278:	2100      	movs	r1, #0
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f007 f844 	bl	800e308 <tcp_accept>
 8007280:	e01d      	b.n	80072be <lwip_netconn_do_close_internal+0x142>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8007282:	7dbb      	ldrb	r3, [r7, #22]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <lwip_netconn_do_close_internal+0x11c>
      tcp_recv(tpcb, NULL);
 8007288:	2100      	movs	r1, #0
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f006 ffd8 	bl	800e240 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007290:	2100      	movs	r1, #0
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	f007 f838 	bl	800e308 <tcp_accept>
    }
    if (shut_tx) {
 8007298:	7d7b      	ldrb	r3, [r7, #21]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <lwip_netconn_do_close_internal+0x12a>
      tcp_sent(tpcb, NULL);
 800729e:	2100      	movs	r1, #0
 80072a0:	69b8      	ldr	r0, [r7, #24]
 80072a2:	f006 ffef 	bl	800e284 <tcp_sent>
    }
    if (close) {
 80072a6:	7fbb      	ldrb	r3, [r7, #30]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <lwip_netconn_do_close_internal+0x142>
      tcp_poll(tpcb, NULL, 0);
 80072ac:	2200      	movs	r2, #0
 80072ae:	2100      	movs	r1, #0
 80072b0:	69b8      	ldr	r0, [r7, #24]
 80072b2:	f007 f841 	bl	800e338 <tcp_poll>
      tcp_err(tpcb, NULL);
 80072b6:	2100      	movs	r1, #0
 80072b8:	69b8      	ldr	r0, [r7, #24]
 80072ba:	f007 f803 	bl	800e2c4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 80072be:	7fbb      	ldrb	r3, [r7, #30]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <lwip_netconn_do_close_internal+0x154>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80072c4:	69b8      	ldr	r0, [r7, #24]
 80072c6:	f005 ff65 	bl	800d194 <tcp_close>
 80072ca:	4603      	mov	r3, r0
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e007      	b.n	80072e0 <lwip_netconn_do_close_internal+0x164>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80072d0:	7dbb      	ldrb	r3, [r7, #22]
 80072d2:	7d7a      	ldrb	r2, [r7, #21]
 80072d4:	4619      	mov	r1, r3
 80072d6:	69b8      	ldr	r0, [r7, #24]
 80072d8:	f005 ff74 	bl	800d1c4 <tcp_shutdown>
 80072dc:	4603      	mov	r3, r0
 80072de:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80072e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <lwip_netconn_do_close_internal+0x172>
    close_finished = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	777b      	strb	r3, [r7, #29]
 80072ec:	e016      	b.n	800731c <lwip_netconn_do_close_internal+0x1a0>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80072ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072f6:	d10f      	bne.n	8007318 <lwip_netconn_do_close_internal+0x19c>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	7a5b      	ldrb	r3, [r3, #9]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <lwip_netconn_do_close_internal+0x1a0>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007302:	2301      	movs	r3, #1
 8007304:	777b      	strb	r3, [r7, #29]
        if (close) {
 8007306:	7fbb      	ldrb	r3, [r7, #30]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <lwip_netconn_do_close_internal+0x1a0>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800730c:	69b8      	ldr	r0, [r7, #24]
 800730e:	f006 f853 	bl	800d3b8 <tcp_abort>
          err = ERR_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	77fb      	strb	r3, [r7, #31]
 8007316:	e001      	b.n	800731c <lwip_netconn_do_close_internal+0x1a0>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007318:	2301      	movs	r3, #1
 800731a:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800731c:	7f7b      	ldrb	r3, [r7, #29]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d053      	beq.n	80073ca <lwip_netconn_do_close_internal+0x24e>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	7ffa      	ldrb	r2, [r7, #31]
 8007332:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007340:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d129      	bne.n	800739c <lwip_netconn_do_close_internal+0x220>
      if (close) {
 8007348:	7fbb      	ldrb	r3, [r7, #30]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00c      	beq.n	8007368 <lwip_netconn_do_close_internal+0x1ec>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <lwip_netconn_do_close_internal+0x1ec>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	2200      	movs	r2, #0
 8007362:	2104      	movs	r1, #4
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
      }
      if (shut_rx) {
 8007368:	7dbb      	ldrb	r3, [r7, #22]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <lwip_netconn_do_close_internal+0x206>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <lwip_netconn_do_close_internal+0x206>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
      }
      if (shut_tx) {
 8007382:	7d7b      	ldrb	r3, [r7, #21]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <lwip_netconn_do_close_internal+0x220>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <lwip_netconn_do_close_internal+0x220>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	2200      	movs	r2, #0
 8007396:	2102      	movs	r1, #2
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00e      	beq.n	80073c0 <lwip_netconn_do_close_internal+0x244>
 80073a2:	f00b ff37 	bl	8013214 <sys_arch_protect>
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073ae:	f113 0f0c 	cmn.w	r3, #12
 80073b2:	db02      	blt.n	80073ba <lwip_netconn_do_close_internal+0x23e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7ffa      	ldrb	r2, [r7, #31]
 80073b8:	721a      	strb	r2, [r3, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f00b ff38 	bl	8013230 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80073c0:	6938      	ldr	r0, [r7, #16]
 80073c2:	f00b fe8c 	bl	80130de <sys_sem_signal>
    }
    return ERR_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e02e      	b.n	8007428 <lwip_netconn_do_close_internal+0x2ac>
  }
  if (!close_finished) {
 80073ca:	7f7b      	ldrb	r3, [r7, #29]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11e      	bne.n	800740e <lwip_netconn_do_close_internal+0x292>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	7d1b      	ldrb	r3, [r3, #20]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <lwip_netconn_do_close_internal+0x26a>
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 80073da:	f240 32e3 	movw	r2, #995	; 0x3e3
 80073de:	491b      	ldr	r1, [pc, #108]	; (800744c <lwip_netconn_do_close_internal+0x2d0>)
 80073e0:	4815      	ldr	r0, [pc, #84]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 80073e2:	f00d f92f 	bl	8014644 <iprintf>
    if (shut_tx) {
 80073e6:	7d7b      	ldrb	r3, [r7, #21]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <lwip_netconn_do_close_internal+0x278>
      tcp_sent(tpcb, sent_tcp);
 80073ec:	4918      	ldr	r1, [pc, #96]	; (8007450 <lwip_netconn_do_close_internal+0x2d4>)
 80073ee:	69b8      	ldr	r0, [r7, #24]
 80073f0:	f006 ff48 	bl	800e284 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80073f4:	2201      	movs	r2, #1
 80073f6:	4917      	ldr	r1, [pc, #92]	; (8007454 <lwip_netconn_do_close_internal+0x2d8>)
 80073f8:	69b8      	ldr	r0, [r7, #24]
 80073fa:	f006 ff9d 	bl	800e338 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80073fe:	4916      	ldr	r1, [pc, #88]	; (8007458 <lwip_netconn_do_close_internal+0x2dc>)
 8007400:	69b8      	ldr	r0, [r7, #24]
 8007402:	f006 ff5f 	bl	800e2c4 <tcp_err>
    tcp_arg(tpcb, conn);
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	69b8      	ldr	r0, [r7, #24]
 800740a:	f006 ff07 	bl	800e21c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800740e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <lwip_netconn_do_close_internal+0x2a8>
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <lwip_netconn_do_close_internal+0x2b4>)
 8007418:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800741c:	490f      	ldr	r1, [pc, #60]	; (800745c <lwip_netconn_do_close_internal+0x2e0>)
 800741e:	4806      	ldr	r0, [pc, #24]	; (8007438 <lwip_netconn_do_close_internal+0x2bc>)
 8007420:	f00d f910 	bl	8014644 <iprintf>
  return err;
 8007424:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	08015738 	.word	0x08015738
 8007434:	080159b0 	.word	0x080159b0
 8007438:	08015790 	.word	0x08015790
 800743c:	080159c0 	.word	0x080159c0
 8007440:	080159e0 	.word	0x080159e0
 8007444:	08015a04 	.word	0x08015a04
 8007448:	0801586c 	.word	0x0801586c
 800744c:	08015a18 	.word	0x08015a18
 8007450:	08006afd 	.word	0x08006afd
 8007454:	08006a39 	.word	0x08006a39
 8007458:	08006ba1 	.word	0x08006ba1
 800745c:	08015a3c 	.word	0x08015a3c

08007460 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007474:	7cfb      	ldrb	r3, [r7, #19]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00d      	beq.n	8007496 <lwip_netconn_do_delconn+0x36>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007484:	2b10      	cmp	r3, #16
 8007486:	d006      	beq.n	8007496 <lwip_netconn_do_delconn+0x36>
 8007488:	4b5d      	ldr	r3, [pc, #372]	; (8007600 <lwip_netconn_do_delconn+0x1a0>)
 800748a:	f240 4201 	movw	r2, #1025	; 0x401
 800748e:	495d      	ldr	r1, [pc, #372]	; (8007604 <lwip_netconn_do_delconn+0x1a4>)
 8007490:	485d      	ldr	r0, [pc, #372]	; (8007608 <lwip_netconn_do_delconn+0x1a8>)
 8007492:	f00d f8d7 	bl	8014644 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8007496:	7cfb      	ldrb	r3, [r7, #19]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <lwip_netconn_do_delconn+0x48>
 800749c:	7cfb      	ldrb	r3, [r7, #19]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80074a2:	7cfb      	ldrb	r3, [r7, #19]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d109      	bne.n	80074bc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d10a      	bne.n	80074c4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	7f1b      	ldrb	r3, [r3, #28]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	22fb      	movs	r2, #251	; 0xfb
 80074c0:	711a      	strb	r2, [r3, #4]
 80074c2:	e073      	b.n	80075ac <lwip_netconn_do_delconn+0x14c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80074c4:	7cfb      	ldrb	r3, [r7, #19]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d10d      	bne.n	80074e6 <lwip_netconn_do_delconn+0x86>
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	7f1b      	ldrb	r3, [r3, #28]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <lwip_netconn_do_delconn+0x86>
 80074d8:	4b49      	ldr	r3, [pc, #292]	; (8007600 <lwip_netconn_do_delconn+0x1a0>)
 80074da:	f240 421f 	movw	r2, #1055	; 0x41f
 80074de:	494b      	ldr	r1, [pc, #300]	; (800760c <lwip_netconn_do_delconn+0x1ac>)
 80074e0:	4849      	ldr	r0, [pc, #292]	; (8007608 <lwip_netconn_do_delconn+0x1a8>)
 80074e2:	f00d f8af 	bl	8014644 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2200      	movs	r2, #0
 80074ea:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fdc3 	bl	800707c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d03b      	beq.n	8007578 <lwip_netconn_do_delconn+0x118>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800750a:	2b10      	cmp	r3, #16
 800750c:	d00e      	beq.n	800752c <lwip_netconn_do_delconn+0xcc>
 800750e:	2b20      	cmp	r3, #32
 8007510:	d000      	beq.n	8007514 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8007512:	e02d      	b.n	8007570 <lwip_netconn_do_delconn+0x110>
        msg->conn->pcb.udp->recv_arg = NULL;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	f00b fb4b 	bl	8012bc0 <udp_remove>
        break;
 800752a:	e021      	b.n	8007570 <lwip_netconn_do_delconn+0x110>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <lwip_netconn_do_delconn+0xe0>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <lwip_netconn_do_delconn+0xee>
 8007540:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <lwip_netconn_do_delconn+0x1a0>)
 8007542:	f240 4235 	movw	r2, #1077	; 0x435
 8007546:	4932      	ldr	r1, [pc, #200]	; (8007610 <lwip_netconn_do_delconn+0x1b0>)
 8007548:	482f      	ldr	r0, [pc, #188]	; (8007608 <lwip_netconn_do_delconn+0x1a8>)
 800754a:	f00d f87b 	bl	8014644 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2204      	movs	r2, #4
 8007554:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2203      	movs	r2, #3
 800755a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	625a      	str	r2, [r3, #36]	; 0x24
        lwip_netconn_do_close_internal(msg->conn);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fe07 	bl	800717c <lwip_netconn_do_close_internal>
        return;
 800756e:	e043      	b.n	80075f8 <lwip_netconn_do_delconn+0x198>
      }
      msg->conn->pcb.tcp = NULL;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <lwip_netconn_do_delconn+0x132>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	6810      	ldr	r0, [r2, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <lwip_netconn_do_delconn+0x14c>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	6810      	ldr	r0, [r2, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	2102      	movs	r1, #2
 80075aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	4618      	mov	r0, r3
 80075b4:	f00b fdad 	bl	8013112 <sys_sem_valid>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01c      	beq.n	80075f8 <lwip_netconn_do_delconn+0x198>
    TCPIP_APIMSG_ACK(msg);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d012      	beq.n	80075ec <lwip_netconn_do_delconn+0x18c>
 80075c6:	f00b fe25 	bl	8013214 <sys_arch_protect>
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80075d4:	f113 0f0c 	cmn.w	r3, #12
 80075d8:	db05      	blt.n	80075e6 <lwip_netconn_do_delconn+0x186>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80075e4:	721a      	strb	r2, [r3, #8]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f00b fe22 	bl	8013230 <sys_arch_unprotect>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	4618      	mov	r0, r3
 80075f4:	f00b fd73 	bl	80130de <sys_sem_signal>
  }
}
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	08015738 	.word	0x08015738
 8007604:	08015a4c 	.word	0x08015a4c
 8007608:	08015790 	.word	0x08015790
 800760c:	08015a60 	.word	0x08015a60
 8007610:	08015a80 	.word	0x08015a80

08007614 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007630:	f06f 0305 	mvn.w	r3, #5
 8007634:	e082      	b.n	800773c <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	785b      	ldrb	r3, [r3, #1]
 800763a:	2b03      	cmp	r3, #3
 800763c:	d006      	beq.n	800764c <lwip_netconn_do_connected+0x38>
 800763e:	4b41      	ldr	r3, [pc, #260]	; (8007744 <lwip_netconn_do_connected+0x130>)
 8007640:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8007644:	4940      	ldr	r1, [pc, #256]	; (8007748 <lwip_netconn_do_connected+0x134>)
 8007646:	4841      	ldr	r0, [pc, #260]	; (800774c <lwip_netconn_do_connected+0x138>)
 8007648:	f00c fffc 	bl	8014644 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10c      	bne.n	800766e <lwip_netconn_do_connected+0x5a>
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	7f1b      	ldrb	r3, [r3, #28]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <lwip_netconn_do_connected+0x5a>
 8007660:	4b38      	ldr	r3, [pc, #224]	; (8007744 <lwip_netconn_do_connected+0x130>)
 8007662:	f240 429a 	movw	r2, #1178	; 0x49a
 8007666:	493a      	ldr	r1, [pc, #232]	; (8007750 <lwip_netconn_do_connected+0x13c>)
 8007668:	4838      	ldr	r0, [pc, #224]	; (800774c <lwip_netconn_do_connected+0x138>)
 800766a:	f00c ffeb 	bl	8014644 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	79fa      	ldrb	r2, [r7, #7]
 800767c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007690:	2b10      	cmp	r3, #16
 8007692:	d106      	bne.n	80076a2 <lwip_netconn_do_connected+0x8e>
 8007694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800769c:	69b8      	ldr	r0, [r7, #24]
 800769e:	f7ff fb6f 	bl	8006d80 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	7f1b      	ldrb	r3, [r3, #28]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bf0c      	ite	eq
 80076ae:	2301      	moveq	r3, #1
 80076b0:	2300      	movne	r3, #0
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	7f1b      	ldrb	r3, [r3, #28]
 80076ba:	f023 0304 	bic.w	r3, r3, #4
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <lwip_netconn_do_connected+0xbc>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10c      	bne.n	80076ea <lwip_netconn_do_connected+0xd6>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <lwip_netconn_do_connected+0xc8>
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <lwip_netconn_do_connected+0xd6>
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <lwip_netconn_do_connected+0x130>)
 80076de:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80076e2:	491c      	ldr	r1, [pc, #112]	; (8007754 <lwip_netconn_do_connected+0x140>)
 80076e4:	4819      	ldr	r0, [pc, #100]	; (800774c <lwip_netconn_do_connected+0x138>)
 80076e6:	f00c ffad 	bl	8014644 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2200      	movs	r2, #0
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2200      	movs	r2, #0
 80076f4:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00e      	beq.n	800771a <lwip_netconn_do_connected+0x106>
 80076fc:	f00b fd8a 	bl	8013214 <sys_arch_protect>
 8007700:	6138      	str	r0, [r7, #16]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007708:	f113 0f0c 	cmn.w	r3, #12
 800770c:	db02      	blt.n	8007714 <lwip_netconn_do_connected+0x100>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	2200      	movs	r2, #0
 8007712:	721a      	strb	r2, [r3, #8]
 8007714:	6938      	ldr	r0, [r7, #16]
 8007716:	f00b fd8b 	bl	8013230 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <lwip_netconn_do_connected+0x11a>
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	2200      	movs	r2, #0
 8007728:	2102      	movs	r1, #2
 800772a:	69b8      	ldr	r0, [r7, #24]
 800772c:	4798      	blx	r3

  if (was_blocking) {
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8007734:	69f8      	ldr	r0, [r7, #28]
 8007736:	f00b fcd2 	bl	80130de <sys_sem_signal>
  }
  return ERR_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	08015738 	.word	0x08015738
 8007748:	08015a9c 	.word	0x08015a9c
 800774c:	08015790 	.word	0x08015790
 8007750:	08015abc 	.word	0x08015abc
 8007754:	08015afc 	.word	0x08015afc

08007758 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d103      	bne.n	8007776 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	22f1      	movs	r2, #241	; 0xf1
 8007772:	711a      	strb	r2, [r3, #4]
 8007774:	e07e      	b.n	8007874 <lwip_netconn_do_connect+0x11c>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007780:	2b10      	cmp	r3, #16
 8007782:	d010      	beq.n	80077a6 <lwip_netconn_do_connect+0x4e>
 8007784:	2b20      	cmp	r3, #32
 8007786:	d169      	bne.n	800785c <lwip_netconn_do_connect+0x104>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6858      	ldr	r0, [r3, #4]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6899      	ldr	r1, [r3, #8]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	899b      	ldrh	r3, [r3, #12]
 8007796:	461a      	mov	r2, r3
 8007798:	f00b f992 	bl	8012ac0 <udp_connect>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	711a      	strb	r2, [r3, #4]
      break;
 80077a4:	e066      	b.n	8007874 <lwip_netconn_do_connect+0x11c>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d103      	bne.n	80077b8 <lwip_netconn_do_connect+0x60>
        msg->err = ERR_ALREADY;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	22f7      	movs	r2, #247	; 0xf7
 80077b4:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 80077b6:	e05c      	b.n	8007872 <lwip_netconn_do_connect+0x11a>
      } else if (msg->conn->state != NETCONN_NONE) {
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <lwip_netconn_do_connect+0x72>
        msg->err = ERR_ISCONN;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	22f6      	movs	r2, #246	; 0xf6
 80077c6:	711a      	strb	r2, [r3, #4]
      break;
 80077c8:	e053      	b.n	8007872 <lwip_netconn_do_connect+0x11a>
        setup_tcp(msg->conn);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fad6 	bl	8006d80 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6858      	ldr	r0, [r3, #4]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6899      	ldr	r1, [r3, #8]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	899a      	ldrh	r2, [r3, #12]
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <lwip_netconn_do_connect+0x15c>)
 80077e4:	f005 fee2 	bl	800d5ac <tcp_connect>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461a      	mov	r2, r3
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d13b      	bne.n	8007872 <lwip_netconn_do_connect+0x11a>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	7f1b      	ldrb	r3, [r3, #28]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	bf14      	ite	ne
 8007808:	2301      	movne	r3, #1
 800780a:	2300      	moveq	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2203      	movs	r2, #3
 8007816:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <lwip_netconn_do_connect+0xda>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	7f12      	ldrb	r2, [r2, #28]
 8007828:	f042 0204 	orr.w	r2, r2, #4
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	771a      	strb	r2, [r3, #28]
 8007830:	e008      	b.n	8007844 <lwip_netconn_do_connect+0xec>
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	7f12      	ldrb	r2, [r2, #28]
 800783c:	f022 0204 	bic.w	r2, r2, #4
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8007844:	7cfb      	ldrb	r3, [r7, #19]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <lwip_netconn_do_connect+0xfa>
            msg->err = ERR_INPROGRESS;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	22fb      	movs	r2, #251	; 0xfb
 800784e:	711a      	strb	r2, [r3, #4]
      break;
 8007850:	e00f      	b.n	8007872 <lwip_netconn_do_connect+0x11a>
            msg->conn->current_msg = msg;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
            return;
 800785a:	e028      	b.n	80078ae <lwip_netconn_do_connect+0x156>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 800785c:	4b16      	ldr	r3, [pc, #88]	; (80078b8 <lwip_netconn_do_connect+0x160>)
 800785e:	f240 42f2 	movw	r2, #1266	; 0x4f2
 8007862:	4916      	ldr	r1, [pc, #88]	; (80078bc <lwip_netconn_do_connect+0x164>)
 8007864:	4816      	ldr	r0, [pc, #88]	; (80078c0 <lwip_netconn_do_connect+0x168>)
 8007866:	f00c feed 	bl	8014644 <iprintf>
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	22fa      	movs	r2, #250	; 0xfa
 800786e:	711a      	strb	r2, [r3, #4]
      break;
 8007870:	e000      	b.n	8007874 <lwip_netconn_do_connect+0x11c>
      break;
 8007872:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d012      	beq.n	80078a2 <lwip_netconn_do_connect+0x14a>
 800787c:	f00b fcca 	bl	8013214 <sys_arch_protect>
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800788a:	f113 0f0c 	cmn.w	r3, #12
 800788e:	db05      	blt.n	800789c <lwip_netconn_do_connect+0x144>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800789a:	721a      	strb	r2, [r3, #8]
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f00b fcc7 	bl	8013230 <sys_arch_unprotect>
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	4618      	mov	r0, r3
 80078aa:	f00b fc18 	bl	80130de <sys_sem_signal>
}
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	08007615 	.word	0x08007615
 80078b8:	08015738 	.word	0x08015738
 80078bc:	08015b1c 	.word	0x08015b1c
 80078c0:	08015790 	.word	0x08015790

080078c4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d109      	bne.n	80078f2 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f00b f941 	bl	8012b6c <udp_disconnect>
    msg->err = ERR_OK;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	711a      	strb	r2, [r3, #4]
 80078f0:	e002      	b.n	80078f8 <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	22fa      	movs	r2, #250	; 0xfa
 80078f6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <lwip_netconn_do_disconnect+0x62>
 8007900:	f00b fc88 	bl	8013214 <sys_arch_protect>
 8007904:	60b8      	str	r0, [r7, #8]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800790e:	f113 0f0c 	cmn.w	r3, #12
 8007912:	db05      	blt.n	8007920 <lwip_netconn_do_disconnect+0x5c>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800791e:	721a      	strb	r2, [r3, #8]
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f00b fc85 	bl	8013230 <sys_arch_unprotect>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	4618      	mov	r0, r3
 800792e:	f00b fbd6 	bl	80130de <sys_sem_signal>
}
 8007932:	bf00      	nop
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800794e:	f113 0f0c 	cmn.w	r3, #12
 8007952:	da06      	bge.n	8007962 <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	711a      	strb	r2, [r3, #4]
 8007960:	e037      	b.n	80079d2 <lwip_netconn_do_send+0x98>
  } else {
    msg->err = ERR_CONN;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	22f5      	movs	r2, #245	; 0xf5
 8007966:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d02f      	beq.n	80079d2 <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797c:	2b20      	cmp	r3, #32
 800797e:	d000      	beq.n	8007982 <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 8007980:	e027      	b.n	80079d2 <lwip_netconn_do_send+0x98>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10e      	bne.n	80079aa <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f00a ff06 	bl	80127ac <udp_send>
 80079a0:	4603      	mov	r3, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	711a      	strb	r2, [r3, #4]
        break;
 80079a8:	e012      	b.n	80079d0 <lwip_netconn_do_send+0x96>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6858      	ldr	r0, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	6819      	ldr	r1, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f103 0208 	add.w	r2, r3, #8
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	899b      	ldrh	r3, [r3, #12]
 80079c4:	f00a ff0a 	bl	80127dc <udp_sendto>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	711a      	strb	r2, [r3, #4]
        break;
 80079d0:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d012      	beq.n	8007a00 <lwip_netconn_do_send+0xc6>
 80079da:	f00b fc1b 	bl	8013214 <sys_arch_protect>
 80079de:	60b8      	str	r0, [r7, #8]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80079e8:	f113 0f0c 	cmn.w	r3, #12
 80079ec:	db05      	blt.n	80079fa <lwip_netconn_do_send+0xc0>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80079f8:	721a      	strb	r2, [r3, #8]
 80079fa:	68b8      	ldr	r0, [r7, #8]
 80079fc:	f00b fc18 	bl	8013230 <sys_arch_unprotect>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	4618      	mov	r0, r3
 8007a08:	f00b fb69 	bl	80130de <sys_sem_signal>
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2200      	movs	r2, #0
 8007a24:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d022      	beq.n	8007a76 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d11b      	bne.n	8007a76 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4a:	d202      	bcs.n	8007a52 <lwip_netconn_do_recv+0x3e>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	e001      	b.n	8007a56 <lwip_netconn_do_recv+0x42>
 8007a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a56:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	89fa      	ldrh	r2, [r7, #14]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f005 fd04 	bl	800d470 <tcp_recved>
        remaining -= recved;
 8007a68:	89fb      	ldrh	r3, [r7, #14]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d012      	beq.n	8007aa4 <lwip_netconn_do_recv+0x90>
 8007a7e:	f00b fbc9 	bl	8013214 <sys_arch_protect>
 8007a82:	60b8      	str	r0, [r7, #8]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007a8c:	f113 0f0c 	cmn.w	r3, #12
 8007a90:	db05      	blt.n	8007a9e <lwip_netconn_do_recv+0x8a>
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007a9c:	721a      	strb	r2, [r3, #8]
 8007a9e:	68b8      	ldr	r0, [r7, #8]
 8007aa0:	f00b fbc6 	bl	8013230 <sys_arch_unprotect>
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f00b fb17 	bl	80130de <sys_sem_signal>
}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <lwip_netconn_do_writemore+0x22>
 8007acc:	4ba2      	ldr	r3, [pc, #648]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007ace:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8007ad2:	49a2      	ldr	r1, [pc, #648]	; (8007d5c <lwip_netconn_do_writemore+0x2a4>)
 8007ad4:	48a2      	ldr	r0, [pc, #648]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007ad6:	f00c fdb5 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d006      	beq.n	8007af0 <lwip_netconn_do_writemore+0x38>
 8007ae2:	4b9d      	ldr	r3, [pc, #628]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007ae4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8007ae8:	499e      	ldr	r1, [pc, #632]	; (8007d64 <lwip_netconn_do_writemore+0x2ac>)
 8007aea:	489d      	ldr	r0, [pc, #628]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007aec:	f00c fdaa 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <lwip_netconn_do_writemore+0x4e>
 8007af8:	4b97      	ldr	r3, [pc, #604]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007afa:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8007afe:	499a      	ldr	r1, [pc, #616]	; (8007d68 <lwip_netconn_do_writemore+0x2b0>)
 8007b00:	4897      	ldr	r0, [pc, #604]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007b02:	f00c fd9f 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <lwip_netconn_do_writemore+0x64>
 8007b0e:	4b92      	ldr	r3, [pc, #584]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007b10:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8007b14:	4995      	ldr	r1, [pc, #596]	; (8007d6c <lwip_netconn_do_writemore+0x2b4>)
 8007b16:	4892      	ldr	r0, [pc, #584]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007b18:	f00c fd94 	bl	8014644 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d306      	bcc.n	8007b38 <lwip_netconn_do_writemore+0x80>
 8007b2a:	4b8b      	ldr	r3, [pc, #556]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007b2c:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8007b30:	498f      	ldr	r1, [pc, #572]	; (8007d70 <lwip_netconn_do_writemore+0x2b8>)
 8007b32:	488b      	ldr	r0, [pc, #556]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007b34:	f00c fd86 	bl	8014644 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	7c1b      	ldrb	r3, [r3, #16]
 8007b3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7f1b      	ldrb	r3, [r3, #28]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <lwip_netconn_do_writemore+0xa2>
 8007b4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <lwip_netconn_do_writemore+0xa6>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <lwip_netconn_do_writemore+0xa8>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	4413      	add	r3, r2
 8007b70:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	68da      	ldr	r2, [r3, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b86:	d309      	bcc.n	8007b9c <lwip_netconn_do_writemore+0xe4>
      len = 0xffff;
 8007b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b8c:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8007b8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b9a:	e001      	b.n	8007ba0 <lwip_netconn_do_writemore+0xe8>
    } else {
      len = (u16_t)diff;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ba8:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8007baa:	8afa      	ldrh	r2, [r7, #22]
 8007bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d212      	bcs.n	8007bd8 <lwip_netconn_do_writemore+0x120>
      /* don't try to write more than sendbuf */
      len = available;
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8007bb6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <lwip_netconn_do_writemore+0x114>
        if (!len) {
 8007bbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d109      	bne.n	8007bd8 <lwip_netconn_do_writemore+0x120>
          err = ERR_WOULDBLOCK;
 8007bc4:	23f9      	movs	r3, #249	; 0xf9
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8007bca:	e029      	b.n	8007c20 <lwip_netconn_do_writemore+0x168>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1a      	ldr	r2, [r3, #32]
 8007bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bde:	441a      	add	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d906      	bls.n	8007bf8 <lwip_netconn_do_writemore+0x140>
 8007bea:	4b5b      	ldr	r3, [pc, #364]	; (8007d58 <lwip_netconn_do_writemore+0x2a0>)
 8007bec:	f240 6213 	movw	r2, #1555	; 0x613
 8007bf0:	4960      	ldr	r1, [pc, #384]	; (8007d74 <lwip_netconn_do_writemore+0x2bc>)
 8007bf2:	485b      	ldr	r0, [pc, #364]	; (8007d60 <lwip_netconn_do_writemore+0x2a8>)
 8007bf4:	f00c fd26 	bl	8014644 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6858      	ldr	r0, [r3, #4]
 8007bfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c02:	69f9      	ldr	r1, [r7, #28]
 8007c04:	f009 f94a 	bl	8010e9c <tcp_write>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007c0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <lwip_netconn_do_writemore+0x168>
 8007c16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1e:	d132      	bne.n	8007c86 <lwip_netconn_do_writemore+0x1ce>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8007c20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <lwip_netconn_do_writemore+0x1a0>
 8007c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d211      	bcs.n	8007c58 <lwip_netconn_do_writemore+0x1a0>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <lwip_netconn_do_writemore+0x190>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c42:	2103      	movs	r1, #3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7f1b      	ldrb	r3, [r3, #28]
 8007c4c:	f043 0310 	orr.w	r3, r3, #16
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	771a      	strb	r2, [r3, #28]
 8007c56:	e016      	b.n	8007c86 <lwip_netconn_do_writemore+0x1ce>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c60:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007c64:	d305      	bcc.n	8007c72 <lwip_netconn_do_writemore+0x1ba>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d909      	bls.n	8007c86 <lwip_netconn_do_writemore+0x1ce>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <lwip_netconn_do_writemore+0x1ce>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c80:	2103      	movs	r1, #3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8007c86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d134      	bne.n	8007cf8 <lwip_netconn_do_writemore+0x240>
      err_t out_err;
      conn->write_offset += len;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1a      	ldr	r2, [r3, #32]
 8007c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d003      	beq.n	8007cb0 <lwip_netconn_do_writemore+0x1f8>
 8007ca8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <lwip_netconn_do_writemore+0x208>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6a12      	ldr	r2, [r2, #32]
 8007cb8:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f009 fd9f 	bl	8011808 <tcp_output>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007cce:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007cd2:	f113 0f0c 	cmn.w	r3, #12
 8007cd6:	db04      	blt.n	8007ce2 <lwip_netconn_do_writemore+0x22a>
 8007cd8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007cdc:	f113 0f04 	cmn.w	r3, #4
 8007ce0:	d151      	bne.n	8007d86 <lwip_netconn_do_writemore+0x2ce>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007ce2:	7d7b      	ldrb	r3, [r7, #21]
 8007ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	e046      	b.n	8007d86 <lwip_netconn_do_writemore+0x2ce>
      }
    } else if (err == ERR_MEM) {
 8007cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d00:	d13a      	bne.n	8007d78 <lwip_netconn_do_writemore+0x2c0>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f009 fd7e 	bl	8011808 <tcp_output>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007d10:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007d14:	f113 0f0c 	cmn.w	r3, #12
 8007d18:	db04      	blt.n	8007d24 <lwip_netconn_do_writemore+0x26c>
 8007d1a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007d1e:	f113 0f04 	cmn.w	r3, #4
 8007d22:	d10a      	bne.n	8007d3a <lwip_netconn_do_writemore+0x282>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007d24:	7d3b      	ldrb	r3, [r7, #20]
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2200      	movs	r2, #0
 8007d36:	60da      	str	r2, [r3, #12]
 8007d38:	e025      	b.n	8007d86 <lwip_netconn_do_writemore+0x2ce>
      } else if (dontblock) {
 8007d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d021      	beq.n	8007d86 <lwip_netconn_do_writemore+0x2ce>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8007d42:	23f9      	movs	r3, #249	; 0xf9
 8007d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	e016      	b.n	8007d86 <lwip_netconn_do_writemore+0x2ce>
 8007d58:	08015738 	.word	0x08015738
 8007d5c:	0801585c 	.word	0x0801585c
 8007d60:	08015790 	.word	0x08015790
 8007d64:	08015b34 	.word	0x08015b34
 8007d68:	0801586c 	.word	0x0801586c
 8007d6c:	08015b54 	.word	0x08015b54
 8007d70:	08015b6c 	.word	0x08015b6c
 8007d74:	08015ba0 	.word	0x08015ba0
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2200      	movs	r2, #0
 8007d84:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8007d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d028      	beq.n	8007de0 <lwip_netconn_do_writemore+0x328>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007da0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00f      	beq.n	8007dda <lwip_netconn_do_writemore+0x322>
 8007dba:	f00b fa2b 	bl	8013214 <sys_arch_protect>
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dc6:	f113 0f0c 	cmn.w	r3, #12
 8007dca:	db03      	blt.n	8007dd4 <lwip_netconn_do_writemore+0x31c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007dd2:	721a      	strb	r2, [r3, #8]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f00b fa2b 	bl	8013230 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f00b f97f 	bl	80130de <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3728      	adds	r7, #40	; 0x28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e00:	f113 0f0c 	cmn.w	r3, #12
 8007e04:	da06      	bge.n	8007e14 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	711a      	strb	r2, [r3, #4]
 8007e12:	e049      	b.n	8007ea8 <lwip_netconn_do_write+0xbc>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e1e:	2b10      	cmp	r3, #16
 8007e20:	d13f      	bne.n	8007ea2 <lwip_netconn_do_write+0xb6>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	22fb      	movs	r2, #251	; 0xfb
 8007e30:	711a      	strb	r2, [r3, #4]
 8007e32:	e039      	b.n	8007ea8 <lwip_netconn_do_write+0xbc>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d02d      	beq.n	8007e9a <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2201      	movs	r2, #1
 8007e44:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d104      	bne.n	8007e5a <lwip_netconn_do_write+0x6e>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <lwip_netconn_do_write+0x7c>
 8007e5a:	4b23      	ldr	r3, [pc, #140]	; (8007ee8 <lwip_netconn_do_write+0xfc>)
 8007e5c:	f240 6283 	movw	r2, #1667	; 0x683
 8007e60:	4922      	ldr	r1, [pc, #136]	; (8007eec <lwip_netconn_do_write+0x100>)
 8007e62:	4823      	ldr	r0, [pc, #140]	; (8007ef0 <lwip_netconn_do_write+0x104>)
 8007e64:	f00c fbee 	bl	8014644 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <lwip_netconn_do_write+0x92>
 8007e70:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <lwip_netconn_do_write+0xfc>)
 8007e72:	f240 6284 	movw	r2, #1668	; 0x684
 8007e76:	491f      	ldr	r1, [pc, #124]	; (8007ef4 <lwip_netconn_do_write+0x108>)
 8007e78:	481d      	ldr	r0, [pc, #116]	; (8007ef0 <lwip_netconn_do_write+0x104>)
 8007e7a:	f00c fbe3 	bl	8014644 <iprintf>
        msg->conn->current_msg = msg;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	621a      	str	r2, [r3, #32]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7ff fe10 	bl	8007ab8 <lwip_netconn_do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8007e98:	e023      	b.n	8007ee2 <lwip_netconn_do_write+0xf6>
      } else {
        msg->err = ERR_CONN;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	22f5      	movs	r2, #245	; 0xf5
 8007e9e:	711a      	strb	r2, [r3, #4]
 8007ea0:	e002      	b.n	8007ea8 <lwip_netconn_do_write+0xbc>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	22fa      	movs	r2, #250	; 0xfa
 8007ea6:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d012      	beq.n	8007ed6 <lwip_netconn_do_write+0xea>
 8007eb0:	f00b f9b0 	bl	8013214 <sys_arch_protect>
 8007eb4:	60b8      	str	r0, [r7, #8]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ebe:	f113 0f0c 	cmn.w	r3, #12
 8007ec2:	db05      	blt.n	8007ed0 <lwip_netconn_do_write+0xe4>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007ece:	721a      	strb	r2, [r3, #8]
 8007ed0:	68b8      	ldr	r0, [r7, #8]
 8007ed2:	f00b f9ad 	bl	8013230 <sys_arch_unprotect>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	4618      	mov	r0, r3
 8007ede:	f00b f8fe 	bl	80130de <sys_sem_signal>
}
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08015738 	.word	0x08015738
 8007eec:	08015a80 	.word	0x08015a80
 8007ef0:	08015790 	.word	0x08015790
 8007ef4:	08015bcc 	.word	0x08015bcc

08007ef8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d06c      	beq.n	8007fe8 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	6852      	ldr	r2, [r2, #4]
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e006      	b.n	8007f34 <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	6852      	ldr	r2, [r2, #4]
 8007f30:	6852      	ldr	r2, [r2, #4]
 8007f32:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d021      	beq.n	8007f8c <lwip_netconn_do_getaddr+0x94>
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d144      	bne.n	8007fd6 <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7c1b      	ldrb	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	6852      	ldr	r2, [r2, #4]
 8007f5e:	8a52      	ldrh	r2, [r2, #18]
 8007f60:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 8007f62:	e044      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	7c1b      	ldrb	r3, [r3, #16]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	22f5      	movs	r2, #245	; 0xf5
 8007f78:	711a      	strb	r2, [r3, #4]
      break;
 8007f7a:	e038      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	6852      	ldr	r2, [r2, #4]
 8007f86:	8a92      	ldrh	r2, [r2, #20]
 8007f88:	801a      	strh	r2, [r3, #0]
      break;
 8007f8a:	e030      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7c1b      	ldrb	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10f      	bne.n	8007fb4 <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	7d1b      	ldrb	r3, [r3, #20]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d103      	bne.n	8007fb4 <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	22f5      	movs	r2, #245	; 0xf5
 8007fb0:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 8007fb2:	e01c      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	7c1b      	ldrb	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <lwip_netconn_do_getaddr+0xd2>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	8adb      	ldrh	r3, [r3, #22]
 8007fc8:	e003      	b.n	8007fd2 <lwip_netconn_do_getaddr+0xda>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	8b1b      	ldrh	r3, [r3, #24]
 8007fd2:	8013      	strh	r3, [r2, #0]
      break;
 8007fd4:	e00b      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <lwip_netconn_do_getaddr+0x138>)
 8007fd8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007fdc:	4915      	ldr	r1, [pc, #84]	; (8008034 <lwip_netconn_do_getaddr+0x13c>)
 8007fde:	4816      	ldr	r0, [pc, #88]	; (8008038 <lwip_netconn_do_getaddr+0x140>)
 8007fe0:	f00c fb30 	bl	8014644 <iprintf>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	22f5      	movs	r2, #245	; 0xf5
 8007fec:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d012      	beq.n	800801c <lwip_netconn_do_getaddr+0x124>
 8007ff6:	f00b f90d 	bl	8013214 <sys_arch_protect>
 8007ffa:	60b8      	str	r0, [r7, #8]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008004:	f113 0f0c 	cmn.w	r3, #12
 8008008:	db05      	blt.n	8008016 <lwip_netconn_do_getaddr+0x11e>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008014:	721a      	strb	r2, [r3, #8]
 8008016:	68b8      	ldr	r0, [r7, #8]
 8008018:	f00b f90a 	bl	8013230 <sys_arch_unprotect>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	4618      	mov	r0, r3
 8008024:	f00b f85b 	bl	80130de <sys_sem_signal>
}
 8008028:	bf00      	nop
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	08015738 	.word	0x08015738
 8008034:	08015be0 	.word	0x08015be0
 8008038:	08015790 	.word	0x08015790

0800803c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d045      	beq.n	80080e6 <lwip_netconn_do_close+0xaa>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008064:	2b10      	cmp	r3, #16
 8008066:	d13e      	bne.n	80080e6 <lwip_netconn_do_close+0xaa>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800806c:	2b03      	cmp	r3, #3
 800806e:	d002      	beq.n	8008076 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008070:	7cfb      	ldrb	r3, [r7, #19]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d037      	beq.n	80080e6 <lwip_netconn_do_close+0xaa>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008076:	7cfb      	ldrb	r3, [r7, #19]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d103      	bne.n	8008084 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	22f5      	movs	r2, #245	; 0xf5
 8008080:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008082:	e033      	b.n	80080ec <lwip_netconn_do_close+0xb0>
    } else if (state == NETCONN_WRITE) {
 8008084:	7cfb      	ldrb	r3, [r7, #19]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d103      	bne.n	8008092 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	22fb      	movs	r2, #251	; 0xfb
 800808e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008090:	e02c      	b.n	80080ec <lwip_netconn_do_close+0xb0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	7a1b      	ldrb	r3, [r3, #8]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe ffea 	bl	800707c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d104      	bne.n	80080bc <lwip_netconn_do_close+0x80>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <lwip_netconn_do_close+0x8e>
 80080bc:	4b1b      	ldr	r3, [pc, #108]	; (800812c <lwip_netconn_do_close+0xf0>)
 80080be:	f240 721c 	movw	r2, #1820	; 0x71c
 80080c2:	491b      	ldr	r1, [pc, #108]	; (8008130 <lwip_netconn_do_close+0xf4>)
 80080c4:	481b      	ldr	r0, [pc, #108]	; (8008134 <lwip_netconn_do_close+0xf8>)
 80080c6:	f00c fabd 	bl	8014644 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2204      	movs	r2, #4
 80080d0:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	625a      	str	r2, [r3, #36]	; 0x24
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
        LOCK_TCPIP_CORE();
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7ff f84c 	bl	800717c <lwip_netconn_do_close_internal>
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80080e4:	e01f      	b.n	8008126 <lwip_netconn_do_close+0xea>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	22f5      	movs	r2, #245	; 0xf5
 80080ea:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <lwip_netconn_do_close+0xde>
 80080f4:	f00b f88e 	bl	8013214 <sys_arch_protect>
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008102:	f113 0f0c 	cmn.w	r3, #12
 8008106:	db05      	blt.n	8008114 <lwip_netconn_do_close+0xd8>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008112:	721a      	strb	r2, [r3, #8]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f00b f88b 	bl	8013230 <sys_arch_unprotect>
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	330c      	adds	r3, #12
 8008120:	4618      	mov	r0, r3
 8008122:	f00a ffdc 	bl	80130de <sys_sem_signal>
}
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	08015738 	.word	0x08015738
 8008130:	08015a80 	.word	0x08015a80
 8008134:	08015790 	.word	0x08015790

08008138 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dc04      	bgt.n	8008154 <err_to_errno+0x1c>
 800814a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800814e:	425b      	negs	r3, r3
 8008150:	2b10      	cmp	r3, #16
 8008152:	dd01      	ble.n	8008158 <err_to_errno+0x20>
    return EIO;
 8008154:	2305      	movs	r3, #5
 8008156:	e005      	b.n	8008164 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8008158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815c:	425b      	negs	r3, r3
 800815e:	4a04      	ldr	r2, [pc, #16]	; (8008170 <err_to_errno+0x38>)
 8008160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	08017efc 	.word	0x08017efc

08008174 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d013      	beq.n	80081aa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f004 fbbc 	bl	800c90c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	2006      	movs	r0, #6
 80081a6:	f003 fe57 	bl	800be58 <memp_free>
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <netbuf_free+0x1c>
 80081c2:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <netbuf_free+0x44>)
 80081c4:	2281      	movs	r2, #129	; 0x81
 80081c6:	490d      	ldr	r1, [pc, #52]	; (80081fc <netbuf_free+0x48>)
 80081c8:	480d      	ldr	r0, [pc, #52]	; (8008200 <netbuf_free+0x4c>)
 80081ca:	f00c fa3b 	bl	8014644 <iprintf>
 80081ce:	e00f      	b.n	80081f0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f004 fb95 	bl	800c90c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	605a      	str	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	08015bf8 	.word	0x08015bf8
 80081fc:	08015c94 	.word	0x08015c94
 8008200:	08015c48 	.word	0x08015c48

08008204 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d108      	bne.n	800822a <netbuf_ref+0x26>
 8008218:	4b1c      	ldr	r3, [pc, #112]	; (800828c <netbuf_ref+0x88>)
 800821a:	2295      	movs	r2, #149	; 0x95
 800821c:	491c      	ldr	r1, [pc, #112]	; (8008290 <netbuf_ref+0x8c>)
 800821e:	481d      	ldr	r0, [pc, #116]	; (8008294 <netbuf_ref+0x90>)
 8008220:	f00c fa10 	bl	8014644 <iprintf>
 8008224:	f06f 030f 	mvn.w	r3, #15
 8008228:	e02b      	b.n	8008282 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f004 fb68 	bl	800c90c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800823c:	2202      	movs	r2, #2
 800823e:	2100      	movs	r1, #0
 8008240:	2000      	movs	r0, #0
 8008242:	f003 fff1 	bl	800c228 <pbuf_alloc>
 8008246:	4602      	mov	r2, r0
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800825e:	e010      	b.n	8008282 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	88f9      	ldrh	r1, [r7, #6]
 8008272:	8119      	strh	r1, [r3, #8]
 8008274:	891b      	ldrh	r3, [r3, #8]
 8008276:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08015bf8 	.word	0x08015bf8
 8008290:	08015cb0 	.word	0x08015cb0
 8008294:	08015c48 	.word	0x08015c48

08008298 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	db02      	blt.n	80082ac <get_socket+0x14>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	dd04      	ble.n	80082b6 <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <get_socket+0x50>)
 80082ae:	2209      	movs	r2, #9
 80082b0:	601a      	str	r2, [r3, #0]
    return NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e011      	b.n	80082da <get_socket+0x42>
  }

  sock = &sockets[s];
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <get_socket+0x54>)
 80082c2:	4413      	add	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <get_socket+0x50>)
 80082d0:	2209      	movs	r2, #9
 80082d2:	601a      	str	r2, [r3, #0]
    return NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <get_socket+0x42>
  }

  return sock;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20007754 	.word	0x20007754
 80082ec:	20003de4 	.word	0x20003de4

080082f0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	e074      	b.n	80083ea <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8008300:	f00a ff88 	bl	8013214 <sys_arch_protect>
 8008304:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8008306:	493d      	ldr	r1, [pc, #244]	; (80083fc <alloc_socket+0x10c>)
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d161      	bne.n	80083de <alloc_socket+0xee>
 800831a:	4938      	ldr	r1, [pc, #224]	; (80083fc <alloc_socket+0x10c>)
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	3311      	adds	r3, #17
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d156      	bne.n	80083de <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 8008330:	4932      	ldr	r1, [pc, #200]	; (80083fc <alloc_socket+0x10c>)
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8008342:	68b8      	ldr	r0, [r7, #8]
 8008344:	f00a ff74 	bl	8013230 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 8008348:	492c      	ldr	r1, [pc, #176]	; (80083fc <alloc_socket+0x10c>)
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	3304      	adds	r3, #4
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 800835c:	4927      	ldr	r1, [pc, #156]	; (80083fc <alloc_socket+0x10c>)
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4613      	mov	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	440b      	add	r3, r1
 800836a:	3308      	adds	r3, #8
 800836c:	2200      	movs	r2, #0
 800836e:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 8008370:	4922      	ldr	r1, [pc, #136]	; (80083fc <alloc_socket+0x10c>)
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	330a      	adds	r3, #10
 8008380:	2200      	movs	r2, #0
 8008382:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800838c:	2b10      	cmp	r3, #16
 800838e:	d102      	bne.n	8008396 <alloc_socket+0xa6>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <alloc_socket+0xaa>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <alloc_socket+0xac>
 800839a:	2300      	movs	r3, #0
 800839c:	b298      	uxth	r0, r3
 800839e:	4917      	ldr	r1, [pc, #92]	; (80083fc <alloc_socket+0x10c>)
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	440b      	add	r3, r1
 80083ac:	330c      	adds	r3, #12
 80083ae:	4602      	mov	r2, r0
 80083b0:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80083b2:	4912      	ldr	r1, [pc, #72]	; (80083fc <alloc_socket+0x10c>)
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	330e      	adds	r3, #14
 80083c2:	2200      	movs	r2, #0
 80083c4:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 80083c6:	490d      	ldr	r1, [pc, #52]	; (80083fc <alloc_socket+0x10c>)
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	3310      	adds	r3, #16
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	e00a      	b.n	80083f4 <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 80083de:	68b8      	ldr	r0, [r7, #8]
 80083e0:	f00a ff26 	bl	8013230 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	dd87      	ble.n	8008300 <alloc_socket+0x10>
  }
  return -1;
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20003de4 	.word	0x20003de4

08008400 <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08c      	sub	sp, #48	; 0x30
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f7ff ff43 	bl	8008298 <get_socket>
 8008412:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <lwip_connect+0x20>
    return -1;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800841e:	e06e      	b.n	80084fe <lwip_connect+0xfe>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d108      	bne.n	800843a <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fd ff8d 	bl	800634c <netconn_disconnect>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008438:	e03d      	b.n	80084b6 <lwip_connect+0xb6>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b10      	cmp	r3, #16
 800843e:	d10c      	bne.n	800845a <lwip_connect+0x5a>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <lwip_connect+0x50>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d104      	bne.n	800845a <lwip_connect+0x5a>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d018      	beq.n	800848c <lwip_connect+0x8c>
 800845a:	4b2b      	ldr	r3, [pc, #172]	; (8008508 <lwip_connect+0x108>)
 800845c:	f240 229f 	movw	r2, #671	; 0x29f
 8008460:	492a      	ldr	r1, [pc, #168]	; (800850c <lwip_connect+0x10c>)
 8008462:	482b      	ldr	r0, [pc, #172]	; (8008510 <lwip_connect+0x110>)
 8008464:	f00c f8ee 	bl	8014644 <iprintf>
 8008468:	f06f 000f 	mvn.w	r0, #15
 800846c:	f7ff fe64 	bl	8008138 <err_to_errno>
 8008470:	6238      	str	r0, [r7, #32]
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	b2da      	uxtb	r2, r3
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	741a      	strb	r2, [r3, #16]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <lwip_connect+0x86>
 8008480:	4a24      	ldr	r2, [pc, #144]	; (8008514 <lwip_connect+0x114>)
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800848a:	e038      	b.n	80084fe <lwip_connect+0xfe>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fe26 	bl	80090e8 <lwip_htons>
 800849c:	4603      	mov	r3, r0
 800849e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084a6:	f107 0114 	add.w	r1, r7, #20
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd ff16 	bl	80062dc <netconn_connect>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 80084b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d012      	beq.n	80084e4 <lwip_connect+0xe4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80084be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fe38 	bl	8008138 <err_to_errno>
 80084c8:	61b8      	str	r0, [r7, #24]
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	741a      	strb	r2, [r3, #16]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <lwip_connect+0xde>
 80084d8:	4a0e      	ldr	r2, [pc, #56]	; (8008514 <lwip_connect+0x114>)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	6013      	str	r3, [r2, #0]
    return -1;
 80084de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e2:	e00c      	b.n	80084fe <lwip_connect+0xfe>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80084e4:	2300      	movs	r3, #0
 80084e6:	61fb      	str	r3, [r7, #28]
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	741a      	strb	r2, [r3, #16]
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <lwip_connect+0xfc>
 80084f6:	4a07      	ldr	r2, [pc, #28]	; (8008514 <lwip_connect+0x114>)
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	6013      	str	r3, [r2, #0]
  return 0;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3730      	adds	r7, #48	; 0x30
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	08015d90 	.word	0x08015d90
 800850c:	08015e88 	.word	0x08015e88
 8008510:	08015dd4 	.word	0x08015dd4
 8008514:	20007754 	.word	0x20007754

08008518 <lwip_recvfrom>:
}

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b097      	sub	sp, #92	; 0x5c
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	64fb      	str	r3, [r7, #76]	; 0x4c
  u8_t             done = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff feaf 	bl	8008298 <get_socket>
 800853a:	6438      	str	r0, [r7, #64]	; 0x40
  if (!sock) {
 800853c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <lwip_recvfrom+0x30>
    return -1;
 8008542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008546:	e199      	b.n	800887c <lwip_recvfrom+0x364>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 8008548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 8008550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
 8008556:	e08d      	b.n	8008674 <lwip_recvfrom+0x15c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <lwip_recvfrom+0x58>
 8008562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	7f1b      	ldrb	r3, [r3, #28]
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01b      	beq.n	80085a8 <lwip_recvfrom+0x90>
          (sock->rcvevent <= 0)) {
 8008570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008572:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 8008576:	2b00      	cmp	r3, #0
 8008578:	dc16      	bgt.n	80085a8 <lwip_recvfrom+0x90>
        if (off > 0) {
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd0d      	ble.n	800859c <lwip_recvfrom+0x84>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 8008580:	2300      	movs	r3, #0
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	b2da      	uxtb	r2, r3
 8008588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858a:	741a      	strb	r2, [r3, #16]
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <lwip_recvfrom+0x80>
 8008592:	4aa9      	ldr	r2, [pc, #676]	; (8008838 <lwip_recvfrom+0x320>)
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	6013      	str	r3, [r2, #0]
          return off;
 8008598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859a:	e16f      	b.n	800887c <lwip_recvfrom+0x364>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 800859c:	4ba6      	ldr	r3, [pc, #664]	; (8008838 <lwip_recvfrom+0x320>)
 800859e:	220b      	movs	r2, #11
 80085a0:	601a      	str	r2, [r3, #0]
        return -1;
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a6:	e169      	b.n	800887c <lwip_recvfrom+0x364>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80085a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d10b      	bne.n	80085ce <lwip_recvfrom+0xb6>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 80085b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fd ffbf 	bl	8006544 <netconn_recv_tcp_pbuf>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80085cc:	e00a      	b.n	80085e4 <lwip_recvfrom+0xcc>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fd ffdb 	bl	8006594 <netconn_recv>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 80085e4:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d036      	beq.n	800865a <lwip_recvfrom+0x142>
        if (off > 0) {
 80085ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd19      	ble.n	8008626 <lwip_recvfrom+0x10e>
          if (err == ERR_CLSD) {
 80085f2:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80085f6:	f113 0f0f 	cmn.w	r3, #15
 80085fa:	d106      	bne.n	800860a <lwip_recvfrom+0xf2>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 80085fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fac5 	bl	8008b94 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	; 0x34
 800860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008610:	b2da      	uxtb	r2, r3
 8008612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008614:	741a      	strb	r2, [r3, #16]
 8008616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <lwip_recvfrom+0x10a>
 800861c:	4a86      	ldr	r2, [pc, #536]	; (8008838 <lwip_recvfrom+0x320>)
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008620:	6013      	str	r3, [r2, #0]
          return off;
 8008622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008624:	e12a      	b.n	800887c <lwip_recvfrom+0x364>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8008626:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fd84 	bl	8008138 <err_to_errno>
 8008630:	6338      	str	r0, [r7, #48]	; 0x30
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	b2da      	uxtb	r2, r3
 8008636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008638:	741a      	strb	r2, [r3, #16]
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <lwip_recvfrom+0x12e>
 8008640:	4a7d      	ldr	r2, [pc, #500]	; (8008838 <lwip_recvfrom+0x320>)
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8008646:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 800864a:	f113 0f0f 	cmn.w	r3, #15
 800864e:	d101      	bne.n	8008654 <lwip_recvfrom+0x13c>
          return 0;
 8008650:	2300      	movs	r3, #0
 8008652:	e113      	b.n	800887c <lwip_recvfrom+0x364>
        } else {
          return -1;
 8008654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008658:	e110      	b.n	800887c <lwip_recvfrom+0x364>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <lwip_recvfrom+0x156>
 8008660:	4b76      	ldr	r3, [pc, #472]	; (800883c <lwip_recvfrom+0x324>)
 8008662:	f240 3227 	movw	r2, #807	; 0x327
 8008666:	4976      	ldr	r1, [pc, #472]	; (8008840 <lwip_recvfrom+0x328>)
 8008668:	4876      	ldr	r0, [pc, #472]	; (8008844 <lwip_recvfrom+0x32c>)
 800866a:	f00b ffeb 	bl	8014644 <iprintf>
      sock->lastdata = buf;
 800866e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008672:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800867e:	2b10      	cmp	r3, #16
 8008680:	d102      	bne.n	8008688 <lwip_recvfrom+0x170>
      p = (struct pbuf *)buf;
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	657b      	str	r3, [r7, #84]	; 0x54
 8008686:	e002      	b.n	800868e <lwip_recvfrom+0x176>
    } else {
      p = ((struct netbuf *)buf)->p;
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	657b      	str	r3, [r7, #84]	; 0x54
    }
    buflen = p->tot_len;
 800868e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008690:	891b      	ldrh	r3, [r3, #8]
 8008692:	87fb      	strh	r3, [r7, #62]	; 0x3e
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 8008694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008696:	891b      	ldrh	r3, [r3, #8]
 8008698:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if (len > buflen) {
 800869e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d203      	bcs.n	80086ae <lwip_recvfrom+0x196>
      copylen = buflen;
 80086a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80086ac:	e002      	b.n	80086b4 <lwip_recvfrom+0x19c>
    } else {
      copylen = (u16_t)len;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	18d1      	adds	r1, r2, r3
 80086ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086bc:	891b      	ldrh	r3, [r3, #8]
 80086be:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80086c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80086c4:	f004 fb2e 	bl	800cd24 <pbuf_copy_partial>

    off += copylen;
 80086c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80086cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ce:	4413      	add	r3, r2
 80086d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80086d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d127      	bne.n	8008730 <lwip_recvfrom+0x218>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 80086e0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d906      	bls.n	80086f8 <lwip_recvfrom+0x1e0>
 80086ea:	4b54      	ldr	r3, [pc, #336]	; (800883c <lwip_recvfrom+0x324>)
 80086ec:	f240 3243 	movw	r2, #835	; 0x343
 80086f0:	4955      	ldr	r1, [pc, #340]	; (8008848 <lwip_recvfrom+0x330>)
 80086f2:	4854      	ldr	r0, [pc, #336]	; (8008844 <lwip_recvfrom+0x32c>)
 80086f4:	f00b ffa6 	bl	8014644 <iprintf>
      len -= copylen;
 80086f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00f      	beq.n	8008728 <lwip_recvfrom+0x210>
          (p->flags & PBUF_FLAG_PUSH) ||
 8008708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800870a:	7b5b      	ldrb	r3, [r3, #13]
 800870c:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <lwip_recvfrom+0x210>
          (sock->rcvevent <= 0) ||
 8008714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008716:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd04      	ble.n	8008728 <lwip_recvfrom+0x210>
          ((flags & MSG_PEEK) != 0)) {
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 8008724:	2b00      	cmp	r3, #0
 8008726:	d006      	beq.n	8008736 <lwip_recvfrom+0x21e>
        done = 1;
 8008728:	2301      	movs	r3, #1
 800872a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800872e:	e002      	b.n	8008736 <lwip_recvfrom+0x21e>
      }
    } else {
      done = 1;
 8008730:	2301      	movs	r3, #1
 8008732:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 8008736:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04c      	beq.n	80087d8 <lwip_recvfrom+0x2c0>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800873e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008740:	2b00      	cmp	r3, #0
 8008742:	d049      	beq.n	80087d8 <lwip_recvfrom+0x2c0>
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d046      	beq.n	80087d8 <lwip_recvfrom+0x2c0>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800874a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008754:	2b10      	cmp	r3, #16
 8008756:	d10b      	bne.n	8008770 <lwip_recvfrom+0x258>
          fromaddr = &tmpaddr;
 8008758:	f107 0320 	add.w	r3, r7, #32
 800875c:	647b      	str	r3, [r7, #68]	; 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800875e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8008766:	2300      	movs	r3, #0
 8008768:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800876a:	f7fd fd67 	bl	800623c <netconn_getaddr>
 800876e:	e005      	b.n	800877c <lwip_recvfrom+0x264>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	899b      	ldrh	r3, [r3, #12]
 8008774:	84fb      	strh	r3, [r7, #38]	; 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	3308      	adds	r3, #8
 800877a:	647b      	str	r3, [r7, #68]	; 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800877c:	f107 0310 	add.w	r3, r7, #16
 8008780:	2210      	movs	r2, #16
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	2202      	movs	r2, #2
 800878a:	705a      	strb	r2, [r3, #1]
 800878c:	f107 0410 	add.w	r4, r7, #16
 8008790:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fca8 	bl	80090e8 <lwip_htons>
 8008798:	4603      	mov	r3, r0
 800879a:	8063      	strh	r3, [r4, #2]
 800879c:	f107 0310 	add.w	r3, r7, #16
 80087a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a2:	6812      	ldr	r2, [r2, #0]
 80087a4:	605a      	str	r2, [r3, #4]
 80087a6:	f107 0310 	add.w	r3, r7, #16
 80087aa:	3308      	adds	r3, #8
 80087ac:	2208      	movs	r2, #8
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f00b ff3f 	bl	8014634 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 80087b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	7c3a      	ldrb	r2, [r7, #16]
 80087bc:	4293      	cmp	r3, r2
 80087be:	d903      	bls.n	80087c8 <lwip_recvfrom+0x2b0>
            *fromlen = saddr.sa.sa_len;
 80087c0:	7c3b      	ldrb	r3, [r7, #16]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 80087c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f107 0310 	add.w	r3, r7, #16
 80087d0:	4619      	mov	r1, r3
 80087d2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80087d4:	f00b ff23 	bl	801461e <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d13a      	bne.n	8008858 <lwip_recvfrom+0x340>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 80087e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d111      	bne.n	8008814 <lwip_recvfrom+0x2fc>
 80087f0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80087f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dd0b      	ble.n	8008814 <lwip_recvfrom+0x2fc>
        sock->lastdata = buf;
 80087fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 8008802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008804:	891a      	ldrh	r2, [r3, #8]
 8008806:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800880a:	4413      	add	r3, r2
 800880c:	b29a      	uxth	r2, r3
 800880e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008810:	811a      	strh	r2, [r3, #8]
 8008812:	e021      	b.n	8008858 <lwip_recvfrom+0x340>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 8008814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008816:	2200      	movs	r2, #0
 8008818:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 800881a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881c:	2200      	movs	r2, #0
 800881e:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800882a:	2b10      	cmp	r3, #16
 800882c:	d10e      	bne.n	800884c <lwip_recvfrom+0x334>
          pbuf_free((struct pbuf *)buf);
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	4618      	mov	r0, r3
 8008832:	f004 f86b 	bl	800c90c <pbuf_free>
 8008836:	e00d      	b.n	8008854 <lwip_recvfrom+0x33c>
 8008838:	20007754 	.word	0x20007754
 800883c:	08015d90 	.word	0x08015d90
 8008840:	08015ea8 	.word	0x08015ea8
 8008844:	08015dd4 	.word	0x08015dd4
 8008848:	08015eb4 	.word	0x08015eb4
        } else {
          netbuf_delete((struct netbuf *)buf);
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fc90 	bl	8008174 <netbuf_delete>
        }
        buf = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  } while (!done);
 8008858:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f ae73 	beq.w	8008548 <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 8008862:	2300      	movs	r3, #0
 8008864:	63bb      	str	r3, [r7, #56]	; 0x38
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	b2da      	uxtb	r2, r3
 800886a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800886c:	741a      	strb	r2, [r3, #16]
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <lwip_recvfrom+0x362>
 8008874:	4a03      	ldr	r2, [pc, #12]	; (8008884 <lwip_recvfrom+0x36c>)
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	6013      	str	r3, [r2, #0]
  return off;
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800887c:	4618      	mov	r0, r3
 800887e:	375c      	adds	r7, #92	; 0x5c
 8008880:	46bd      	mov	sp, r7
 8008882:	bd90      	pop	{r4, r7, pc}
 8008884:	20007754 	.word	0x20007754

08008888 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8008896:	2300      	movs	r3, #0
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	2300      	movs	r3, #0
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fe37 	bl	8008518 <lwip_recvfrom>
 80088aa:	4603      	mov	r3, r0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af02      	add	r7, sp, #8
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fce8 	bl	8008298 <get_socket>
 80088c8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <lwip_send+0x22>
    return -1;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d4:	e04c      	b.n	8008970 <lwip_send+0xbc>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d00b      	beq.n	80088fc <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80088e4:	2300      	movs	r3, #0
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	2300      	movs	r3, #0
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	68b9      	ldr	r1, [r7, #8]
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f842 	bl	800897c <lwip_sendto>
 80088f8:	4603      	mov	r3, r0
 80088fa:	e039      	b.n	8008970 <lwip_send+0xbc>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <lwip_send+0x56>
 8008906:	2203      	movs	r2, #3
 8008908:	e000      	b.n	800890c <lwip_send+0x58>
 800890a:	2201      	movs	r2, #1
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f003 0308 	and.w	r3, r3, #8
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <lwip_send+0x66>
 8008916:	2304      	movs	r3, #4
 8008918:	e000      	b.n	800891c <lwip_send+0x68>
 800891a:	2300      	movs	r3, #0
 800891c:	4313      	orrs	r3, r2
 800891e:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 8008920:	76fb      	strb	r3, [r7, #27]
  written = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	7efa      	ldrb	r2, [r7, #27]
 800892c:	f107 0310 	add.w	r3, r7, #16
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	4613      	mov	r3, r2
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	f7fd fed0 	bl	80066dc <netconn_write_partly>
 800893c:	4603      	mov	r3, r0
 800893e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8008940:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fbf7 	bl	8008138 <err_to_errno>
 800894a:	6178      	str	r0, [r7, #20]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	b2da      	uxtb	r2, r3
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	741a      	strb	r2, [r3, #16]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <lwip_send+0xac>
 800895a:	4a07      	ldr	r2, [pc, #28]	; (8008978 <lwip_send+0xc4>)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 8008960:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <lwip_send+0xb8>
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	e001      	b.n	8008970 <lwip_send+0xbc>
 800896c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20007754 	.word	0x20007754

0800897c <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	; 0x38
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff fc84 	bl	8008298 <get_socket>
 8008990:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <lwip_sendto+0x22>
    return -1;
 8008998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800899c:	e094      	b.n	8008ac8 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d107      	bne.n	80089bc <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7ff ff7e 	bl	80088b4 <lwip_send>
 80089b8:	4603      	mov	r3, r0
 80089ba:	e085      	b.n	8008ac8 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c2:	d306      	bcc.n	80089d2 <lwip_sendto+0x56>
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <lwip_sendto+0x154>)
 80089c6:	f240 427b 	movw	r2, #1147	; 0x47b
 80089ca:	4942      	ldr	r1, [pc, #264]	; (8008ad4 <lwip_sendto+0x158>)
 80089cc:	4842      	ldr	r0, [pc, #264]	; (8008ad8 <lwip_sendto+0x15c>)
 80089ce:	f00b fe39 	bl	8014644 <iprintf>
  short_size = (u16_t)size;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80089d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d102      	bne.n	80089e2 <lwip_sendto+0x66>
 80089dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d024      	beq.n	8008a2c <lwip_sendto+0xb0>
 80089e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d108      	bne.n	80089fa <lwip_sendto+0x7e>
 80089e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d104      	bne.n	80089fa <lwip_sendto+0x7e>
 80089f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d018      	beq.n	8008a2c <lwip_sendto+0xb0>
 80089fa:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <lwip_sendto+0x154>)
 80089fc:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8008a00:	4936      	ldr	r1, [pc, #216]	; (8008adc <lwip_sendto+0x160>)
 8008a02:	4835      	ldr	r0, [pc, #212]	; (8008ad8 <lwip_sendto+0x15c>)
 8008a04:	f00b fe1e 	bl	8014644 <iprintf>
 8008a08:	f06f 000f 	mvn.w	r0, #15
 8008a0c:	f7ff fb94 	bl	8008138 <err_to_errno>
 8008a10:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	741a      	strb	r2, [r3, #16]
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <lwip_sendto+0xaa>
 8008a20:	4a2f      	ldr	r2, [pc, #188]	; (8008ae0 <lwip_sendto+0x164>)
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a2a:	e04d      	b.n	8008ac8 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8008a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a42:	885b      	ldrh	r3, [r3, #2]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fb4f 	bl	80090e8 <lwip_htons>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008a4e:	e003      	b.n	8008a58 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 8008a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008a5a:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8008a5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a5e:	f107 0314 	add.w	r3, r7, #20
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fbcd 	bl	8008204 <netbuf_ref>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8008a70:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f107 0214 	add.w	r2, r7, #20
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fd fdfe 	bl	8006684 <netconn_send>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fb8e 	bl	80081b4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8008a98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff fb4b 	bl	8008138 <err_to_errno>
 8008aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	741a      	strb	r2, [r3, #16]
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <lwip_sendto+0x13c>
 8008ab2:	4a0b      	ldr	r2, [pc, #44]	; (8008ae0 <lwip_sendto+0x164>)
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 8008ab8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <lwip_sendto+0x148>
 8008ac0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ac2:	e001      	b.n	8008ac8 <lwip_sendto+0x14c>
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3738      	adds	r7, #56	; 0x38
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	08015d90 	.word	0x08015d90
 8008ad4:	08015f54 	.word	0x08015f54
 8008ad8:	08015dd4 	.word	0x08015dd4
 8008adc:	08015f78 	.word	0x08015f78
 8008ae0:	20007754 	.word	0x20007754

08008ae4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d00d      	beq.n	8008b12 <lwip_socket+0x2e>
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d002      	beq.n	8008b00 <lwip_socket+0x1c>
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d016      	beq.n	8008b2c <lwip_socket+0x48>
 8008afe:	e01c      	b.n	8008b3a <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <lwip_socket+0xa8>)
 8008b06:	4619      	mov	r1, r3
 8008b08:	2040      	movs	r0, #64	; 0x40
 8008b0a:	f7fd faf7 	bl	80060fc <netconn_new_with_proto_and_callback>
 8008b0e:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008b10:	e019      	b.n	8008b46 <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b88      	cmp	r3, #136	; 0x88
 8008b16:	d101      	bne.n	8008b1c <lwip_socket+0x38>
 8008b18:	2321      	movs	r3, #33	; 0x21
 8008b1a:	e000      	b.n	8008b1e <lwip_socket+0x3a>
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <lwip_socket+0xa8>)
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fd faea 	bl	80060fc <netconn_new_with_proto_and_callback>
 8008b28:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008b2a:	e00c      	b.n	8008b46 <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8008b2c:	4a17      	ldr	r2, [pc, #92]	; (8008b8c <lwip_socket+0xa8>)
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2010      	movs	r0, #16
 8008b32:	f7fd fae3 	bl	80060fc <netconn_new_with_proto_and_callback>
 8008b36:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008b38:	e005      	b.n	8008b46 <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <lwip_socket+0xac>)
 8008b3c:	2216      	movs	r2, #22
 8008b3e:	601a      	str	r2, [r3, #0]
    return -1;
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b44:	e01e      	b.n	8008b84 <lwip_socket+0xa0>
  }

  if (!conn) {
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d105      	bne.n	8008b58 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8008b4c:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <lwip_socket+0xac>)
 8008b4e:	2269      	movs	r2, #105	; 0x69
 8008b50:	601a      	str	r2, [r3, #0]
    return -1;
 8008b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b56:	e015      	b.n	8008b84 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f7ff fbc8 	bl	80082f0 <alloc_socket>
 8008b60:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b68:	d108      	bne.n	8008b7c <lwip_socket+0x98>
    netconn_delete(conn);
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	f7fd fb40 	bl	80061f0 <netconn_delete>
    set_errno(ENFILE);
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <lwip_socket+0xac>)
 8008b72:	2217      	movs	r2, #23
 8008b74:	601a      	str	r2, [r3, #0]
    return -1;
 8008b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b7a:	e003      	b.n	8008b84 <lwip_socket+0xa0>
  }
  conn->socket = i;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008b82:	693b      	ldr	r3, [r7, #16]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	08008b95 	.word	0x08008b95
 8008b90:	20007754 	.word	0x20007754

08008b94 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80ea 	beq.w	8008d80 <event_callback+0x1ec>
    s = conn->socket;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da18      	bge.n	8008bea <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8008bb8:	f00a fb2c 	bl	8013214 <sys_arch_protect>
 8008bbc:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da0b      	bge.n	8008bde <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8008bc6:	78fb      	ldrb	r3, [r7, #3]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d104      	bne.n	8008bd6 <event_callback+0x42>
          conn->socket--;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8008bd6:	6978      	ldr	r0, [r7, #20]
 8008bd8:	f00a fb2a 	bl	8013230 <sys_arch_unprotect>
        return;
 8008bdc:	e0d3      	b.n	8008d86 <event_callback+0x1f2>
      }
      s = conn->socket;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 8008be4:	6978      	ldr	r0, [r7, #20]
 8008be6:	f00a fb23 	bl	8013230 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8008bea:	69f8      	ldr	r0, [r7, #28]
 8008bec:	f7ff fb54 	bl	8008298 <get_socket>
 8008bf0:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80c5 	beq.w	8008d84 <event_callback+0x1f0>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8008bfa:	f00a fb0b 	bl	8013214 <sys_arch_protect>
 8008bfe:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d82c      	bhi.n	8008c60 <event_callback+0xcc>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <event_callback+0x78>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c21 	.word	0x08008c21
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c49 	.word	0x08008c49
 8008c18:	08008c51 	.word	0x08008c51
 8008c1c:	08008c59 	.word	0x08008c59
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3301      	adds	r3, #1
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b21a      	sxth	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	815a      	strh	r2, [r3, #10]
      break;
 8008c32:	e01d      	b.n	8008c70 <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	b21a      	sxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	815a      	strh	r2, [r3, #10]
      break;
 8008c46:	e013      	b.n	8008c70 <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	819a      	strh	r2, [r3, #12]
      break;
 8008c4e:	e00f      	b.n	8008c70 <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	819a      	strh	r2, [r3, #12]
      break;
 8008c56:	e00b      	b.n	8008c70 <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	81da      	strh	r2, [r3, #14]
      break;
 8008c5e:	e007      	b.n	8008c70 <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 8008c60:	4b4a      	ldr	r3, [pc, #296]	; (8008d8c <event_callback+0x1f8>)
 8008c62:	f240 625d 	movw	r2, #1629	; 0x65d
 8008c66:	494a      	ldr	r1, [pc, #296]	; (8008d90 <event_callback+0x1fc>)
 8008c68:	484a      	ldr	r0, [pc, #296]	; (8008d94 <event_callback+0x200>)
 8008c6a:	f00b fceb 	bl	8014644 <iprintf>
      break;
 8008c6e:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7c5b      	ldrb	r3, [r3, #17]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 8008c78:	6978      	ldr	r0, [r7, #20]
 8008c7a:	f00a fad9 	bl	8013230 <sys_arch_unprotect>
    return;
 8008c7e:	e082      	b.n	8008d86 <event_callback+0x1f2>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008c80:	4b45      	ldr	r3, [pc, #276]	; (8008d98 <event_callback+0x204>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	61bb      	str	r3, [r7, #24]
 8008c86:	e074      	b.n	8008d72 <event_callback+0x1de>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 8008c88:	4b44      	ldr	r3, [pc, #272]	; (8008d9c <event_callback+0x208>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d15e      	bne.n	8008d54 <event_callback+0x1c0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd14      	ble.n	8008cce <event_callback+0x13a>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d010      	beq.n	8008cce <event_callback+0x13a>
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	0952      	lsrs	r2, r2, #5
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	f002 021f 	and.w	r2, r2, #31
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <event_callback+0x13a>
          do_signal = 1;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	899b      	ldrh	r3, [r3, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d017      	beq.n	8008d06 <event_callback+0x172>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d114      	bne.n	8008d06 <event_callback+0x172>
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <event_callback+0x172>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	0952      	lsrs	r2, r2, #5
 8008cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	f002 021f 	and.w	r2, r2, #31
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <event_callback+0x172>
          do_signal = 1;
 8008d02:	2301      	movs	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	89db      	ldrh	r3, [r3, #14]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <event_callback+0x1aa>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d114      	bne.n	8008d3e <event_callback+0x1aa>
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d010      	beq.n	8008d3e <event_callback+0x1aa>
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	0952      	lsrs	r2, r2, #5
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	f002 021f 	and.w	r2, r2, #31
 8008d2e:	2101      	movs	r1, #1
 8008d30:	fa01 f202 	lsl.w	r2, r1, r2
 8008d34:	4013      	ands	r3, r2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <event_callback+0x1aa>
          do_signal = 1;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <event_callback+0x1c0>
        scb->sem_signalled = 1;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2201      	movs	r2, #1
 8008d48:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	3318      	adds	r3, #24
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f00a f9c5 	bl	80130de <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f00a fa6b 	bl	8013230 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8008d5a:	f00a fa5b 	bl	8013214 <sys_arch_protect>
 8008d5e:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 8008d60:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <event_callback+0x208>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d000      	beq.n	8008d6c <event_callback+0x1d8>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 8008d6a:	e789      	b.n	8008c80 <event_callback+0xec>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d187      	bne.n	8008c88 <event_callback+0xf4>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f00a fa59 	bl	8013230 <sys_arch_unprotect>
 8008d7e:	e002      	b.n	8008d86 <event_callback+0x1f2>
    return;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <event_callback+0x1f2>
      return;
 8008d84:	bf00      	nop
}
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	08015d90 	.word	0x08015d90
 8008d90:	08015ff0 	.word	0x08015ff0
 8008d94:	08015dd4 	.word	0x08015dd4
 8008d98:	20003e34 	.word	0x20003e34
 8008d9c:	20003e38 	.word	0x20003e38

08008da0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008da8:	4b35      	ldr	r3, [pc, #212]	; (8008e80 <tcpip_thread+0xe0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8008db0:	4b33      	ldr	r3, [pc, #204]	; (8008e80 <tcpip_thread+0xe0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a33      	ldr	r2, [pc, #204]	; (8008e84 <tcpip_thread+0xe4>)
 8008db6:	6812      	ldr	r2, [r2, #0]
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4831      	ldr	r0, [pc, #196]	; (8008e88 <tcpip_thread+0xe8>)
 8008dc4:	f009 fb6a 	bl	801249c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <tcpip_thread+0x3c>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008dce:	4b2f      	ldr	r3, [pc, #188]	; (8008e8c <tcpip_thread+0xec>)
 8008dd0:	2269      	movs	r2, #105	; 0x69
 8008dd2:	492f      	ldr	r1, [pc, #188]	; (8008e90 <tcpip_thread+0xf0>)
 8008dd4:	482f      	ldr	r0, [pc, #188]	; (8008e94 <tcpip_thread+0xf4>)
 8008dd6:	f00b fc35 	bl	8014644 <iprintf>
      continue;
 8008dda:	e050      	b.n	8008e7e <tcpip_thread+0xde>
    }
    switch (msg->type) {
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d845      	bhi.n	8008e70 <tcpip_thread+0xd0>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <tcpip_thread+0x4c>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e0f 	.word	0x08008e0f
 8008df4:	08008e2f 	.word	0x08008e2f
 8008df8:	08008e4b 	.word	0x08008e4b
 8008dfc:	08008e63 	.word	0x08008e63
#if !LWIP_TCPIP_CORE_LOCKING
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.api_msg.function(msg->msg.api_msg.msg);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	6892      	ldr	r2, [r2, #8]
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
      break;
 8008e0c:	e037      	b.n	8008e7e <tcpip_thread+0xde>
    case TCPIP_MSG_API_CALL:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API CALL message %p\n", (void *)msg));
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689c      	ldr	r4, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	6892      	ldr	r2, [r2, #8]
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4798      	blx	r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	7023      	strb	r3, [r4, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f00a f959 	bl	80130de <sys_sem_signal>
      break;
 8008e2c:	e027      	b.n	8008e7e <tcpip_thread+0xde>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	6850      	ldr	r0, [r2, #4]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	6892      	ldr	r2, [r2, #8]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4619      	mov	r1, r3
 8008e42:	2009      	movs	r0, #9
 8008e44:	f003 f808 	bl	800be58 <memp_free>
      break;
 8008e48:	e019      	b.n	8008e7e <tcpip_thread+0xde>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	6892      	ldr	r2, [r2, #8]
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	2008      	movs	r0, #8
 8008e5c:	f002 fffc 	bl	800be58 <memp_free>
      break;
 8008e60:	e00d      	b.n	8008e7e <tcpip_thread+0xde>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	6892      	ldr	r2, [r2, #8]
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	4798      	blx	r3
      break;
 8008e6e:	e006      	b.n	8008e7e <tcpip_thread+0xde>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <tcpip_thread+0xec>)
 8008e72:	229b      	movs	r2, #155	; 0x9b
 8008e74:	4906      	ldr	r1, [pc, #24]	; (8008e90 <tcpip_thread+0xf0>)
 8008e76:	4807      	ldr	r0, [pc, #28]	; (8008e94 <tcpip_thread+0xf4>)
 8008e78:	f00b fbe4 	bl	8014644 <iprintf>
      break;
 8008e7c:	bf00      	nop
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008e7e:	e79d      	b.n	8008dbc <tcpip_thread+0x1c>
 8008e80:	20003e3c 	.word	0x20003e3c
 8008e84:	20003e40 	.word	0x20003e40
 8008e88:	20003e44 	.word	0x20003e44
 8008e8c:	0801600c 	.word	0x0801600c
 8008e90:	0801603c 	.word	0x0801603c
 8008e94:	0801605c 	.word	0x0801605c

08008e98 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008ea4:	481a      	ldr	r0, [pc, #104]	; (8008f10 <tcpip_inpkt+0x78>)
 8008ea6:	f00a f8a5 	bl	8012ff4 <sys_mbox_valid>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d105      	bne.n	8008ebc <tcpip_inpkt+0x24>
 8008eb0:	4b18      	ldr	r3, [pc, #96]	; (8008f14 <tcpip_inpkt+0x7c>)
 8008eb2:	22b5      	movs	r2, #181	; 0xb5
 8008eb4:	4918      	ldr	r1, [pc, #96]	; (8008f18 <tcpip_inpkt+0x80>)
 8008eb6:	4819      	ldr	r0, [pc, #100]	; (8008f1c <tcpip_inpkt+0x84>)
 8008eb8:	f00b fbc4 	bl	8014644 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008ebc:	2009      	movs	r0, #9
 8008ebe:	f002 ff79 	bl	800bdb4 <memp_malloc>
 8008ec2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ece:	e01a      	b.n	8008f06 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008ee8:	6979      	ldr	r1, [r7, #20]
 8008eea:	4809      	ldr	r0, [pc, #36]	; (8008f10 <tcpip_inpkt+0x78>)
 8008eec:	f00a f80d 	bl	8012f0a <sys_mbox_trypost>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008ef6:	6979      	ldr	r1, [r7, #20]
 8008ef8:	2009      	movs	r0, #9
 8008efa:	f002 ffad 	bl	800be58 <memp_free>
    return ERR_MEM;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f02:	e000      	b.n	8008f06 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008f04:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20003e44 	.word	0x20003e44
 8008f14:	0801600c 	.word	0x0801600c
 8008f18:	08016084 	.word	0x08016084
 8008f1c:	0801605c 	.word	0x0801605c

08008f20 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008f30:	f003 0318 	and.w	r3, r3, #24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d006      	beq.n	8008f46 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <tcpip_input+0x3c>)
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ffab 	bl	8008e98 <tcpip_inpkt>
 8008f42:	4603      	mov	r3, r0
 8008f44:	e005      	b.n	8008f52 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008f46:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <tcpip_input+0x40>)
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ffa4 	bl	8008e98 <tcpip_inpkt>
 8008f50:	4603      	mov	r3, r0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	08012ccd 	.word	0x08012ccd
 8008f60:	0800a37d 	.word	0x0800a37d

08008f64 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008f72:	481d      	ldr	r0, [pc, #116]	; (8008fe8 <tcpip_callback_with_block+0x84>)
 8008f74:	f00a f83e 	bl	8012ff4 <sys_mbox_valid>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d105      	bne.n	8008f8a <tcpip_callback_with_block+0x26>
 8008f7e:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <tcpip_callback_with_block+0x88>)
 8008f80:	22ee      	movs	r2, #238	; 0xee
 8008f82:	491b      	ldr	r1, [pc, #108]	; (8008ff0 <tcpip_callback_with_block+0x8c>)
 8008f84:	481b      	ldr	r0, [pc, #108]	; (8008ff4 <tcpip_callback_with_block+0x90>)
 8008f86:	f00b fb5d 	bl	8014644 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008f8a:	2008      	movs	r0, #8
 8008f8c:	f002 ff12 	bl	800bdb4 <memp_malloc>
 8008f90:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f9c:	e01f      	b.n	8008fde <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	609a      	str	r2, [r3, #8]
  if (block) {
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	480b      	ldr	r0, [pc, #44]	; (8008fe8 <tcpip_callback_with_block+0x84>)
 8008fba:	f009 ff91 	bl	8012ee0 <sys_mbox_post>
 8008fbe:	e00d      	b.n	8008fdc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008fc0:	6979      	ldr	r1, [r7, #20]
 8008fc2:	4809      	ldr	r0, [pc, #36]	; (8008fe8 <tcpip_callback_with_block+0x84>)
 8008fc4:	f009 ffa1 	bl	8012f0a <sys_mbox_trypost>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008fce:	6979      	ldr	r1, [r7, #20]
 8008fd0:	2008      	movs	r0, #8
 8008fd2:	f002 ff41 	bl	800be58 <memp_free>
      return ERR_MEM;
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fda:	e000      	b.n	8008fde <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20003e44 	.word	0x20003e44
 8008fec:	0801600c 	.word	0x0801600c
 8008ff0:	08016084 	.word	0x08016084
 8008ff4:	0801605c 	.word	0x0801605c

08008ff8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ERR_OK;
#else /* LWIP_TCPIP_CORE_LOCKING */
  TCPIP_MSG_VAR_DECLARE(msg);

  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f00a f884 	bl	8013112 <sys_sem_valid>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <tcpip_send_msg_wait_sem+0x26>
 8009010:	4b14      	ldr	r3, [pc, #80]	; (8009064 <tcpip_send_msg_wait_sem+0x6c>)
 8009012:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8009016:	4914      	ldr	r1, [pc, #80]	; (8009068 <tcpip_send_msg_wait_sem+0x70>)
 8009018:	4814      	ldr	r0, [pc, #80]	; (800906c <tcpip_send_msg_wait_sem+0x74>)
 800901a:	f00b fb13 	bl	8014644 <iprintf>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800901e:	4814      	ldr	r0, [pc, #80]	; (8009070 <tcpip_send_msg_wait_sem+0x78>)
 8009020:	f009 ffe8 	bl	8012ff4 <sys_mbox_valid>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <tcpip_send_msg_wait_sem+0x40>
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <tcpip_send_msg_wait_sem+0x6c>)
 800902c:	f240 1255 	movw	r2, #341	; 0x155
 8009030:	4910      	ldr	r1, [pc, #64]	; (8009074 <tcpip_send_msg_wait_sem+0x7c>)
 8009032:	480e      	ldr	r0, [pc, #56]	; (800906c <tcpip_send_msg_wait_sem+0x74>)
 8009034:	f00b fb06 	bl	8014644 <iprintf>

  TCPIP_MSG_VAR_ALLOC(msg);
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8009038:	2300      	movs	r3, #0
 800903a:	743b      	strb	r3, [r7, #16]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	617b      	str	r3, [r7, #20]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	61bb      	str	r3, [r7, #24]
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 8009044:	f107 0310 	add.w	r3, r7, #16
 8009048:	4619      	mov	r1, r3
 800904a:	4809      	ldr	r0, [pc, #36]	; (8009070 <tcpip_send_msg_wait_sem+0x78>)
 800904c:	f009 ff48 	bl	8012ee0 <sys_mbox_post>
  sys_arch_sem_wait(sem, 0);
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f00a f812 	bl	801307c <sys_arch_sem_wait>
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
 8009058:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800905a:	4618      	mov	r0, r3
 800905c:	3720      	adds	r7, #32
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	0801600c 	.word	0x0801600c
 8009068:	08016094 	.word	0x08016094
 800906c:	0801605c 	.word	0x0801605c
 8009070:	20003e44 	.word	0x20003e44
 8009074:	08016084 	.word	0x08016084

08009078 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af02      	add	r7, sp, #8
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009082:	f000 f858 	bl	8009136 <lwip_init>

  tcpip_init_done = initfunc;
 8009086:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <tcpip_init+0x50>)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800908c:	4a0f      	ldr	r2, [pc, #60]	; (80090cc <tcpip_init+0x54>)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009092:	2106      	movs	r1, #6
 8009094:	480e      	ldr	r0, [pc, #56]	; (80090d0 <tcpip_init+0x58>)
 8009096:	f009 fef3 	bl	8012e80 <sys_mbox_new>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d006      	beq.n	80090ae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <tcpip_init+0x5c>)
 80090a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80090a6:	490c      	ldr	r1, [pc, #48]	; (80090d8 <tcpip_init+0x60>)
 80090a8:	480c      	ldr	r0, [pc, #48]	; (80090dc <tcpip_init+0x64>)
 80090aa:	f00b facb 	bl	8014644 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80090ae:	2303      	movs	r3, #3
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b6:	2200      	movs	r2, #0
 80090b8:	4909      	ldr	r1, [pc, #36]	; (80090e0 <tcpip_init+0x68>)
 80090ba:	480a      	ldr	r0, [pc, #40]	; (80090e4 <tcpip_init+0x6c>)
 80090bc:	f00a f88c 	bl	80131d8 <sys_thread_new>
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20003e3c 	.word	0x20003e3c
 80090cc:	20003e40 	.word	0x20003e40
 80090d0:	20003e44 	.word	0x20003e44
 80090d4:	0801600c 	.word	0x0801600c
 80090d8:	080160b0 	.word	0x080160b0
 80090dc:	0801605c 	.word	0x0801605c
 80090e0:	08008da1 	.word	0x08008da1
 80090e4:	080160d4 	.word	0x080160d4

080090e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	ba5b      	rev16	r3, r3
 80090f6:	b29b      	uxth	r3, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	061a      	lsls	r2, r3, #24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	0a1b      	lsrs	r3, r3, #8
 800911e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	0e1b      	lsrs	r3, r3, #24
 8009128:	4313      	orrs	r3, r2
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009140:	f00a f806 	bl	8013150 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009144:	f002 fb1e 	bl	800b784 <mem_init>
  memp_init();
 8009148:	f002 fde8 	bl	800bd1c <memp_init>
  pbuf_init();
  netif_init();
 800914c:	f002 feae 	bl	800beac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009150:	f009 f9ca 	bl	80124e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009154:	f003 fe60 	bl	800ce18 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009158:	f009 f864 	bl	8012224 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800916c:	4915      	ldr	r1, [pc, #84]	; (80091c4 <etharp_free_entry+0x60>)
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	4613      	mov	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	4413      	add	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	440b      	add	r3, r1
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d013      	beq.n	80091a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009180:	4910      	ldr	r1, [pc, #64]	; (80091c4 <etharp_free_entry+0x60>)
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	440b      	add	r3, r1
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f003 fbbb 	bl	800c90c <pbuf_free>
    arp_table[i].q = NULL;
 8009196:	490b      	ldr	r1, [pc, #44]	; (80091c4 <etharp_free_entry+0x60>)
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	4613      	mov	r3, r2
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	4413      	add	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	440b      	add	r3, r1
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80091a8:	4906      	ldr	r1, [pc, #24]	; (80091c4 <etharp_free_entry+0x60>)
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	4613      	mov	r3, r2
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	4413      	add	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	440b      	add	r3, r1
 80091b6:	3314      	adds	r3, #20
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80091bc:	bf00      	nop
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20003e48 	.word	0x20003e48

080091c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80091ce:	2300      	movs	r3, #0
 80091d0:	71fb      	strb	r3, [r7, #7]
 80091d2:	e096      	b.n	8009302 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80091d4:	79fa      	ldrb	r2, [r7, #7]
 80091d6:	494f      	ldr	r1, [pc, #316]	; (8009314 <etharp_tmr+0x14c>)
 80091d8:	4613      	mov	r3, r2
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	4413      	add	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	440b      	add	r3, r1
 80091e2:	3314      	adds	r3, #20
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80091e8:	79bb      	ldrb	r3, [r7, #6]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 8086 	beq.w	80092fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80091f0:	79fa      	ldrb	r2, [r7, #7]
 80091f2:	4948      	ldr	r1, [pc, #288]	; (8009314 <etharp_tmr+0x14c>)
 80091f4:	4613      	mov	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	4413      	add	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	440b      	add	r3, r1
 80091fe:	3312      	adds	r3, #18
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	b298      	uxth	r0, r3
 8009206:	4943      	ldr	r1, [pc, #268]	; (8009314 <etharp_tmr+0x14c>)
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	440b      	add	r3, r1
 8009212:	3312      	adds	r3, #18
 8009214:	4602      	mov	r2, r0
 8009216:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009218:	79fa      	ldrb	r2, [r7, #7]
 800921a:	493e      	ldr	r1, [pc, #248]	; (8009314 <etharp_tmr+0x14c>)
 800921c:	4613      	mov	r3, r2
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	4413      	add	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	440b      	add	r3, r1
 8009226:	3312      	adds	r3, #18
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800922e:	d215      	bcs.n	800925c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009230:	79fa      	ldrb	r2, [r7, #7]
 8009232:	4938      	ldr	r1, [pc, #224]	; (8009314 <etharp_tmr+0x14c>)
 8009234:	4613      	mov	r3, r2
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	440b      	add	r3, r1
 800923e:	3314      	adds	r3, #20
 8009240:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009242:	2b01      	cmp	r3, #1
 8009244:	d10f      	bne.n	8009266 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009246:	79fa      	ldrb	r2, [r7, #7]
 8009248:	4932      	ldr	r1, [pc, #200]	; (8009314 <etharp_tmr+0x14c>)
 800924a:	4613      	mov	r3, r2
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4413      	add	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	440b      	add	r3, r1
 8009254:	3312      	adds	r3, #18
 8009256:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009258:	2b04      	cmp	r3, #4
 800925a:	d904      	bls.n	8009266 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ff80 	bl	8009164 <etharp_free_entry>
 8009264:	e04a      	b.n	80092fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009266:	79fa      	ldrb	r2, [r7, #7]
 8009268:	492a      	ldr	r1, [pc, #168]	; (8009314 <etharp_tmr+0x14c>)
 800926a:	4613      	mov	r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	3314      	adds	r3, #20
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d10a      	bne.n	8009292 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800927c:	79fa      	ldrb	r2, [r7, #7]
 800927e:	4925      	ldr	r1, [pc, #148]	; (8009314 <etharp_tmr+0x14c>)
 8009280:	4613      	mov	r3, r2
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	4413      	add	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	440b      	add	r3, r1
 800928a:	3314      	adds	r3, #20
 800928c:	2204      	movs	r2, #4
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	e034      	b.n	80092fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009292:	79fa      	ldrb	r2, [r7, #7]
 8009294:	491f      	ldr	r1, [pc, #124]	; (8009314 <etharp_tmr+0x14c>)
 8009296:	4613      	mov	r3, r2
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4413      	add	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	440b      	add	r3, r1
 80092a0:	3314      	adds	r3, #20
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d10a      	bne.n	80092be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80092a8:	79fa      	ldrb	r2, [r7, #7]
 80092aa:	491a      	ldr	r1, [pc, #104]	; (8009314 <etharp_tmr+0x14c>)
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	440b      	add	r3, r1
 80092b6:	3314      	adds	r3, #20
 80092b8:	2202      	movs	r2, #2
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e01e      	b.n	80092fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80092be:	79fa      	ldrb	r2, [r7, #7]
 80092c0:	4914      	ldr	r1, [pc, #80]	; (8009314 <etharp_tmr+0x14c>)
 80092c2:	4613      	mov	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	3314      	adds	r3, #20
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d113      	bne.n	80092fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80092d4:	79fa      	ldrb	r2, [r7, #7]
 80092d6:	490f      	ldr	r1, [pc, #60]	; (8009314 <etharp_tmr+0x14c>)
 80092d8:	4613      	mov	r3, r2
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	4413      	add	r3, r2
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	440b      	add	r3, r1
 80092e2:	3308      	adds	r3, #8
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	79fa      	ldrb	r2, [r7, #7]
 80092e8:	4613      	mov	r3, r2
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	4413      	add	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4a08      	ldr	r2, [pc, #32]	; (8009314 <etharp_tmr+0x14c>)
 80092f2:	4413      	add	r3, r2
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	f000 fe38 	bl	8009f6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	3301      	adds	r3, #1
 8009300:	71fb      	strb	r3, [r7, #7]
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b09      	cmp	r3, #9
 8009306:	f67f af65 	bls.w	80091d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20003e48 	.word	0x20003e48

08009318 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	460b      	mov	r3, r1
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009326:	230a      	movs	r3, #10
 8009328:	77fb      	strb	r3, [r7, #31]
 800932a:	230a      	movs	r3, #10
 800932c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800932e:	230a      	movs	r3, #10
 8009330:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8009336:	230a      	movs	r3, #10
 8009338:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	833b      	strh	r3, [r7, #24]
 800933e:	2300      	movs	r3, #0
 8009340:	82fb      	strh	r3, [r7, #22]
 8009342:	2300      	movs	r3, #0
 8009344:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009346:	2300      	movs	r3, #0
 8009348:	773b      	strb	r3, [r7, #28]
 800934a:	e093      	b.n	8009474 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800934c:	7f3a      	ldrb	r2, [r7, #28]
 800934e:	4990      	ldr	r1, [pc, #576]	; (8009590 <etharp_find_entry+0x278>)
 8009350:	4613      	mov	r3, r2
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	4413      	add	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	440b      	add	r3, r1
 800935a:	3314      	adds	r3, #20
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009360:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009364:	2b0a      	cmp	r3, #10
 8009366:	d105      	bne.n	8009374 <etharp_find_entry+0x5c>
 8009368:	7cfb      	ldrb	r3, [r7, #19]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800936e:	7f3b      	ldrb	r3, [r7, #28]
 8009370:	777b      	strb	r3, [r7, #29]
 8009372:	e07c      	b.n	800946e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009374:	7cfb      	ldrb	r3, [r7, #19]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d079      	beq.n	800946e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800937a:	7cfb      	ldrb	r3, [r7, #19]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d009      	beq.n	8009394 <etharp_find_entry+0x7c>
 8009380:	7cfb      	ldrb	r3, [r7, #19]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d806      	bhi.n	8009394 <etharp_find_entry+0x7c>
 8009386:	4b83      	ldr	r3, [pc, #524]	; (8009594 <etharp_find_entry+0x27c>)
 8009388:	f44f 7293 	mov.w	r2, #294	; 0x126
 800938c:	4982      	ldr	r1, [pc, #520]	; (8009598 <etharp_find_entry+0x280>)
 800938e:	4883      	ldr	r0, [pc, #524]	; (800959c <etharp_find_entry+0x284>)
 8009390:	f00b f958 	bl	8014644 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00f      	beq.n	80093ba <etharp_find_entry+0xa2>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	7f3a      	ldrb	r2, [r7, #28]
 80093a0:	487b      	ldr	r0, [pc, #492]	; (8009590 <etharp_find_entry+0x278>)
 80093a2:	4613      	mov	r3, r2
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	4413      	add	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4403      	add	r3, r0
 80093ac:	3304      	adds	r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4299      	cmp	r1, r3
 80093b2:	d102      	bne.n	80093ba <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80093b4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80093b8:	e0e5      	b.n	8009586 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80093ba:	7cfb      	ldrb	r3, [r7, #19]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d13b      	bne.n	8009438 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80093c0:	7f3a      	ldrb	r2, [r7, #28]
 80093c2:	4973      	ldr	r1, [pc, #460]	; (8009590 <etharp_find_entry+0x278>)
 80093c4:	4613      	mov	r3, r2
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	4413      	add	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	440b      	add	r3, r1
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d018      	beq.n	8009406 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80093d4:	7f3a      	ldrb	r2, [r7, #28]
 80093d6:	496e      	ldr	r1, [pc, #440]	; (8009590 <etharp_find_entry+0x278>)
 80093d8:	4613      	mov	r3, r2
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	4413      	add	r3, r2
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	440b      	add	r3, r1
 80093e2:	3312      	adds	r3, #18
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	8b3a      	ldrh	r2, [r7, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d840      	bhi.n	800946e <etharp_find_entry+0x156>
            old_queue = i;
 80093ec:	7f3b      	ldrb	r3, [r7, #28]
 80093ee:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80093f0:	7f3a      	ldrb	r2, [r7, #28]
 80093f2:	4967      	ldr	r1, [pc, #412]	; (8009590 <etharp_find_entry+0x278>)
 80093f4:	4613      	mov	r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4413      	add	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	440b      	add	r3, r1
 80093fe:	3312      	adds	r3, #18
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	833b      	strh	r3, [r7, #24]
 8009404:	e033      	b.n	800946e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009406:	7f3a      	ldrb	r2, [r7, #28]
 8009408:	4961      	ldr	r1, [pc, #388]	; (8009590 <etharp_find_entry+0x278>)
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	3312      	adds	r3, #18
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	8afa      	ldrh	r2, [r7, #22]
 800941a:	429a      	cmp	r2, r3
 800941c:	d827      	bhi.n	800946e <etharp_find_entry+0x156>
            old_pending = i;
 800941e:	7f3b      	ldrb	r3, [r7, #28]
 8009420:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009422:	7f3a      	ldrb	r2, [r7, #28]
 8009424:	495a      	ldr	r1, [pc, #360]	; (8009590 <etharp_find_entry+0x278>)
 8009426:	4613      	mov	r3, r2
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	4413      	add	r3, r2
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	440b      	add	r3, r1
 8009430:	3312      	adds	r3, #18
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	82fb      	strh	r3, [r7, #22]
 8009436:	e01a      	b.n	800946e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009438:	7cfb      	ldrb	r3, [r7, #19]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d917      	bls.n	800946e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800943e:	7f3a      	ldrb	r2, [r7, #28]
 8009440:	4953      	ldr	r1, [pc, #332]	; (8009590 <etharp_find_entry+0x278>)
 8009442:	4613      	mov	r3, r2
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	4413      	add	r3, r2
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	440b      	add	r3, r1
 800944c:	3312      	adds	r3, #18
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	8aba      	ldrh	r2, [r7, #20]
 8009452:	429a      	cmp	r2, r3
 8009454:	d80b      	bhi.n	800946e <etharp_find_entry+0x156>
            old_stable = i;
 8009456:	7f3b      	ldrb	r3, [r7, #28]
 8009458:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800945a:	7f3a      	ldrb	r2, [r7, #28]
 800945c:	494c      	ldr	r1, [pc, #304]	; (8009590 <etharp_find_entry+0x278>)
 800945e:	4613      	mov	r3, r2
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	4413      	add	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	440b      	add	r3, r1
 8009468:	3312      	adds	r3, #18
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800946e:	7f3b      	ldrb	r3, [r7, #28]
 8009470:	3301      	adds	r3, #1
 8009472:	773b      	strb	r3, [r7, #28]
 8009474:	7f3b      	ldrb	r3, [r7, #28]
 8009476:	2b09      	cmp	r3, #9
 8009478:	f67f af68 	bls.w	800934c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d108      	bne.n	8009498 <etharp_find_entry+0x180>
 8009486:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800948a:	2b0a      	cmp	r3, #10
 800948c:	d107      	bne.n	800949e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d102      	bne.n	800949e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8009498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800949c:	e073      	b.n	8009586 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800949e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80094a2:	2b09      	cmp	r3, #9
 80094a4:	dc02      	bgt.n	80094ac <etharp_find_entry+0x194>
    i = empty;
 80094a6:	7f7b      	ldrb	r3, [r7, #29]
 80094a8:	773b      	strb	r3, [r7, #28]
 80094aa:	e036      	b.n	800951a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80094ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80094b0:	2b09      	cmp	r3, #9
 80094b2:	dc13      	bgt.n	80094dc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80094b4:	7fbb      	ldrb	r3, [r7, #30]
 80094b6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80094b8:	7f3a      	ldrb	r2, [r7, #28]
 80094ba:	4935      	ldr	r1, [pc, #212]	; (8009590 <etharp_find_entry+0x278>)
 80094bc:	4613      	mov	r3, r2
 80094be:	005b      	lsls	r3, r3, #1
 80094c0:	4413      	add	r3, r2
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	440b      	add	r3, r1
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d018      	beq.n	80094fe <etharp_find_entry+0x1e6>
 80094cc:	4b31      	ldr	r3, [pc, #196]	; (8009594 <etharp_find_entry+0x27c>)
 80094ce:	f240 126f 	movw	r2, #367	; 0x16f
 80094d2:	4933      	ldr	r1, [pc, #204]	; (80095a0 <etharp_find_entry+0x288>)
 80094d4:	4831      	ldr	r0, [pc, #196]	; (800959c <etharp_find_entry+0x284>)
 80094d6:	f00b f8b5 	bl	8014644 <iprintf>
 80094da:	e010      	b.n	80094fe <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80094dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	dc02      	bgt.n	80094ea <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80094e4:	7ffb      	ldrb	r3, [r7, #31]
 80094e6:	773b      	strb	r3, [r7, #28]
 80094e8:	e009      	b.n	80094fe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80094ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	dc02      	bgt.n	80094f8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80094f2:	7efb      	ldrb	r3, [r7, #27]
 80094f4:	773b      	strb	r3, [r7, #28]
 80094f6:	e002      	b.n	80094fe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80094f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094fc:	e043      	b.n	8009586 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80094fe:	7f3b      	ldrb	r3, [r7, #28]
 8009500:	2b09      	cmp	r3, #9
 8009502:	d906      	bls.n	8009512 <etharp_find_entry+0x1fa>
 8009504:	4b23      	ldr	r3, [pc, #140]	; (8009594 <etharp_find_entry+0x27c>)
 8009506:	f240 1281 	movw	r2, #385	; 0x181
 800950a:	4926      	ldr	r1, [pc, #152]	; (80095a4 <etharp_find_entry+0x28c>)
 800950c:	4823      	ldr	r0, [pc, #140]	; (800959c <etharp_find_entry+0x284>)
 800950e:	f00b f899 	bl	8014644 <iprintf>
    etharp_free_entry(i);
 8009512:	7f3b      	ldrb	r3, [r7, #28]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fe25 	bl	8009164 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800951a:	7f3b      	ldrb	r3, [r7, #28]
 800951c:	2b09      	cmp	r3, #9
 800951e:	d906      	bls.n	800952e <etharp_find_entry+0x216>
 8009520:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <etharp_find_entry+0x27c>)
 8009522:	f240 1285 	movw	r2, #389	; 0x185
 8009526:	491f      	ldr	r1, [pc, #124]	; (80095a4 <etharp_find_entry+0x28c>)
 8009528:	481c      	ldr	r0, [pc, #112]	; (800959c <etharp_find_entry+0x284>)
 800952a:	f00b f88b 	bl	8014644 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800952e:	7f3a      	ldrb	r2, [r7, #28]
 8009530:	4917      	ldr	r1, [pc, #92]	; (8009590 <etharp_find_entry+0x278>)
 8009532:	4613      	mov	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4413      	add	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	440b      	add	r3, r1
 800953c:	3314      	adds	r3, #20
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <etharp_find_entry+0x23a>
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <etharp_find_entry+0x27c>)
 8009546:	f240 1287 	movw	r2, #391	; 0x187
 800954a:	4917      	ldr	r1, [pc, #92]	; (80095a8 <etharp_find_entry+0x290>)
 800954c:	4813      	ldr	r0, [pc, #76]	; (800959c <etharp_find_entry+0x284>)
 800954e:	f00b f879 	bl	8014644 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009558:	7f3a      	ldrb	r2, [r7, #28]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6819      	ldr	r1, [r3, #0]
 800955e:	480c      	ldr	r0, [pc, #48]	; (8009590 <etharp_find_entry+0x278>)
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4403      	add	r3, r0
 800956a:	3304      	adds	r3, #4
 800956c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800956e:	7f3a      	ldrb	r2, [r7, #28]
 8009570:	4907      	ldr	r1, [pc, #28]	; (8009590 <etharp_find_entry+0x278>)
 8009572:	4613      	mov	r3, r2
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	4413      	add	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	440b      	add	r3, r1
 800957c:	3312      	adds	r3, #18
 800957e:	2200      	movs	r2, #0
 8009580:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009582:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20003e48 	.word	0x20003e48
 8009594:	080160e4 	.word	0x080160e4
 8009598:	0801611c 	.word	0x0801611c
 800959c:	0801615c 	.word	0x0801615c
 80095a0:	08016184 	.word	0x08016184
 80095a4:	0801619c 	.word	0x0801619c
 80095a8:	080161b0 	.word	0x080161b0

080095ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095c0:	2b06      	cmp	r3, #6
 80095c2:	d006      	beq.n	80095d2 <etharp_update_arp_entry+0x26>
 80095c4:	4b48      	ldr	r3, [pc, #288]	; (80096e8 <etharp_update_arp_entry+0x13c>)
 80095c6:	f240 12ab 	movw	r2, #427	; 0x1ab
 80095ca:	4948      	ldr	r1, [pc, #288]	; (80096ec <etharp_update_arp_entry+0x140>)
 80095cc:	4848      	ldr	r0, [pc, #288]	; (80096f0 <etharp_update_arp_entry+0x144>)
 80095ce:	f00b f839 	bl	8014644 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d012      	beq.n	80095fe <etharp_update_arp_entry+0x52>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00e      	beq.n	80095fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68f9      	ldr	r1, [r7, #12]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 f8d6 	bl	800a798 <ip4_addr_isbroadcast_u32>
 80095ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d105      	bne.n	80095fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80095fa:	2be0      	cmp	r3, #224	; 0xe0
 80095fc:	d102      	bne.n	8009604 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80095fe:	f06f 030f 	mvn.w	r3, #15
 8009602:	e06c      	b.n	80096de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4619      	mov	r1, r3
 800960a:	68b8      	ldr	r0, [r7, #8]
 800960c:	f7ff fe84 	bl	8009318 <etharp_find_entry>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009618:	2b00      	cmp	r3, #0
 800961a:	da02      	bge.n	8009622 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800961c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009620:	e05d      	b.n	80096de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009622:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009626:	4933      	ldr	r1, [pc, #204]	; (80096f4 <etharp_update_arp_entry+0x148>)
 8009628:	4613      	mov	r3, r2
 800962a:	005b      	lsls	r3, r3, #1
 800962c:	4413      	add	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	440b      	add	r3, r1
 8009632:	3314      	adds	r3, #20
 8009634:	2202      	movs	r2, #2
 8009636:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009638:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800963c:	492d      	ldr	r1, [pc, #180]	; (80096f4 <etharp_update_arp_entry+0x148>)
 800963e:	4613      	mov	r3, r2
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	4413      	add	r3, r2
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	440b      	add	r3, r1
 8009648:	3308      	adds	r3, #8
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800964e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009652:	4613      	mov	r3, r2
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	4413      	add	r3, r2
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	3308      	adds	r3, #8
 800965c:	4a25      	ldr	r2, [pc, #148]	; (80096f4 <etharp_update_arp_entry+0x148>)
 800965e:	4413      	add	r3, r2
 8009660:	3304      	adds	r3, #4
 8009662:	2206      	movs	r2, #6
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	4618      	mov	r0, r3
 8009668:	f00a ffd9 	bl	801461e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800966c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009670:	4920      	ldr	r1, [pc, #128]	; (80096f4 <etharp_update_arp_entry+0x148>)
 8009672:	4613      	mov	r3, r2
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	4413      	add	r3, r2
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	440b      	add	r3, r1
 800967c:	3312      	adds	r3, #18
 800967e:	2200      	movs	r2, #0
 8009680:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009682:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009686:	491b      	ldr	r1, [pc, #108]	; (80096f4 <etharp_update_arp_entry+0x148>)
 8009688:	4613      	mov	r3, r2
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	4413      	add	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	440b      	add	r3, r1
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d021      	beq.n	80096dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009698:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800969c:	4915      	ldr	r1, [pc, #84]	; (80096f4 <etharp_update_arp_entry+0x148>)
 800969e:	4613      	mov	r3, r2
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	4413      	add	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	440b      	add	r3, r1
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80096ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80096b0:	4910      	ldr	r1, [pc, #64]	; (80096f4 <etharp_update_arp_entry+0x148>)
 80096b2:	4613      	mov	r3, r2
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	4413      	add	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	440b      	add	r3, r1
 80096bc:	2200      	movs	r2, #0
 80096be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80096c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6939      	ldr	r1, [r7, #16]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f009 fb8d 	bl	8012df0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80096d6:	6938      	ldr	r0, [r7, #16]
 80096d8:	f003 f918 	bl	800c90c <pbuf_free>
  }
  return ERR_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	080160e4 	.word	0x080160e4
 80096ec:	080161dc 	.word	0x080161dc
 80096f0:	0801615c 	.word	0x0801615c
 80096f4:	20003e48 	.word	0x20003e48

080096f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e01f      	b.n	8009746 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8009706:	7bfa      	ldrb	r2, [r7, #15]
 8009708:	4912      	ldr	r1, [pc, #72]	; (8009754 <etharp_cleanup_netif+0x5c>)
 800970a:	4613      	mov	r3, r2
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	4413      	add	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	440b      	add	r3, r1
 8009714:	3314      	adds	r3, #20
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00f      	beq.n	8009740 <etharp_cleanup_netif+0x48>
 8009720:	7bfa      	ldrb	r2, [r7, #15]
 8009722:	490c      	ldr	r1, [pc, #48]	; (8009754 <etharp_cleanup_netif+0x5c>)
 8009724:	4613      	mov	r3, r2
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	4413      	add	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	440b      	add	r3, r1
 800972e:	3308      	adds	r3, #8
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	429a      	cmp	r2, r3
 8009736:	d103      	bne.n	8009740 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fd12 	bl	8009164 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	3301      	adds	r3, #1
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	2b09      	cmp	r3, #9
 800974a:	d9dc      	bls.n	8009706 <etharp_cleanup_netif+0xe>
    }
  }
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20003e48 	.word	0x20003e48

08009758 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009758:	b5b0      	push	{r4, r5, r7, lr}
 800975a:	b08a      	sub	sp, #40	; 0x28
 800975c:	af04      	add	r7, sp, #16
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d107      	bne.n	8009778 <etharp_input+0x20>
 8009768:	4b3d      	ldr	r3, [pc, #244]	; (8009860 <etharp_input+0x108>)
 800976a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800976e:	493d      	ldr	r1, [pc, #244]	; (8009864 <etharp_input+0x10c>)
 8009770:	483d      	ldr	r0, [pc, #244]	; (8009868 <etharp_input+0x110>)
 8009772:	f00a ff67 	bl	8014644 <iprintf>
 8009776:	e06f      	b.n	8009858 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009788:	d10c      	bne.n	80097a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800978e:	2b06      	cmp	r3, #6
 8009790:	d108      	bne.n	80097a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009796:	2b04      	cmp	r3, #4
 8009798:	d104      	bne.n	80097a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80097a0:	2b08      	cmp	r3, #8
 80097a2:	d003      	beq.n	80097ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f003 f8b1 	bl	800c90c <pbuf_free>
    return;
 80097aa:	e055      	b.n	8009858 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	330e      	adds	r3, #14
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	3318      	adds	r3, #24
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	3304      	adds	r3, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <etharp_input+0x74>
    for_us = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e009      	b.n	80097e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	3304      	adds	r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bf0c      	ite	eq
 80097d8:	2301      	moveq	r3, #1
 80097da:	2300      	movne	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f103 0208 	add.w	r2, r3, #8
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <etharp_input+0x98>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e000      	b.n	80097f2 <etharp_input+0x9a>
 80097f0:	2302      	movs	r3, #2
 80097f2:	f107 010c 	add.w	r1, r7, #12
 80097f6:	6838      	ldr	r0, [r7, #0]
 80097f8:	f7ff fed8 	bl	80095ac <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	88db      	ldrh	r3, [r3, #6]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009806:	d003      	beq.n	8009810 <etharp_input+0xb8>
 8009808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980c:	d01e      	beq.n	800984c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800980e:	e020      	b.n	8009852 <etharp_input+0xfa>
    if (for_us) {
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01c      	beq.n	8009850 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8009830:	2102      	movs	r1, #2
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	f107 010c 	add.w	r1, r7, #12
 8009838:	9102      	str	r1, [sp, #8]
 800983a:	9201      	str	r2, [sp, #4]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	462b      	mov	r3, r5
 8009840:	4622      	mov	r2, r4
 8009842:	4601      	mov	r1, r0
 8009844:	6838      	ldr	r0, [r7, #0]
 8009846:	f000 fae3 	bl	8009e10 <etharp_raw>
    break;
 800984a:	e001      	b.n	8009850 <etharp_input+0xf8>
    break;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <etharp_input+0xfa>
    break;
 8009850:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f003 f85a 	bl	800c90c <pbuf_free>
}
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bdb0      	pop	{r4, r5, r7, pc}
 800985e:	bf00      	nop
 8009860:	080160e4 	.word	0x080160e4
 8009864:	08016234 	.word	0x08016234
 8009868:	0801615c 	.word	0x0801615c

0800986c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af02      	add	r7, sp, #8
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800987a:	79fa      	ldrb	r2, [r7, #7]
 800987c:	4944      	ldr	r1, [pc, #272]	; (8009990 <etharp_output_to_arp_index+0x124>)
 800987e:	4613      	mov	r3, r2
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4413      	add	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	440b      	add	r3, r1
 8009888:	3314      	adds	r3, #20
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d806      	bhi.n	800989e <etharp_output_to_arp_index+0x32>
 8009890:	4b40      	ldr	r3, [pc, #256]	; (8009994 <etharp_output_to_arp_index+0x128>)
 8009892:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009896:	4940      	ldr	r1, [pc, #256]	; (8009998 <etharp_output_to_arp_index+0x12c>)
 8009898:	4840      	ldr	r0, [pc, #256]	; (800999c <etharp_output_to_arp_index+0x130>)
 800989a:	f00a fed3 	bl	8014644 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800989e:	79fa      	ldrb	r2, [r7, #7]
 80098a0:	493b      	ldr	r1, [pc, #236]	; (8009990 <etharp_output_to_arp_index+0x124>)
 80098a2:	4613      	mov	r3, r2
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	4413      	add	r3, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	440b      	add	r3, r1
 80098ac:	3314      	adds	r3, #20
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d153      	bne.n	800995c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80098b4:	79fa      	ldrb	r2, [r7, #7]
 80098b6:	4936      	ldr	r1, [pc, #216]	; (8009990 <etharp_output_to_arp_index+0x124>)
 80098b8:	4613      	mov	r3, r2
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	4413      	add	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	440b      	add	r3, r1
 80098c2:	3312      	adds	r3, #18
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80098ca:	d919      	bls.n	8009900 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80098cc:	79fa      	ldrb	r2, [r7, #7]
 80098ce:	4613      	mov	r3, r2
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	4413      	add	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	4a2e      	ldr	r2, [pc, #184]	; (8009990 <etharp_output_to_arp_index+0x124>)
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fb44 	bl	8009f6c <etharp_request>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d138      	bne.n	800995c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80098ea:	79fa      	ldrb	r2, [r7, #7]
 80098ec:	4928      	ldr	r1, [pc, #160]	; (8009990 <etharp_output_to_arp_index+0x124>)
 80098ee:	4613      	mov	r3, r2
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4413      	add	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	440b      	add	r3, r1
 80098f8:	3314      	adds	r3, #20
 80098fa:	2203      	movs	r2, #3
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e02d      	b.n	800995c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009900:	79fa      	ldrb	r2, [r7, #7]
 8009902:	4923      	ldr	r1, [pc, #140]	; (8009990 <etharp_output_to_arp_index+0x124>)
 8009904:	4613      	mov	r3, r2
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	4413      	add	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	3312      	adds	r3, #18
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009916:	d321      	bcc.n	800995c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	4613      	mov	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4413      	add	r3, r2
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <etharp_output_to_arp_index+0x124>)
 8009924:	4413      	add	r3, r2
 8009926:	1d19      	adds	r1, r3, #4
 8009928:	79fa      	ldrb	r2, [r7, #7]
 800992a:	4613      	mov	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	4413      	add	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	3308      	adds	r3, #8
 8009934:	4a16      	ldr	r2, [pc, #88]	; (8009990 <etharp_output_to_arp_index+0x124>)
 8009936:	4413      	add	r3, r2
 8009938:	3304      	adds	r3, #4
 800993a:	461a      	mov	r2, r3
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 faf3 	bl	8009f28 <etharp_request_dst>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d109      	bne.n	800995c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009948:	79fa      	ldrb	r2, [r7, #7]
 800994a:	4911      	ldr	r1, [pc, #68]	; (8009990 <etharp_output_to_arp_index+0x124>)
 800994c:	4613      	mov	r3, r2
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	3314      	adds	r3, #20
 8009958:	2203      	movs	r2, #3
 800995a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8009962:	79fa      	ldrb	r2, [r7, #7]
 8009964:	4613      	mov	r3, r2
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	4413      	add	r3, r2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	3308      	adds	r3, #8
 800996e:	4a08      	ldr	r2, [pc, #32]	; (8009990 <etharp_output_to_arp_index+0x124>)
 8009970:	4413      	add	r3, r2
 8009972:	1d1a      	adds	r2, r3, #4
 8009974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	4613      	mov	r3, r2
 800997c:	460a      	mov	r2, r1
 800997e:	68b9      	ldr	r1, [r7, #8]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f009 fa35 	bl	8012df0 <ethernet_output>
 8009986:	4603      	mov	r3, r0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20003e48 	.word	0x20003e48
 8009994:	080160e4 	.word	0x080160e4
 8009998:	08016254 	.word	0x08016254
 800999c:	0801615c 	.word	0x0801615c

080099a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <etharp_output+0x24>
 80099b6:	4b69      	ldr	r3, [pc, #420]	; (8009b5c <etharp_output+0x1bc>)
 80099b8:	f240 321b 	movw	r2, #795	; 0x31b
 80099bc:	4968      	ldr	r1, [pc, #416]	; (8009b60 <etharp_output+0x1c0>)
 80099be:	4869      	ldr	r0, [pc, #420]	; (8009b64 <etharp_output+0x1c4>)
 80099c0:	f00a fe40 	bl	8014644 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d106      	bne.n	80099d8 <etharp_output+0x38>
 80099ca:	4b64      	ldr	r3, [pc, #400]	; (8009b5c <etharp_output+0x1bc>)
 80099cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80099d0:	4965      	ldr	r1, [pc, #404]	; (8009b68 <etharp_output+0x1c8>)
 80099d2:	4864      	ldr	r0, [pc, #400]	; (8009b64 <etharp_output+0x1c4>)
 80099d4:	f00a fe36 	bl	8014644 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <etharp_output+0x4c>
 80099de:	4b5f      	ldr	r3, [pc, #380]	; (8009b5c <etharp_output+0x1bc>)
 80099e0:	f240 321d 	movw	r2, #797	; 0x31d
 80099e4:	4961      	ldr	r1, [pc, #388]	; (8009b6c <etharp_output+0x1cc>)
 80099e6:	485f      	ldr	r0, [pc, #380]	; (8009b64 <etharp_output+0x1c4>)
 80099e8:	f00a fe2c 	bl	8014644 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68f9      	ldr	r1, [r7, #12]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fed0 	bl	800a798 <ip4_addr_isbroadcast_u32>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80099fe:	4b5c      	ldr	r3, [pc, #368]	; (8009b70 <etharp_output+0x1d0>)
 8009a00:	61fb      	str	r3, [r7, #28]
 8009a02:	e09b      	b.n	8009b3c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a0c:	2be0      	cmp	r3, #224	; 0xe0
 8009a0e:	d118      	bne.n	8009a42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009a10:	2301      	movs	r3, #1
 8009a12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009a14:	2300      	movs	r3, #0
 8009a16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009a18:	235e      	movs	r3, #94	; 0x5e
 8009a1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3303      	adds	r3, #3
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009a3a:	f107 0310 	add.w	r3, r7, #16
 8009a3e:	61fb      	str	r3, [r7, #28]
 8009a40:	e07c      	b.n	8009b3c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	405a      	eors	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3308      	adds	r3, #8
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d012      	beq.n	8009a80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009a60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00b      	beq.n	8009a80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	330c      	adds	r3, #12
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	e002      	b.n	8009a80 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009a7a:	f06f 0303 	mvn.w	r3, #3
 8009a7e:	e069      	b.n	8009b54 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009a80:	4b3c      	ldr	r3, [pc, #240]	; (8009b74 <etharp_output+0x1d4>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	4a3c      	ldr	r2, [pc, #240]	; (8009b78 <etharp_output+0x1d8>)
 8009a88:	460b      	mov	r3, r1
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	440b      	add	r3, r1
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	3314      	adds	r3, #20
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d917      	bls.n	8009aca <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b35      	ldr	r3, [pc, #212]	; (8009b74 <etharp_output+0x1d4>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	4934      	ldr	r1, [pc, #208]	; (8009b78 <etharp_output+0x1d8>)
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	4403      	add	r3, r0
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	440b      	add	r3, r1
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d108      	bne.n	8009aca <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009ab8:	4b2e      	ldr	r3, [pc, #184]	; (8009b74 <etharp_output+0x1d4>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fed3 	bl	800986c <etharp_output_to_arp_index>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	e044      	b.n	8009b54 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009aca:	2300      	movs	r3, #0
 8009acc:	75fb      	strb	r3, [r7, #23]
 8009ace:	e02a      	b.n	8009b26 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009ad0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009ad4:	4928      	ldr	r1, [pc, #160]	; (8009b78 <etharp_output+0x1d8>)
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	440b      	add	r3, r1
 8009ae0:	3314      	adds	r3, #20
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d918      	bls.n	8009b1a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	6819      	ldr	r1, [r3, #0]
 8009aec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009af0:	4821      	ldr	r0, [pc, #132]	; (8009b78 <etharp_output+0x1d8>)
 8009af2:	4613      	mov	r3, r2
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4413      	add	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	4403      	add	r3, r0
 8009afc:	3304      	adds	r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009b00:	4299      	cmp	r1, r3
 8009b02:	d10a      	bne.n	8009b1a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8009b04:	7dfa      	ldrb	r2, [r7, #23]
 8009b06:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <etharp_output+0x1d4>)
 8009b08:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff feab 	bl	800986c <etharp_output_to_arp_index>
 8009b16:	4603      	mov	r3, r0
 8009b18:	e01c      	b.n	8009b54 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	3301      	adds	r3, #1
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	75fb      	strb	r3, [r7, #23]
 8009b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2a:	2b09      	cmp	r3, #9
 8009b2c:	ddd0      	ble.n	8009ad0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	69b9      	ldr	r1, [r7, #24]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f822 	bl	8009b7c <etharp_query>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	e00b      	b.n	8009b54 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8009b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f009 f94f 	bl	8012df0 <ethernet_output>
 8009b52:	4603      	mov	r3, r0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	080160e4 	.word	0x080160e4
 8009b60:	08016234 	.word	0x08016234
 8009b64:	0801615c 	.word	0x0801615c
 8009b68:	08016284 	.word	0x08016284
 8009b6c:	08016224 	.word	0x08016224
 8009b70:	08018054 	.word	0x08018054
 8009b74:	20003f38 	.word	0x20003f38
 8009b78:	20003e48 	.word	0x20003e48

08009b7c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08c      	sub	sp, #48	; 0x30
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3325      	adds	r3, #37	; 0x25
 8009b8c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009b8e:	23ff      	movs	r3, #255	; 0xff
 8009b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fdfa 	bl	800a798 <ip4_addr_isbroadcast_u32>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10c      	bne.n	8009bc4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009bb2:	2be0      	cmp	r3, #224	; 0xe0
 8009bb4:	d006      	beq.n	8009bc4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d102      	bne.n	8009bca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009bc4:	f06f 030f 	mvn.w	r3, #15
 8009bc8:	e10f      	b.n	8009dea <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	2101      	movs	r1, #1
 8009bce:	68b8      	ldr	r0, [r7, #8]
 8009bd0:	f7ff fba2 	bl	8009318 <etharp_find_entry>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8009bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da02      	bge.n	8009be6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8009be0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009be4:	e101      	b.n	8009dea <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009be6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bea:	4982      	ldr	r1, [pc, #520]	; (8009df4 <etharp_query+0x278>)
 8009bec:	4613      	mov	r3, r2
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	4413      	add	r3, r2
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	440b      	add	r3, r1
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d117      	bne.n	8009c2e <etharp_query+0xb2>
    is_new_entry = 1;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009c02:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c06:	497b      	ldr	r1, [pc, #492]	; (8009df4 <etharp_query+0x278>)
 8009c08:	4613      	mov	r3, r2
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	440b      	add	r3, r1
 8009c12:	3314      	adds	r3, #20
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009c18:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c1c:	4975      	ldr	r1, [pc, #468]	; (8009df4 <etharp_query+0x278>)
 8009c1e:	4613      	mov	r3, r2
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	4413      	add	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	440b      	add	r3, r1
 8009c28:	3308      	adds	r3, #8
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009c2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c32:	4970      	ldr	r1, [pc, #448]	; (8009df4 <etharp_query+0x278>)
 8009c34:	4613      	mov	r3, r2
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	4413      	add	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3314      	adds	r3, #20
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d012      	beq.n	8009c6c <etharp_query+0xf0>
 8009c46:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c4a:	496a      	ldr	r1, [pc, #424]	; (8009df4 <etharp_query+0x278>)
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	4413      	add	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	440b      	add	r3, r1
 8009c56:	3314      	adds	r3, #20
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d806      	bhi.n	8009c6c <etharp_query+0xf0>
 8009c5e:	4b66      	ldr	r3, [pc, #408]	; (8009df8 <etharp_query+0x27c>)
 8009c60:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009c64:	4965      	ldr	r1, [pc, #404]	; (8009dfc <etharp_query+0x280>)
 8009c66:	4866      	ldr	r0, [pc, #408]	; (8009e00 <etharp_query+0x284>)
 8009c68:	f00a fcec 	bl	8014644 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <etharp_query+0xfc>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f976 	bl	8009f6c <etharp_request>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d102      	bne.n	8009c92 <etharp_query+0x116>
      return result;
 8009c8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c90:	e0ab      	b.n	8009dea <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <etharp_query+0x12a>
 8009c98:	4b57      	ldr	r3, [pc, #348]	; (8009df8 <etharp_query+0x27c>)
 8009c9a:	f240 32db 	movw	r2, #987	; 0x3db
 8009c9e:	4959      	ldr	r1, [pc, #356]	; (8009e04 <etharp_query+0x288>)
 8009ca0:	4857      	ldr	r0, [pc, #348]	; (8009e00 <etharp_query+0x284>)
 8009ca2:	f00a fccf 	bl	8014644 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009ca6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009caa:	4952      	ldr	r1, [pc, #328]	; (8009df4 <etharp_query+0x278>)
 8009cac:	4613      	mov	r3, r2
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3314      	adds	r3, #20
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d919      	bls.n	8009cf2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8009cbe:	7cfa      	ldrb	r2, [r7, #19]
 8009cc0:	4b51      	ldr	r3, [pc, #324]	; (8009e08 <etharp_query+0x28c>)
 8009cc2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009cc4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	4413      	add	r3, r2
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	4a48      	ldr	r2, [pc, #288]	; (8009df4 <etharp_query+0x278>)
 8009cd4:	4413      	add	r3, r2
 8009cd6:	1d1a      	adds	r2, r3, #4
 8009cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f009 f883 	bl	8012df0 <ethernet_output>
 8009cea:	4603      	mov	r3, r0
 8009cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cf0:	e079      	b.n	8009de6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009cf2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cf6:	493f      	ldr	r1, [pc, #252]	; (8009df4 <etharp_query+0x278>)
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	4413      	add	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	440b      	add	r3, r1
 8009d02:	3314      	adds	r3, #20
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d16d      	bne.n	8009de6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009d12:	e01a      	b.n	8009d4a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	895a      	ldrh	r2, [r3, #10]
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	891b      	ldrh	r3, [r3, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d10a      	bne.n	8009d36 <etharp_query+0x1ba>
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <etharp_query+0x1ba>
 8009d28:	4b33      	ldr	r3, [pc, #204]	; (8009df8 <etharp_query+0x27c>)
 8009d2a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009d2e:	4937      	ldr	r1, [pc, #220]	; (8009e0c <etharp_query+0x290>)
 8009d30:	4833      	ldr	r0, [pc, #204]	; (8009e00 <etharp_query+0x284>)
 8009d32:	f00a fc87 	bl	8014644 <iprintf>
      if (p->type != PBUF_ROM) {
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	7b1b      	ldrb	r3, [r3, #12]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d002      	beq.n	8009d44 <etharp_query+0x1c8>
        copy_needed = 1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	61bb      	str	r3, [r7, #24]
        break;
 8009d42:	e005      	b.n	8009d50 <etharp_query+0x1d4>
      }
      p = p->next;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e1      	bne.n	8009d14 <etharp_query+0x198>
    }
    if (copy_needed) {
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d017      	beq.n	8009d86 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	891b      	ldrh	r3, [r3, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	2002      	movs	r0, #2
 8009d60:	f002 fa62 	bl	800c228 <pbuf_alloc>
 8009d64:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d011      	beq.n	8009d90 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8009d6c:	6879      	ldr	r1, [r7, #4]
 8009d6e:	69f8      	ldr	r0, [r7, #28]
 8009d70:	f002 ff0c 	bl	800cb8c <pbuf_copy>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <etharp_query+0x214>
          pbuf_free(p);
 8009d7a:	69f8      	ldr	r0, [r7, #28]
 8009d7c:	f002 fdc6 	bl	800c90c <pbuf_free>
          p = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	e004      	b.n	8009d90 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009d8a:	69f8      	ldr	r0, [r7, #28]
 8009d8c:	f002 fe70 	bl	800ca70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d024      	beq.n	8009de0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009d96:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009d9a:	4916      	ldr	r1, [pc, #88]	; (8009df4 <etharp_query+0x278>)
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	4413      	add	r3, r2
 8009da2:	00db      	lsls	r3, r3, #3
 8009da4:	440b      	add	r3, r1
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8009dac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009db0:	4910      	ldr	r1, [pc, #64]	; (8009df4 <etharp_query+0x278>)
 8009db2:	4613      	mov	r3, r2
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	4413      	add	r3, r2
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	440b      	add	r3, r1
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 fda4 	bl	800c90c <pbuf_free>
      }
      arp_table[i].q = p;
 8009dc4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009dc8:	490a      	ldr	r1, [pc, #40]	; (8009df4 <etharp_query+0x278>)
 8009dca:	4613      	mov	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	4413      	add	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	440b      	add	r3, r1
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dde:	e002      	b.n	8009de6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009de0:	23ff      	movs	r3, #255	; 0xff
 8009de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009de6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3728      	adds	r7, #40	; 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20003e48 	.word	0x20003e48
 8009df8:	080160e4 	.word	0x080160e4
 8009dfc:	08016290 	.word	0x08016290
 8009e00:	0801615c 	.word	0x0801615c
 8009e04:	08016284 	.word	0x08016284
 8009e08:	20003f38 	.word	0x20003f38
 8009e0c:	080162b8 	.word	0x080162b8

08009e10 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08a      	sub	sp, #40	; 0x28
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <etharp_raw+0x26>
 8009e28:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <etharp_raw+0x104>)
 8009e2a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8009e2e:	493a      	ldr	r1, [pc, #232]	; (8009f18 <etharp_raw+0x108>)
 8009e30:	483a      	ldr	r0, [pc, #232]	; (8009f1c <etharp_raw+0x10c>)
 8009e32:	f00a fc07 	bl	8014644 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009e36:	2200      	movs	r2, #0
 8009e38:	211c      	movs	r1, #28
 8009e3a:	2002      	movs	r0, #2
 8009e3c:	f002 f9f4 	bl	800c228 <pbuf_alloc>
 8009e40:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4c:	e05d      	b.n	8009f0a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	895b      	ldrh	r3, [r3, #10]
 8009e52:	2b1b      	cmp	r3, #27
 8009e54:	d806      	bhi.n	8009e64 <etharp_raw+0x54>
 8009e56:	4b2f      	ldr	r3, [pc, #188]	; (8009f14 <etharp_raw+0x104>)
 8009e58:	f240 4264 	movw	r2, #1124	; 0x464
 8009e5c:	4930      	ldr	r1, [pc, #192]	; (8009f20 <etharp_raw+0x110>)
 8009e5e:	482f      	ldr	r0, [pc, #188]	; (8009f1c <etharp_raw+0x10c>)
 8009e60:	f00a fbf0 	bl	8014644 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009e6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff f93b 	bl	80090e8 <lwip_htons>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e80:	2b06      	cmp	r3, #6
 8009e82:	d006      	beq.n	8009e92 <etharp_raw+0x82>
 8009e84:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <etharp_raw+0x104>)
 8009e86:	f240 426b 	movw	r2, #1131	; 0x46b
 8009e8a:	4926      	ldr	r1, [pc, #152]	; (8009f24 <etharp_raw+0x114>)
 8009e8c:	4823      	ldr	r0, [pc, #140]	; (8009f1c <etharp_raw+0x10c>)
 8009e8e:	f00a fbd9 	bl	8014644 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	3308      	adds	r3, #8
 8009e96:	2206      	movs	r2, #6
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f00a fbbf 	bl	801461e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	3312      	adds	r3, #18
 8009ea4:	2206      	movs	r2, #6
 8009ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f00a fbb8 	bl	801461e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	330e      	adds	r3, #14
 8009eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	3318      	adds	r3, #24
 8009ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f042 0208 	orr.w	r2, r2, #8
 8009ed8:	709a      	strb	r2, [r3, #2]
 8009eda:	2200      	movs	r2, #0
 8009edc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2206      	movs	r2, #6
 8009ee2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009eea:	f640 0306 	movw	r3, #2054	; 0x806
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	69b9      	ldr	r1, [r7, #24]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f008 ff7a 	bl	8012df0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009efc:	69b8      	ldr	r0, [r7, #24]
 8009efe:	f002 fd05 	bl	800c90c <pbuf_free>
  p = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009f06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3720      	adds	r7, #32
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	080160e4 	.word	0x080160e4
 8009f18:	08016234 	.word	0x08016234
 8009f1c:	0801615c 	.word	0x0801615c
 8009f20:	080162d4 	.word	0x080162d4
 8009f24:	08016308 	.word	0x08016308

08009f28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af04      	add	r7, sp, #16
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009f44:	2201      	movs	r2, #1
 8009f46:	9203      	str	r2, [sp, #12]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	9202      	str	r2, [sp, #8]
 8009f4c:	4a06      	ldr	r2, [pc, #24]	; (8009f68 <etharp_request_dst+0x40>)
 8009f4e:	9201      	str	r2, [sp, #4]
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4603      	mov	r3, r0
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff ff5a 	bl	8009e10 <etharp_raw>
 8009f5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	0801805c 	.word	0x0801805c

08009f6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009f76:	4a05      	ldr	r2, [pc, #20]	; (8009f8c <etharp_request+0x20>)
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff ffd4 	bl	8009f28 <etharp_request_dst>
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	08018054 	.word	0x08018054

08009f90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af04      	add	r7, sp, #16
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009f9a:	4b7a      	ldr	r3, [pc, #488]	; (800a184 <icmp_input+0x1f4>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f003 030f 	and.w	r3, r3, #15
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fb2:	2b13      	cmp	r3, #19
 8009fb4:	f240 80d1 	bls.w	800a15a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	895b      	ldrh	r3, [r3, #10]
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	f240 80ce 	bls.w	800a15e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 80bb 	beq.w	800a14c <icmp_input+0x1bc>
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	f040 80bb 	bne.w	800a152 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8009fdc:	4b6a      	ldr	r3, [pc, #424]	; (800a188 <icmp_input+0x1f8>)
 8009fde:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009fe0:	4b68      	ldr	r3, [pc, #416]	; (800a184 <icmp_input+0x1f4>)
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fe8:	2be0      	cmp	r3, #224	; 0xe0
 8009fea:	f000 80bf 	beq.w	800a16c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009fee:	4b65      	ldr	r3, [pc, #404]	; (800a184 <icmp_input+0x1f4>)
 8009ff0:	695a      	ldr	r2, [r3, #20]
 8009ff2:	4b64      	ldr	r3, [pc, #400]	; (800a184 <icmp_input+0x1f4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f000 fbcd 	bl	800a798 <ip4_addr_isbroadcast_u32>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	f040 80b5 	bne.w	800a170 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	891b      	ldrh	r3, [r3, #8]
 800a00a:	2b07      	cmp	r3, #7
 800a00c:	f240 80a9 	bls.w	800a162 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a012:	330e      	adds	r3, #14
 800a014:	b29b      	uxth	r3, r3
 800a016:	b21b      	sxth	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f002 fc52 	bl	800c8c4 <pbuf_header>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d046      	beq.n	800a0b4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	891a      	ldrh	r2, [r3, #8]
 800a02a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a02c:	4413      	add	r3, r2
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2200      	movs	r2, #0
 800a032:	4619      	mov	r1, r3
 800a034:	2002      	movs	r0, #2
 800a036:	f002 f8f7 	bl	800c228 <pbuf_alloc>
 800a03a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8098 	beq.w	800a174 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	895b      	ldrh	r3, [r3, #10]
 800a048:	461a      	mov	r2, r3
 800a04a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a04c:	3308      	adds	r3, #8
 800a04e:	429a      	cmp	r2, r3
 800a050:	d203      	bcs.n	800a05a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800a052:	69b8      	ldr	r0, [r7, #24]
 800a054:	f002 fc5a 	bl	800c90c <pbuf_free>
        goto icmperr;
 800a058:	e08d      	b.n	800a176 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a062:	4618      	mov	r0, r3
 800a064:	f00a fadb 	bl	801461e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800a068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a06a:	425b      	negs	r3, r3
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	b21b      	sxth	r3, r3
 800a070:	4619      	mov	r1, r3
 800a072:	69b8      	ldr	r0, [r7, #24]
 800a074:	f002 fc26 	bl	800c8c4 <pbuf_header>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a07e:	4b43      	ldr	r3, [pc, #268]	; (800a18c <icmp_input+0x1fc>)
 800a080:	22af      	movs	r2, #175	; 0xaf
 800a082:	4943      	ldr	r1, [pc, #268]	; (800a190 <icmp_input+0x200>)
 800a084:	4843      	ldr	r0, [pc, #268]	; (800a194 <icmp_input+0x204>)
 800a086:	f00a fadd 	bl	8014644 <iprintf>
        pbuf_free(r);
 800a08a:	69b8      	ldr	r0, [r7, #24]
 800a08c:	f002 fc3e 	bl	800c90c <pbuf_free>
        goto icmperr;
 800a090:	e071      	b.n	800a176 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	69b8      	ldr	r0, [r7, #24]
 800a096:	f002 fd79 	bl	800cb8c <pbuf_copy>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d003      	beq.n	800a0a8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800a0a0:	69b8      	ldr	r0, [r7, #24]
 800a0a2:	f002 fc33 	bl	800c90c <pbuf_free>
        goto icmperr;
 800a0a6:	e066      	b.n	800a176 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f002 fc2f 	bl	800c90c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	607b      	str	r3, [r7, #4]
 800a0b2:	e015      	b.n	800a0e0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a0b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0b6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800a0ba:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a0be:	33f2      	adds	r3, #242	; 0xf2
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	b21b      	sxth	r3, r3
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 fbfc 	bl	800c8c4 <pbuf_header>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d006      	beq.n	800a0e0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a0d2:	4b2e      	ldr	r3, [pc, #184]	; (800a18c <icmp_input+0x1fc>)
 800a0d4:	22c0      	movs	r2, #192	; 0xc0
 800a0d6:	4930      	ldr	r1, [pc, #192]	; (800a198 <icmp_input+0x208>)
 800a0d8:	482e      	ldr	r0, [pc, #184]	; (800a194 <icmp_input+0x204>)
 800a0da:	f00a fab3 	bl	8014644 <iprintf>
        goto icmperr;
 800a0de:	e04a      	b.n	800a176 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800a0e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f002 fbe9 	bl	800c8c4 <pbuf_header>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d12b      	bne.n	800a150 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a106:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <icmp_input+0x1f4>)
 800a108:	691a      	ldr	r2, [r3, #16]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	2200      	movs	r2, #0
 800a118:	709a      	strb	r2, [r3, #2]
 800a11a:	2200      	movs	r2, #0
 800a11c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	22ff      	movs	r2, #255	; 0xff
 800a122:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2200      	movs	r2, #0
 800a128:	729a      	strb	r2, [r3, #10]
 800a12a:	2200      	movs	r2, #0
 800a12c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	9302      	str	r3, [sp, #8]
 800a132:	2301      	movs	r3, #1
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	2300      	movs	r3, #0
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	23ff      	movs	r3, #255	; 0xff
 800a13c:	2200      	movs	r2, #0
 800a13e:	69f9      	ldr	r1, [r7, #28]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fa57 	bl	800a5f4 <ip4_output_if>
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a14a:	e001      	b.n	800a150 <icmp_input+0x1c0>
    break;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <icmp_input+0x1c2>
    break;
 800a150:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f002 fbda 	bl	800c90c <pbuf_free>
  return;
 800a158:	e011      	b.n	800a17e <icmp_input+0x1ee>
    goto lenerr;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <icmp_input+0x1d4>
    goto lenerr;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <icmp_input+0x1d4>
      goto lenerr;
 800a162:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f002 fbd1 	bl	800c90c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a16a:	e008      	b.n	800a17e <icmp_input+0x1ee>
      goto icmperr;
 800a16c:	bf00      	nop
 800a16e:	e002      	b.n	800a176 <icmp_input+0x1e6>
      goto icmperr;
 800a170:	bf00      	nop
 800a172:	e000      	b.n	800a176 <icmp_input+0x1e6>
        goto icmperr;
 800a174:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f002 fbc8 	bl	800c90c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a17c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a17e:	3728      	adds	r7, #40	; 0x28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20004028 	.word	0x20004028
 800a188:	2000403c 	.word	0x2000403c
 800a18c:	0801634c 	.word	0x0801634c
 800a190:	08016384 	.word	0x08016384
 800a194:	080163bc 	.word	0x080163bc
 800a198:	080163e4 	.word	0x080163e4

0800a19c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2103      	movs	r1, #3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f814 	bl	800a1dc <icmp_send_response>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	210b      	movs	r1, #11
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f804 	bl	800a1dc <icmp_send_response>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08c      	sub	sp, #48	; 0x30
 800a1e0:	af04      	add	r7, sp, #16
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2124      	movs	r1, #36	; 0x24
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f002 f819 	bl	800c228 <pbuf_alloc>
 800a1f6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04c      	beq.n	800a298 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	895b      	ldrh	r3, [r3, #10]
 800a202:	2b23      	cmp	r3, #35	; 0x23
 800a204:	d806      	bhi.n	800a214 <icmp_send_response+0x38>
 800a206:	4b26      	ldr	r3, [pc, #152]	; (800a2a0 <icmp_send_response+0xc4>)
 800a208:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a20c:	4925      	ldr	r1, [pc, #148]	; (800a2a4 <icmp_send_response+0xc8>)
 800a20e:	4826      	ldr	r0, [pc, #152]	; (800a2a8 <icmp_send_response+0xcc>)
 800a210:	f00a fa18 	bl	8014644 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	78ba      	ldrb	r2, [r7, #2]
 800a22a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2200      	movs	r2, #0
 800a230:	711a      	strb	r2, [r3, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2200      	movs	r2, #0
 800a23a:	719a      	strb	r2, [r3, #6]
 800a23c:	2200      	movs	r2, #0
 800a23e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f103 0008 	add.w	r0, r3, #8
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	221c      	movs	r2, #28
 800a24e:	4619      	mov	r1, r3
 800a250:	f00a f9e5 	bl	801461e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 f824 	bl	800a2ac <ip4_route>
 800a264:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d011      	beq.n	800a290 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	709a      	strb	r2, [r3, #2]
 800a272:	2200      	movs	r2, #0
 800a274:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a276:	f107 020c 	add.w	r2, r7, #12
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	2301      	movs	r3, #1
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	2300      	movs	r3, #0
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	23ff      	movs	r3, #255	; 0xff
 800a288:	2100      	movs	r1, #0
 800a28a:	69f8      	ldr	r0, [r7, #28]
 800a28c:	f000 f9b2 	bl	800a5f4 <ip4_output_if>
  }
  pbuf_free(q);
 800a290:	69f8      	ldr	r0, [r7, #28]
 800a292:	f002 fb3b 	bl	800c90c <pbuf_free>
 800a296:	e000      	b.n	800a29a <icmp_send_response+0xbe>
    return;
 800a298:	bf00      	nop
}
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	0801634c 	.word	0x0801634c
 800a2a4:	08016418 	.word	0x08016418
 800a2a8:	080163bc 	.word	0x080163bc

0800a2ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a2b4:	4b2f      	ldr	r3, [pc, #188]	; (800a374 <ip4_route+0xc8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	e033      	b.n	800a324 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d029      	beq.n	800a31e <ip4_route+0x72>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d022      	beq.n	800a31e <ip4_route+0x72>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01d      	beq.n	800a31e <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	405a      	eors	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	e033      	b.n	800a366 <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <ip4_route+0x72>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	330c      	adds	r3, #12
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d101      	bne.n	800a31e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	e023      	b.n	800a366 <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1c8      	bne.n	800a2bc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a32a:	4b13      	ldr	r3, [pc, #76]	; (800a378 <ip4_route+0xcc>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d015      	beq.n	800a35e <ip4_route+0xb2>
 800a332:	4b11      	ldr	r3, [pc, #68]	; (800a378 <ip4_route+0xcc>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00d      	beq.n	800a35e <ip4_route+0xb2>
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <ip4_route+0xcc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a352:	4b09      	ldr	r3, [pc, #36]	; (800a378 <ip4_route+0xcc>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3304      	adds	r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	e001      	b.n	800a366 <ip4_route+0xba>
  }

  return netif_default;
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <ip4_route+0xcc>)
 800a364:	681b      	ldr	r3, [r3, #0]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20007728 	.word	0x20007728
 800a378:	2000772c 	.word	0x2000772c

0800a37c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b04      	cmp	r3, #4
 800a396:	d004      	beq.n	800a3a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f002 fab7 	bl	800c90c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e120      	b.n	800a5e4 <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a3ae:	897b      	ldrh	r3, [r7, #10]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	885b      	ldrh	r3, [r3, #2]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fe94 	bl	80090e8 <lwip_htons>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	893a      	ldrh	r2, [r7, #8]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d204      	bcs.n	800a3d8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800a3ce:	893b      	ldrh	r3, [r7, #8]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f002 f926 	bl	800c624 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	895b      	ldrh	r3, [r3, #10]
 800a3dc:	897a      	ldrh	r2, [r7, #10]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d807      	bhi.n	800a3f2 <ip4_input+0x76>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	891b      	ldrh	r3, [r3, #8]
 800a3e6:	893a      	ldrh	r2, [r7, #8]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d802      	bhi.n	800a3f2 <ip4_input+0x76>
 800a3ec:	897b      	ldrh	r3, [r7, #10]
 800a3ee:	2b13      	cmp	r3, #19
 800a3f0:	d804      	bhi.n	800a3fc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f002 fa8a 	bl	800c90c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e0f3      	b.n	800a5e4 <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	4a7a      	ldr	r2, [pc, #488]	; (800a5ec <ip4_input+0x270>)
 800a402:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	4a78      	ldr	r2, [pc, #480]	; (800a5ec <ip4_input+0x270>)
 800a40a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a40c:	4b77      	ldr	r3, [pc, #476]	; (800a5ec <ip4_input+0x270>)
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a414:	2be0      	cmp	r3, #224	; 0xe0
 800a416:	d111      	bne.n	800a43c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d007      	beq.n	800a436 <ip4_input+0xba>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	3304      	adds	r3, #4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <ip4_input+0xba>
      netif = inp;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	e040      	b.n	800a4b8 <ip4_input+0x13c>
    } else {
      netif = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e03d      	b.n	800a4b8 <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a43c:	2301      	movs	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d014      	beq.n	800a47c <ip4_input+0x100>
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	3304      	adds	r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00f      	beq.n	800a47c <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a45c:	4b63      	ldr	r3, [pc, #396]	; (800a5ec <ip4_input+0x270>)
 800a45e:	695a      	ldr	r2, [r3, #20]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	3304      	adds	r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d026      	beq.n	800a4b8 <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a46a:	4b60      	ldr	r3, [pc, #384]	; (800a5ec <ip4_input+0x270>)
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	6939      	ldr	r1, [r7, #16]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 f991 	bl	800a798 <ip4_addr_isbroadcast_u32>
 800a476:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11d      	bne.n	800a4b8 <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00d      	beq.n	800a49e <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a482:	4b5a      	ldr	r3, [pc, #360]	; (800a5ec <ip4_input+0x270>)
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b7f      	cmp	r3, #127	; 0x7f
 800a48a:	d102      	bne.n	800a492 <ip4_input+0x116>
          netif = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	613b      	str	r3, [r7, #16]
          break;
 800a490:	e012      	b.n	800a4b8 <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800a496:	4b56      	ldr	r3, [pc, #344]	; (800a5f0 <ip4_input+0x274>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	e002      	b.n	800a4a4 <ip4_input+0x128>
      } else {
        netif = netif->next;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d102      	bne.n	800a4b2 <ip4_input+0x136>
        netif = netif->next;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1c5      	bne.n	800a444 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a4b8:	4b4c      	ldr	r3, [pc, #304]	; (800a5ec <ip4_input+0x270>)
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f96a 	bl	800a798 <ip4_addr_isbroadcast_u32>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a4ca:	4b48      	ldr	r3, [pc, #288]	; (800a5ec <ip4_input+0x270>)
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a4d2:	2be0      	cmp	r3, #224	; 0xe0
 800a4d4:	d104      	bne.n	800a4e0 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f002 fa18 	bl	800c90c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e081      	b.n	800a5e4 <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d104      	bne.n	800a4f0 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f002 fa10 	bl	800c90c <pbuf_free>
    return ERR_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e079      	b.n	800a5e4 <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	88db      	ldrh	r3, [r3, #6]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fde0 	bl	800b0c8 <ip4_reass>
 800a508:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <ip4_input+0x198>
      return ERR_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	e067      	b.n	800a5e4 <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a51a:	4a34      	ldr	r2, [pc, #208]	; (800a5ec <ip4_input+0x270>)
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a520:	4a32      	ldr	r2, [pc, #200]	; (800a5ec <ip4_input+0x270>)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a526:	4a31      	ldr	r2, [pc, #196]	; (800a5ec <ip4_input+0x270>)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	b29b      	uxth	r3, r3
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	b29b      	uxth	r3, r3
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <ip4_input+0x270>)
 800a53e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a540:	897b      	ldrh	r3, [r7, #10]
 800a542:	425b      	negs	r3, r3
 800a544:	b29b      	uxth	r3, r3
 800a546:	b21b      	sxth	r3, r3
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f002 f9ba 	bl	800c8c4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	7a5b      	ldrb	r3, [r3, #9]
 800a554:	2b06      	cmp	r3, #6
 800a556:	d009      	beq.n	800a56c <ip4_input+0x1f0>
 800a558:	2b11      	cmp	r3, #17
 800a55a:	d002      	beq.n	800a562 <ip4_input+0x1e6>
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d00a      	beq.n	800a576 <ip4_input+0x1fa>
 800a560:	e00e      	b.n	800a580 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f008 f83b 	bl	80125e0 <udp_input>
      break;
 800a56a:	e028      	b.n	800a5be <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f004 f862 	bl	800e638 <tcp_input>
      break;
 800a574:	e023      	b.n	800a5be <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a576:	6839      	ldr	r1, [r7, #0]
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fd09 	bl	8009f90 <icmp_input>
      break;
 800a57e:	e01e      	b.n	800a5be <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a580:	4b1a      	ldr	r3, [pc, #104]	; (800a5ec <ip4_input+0x270>)
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	6939      	ldr	r1, [r7, #16]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f906 	bl	800a798 <ip4_addr_isbroadcast_u32>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d112      	bne.n	800a5b8 <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a592:	4b16      	ldr	r3, [pc, #88]	; (800a5ec <ip4_input+0x270>)
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a59a:	2be0      	cmp	r3, #224	; 0xe0
 800a59c:	d00c      	beq.n	800a5b8 <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a59e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f002 f99f 	bl	800c8e8 <pbuf_header_force>
        p->payload = iphdr;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff fdf2 	bl	800a19c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f002 f9a7 	bl	800c90c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <ip4_input+0x270>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <ip4_input+0x270>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <ip4_input+0x270>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <ip4_input+0x270>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <ip4_input+0x270>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a5dc:	4b03      	ldr	r3, [pc, #12]	; (800a5ec <ip4_input+0x270>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20004028 	.word	0x20004028
 800a5f0:	20007728 	.word	0x20007728

0800a5f4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	; 0x28
 800a5f8:	af04      	add	r7, sp, #16
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d009      	beq.n	800a620 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <ip4_output_if+0x26>
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	3304      	adds	r3, #4
 800a61e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	4613      	mov	r3, r2
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	6979      	ldr	r1, [r7, #20]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 f805 	bl	800a648 <ip4_output_if_src>
 800a63e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	89db      	ldrh	r3, [r3, #14]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d006      	beq.n	800a66c <ip4_output_if_src+0x24>
 800a65e:	4b48      	ldr	r3, [pc, #288]	; (800a780 <ip4_output_if_src+0x138>)
 800a660:	f240 3233 	movw	r2, #819	; 0x333
 800a664:	4947      	ldr	r1, [pc, #284]	; (800a784 <ip4_output_if_src+0x13c>)
 800a666:	4848      	ldr	r0, [pc, #288]	; (800a788 <ip4_output_if_src+0x140>)
 800a668:	f009 ffec 	bl	8014644 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d060      	beq.n	800a734 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a672:	2314      	movs	r3, #20
 800a674:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a676:	2114      	movs	r1, #20
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f002 f923 	bl	800c8c4 <pbuf_header>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a684:	f06f 0301 	mvn.w	r3, #1
 800a688:	e075      	b.n	800a776 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	895b      	ldrh	r3, [r3, #10]
 800a694:	2b13      	cmp	r3, #19
 800a696:	d806      	bhi.n	800a6a6 <ip4_output_if_src+0x5e>
 800a698:	4b39      	ldr	r3, [pc, #228]	; (800a780 <ip4_output_if_src+0x138>)
 800a69a:	f240 3261 	movw	r2, #865	; 0x361
 800a69e:	493b      	ldr	r1, [pc, #236]	; (800a78c <ip4_output_if_src+0x144>)
 800a6a0:	4839      	ldr	r0, [pc, #228]	; (800a788 <ip4_output_if_src+0x140>)
 800a6a2:	f009 ffcf 	bl	8014644 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a6b2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a6bc:	8bfb      	ldrh	r3, [r7, #30]
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a6d4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	891b      	ldrh	r3, [r3, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fe fd04 	bl	80090e8 <lwip_htons>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	719a      	strb	r2, [r3, #6]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a6f2:	4b27      	ldr	r3, [pc, #156]	; (800a790 <ip4_output_if_src+0x148>)
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fcf6 	bl	80090e8 <lwip_htons>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	461a      	mov	r2, r3
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a704:	4b22      	ldr	r3, [pc, #136]	; (800a790 <ip4_output_if_src+0x148>)
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	3301      	adds	r3, #1
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	4b20      	ldr	r3, [pc, #128]	; (800a790 <ip4_output_if_src+0x148>)
 800a70e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d104      	bne.n	800a720 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a716:	4b1f      	ldr	r3, [pc, #124]	; (800a794 <ip4_output_if_src+0x14c>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	60da      	str	r2, [r3, #12]
 800a71e:	e003      	b.n	800a728 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2200      	movs	r2, #0
 800a72c:	729a      	strb	r2, [r3, #10]
 800a72e:	2200      	movs	r2, #0
 800a730:	72da      	strb	r2, [r3, #11]
 800a732:	e008      	b.n	800a746 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a740:	f107 0314 	add.w	r3, r7, #20
 800a744:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <ip4_output_if_src+0x120>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	891a      	ldrh	r2, [r3, #8]
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a756:	429a      	cmp	r2, r3
 800a758:	d906      	bls.n	800a768 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 fe5a 	bl	800b418 <ip4_frag>
 800a764:	4603      	mov	r3, r0
 800a766:	e006      	b.n	800a776 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	68f9      	ldr	r1, [r7, #12]
 800a770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a772:	4798      	blx	r3
 800a774:	4603      	mov	r3, r0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3720      	adds	r7, #32
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	08016444 	.word	0x08016444
 800a784:	08016478 	.word	0x08016478
 800a788:	08016484 	.word	0x08016484
 800a78c:	080164ac 	.word	0x080164ac
 800a790:	20003f3a 	.word	0x20003f3a
 800a794:	08017f40 	.word	0x08017f40

0800a798 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ac:	d002      	beq.n	800a7b4 <ip4_addr_isbroadcast_u32+0x1c>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e02a      	b.n	800a80e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e021      	b.n	800a80e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d101      	bne.n	800a7da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e019      	b.n	800a80e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	405a      	eors	r2, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10d      	bne.n	800a80c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	43da      	mvns	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a804:	429a      	cmp	r2, r3
 800a806:	d101      	bne.n	800a80c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a808:	2301      	movs	r3, #1
 800a80a:	e000      	b.n	800a80e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a80c:	2300      	movs	r3, #0
  }
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800a822:	f107 030c 	add.w	r3, r7, #12
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f80b 	bl	800a844 <ip4addr_aton>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	e001      	b.n	800a83c <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800a84e:	f107 030c 	add.w	r3, r7, #12
 800a852:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 800a85c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a860:	2b2f      	cmp	r3, #47	; 0x2f
 800a862:	d903      	bls.n	800a86c <ip4addr_aton+0x28>
 800a864:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a868:	2b39      	cmp	r3, #57	; 0x39
 800a86a:	d901      	bls.n	800a870 <ip4addr_aton+0x2c>
      return 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e11e      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    val = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800a874:	230a      	movs	r3, #10
 800a876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800a87a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a87e:	2b30      	cmp	r3, #48	; 0x30
 800a880:	d11c      	bne.n	800a8bc <ip4addr_aton+0x78>
      c = *++cp;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3301      	adds	r3, #1
 800a886:	607b      	str	r3, [r7, #4]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800a890:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a894:	2b78      	cmp	r3, #120	; 0x78
 800a896:	d003      	beq.n	800a8a0 <ip4addr_aton+0x5c>
 800a898:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a89c:	2b58      	cmp	r3, #88	; 0x58
 800a89e:	d10a      	bne.n	800a8b6 <ip4addr_aton+0x72>
        base = 16;
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	607b      	str	r3, [r7, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a8b4:	e002      	b.n	800a8bc <ip4addr_aton+0x78>
      } else {
        base = 8;
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 800a8bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8c0:	2b2f      	cmp	r3, #47	; 0x2f
 800a8c2:	d915      	bls.n	800a8f0 <ip4addr_aton+0xac>
 800a8c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8c8:	2b39      	cmp	r3, #57	; 0x39
 800a8ca:	d811      	bhi.n	800a8f0 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 800a8cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8d2:	fb02 f203 	mul.w	r2, r2, r3
 800a8d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8da:	4413      	add	r3, r2
 800a8dc:	3b30      	subs	r3, #48	; 0x30
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	607b      	str	r3, [r7, #4]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a8ee:	e036      	b.n	800a95e <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 800a8f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d133      	bne.n	800a960 <ip4addr_aton+0x11c>
 800a8f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a8fc:	2b2f      	cmp	r3, #47	; 0x2f
 800a8fe:	d903      	bls.n	800a908 <ip4addr_aton+0xc4>
 800a900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a904:	2b39      	cmp	r3, #57	; 0x39
 800a906:	d90f      	bls.n	800a928 <ip4addr_aton+0xe4>
 800a908:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a90c:	2b60      	cmp	r3, #96	; 0x60
 800a90e:	d903      	bls.n	800a918 <ip4addr_aton+0xd4>
 800a910:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a914:	2b66      	cmp	r3, #102	; 0x66
 800a916:	d907      	bls.n	800a928 <ip4addr_aton+0xe4>
 800a918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a91c:	2b40      	cmp	r3, #64	; 0x40
 800a91e:	d91f      	bls.n	800a960 <ip4addr_aton+0x11c>
 800a920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a924:	2b46      	cmp	r3, #70	; 0x46
 800a926:	d81b      	bhi.n	800a960 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a930:	f102 010a 	add.w	r1, r2, #10
 800a934:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a938:	2a60      	cmp	r2, #96	; 0x60
 800a93a:	d905      	bls.n	800a948 <ip4addr_aton+0x104>
 800a93c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a940:	2a7a      	cmp	r2, #122	; 0x7a
 800a942:	d801      	bhi.n	800a948 <ip4addr_aton+0x104>
 800a944:	2261      	movs	r2, #97	; 0x61
 800a946:	e000      	b.n	800a94a <ip4addr_aton+0x106>
 800a948:	2241      	movs	r2, #65	; 0x41
 800a94a:	1a8a      	subs	r2, r1, r2
 800a94c:	4313      	orrs	r3, r2
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3301      	adds	r3, #1
 800a954:	607b      	str	r3, [r7, #4]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 800a95e:	e7ad      	b.n	800a8bc <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 800a960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a964:	2b2e      	cmp	r3, #46	; 0x2e
 800a966:	d114      	bne.n	800a992 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800a968:	f107 030c 	add.w	r3, r7, #12
 800a96c:	330c      	adds	r3, #12
 800a96e:	69fa      	ldr	r2, [r7, #28]
 800a970:	4293      	cmp	r3, r2
 800a972:	d801      	bhi.n	800a978 <ip4addr_aton+0x134>
        return 0;
 800a974:	2300      	movs	r3, #0
 800a976:	e09a      	b.n	800aaae <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	1d1a      	adds	r2, r3, #4
 800a97c:	61fa      	str	r2, [r7, #28]
 800a97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a980:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3301      	adds	r3, #1
 800a986:	607b      	str	r3, [r7, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 800a990:	e764      	b.n	800a85c <ip4addr_aton+0x18>
    } else {
      break;
 800a992:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800a994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d019      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a99c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d015      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a9a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9a8:	2b0c      	cmp	r3, #12
 800a9aa:	d011      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a9ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9b0:	2b0a      	cmp	r3, #10
 800a9b2:	d00d      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a9b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9b8:	2b0d      	cmp	r3, #13
 800a9ba:	d009      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a9bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9c0:	2b09      	cmp	r3, #9
 800a9c2:	d005      	beq.n	800a9d0 <ip4addr_aton+0x18c>
 800a9c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a9c8:	2b0b      	cmp	r3, #11
 800a9ca:	d001      	beq.n	800a9d0 <ip4addr_aton+0x18c>
    return 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e06e      	b.n	800aaae <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800a9d0:	69fa      	ldr	r2, [r7, #28]
 800a9d2:	f107 030c 	add.w	r3, r7, #12
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	109b      	asrs	r3, r3, #2
 800a9da:	3301      	adds	r3, #1
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d853      	bhi.n	800aa88 <ip4addr_aton+0x244>
 800a9e0:	a201      	add	r2, pc, #4	; (adr r2, 800a9e8 <ip4addr_aton+0x1a4>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800a9fd 	.word	0x0800a9fd
 800a9ec:	0800aa99 	.word	0x0800aa99
 800a9f0:	0800aa01 	.word	0x0800aa01
 800a9f4:	0800aa23 	.word	0x0800aa23
 800a9f8:	0800aa51 	.word	0x0800aa51

  case 0:
    return 0;       /* initial nondigit */
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e056      	b.n	800aaae <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa06:	d301      	bcc.n	800aa0c <ip4addr_aton+0x1c8>
      return 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e050      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2bff      	cmp	r3, #255	; 0xff
 800aa10:	d901      	bls.n	800aa16 <ip4addr_aton+0x1d2>
      return 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e04b      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	061b      	lsls	r3, r3, #24
 800aa1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800aa20:	e03b      	b.n	800aa9a <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d301      	bcc.n	800aa2e <ip4addr_aton+0x1ea>
      return 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e03f      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2bff      	cmp	r3, #255	; 0xff
 800aa32:	d802      	bhi.n	800aa3a <ip4addr_aton+0x1f6>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2bff      	cmp	r3, #255	; 0xff
 800aa38:	d901      	bls.n	800aa3e <ip4addr_aton+0x1fa>
      return 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e037      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	061a      	lsls	r2, r3, #24
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	041b      	lsls	r3, r3, #16
 800aa46:	4313      	orrs	r3, r2
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800aa4e:	e024      	b.n	800aa9a <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	2bff      	cmp	r3, #255	; 0xff
 800aa54:	d901      	bls.n	800aa5a <ip4addr_aton+0x216>
      return 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e029      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2bff      	cmp	r3, #255	; 0xff
 800aa5e:	d805      	bhi.n	800aa6c <ip4addr_aton+0x228>
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2bff      	cmp	r3, #255	; 0xff
 800aa64:	d802      	bhi.n	800aa6c <ip4addr_aton+0x228>
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2bff      	cmp	r3, #255	; 0xff
 800aa6a:	d901      	bls.n	800aa70 <ip4addr_aton+0x22c>
      return 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e01e      	b.n	800aaae <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	061a      	lsls	r2, r3, #24
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	041b      	lsls	r3, r3, #16
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa82:	4313      	orrs	r3, r2
 800aa84:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800aa86:	e008      	b.n	800aa9a <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 800aa88:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <ip4addr_aton+0x274>)
 800aa8a:	f240 1203 	movw	r2, #259	; 0x103
 800aa8e:	490b      	ldr	r1, [pc, #44]	; (800aabc <ip4addr_aton+0x278>)
 800aa90:	480b      	ldr	r0, [pc, #44]	; (800aac0 <ip4addr_aton+0x27c>)
 800aa92:	f009 fdd7 	bl	8014644 <iprintf>
    break;
 800aa96:	e000      	b.n	800aa9a <ip4addr_aton+0x256>
    break;
 800aa98:	bf00      	nop
  }
  if (addr) {
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800aaa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa2:	f7fe fb2f 	bl	8009104 <lwip_htonl>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800aaac:	2301      	movs	r3, #1
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	080164dc 	.word	0x080164dc
 800aabc:	08016518 	.word	0x08016518
 800aac0:	08016524 	.word	0x08016524

0800aac4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <ip_reass_tmr+0x54>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800aad4:	e018      	b.n	800ab08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	7fdb      	ldrb	r3, [r3, #31]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <ip_reass_tmr+0x32>
      r->timer--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	7fdb      	ldrb	r3, [r3, #31]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e008      	b.n	800ab08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ab00:	68b9      	ldr	r1, [r7, #8]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f80a 	bl	800ab1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e3      	bne.n	800aad6 <ip_reass_tmr+0x12>
     }
   }
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20003f3c 	.word	0x20003f3c

0800ab1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d105      	bne.n	800ab3e <ip_reass_free_complete_datagram+0x22>
 800ab32:	4b45      	ldr	r3, [pc, #276]	; (800ac48 <ip_reass_free_complete_datagram+0x12c>)
 800ab34:	22ab      	movs	r2, #171	; 0xab
 800ab36:	4945      	ldr	r1, [pc, #276]	; (800ac4c <ip_reass_free_complete_datagram+0x130>)
 800ab38:	4845      	ldr	r0, [pc, #276]	; (800ac50 <ip_reass_free_complete_datagram+0x134>)
 800ab3a:	f009 fd83 	bl	8014644 <iprintf>
  if (prev != NULL) {
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d005      	beq.n	800ab5a <ip_reass_free_complete_datagram+0x3e>
 800ab4e:	4b3e      	ldr	r3, [pc, #248]	; (800ac48 <ip_reass_free_complete_datagram+0x12c>)
 800ab50:	22ad      	movs	r2, #173	; 0xad
 800ab52:	4940      	ldr	r1, [pc, #256]	; (800ac54 <ip_reass_free_complete_datagram+0x138>)
 800ab54:	483e      	ldr	r0, [pc, #248]	; (800ac50 <ip_reass_free_complete_datagram+0x134>)
 800ab56:	f009 fd75 	bl	8014644 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	889b      	ldrh	r3, [r3, #4]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d12a      	bne.n	800abc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	6858      	ldr	r0, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3308      	adds	r3, #8
 800ab82:	2214      	movs	r2, #20
 800ab84:	4619      	mov	r1, r3
 800ab86:	f009 fd4a 	bl	801461e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	69b8      	ldr	r0, [r7, #24]
 800ab8e:	f7ff fb15 	bl	800a1bc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ab92:	69b8      	ldr	r0, [r7, #24]
 800ab94:	f001 ff54 	bl	800ca40 <pbuf_clen>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ab9c:	8bfa      	ldrh	r2, [r7, #30]
 800ab9e:	8a7b      	ldrh	r3, [r7, #18]
 800aba0:	4413      	add	r3, r2
 800aba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba6:	db05      	blt.n	800abb4 <ip_reass_free_complete_datagram+0x98>
 800aba8:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <ip_reass_free_complete_datagram+0x12c>)
 800abaa:	22bc      	movs	r2, #188	; 0xbc
 800abac:	492a      	ldr	r1, [pc, #168]	; (800ac58 <ip_reass_free_complete_datagram+0x13c>)
 800abae:	4828      	ldr	r0, [pc, #160]	; (800ac50 <ip_reass_free_complete_datagram+0x134>)
 800abb0:	f009 fd48 	bl	8014644 <iprintf>
    pbufs_freed += clen;
 800abb4:	8bfa      	ldrh	r2, [r7, #30]
 800abb6:	8a7b      	ldrh	r3, [r7, #18]
 800abb8:	4413      	add	r3, r2
 800abba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800abbc:	69b8      	ldr	r0, [r7, #24]
 800abbe:	f001 fea5 	bl	800c90c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800abc8:	e01f      	b.n	800ac0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	617b      	str	r3, [r7, #20]
    pcur = p;
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f001 ff30 	bl	800ca40 <pbuf_clen>
 800abe0:	4603      	mov	r3, r0
 800abe2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800abe4:	8bfa      	ldrh	r2, [r7, #30]
 800abe6:	8a7b      	ldrh	r3, [r7, #18]
 800abe8:	4413      	add	r3, r2
 800abea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abee:	db05      	blt.n	800abfc <ip_reass_free_complete_datagram+0xe0>
 800abf0:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <ip_reass_free_complete_datagram+0x12c>)
 800abf2:	22cc      	movs	r2, #204	; 0xcc
 800abf4:	4918      	ldr	r1, [pc, #96]	; (800ac58 <ip_reass_free_complete_datagram+0x13c>)
 800abf6:	4816      	ldr	r0, [pc, #88]	; (800ac50 <ip_reass_free_complete_datagram+0x134>)
 800abf8:	f009 fd24 	bl	8014644 <iprintf>
    pbufs_freed += clen;
 800abfc:	8bfa      	ldrh	r2, [r7, #30]
 800abfe:	8a7b      	ldrh	r3, [r7, #18]
 800ac00:	4413      	add	r3, r2
 800ac02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f001 fe81 	bl	800c90c <pbuf_free>
  while (p != NULL) {
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1dc      	bne.n	800abca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f8c2 	bl	800ad9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800ac18:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <ip_reass_free_complete_datagram+0x140>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	8bfa      	ldrh	r2, [r7, #30]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d905      	bls.n	800ac2e <ip_reass_free_complete_datagram+0x112>
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <ip_reass_free_complete_datagram+0x12c>)
 800ac24:	22d2      	movs	r2, #210	; 0xd2
 800ac26:	490e      	ldr	r1, [pc, #56]	; (800ac60 <ip_reass_free_complete_datagram+0x144>)
 800ac28:	4809      	ldr	r0, [pc, #36]	; (800ac50 <ip_reass_free_complete_datagram+0x134>)
 800ac2a:	f009 fd0b 	bl	8014644 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800ac2e:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <ip_reass_free_complete_datagram+0x140>)
 800ac30:	881a      	ldrh	r2, [r3, #0]
 800ac32:	8bfb      	ldrh	r3, [r7, #30]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	4b08      	ldr	r3, [pc, #32]	; (800ac5c <ip_reass_free_complete_datagram+0x140>)
 800ac3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ac3c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	0801654c 	.word	0x0801654c
 800ac4c:	08016588 	.word	0x08016588
 800ac50:	08016594 	.word	0x08016594
 800ac54:	080165bc 	.word	0x080165bc
 800ac58:	080165d0 	.word	0x080165d0
 800ac5c:	20003f40 	.word	0x20003f40
 800ac60:	080165f0 	.word	0x080165f0

0800ac64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	; 0x28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ac82:	4b28      	ldr	r3, [pc, #160]	; (800ad24 <ip_reass_remove_oldest_datagram+0xc0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ac88:	e030      	b.n	800acec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	695a      	ldr	r2, [r3, #20]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d10c      	bne.n	800acb0 <ip_reass_remove_oldest_datagram+0x4c>
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d106      	bne.n	800acb0 <ip_reass_remove_oldest_datagram+0x4c>
 800aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca4:	899a      	ldrh	r2, [r3, #12]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	889b      	ldrh	r3, [r3, #4]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	429a      	cmp	r2, r3
 800acae:	d014      	beq.n	800acda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3301      	adds	r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d104      	bne.n	800acc6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	61bb      	str	r3, [r7, #24]
 800acc4:	e009      	b.n	800acda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	7fda      	ldrb	r2, [r3, #31]
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	7fdb      	ldrb	r3, [r3, #31]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d803      	bhi.n	800acda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1cb      	bne.n	800ac8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d008      	beq.n	800ad0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800acf8:	69b9      	ldr	r1, [r7, #24]
 800acfa:	6a38      	ldr	r0, [r7, #32]
 800acfc:	f7ff ff0e 	bl	800ab1c <ip_reass_free_complete_datagram>
 800ad00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	da02      	bge.n	800ad18 <ip_reass_remove_oldest_datagram+0xb4>
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	dcac      	bgt.n	800ac72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ad18:	697b      	ldr	r3, [r7, #20]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3728      	adds	r7, #40	; 0x28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20003f3c 	.word	0x20003f3c

0800ad28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ad32:	2004      	movs	r0, #4
 800ad34:	f001 f83e 	bl	800bdb4 <memp_malloc>
 800ad38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d110      	bne.n	800ad62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff8e 	bl	800ac64 <ip_reass_remove_oldest_datagram>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	db03      	blt.n	800ad58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ad50:	2004      	movs	r0, #4
 800ad52:	f001 f82f 	bl	800bdb4 <memp_malloc>
 800ad56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e016      	b.n	800ad90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ad62:	2220      	movs	r2, #32
 800ad64:	2100      	movs	r1, #0
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f009 fc64 	bl	8014634 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2203      	movs	r2, #3
 800ad70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ad72:	4b09      	ldr	r3, [pc, #36]	; (800ad98 <ip_reass_enqueue_new_datagram+0x70>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ad7a:	4a07      	ldr	r2, [pc, #28]	; (800ad98 <ip_reass_enqueue_new_datagram+0x70>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	3308      	adds	r3, #8
 800ad84:	2214      	movs	r2, #20
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f009 fc48 	bl	801461e <memcpy>
  return ipr;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20003f3c 	.word	0x20003f3c

0800ad9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ada6:	4b10      	ldr	r3, [pc, #64]	; (800ade8 <ip_reass_dequeue_datagram+0x4c>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	429a      	cmp	r2, r3
 800adae:	d104      	bne.n	800adba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a0c      	ldr	r2, [pc, #48]	; (800ade8 <ip_reass_dequeue_datagram+0x4c>)
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	e00d      	b.n	800add6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <ip_reass_dequeue_datagram+0x32>
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <ip_reass_dequeue_datagram+0x50>)
 800adc2:	f240 1245 	movw	r2, #325	; 0x145
 800adc6:	490a      	ldr	r1, [pc, #40]	; (800adf0 <ip_reass_dequeue_datagram+0x54>)
 800adc8:	480a      	ldr	r0, [pc, #40]	; (800adf4 <ip_reass_dequeue_datagram+0x58>)
 800adca:	f009 fc3b 	bl	8014644 <iprintf>
    prev->next = ipr->next;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	2004      	movs	r0, #4
 800adda:	f001 f83d 	bl	800be58 <memp_free>
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20003f3c 	.word	0x20003f3c
 800adec:	0801654c 	.word	0x0801654c
 800adf0:	0801660c 	.word	0x0801660c
 800adf4:	08016594 	.word	0x08016594

0800adf8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08c      	sub	sp, #48	; 0x30
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	885b      	ldrh	r3, [r3, #2]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe f965 	bl	80090e8 <lwip_htons>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	461a      	mov	r2, r3
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	88db      	ldrh	r3, [r3, #6]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe f953 	bl	80090e8 <lwip_htons>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	2200      	movs	r2, #0
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	705a      	strb	r2, [r3, #1]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	709a      	strb	r2, [r3, #2]
 800ae62:	2200      	movs	r2, #0
 800ae64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	8b3a      	ldrh	r2, [r7, #24]
 800ae6a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800ae6c:	8b3a      	ldrh	r2, [r7, #24]
 800ae6e:	8b7b      	ldrh	r3, [r7, #26]
 800ae70:	4413      	add	r3, r2
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7e:	e061      	b.n	800af44 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	889b      	ldrh	r3, [r3, #4]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	889b      	ldrh	r3, [r3, #4]
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d232      	bcs.n	800aefc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ae96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01f      	beq.n	800aee2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	88db      	ldrh	r3, [r3, #6]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	f0c0 80e8 	bcc.w	800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	88db      	ldrh	r3, [r3, #6]
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	889b      	ldrh	r3, [r3, #4]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	429a      	cmp	r2, r3
 800aec2:	f200 80df 	bhi.w	800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	88db      	ldrh	r3, [r3, #6]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	889b      	ldrh	r3, [r3, #4]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d037      	beq.n	800af4c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800aee0:	e034      	b.n	800af4c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	88db      	ldrh	r3, [r3, #6]
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	889b      	ldrh	r3, [r3, #4]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	429a      	cmp	r2, r3
 800aef0:	f200 80c3 	bhi.w	800b07a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	605a      	str	r2, [r3, #4]
      break;
 800aefa:	e027      	b.n	800af4c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	889b      	ldrh	r3, [r3, #4]
 800af00:	b29a      	uxth	r2, r3
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	889b      	ldrh	r3, [r3, #4]
 800af06:	b29b      	uxth	r3, r3
 800af08:	429a      	cmp	r2, r3
 800af0a:	f000 80b8 	beq.w	800b07e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	889b      	ldrh	r3, [r3, #4]
 800af12:	b29a      	uxth	r2, r3
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	88db      	ldrh	r3, [r3, #6]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	429a      	cmp	r2, r3
 800af1c:	f0c0 80b1 	bcc.w	800b082 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	2b00      	cmp	r3, #0
 800af24:	d009      	beq.n	800af3a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	88db      	ldrh	r3, [r3, #6]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	889b      	ldrh	r3, [r3, #4]
 800af30:	b29b      	uxth	r3, r3
 800af32:	429a      	cmp	r2, r3
 800af34:	d001      	beq.n	800af3a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	d19a      	bne.n	800ae80 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800af4a:	e000      	b.n	800af4e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800af4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	d12d      	bne.n	800afb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d01c      	beq.n	800af94 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	88db      	ldrh	r3, [r3, #6]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	889b      	ldrh	r3, [r3, #4]
 800af64:	b29b      	uxth	r3, r3
 800af66:	429a      	cmp	r2, r3
 800af68:	d906      	bls.n	800af78 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800af6a:	4b50      	ldr	r3, [pc, #320]	; (800b0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800af6c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800af70:	494f      	ldr	r1, [pc, #316]	; (800b0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800af72:	4850      	ldr	r0, [pc, #320]	; (800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800af74:	f009 fb66 	bl	8014644 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	b29a      	uxth	r2, r3
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	889b      	ldrh	r3, [r3, #4]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d010      	beq.n	800afb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	623b      	str	r3, [r7, #32]
 800af92:	e00d      	b.n	800afb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d006      	beq.n	800afaa <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800af9c:	4b43      	ldr	r3, [pc, #268]	; (800b0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800af9e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800afa2:	4945      	ldr	r1, [pc, #276]	; (800b0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800afa4:	4843      	ldr	r0, [pc, #268]	; (800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800afa6:	f009 fb4d 	bl	8014644 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d105      	bne.n	800afc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	7f9b      	ldrb	r3, [r3, #30]
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d059      	beq.n	800b076 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d04f      	beq.n	800b068 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d006      	beq.n	800afde <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	889b      	ldrh	r3, [r3, #4]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	623b      	str	r3, [r7, #32]
 800afe2:	e041      	b.n	800b068 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800afee:	e012      	b.n	800b016 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	88db      	ldrh	r3, [r3, #6]
 800affa:	b29a      	uxth	r2, r3
 800affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	b29b      	uxth	r3, r3
 800b002:	429a      	cmp	r2, r3
 800b004:	d002      	beq.n	800b00c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	623b      	str	r3, [r7, #32]
            break;
 800b00a:	e007      	b.n	800b01c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e9      	bne.n	800aff0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d022      	beq.n	800b068 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d106      	bne.n	800b038 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800b02a:	4b20      	ldr	r3, [pc, #128]	; (800b0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b02c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800b030:	4922      	ldr	r1, [pc, #136]	; (800b0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b032:	4820      	ldr	r0, [pc, #128]	; (800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b034:	f009 fb06 	bl	8014644 <iprintf>
          LWIP_ASSERT("sanity check",
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	429a      	cmp	r2, r3
 800b042:	d106      	bne.n	800b052 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800b044:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b046:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b04a:	491c      	ldr	r1, [pc, #112]	; (800b0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b04c:	4819      	ldr	r0, [pc, #100]	; (800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b04e:	f009 faf9 	bl	8014644 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d006      	beq.n	800b068 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800b05a:	4b14      	ldr	r3, [pc, #80]	; (800b0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b05c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b060:	4917      	ldr	r1, [pc, #92]	; (800b0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b062:	4814      	ldr	r0, [pc, #80]	; (800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b064:	f009 faee 	bl	8014644 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	bf14      	ite	ne
 800b06e:	2301      	movne	r3, #1
 800b070:	2300      	moveq	r3, #0
 800b072:	b2db      	uxtb	r3, r3
 800b074:	e016      	b.n	800b0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b076:	2300      	movs	r3, #0
 800b078:	e014      	b.n	800b0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800b07a:	bf00      	nop
 800b07c:	e002      	b.n	800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b07e:	bf00      	nop
 800b080:	e000      	b.n	800b084 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b082:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b084:	68b8      	ldr	r0, [r7, #8]
 800b086:	f001 fcdb 	bl	800ca40 <pbuf_clen>
 800b08a:	4603      	mov	r3, r0
 800b08c:	461a      	mov	r2, r3
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	1a9b      	subs	r3, r3, r2
 800b094:	b29a      	uxth	r2, r3
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b098:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800b09a:	68b8      	ldr	r0, [r7, #8]
 800b09c:	f001 fc36 	bl	800c90c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3730      	adds	r7, #48	; 0x30
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0801654c 	.word	0x0801654c
 800b0b0:	08016628 	.word	0x08016628
 800b0b4:	08016594 	.word	0x08016594
 800b0b8:	08016648 	.word	0x08016648
 800b0bc:	08016680 	.word	0x08016680
 800b0c0:	08016690 	.word	0x08016690
 800b0c4:	20003f40 	.word	0x20003f40

0800b0c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08e      	sub	sp, #56	; 0x38
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	2b14      	cmp	r3, #20
 800b0e2:	f040 8131 	bne.w	800b348 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	88db      	ldrh	r3, [r3, #6]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fd fffb 	bl	80090e8 <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	885b      	ldrh	r3, [r3, #2]
 800b102:	b29b      	uxth	r3, r3
 800b104:	4618      	mov	r0, r3
 800b106:	f7fd ffef 	bl	80090e8 <lwip_htons>
 800b10a:	4603      	mov	r3, r0
 800b10c:	461a      	mov	r2, r3
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	f003 030f 	and.w	r3, r3, #15
 800b118:	b29b      	uxth	r3, r3
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f001 fc8c 	bl	800ca40 <pbuf_clen>
 800b128:	4603      	mov	r3, r0
 800b12a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b12c:	4b8c      	ldr	r3, [pc, #560]	; (800b360 <ip4_reass+0x298>)
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b134:	4413      	add	r3, r2
 800b136:	2b0a      	cmp	r3, #10
 800b138:	dd10      	ble.n	800b15c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b13c:	4619      	mov	r1, r3
 800b13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b140:	f7ff fd90 	bl	800ac64 <ip_reass_remove_oldest_datagram>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 8101 	beq.w	800b34e <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b14c:	4b84      	ldr	r3, [pc, #528]	; (800b360 <ip4_reass+0x298>)
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	461a      	mov	r2, r3
 800b152:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b154:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b156:	2b0a      	cmp	r3, #10
 800b158:	f300 80f9 	bgt.w	800b34e <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b15c:	4b81      	ldr	r3, [pc, #516]	; (800b364 <ip4_reass+0x29c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
 800b162:	e015      	b.n	800b190 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	695a      	ldr	r2, [r3, #20]
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d10c      	bne.n	800b18a <ip4_reass+0xc2>
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	699a      	ldr	r2, [r3, #24]
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d106      	bne.n	800b18a <ip4_reass+0xc2>
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	899a      	ldrh	r2, [r3, #12]
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	889b      	ldrh	r3, [r3, #4]
 800b184:	b29b      	uxth	r3, r3
 800b186:	429a      	cmp	r2, r3
 800b188:	d006      	beq.n	800b198 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	633b      	str	r3, [r7, #48]	; 0x30
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e6      	bne.n	800b164 <ip4_reass+0x9c>
 800b196:	e000      	b.n	800b19a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b198:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b1a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a6:	f7ff fdbf 	bl	800ad28 <ip_reass_enqueue_new_datagram>
 800b1aa:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d11c      	bne.n	800b1ec <ip4_reass+0x124>
      goto nullreturn;
 800b1b2:	e0cc      	b.n	800b34e <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	88db      	ldrh	r3, [r3, #6]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fd ff94 	bl	80090e8 <lwip_htons>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d110      	bne.n	800b1ec <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	89db      	ldrh	r3, [r3, #14]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fd ff8a 	bl	80090e8 <lwip_htons>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d006      	beq.n	800b1ec <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	2214      	movs	r2, #20
 800b1e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f009 fa19 	bl	801461e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bf0c      	ite	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	2300      	movne	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00e      	beq.n	800b226 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800b208:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b20a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b20c:	4413      	add	r3, r2
 800b20e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b210:	8b7a      	ldrh	r2, [r7, #26]
 800b212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b214:	429a      	cmp	r2, r3
 800b216:	f0c0 809a 	bcc.w	800b34e <ip4_reass+0x286>
 800b21a:	8b7b      	ldrh	r3, [r7, #26]
 800b21c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800b220:	4293      	cmp	r3, r2
 800b222:	f200 8094 	bhi.w	800b34e <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	6879      	ldr	r1, [r7, #4]
 800b22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b22c:	f7ff fde4 	bl	800adf8 <ip_reass_chain_frag_into_datagram_and_validate>
 800b230:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b238:	f000 8088 	beq.w	800b34c <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b23c:	4b48      	ldr	r3, [pc, #288]	; (800b360 <ip4_reass+0x298>)
 800b23e:	881a      	ldrh	r2, [r3, #0]
 800b240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b242:	4413      	add	r3, r2
 800b244:	b29a      	uxth	r2, r3
 800b246:	4b46      	ldr	r3, [pc, #280]	; (800b360 <ip4_reass+0x298>)
 800b248:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00d      	beq.n	800b26c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800b250:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b254:	4413      	add	r3, r2
 800b256:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	8a7a      	ldrh	r2, [r7, #18]
 800b25c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	7f9b      	ldrb	r3, [r3, #30]
 800b262:	f043 0301 	orr.w	r3, r3, #1
 800b266:	b2da      	uxtb	r2, r3
 800b268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d168      	bne.n	800b344 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	8b9b      	ldrh	r3, [r3, #28]
 800b276:	3314      	adds	r3, #20
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	3308      	adds	r3, #8
 800b294:	2214      	movs	r2, #20
 800b296:	4619      	mov	r1, r3
 800b298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29a:	f009 f9c0 	bl	801461e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	8b9b      	ldrh	r3, [r3, #28]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd ff20 	bl	80090e8 <lwip_htons>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	719a      	strb	r2, [r3, #6]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	2200      	movs	r2, #0
 800b2be:	729a      	strb	r2, [r3, #10]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b2ca:	e00e      	b.n	800b2ea <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800b2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800b2d2:	f06f 0113 	mvn.w	r1, #19
 800b2d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b2d8:	f001 faf4 	bl	800c8c4 <pbuf_header>
      pbuf_cat(p, r);
 800b2dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 fbee 	bl	800cac0 <pbuf_cat>
      r = iprh->next_pbuf;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1ed      	bne.n	800b2cc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b2f0:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <ip4_reass+0x29c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d102      	bne.n	800b300 <ip4_reass+0x238>
      ipr_prev = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fe:	e010      	b.n	800b322 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b300:	4b18      	ldr	r3, [pc, #96]	; (800b364 <ip4_reass+0x29c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b306:	e007      	b.n	800b318 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	429a      	cmp	r2, r3
 800b310:	d006      	beq.n	800b320 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1f4      	bne.n	800b308 <ip4_reass+0x240>
 800b31e:	e000      	b.n	800b322 <ip4_reass+0x25a>
          break;
 800b320:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b326:	f7ff fd39 	bl	800ad9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 fb88 	bl	800ca40 <pbuf_clen>
 800b330:	4603      	mov	r3, r0
 800b332:	461a      	mov	r2, r3
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <ip4_reass+0x298>)
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	1a9b      	subs	r3, r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <ip4_reass+0x298>)
 800b33e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	e008      	b.n	800b356 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	e006      	b.n	800b356 <ip4_reass+0x28e>
    goto nullreturn;
 800b348:	bf00      	nop
 800b34a:	e000      	b.n	800b34e <ip4_reass+0x286>
    goto nullreturn;
 800b34c:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 fadc 	bl	800c90c <pbuf_free>
  return NULL;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3738      	adds	r7, #56	; 0x38
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20003f40 	.word	0x20003f40
 800b364:	20003f3c 	.word	0x20003f3c

0800b368 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800b36c:	2005      	movs	r0, #5
 800b36e:	f000 fd21 	bl	800bdb4 <memp_malloc>
 800b372:	4603      	mov	r3, r0
}
 800b374:	4618      	mov	r0, r3
 800b376:	bd80      	pop	{r7, pc}

0800b378 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <ip_frag_free_pbuf_custom_ref+0x1c>
 800b386:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b388:	f240 22ae 	movw	r2, #686	; 0x2ae
 800b38c:	4906      	ldr	r1, [pc, #24]	; (800b3a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b38e:	4807      	ldr	r0, [pc, #28]	; (800b3ac <ip_frag_free_pbuf_custom_ref+0x34>)
 800b390:	f009 f958 	bl	8014644 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	2005      	movs	r0, #5
 800b398:	f000 fd5e 	bl	800be58 <memp_free>
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	0801654c 	.word	0x0801654c
 800b3a8:	080166b4 	.word	0x080166b4
 800b3ac:	08016594 	.word	0x08016594

0800b3b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <ipfrag_free_pbuf_custom+0x20>
 800b3c2:	4b11      	ldr	r3, [pc, #68]	; (800b408 <ipfrag_free_pbuf_custom+0x58>)
 800b3c4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b3c8:	4910      	ldr	r1, [pc, #64]	; (800b40c <ipfrag_free_pbuf_custom+0x5c>)
 800b3ca:	4811      	ldr	r0, [pc, #68]	; (800b410 <ipfrag_free_pbuf_custom+0x60>)
 800b3cc:	f009 f93a 	bl	8014644 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d006      	beq.n	800b3e6 <ipfrag_free_pbuf_custom+0x36>
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <ipfrag_free_pbuf_custom+0x58>)
 800b3da:	f240 22b9 	movw	r2, #697	; 0x2b9
 800b3de:	490d      	ldr	r1, [pc, #52]	; (800b414 <ipfrag_free_pbuf_custom+0x64>)
 800b3e0:	480b      	ldr	r0, [pc, #44]	; (800b410 <ipfrag_free_pbuf_custom+0x60>)
 800b3e2:	f009 f92f 	bl	8014644 <iprintf>
  if (pcr->original != NULL) {
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d004      	beq.n	800b3f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 fa8a 	bl	800c90c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff ffbd 	bl	800b378 <ip_frag_free_pbuf_custom_ref>
}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	0801654c 	.word	0x0801654c
 800b40c:	080166c0 	.word	0x080166c0
 800b410:	08016594 	.word	0x08016594
 800b414:	080166cc 	.word	0x080166cc

0800b418 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b092      	sub	sp, #72	; 0x48
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b42c:	3b14      	subs	r3, #20
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da00      	bge.n	800b434 <ip4_frag+0x1c>
 800b432:	3307      	adds	r3, #7
 800b434:	10db      	asrs	r3, r3, #3
 800b436:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b438:	2314      	movs	r3, #20
 800b43a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f003 030f 	and.w	r3, r3, #15
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	2b14      	cmp	r3, #20
 800b452:	d009      	beq.n	800b468 <ip4_frag+0x50>
 800b454:	4b79      	ldr	r3, [pc, #484]	; (800b63c <ip4_frag+0x224>)
 800b456:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b45a:	4979      	ldr	r1, [pc, #484]	; (800b640 <ip4_frag+0x228>)
 800b45c:	4879      	ldr	r0, [pc, #484]	; (800b644 <ip4_frag+0x22c>)
 800b45e:	f009 f8f1 	bl	8014644 <iprintf>
 800b462:	f06f 0305 	mvn.w	r3, #5
 800b466:	e0e5      	b.n	800b634 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	88db      	ldrh	r3, [r3, #6]
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd fe3a 	bl	80090e8 <lwip_htons>
 800b474:	4603      	mov	r3, r0
 800b476:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800b478:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b47a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b47e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b480:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <ip4_frag+0x86>
 800b48a:	4b6c      	ldr	r3, [pc, #432]	; (800b63c <ip4_frag+0x224>)
 800b48c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b490:	496d      	ldr	r1, [pc, #436]	; (800b648 <ip4_frag+0x230>)
 800b492:	486c      	ldr	r0, [pc, #432]	; (800b644 <ip4_frag+0x22c>)
 800b494:	f009 f8d6 	bl	8014644 <iprintf>
 800b498:	f06f 0305 	mvn.w	r3, #5
 800b49c:	e0ca      	b.n	800b634 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	891b      	ldrh	r3, [r3, #8]
 800b4a2:	3b14      	subs	r3, #20
 800b4a4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800b4a6:	e0bc      	b.n	800b622 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800b4a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b4aa:	00da      	lsls	r2, r3, #3
 800b4ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	bfa8      	it	ge
 800b4b2:	4613      	movge	r3, r2
 800b4b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2114      	movs	r1, #20
 800b4ba:	2002      	movs	r0, #2
 800b4bc:	f000 feb4 	bl	800c228 <pbuf_alloc>
 800b4c0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 80b2 	beq.w	800b62e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	895b      	ldrh	r3, [r3, #10]
 800b4ce:	2b13      	cmp	r3, #19
 800b4d0:	d806      	bhi.n	800b4e0 <ip4_frag+0xc8>
 800b4d2:	4b5a      	ldr	r3, [pc, #360]	; (800b63c <ip4_frag+0x224>)
 800b4d4:	f240 3209 	movw	r2, #777	; 0x309
 800b4d8:	495c      	ldr	r1, [pc, #368]	; (800b64c <ip4_frag+0x234>)
 800b4da:	485a      	ldr	r0, [pc, #360]	; (800b644 <ip4_frag+0x22c>)
 800b4dc:	f009 f8b2 	bl	8014644 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b4e0:	6a3b      	ldr	r3, [r7, #32]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	2214      	movs	r2, #20
 800b4e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f009 f898 	bl	801461e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800b4f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800b4f8:	e04f      	b.n	800b59a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	895a      	ldrh	r2, [r3, #10]
 800b4fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b504:	8bfa      	ldrh	r2, [r7, #30]
 800b506:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b508:	4293      	cmp	r3, r2
 800b50a:	bf28      	it	cs
 800b50c:	4613      	movcs	r3, r2
 800b50e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b510:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b512:	2b00      	cmp	r3, #0
 800b514:	d105      	bne.n	800b522 <ip4_frag+0x10a>
        poff = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60fb      	str	r3, [r7, #12]
        continue;
 800b520:	e03b      	b.n	800b59a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b522:	f7ff ff21 	bl	800b368 <ip_frag_alloc_pbuf_custom_ref>
 800b526:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d103      	bne.n	800b536 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800b52e:	6a38      	ldr	r0, [r7, #32]
 800b530:	f001 f9ec 	bl	800c90c <pbuf_free>
        goto memerr;
 800b534:	e07c      	b.n	800b630 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b536:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b53c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b53e:	4413      	add	r3, r2
 800b540:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800b542:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b544:	9201      	str	r2, [sp, #4]
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	4603      	mov	r3, r0
 800b54a:	2202      	movs	r2, #2
 800b54c:	2004      	movs	r0, #4
 800b54e:	f000 ffff 	bl	800c550 <pbuf_alloced_custom>
 800b552:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b55a:	69b8      	ldr	r0, [r7, #24]
 800b55c:	f7ff ff0c 	bl	800b378 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b560:	6a38      	ldr	r0, [r7, #32]
 800b562:	f001 f9d3 	bl	800c90c <pbuf_free>
        goto memerr;
 800b566:	e063      	b.n	800b630 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f001 fa81 	bl	800ca70 <pbuf_ref>
      pcr->original = p;
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	4a36      	ldr	r2, [pc, #216]	; (800b650 <ip4_frag+0x238>)
 800b578:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b57a:	6979      	ldr	r1, [r7, #20]
 800b57c:	6a38      	ldr	r0, [r7, #32]
 800b57e:	f001 fa9f 	bl	800cac0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b582:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b584:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800b58a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <ip4_frag+0x182>
        poff = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b59a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ac      	bne.n	800b4fa <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800b5a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b5a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b5a4:	4413      	add	r3, r2
 800b5a6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b5a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b5ae:	3b14      	subs	r3, #20
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	bfd4      	ite	le
 800b5b4:	2301      	movle	r3, #1
 800b5b6:	2300      	movgt	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b5bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b5be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5c2:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d103      	bne.n	800b5d2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800b5ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b5cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5d0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b5d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fd fd87 	bl	80090e8 <lwip_htons>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b5e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5e4:	3314      	adds	r3, #20
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fd fd7d 	bl	80090e8 <lwip_htons>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	729a      	strb	r2, [r3, #10]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6a39      	ldr	r1, [r7, #32]
 800b608:	68b8      	ldr	r0, [r7, #8]
 800b60a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b60c:	6a38      	ldr	r0, [r7, #32]
 800b60e:	f001 f97d 	bl	800c90c <pbuf_free>
    left -= fragsize;
 800b612:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800b61a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b61c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b61e:	4413      	add	r3, r2
 800b620:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800b622:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b624:	2b00      	cmp	r3, #0
 800b626:	f47f af3f 	bne.w	800b4a8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	e002      	b.n	800b634 <ip4_frag+0x21c>
      goto memerr;
 800b62e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b634:	4618      	mov	r0, r3
 800b636:	3740      	adds	r7, #64	; 0x40
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	0801654c 	.word	0x0801654c
 800b640:	080166d8 	.word	0x080166d8
 800b644:	08016594 	.word	0x08016594
 800b648:	08016700 	.word	0x08016700
 800b64c:	0801671c 	.word	0x0801671c
 800b650:	0800b3b1 	.word	0x0800b3b1

0800b654 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b65c:	4b40      	ldr	r3, [pc, #256]	; (800b760 <plug_holes+0x10c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	429a      	cmp	r2, r3
 800b664:	d206      	bcs.n	800b674 <plug_holes+0x20>
 800b666:	4b3f      	ldr	r3, [pc, #252]	; (800b764 <plug_holes+0x110>)
 800b668:	f240 125d 	movw	r2, #349	; 0x15d
 800b66c:	493e      	ldr	r1, [pc, #248]	; (800b768 <plug_holes+0x114>)
 800b66e:	483f      	ldr	r0, [pc, #252]	; (800b76c <plug_holes+0x118>)
 800b670:	f008 ffe8 	bl	8014644 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b674:	4b3e      	ldr	r3, [pc, #248]	; (800b770 <plug_holes+0x11c>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d306      	bcc.n	800b68c <plug_holes+0x38>
 800b67e:	4b39      	ldr	r3, [pc, #228]	; (800b764 <plug_holes+0x110>)
 800b680:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b684:	493b      	ldr	r1, [pc, #236]	; (800b774 <plug_holes+0x120>)
 800b686:	4839      	ldr	r0, [pc, #228]	; (800b76c <plug_holes+0x118>)
 800b688:	f008 ffdc 	bl	8014644 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	791b      	ldrb	r3, [r3, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <plug_holes+0x4e>
 800b694:	4b33      	ldr	r3, [pc, #204]	; (800b764 <plug_holes+0x110>)
 800b696:	f240 125f 	movw	r2, #351	; 0x15f
 800b69a:	4937      	ldr	r1, [pc, #220]	; (800b778 <plug_holes+0x124>)
 800b69c:	4833      	ldr	r0, [pc, #204]	; (800b76c <plug_holes+0x118>)
 800b69e:	f008 ffd1 	bl	8014644 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6aa:	d906      	bls.n	800b6ba <plug_holes+0x66>
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <plug_holes+0x110>)
 800b6ae:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b6b2:	4932      	ldr	r1, [pc, #200]	; (800b77c <plug_holes+0x128>)
 800b6b4:	482d      	ldr	r0, [pc, #180]	; (800b76c <plug_holes+0x118>)
 800b6b6:	f008 ffc5 	bl	8014644 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b6ba:	4b29      	ldr	r3, [pc, #164]	; (800b760 <plug_holes+0x10c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	8812      	ldrh	r2, [r2, #0]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d01f      	beq.n	800b70e <plug_holes+0xba>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	791b      	ldrb	r3, [r3, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d11b      	bne.n	800b70e <plug_holes+0xba>
 800b6d6:	4b26      	ldr	r3, [pc, #152]	; (800b770 <plug_holes+0x11c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d016      	beq.n	800b70e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <plug_holes+0x12c>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d102      	bne.n	800b6f0 <plug_holes+0x9c>
      lfree = mem;
 800b6ea:	4a25      	ldr	r2, [pc, #148]	; (800b780 <plug_holes+0x12c>)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	881a      	ldrh	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b6f8:	4b19      	ldr	r3, [pc, #100]	; (800b760 <plug_holes+0x10c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	8812      	ldrh	r2, [r2, #0]
 800b700:	4413      	add	r3, r2
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	4916      	ldr	r1, [pc, #88]	; (800b760 <plug_holes+0x10c>)
 800b706:	6809      	ldr	r1, [r1, #0]
 800b708:	1a52      	subs	r2, r2, r1
 800b70a:	b292      	uxth	r2, r2
 800b70c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b70e:	4b14      	ldr	r3, [pc, #80]	; (800b760 <plug_holes+0x10c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	8852      	ldrh	r2, [r2, #2]
 800b716:	4413      	add	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d01a      	beq.n	800b758 <plug_holes+0x104>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	791b      	ldrb	r3, [r3, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d116      	bne.n	800b758 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b72a:	4b15      	ldr	r3, [pc, #84]	; (800b780 <plug_holes+0x12c>)
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d102      	bne.n	800b73a <plug_holes+0xe6>
      lfree = pmem;
 800b734:	4a12      	ldr	r2, [pc, #72]	; (800b780 <plug_holes+0x12c>)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	881a      	ldrh	r2, [r3, #0]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b742:	4b07      	ldr	r3, [pc, #28]	; (800b760 <plug_holes+0x10c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	8812      	ldrh	r2, [r2, #0]
 800b74a:	4413      	add	r3, r2
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	4904      	ldr	r1, [pc, #16]	; (800b760 <plug_holes+0x10c>)
 800b750:	6809      	ldr	r1, [r1, #0]
 800b752:	1a52      	subs	r2, r2, r1
 800b754:	b292      	uxth	r2, r2
 800b756:	805a      	strh	r2, [r3, #2]
  }
}
 800b758:	bf00      	nop
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20003f44 	.word	0x20003f44
 800b764:	0801673c 	.word	0x0801673c
 800b768:	0801676c 	.word	0x0801676c
 800b76c:	08016784 	.word	0x08016784
 800b770:	20003f48 	.word	0x20003f48
 800b774:	080167ac 	.word	0x080167ac
 800b778:	080167c8 	.word	0x080167c8
 800b77c:	080167e4 	.word	0x080167e4
 800b780:	20003f4c 	.word	0x20003f4c

0800b784 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b78a:	4b1e      	ldr	r3, [pc, #120]	; (800b804 <mem_init+0x80>)
 800b78c:	3303      	adds	r3, #3
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	461a      	mov	r2, r3
 800b794:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <mem_init+0x84>)
 800b796:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b798:	4b1b      	ldr	r3, [pc, #108]	; (800b808 <mem_init+0x84>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <mem_init+0x84>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b7ba:	4a14      	ldr	r2, [pc, #80]	; (800b80c <mem_init+0x88>)
 800b7bc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <mem_init+0x88>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b7c6:	4b11      	ldr	r3, [pc, #68]	; (800b80c <mem_init+0x88>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7ce:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b7d0:	4b0e      	ldr	r3, [pc, #56]	; (800b80c <mem_init+0x88>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b7d8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b7da:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <mem_init+0x84>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a0c      	ldr	r2, [pc, #48]	; (800b810 <mem_init+0x8c>)
 800b7e0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b7e2:	480c      	ldr	r0, [pc, #48]	; (800b814 <mem_init+0x90>)
 800b7e4:	f007 fcc2 	bl	801316c <sys_mutex_new>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d006      	beq.n	800b7fc <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b7ee:	4b0a      	ldr	r3, [pc, #40]	; (800b818 <mem_init+0x94>)
 800b7f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7f4:	4909      	ldr	r1, [pc, #36]	; (800b81c <mem_init+0x98>)
 800b7f6:	480a      	ldr	r0, [pc, #40]	; (800b820 <mem_init+0x9c>)
 800b7f8:	f008 ff24 	bl	8014644 <iprintf>
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	20004040 	.word	0x20004040
 800b808:	20003f44 	.word	0x20003f44
 800b80c:	20003f48 	.word	0x20003f48
 800b810:	20003f4c 	.word	0x20003f4c
 800b814:	20003f50 	.word	0x20003f50
 800b818:	0801673c 	.word	0x0801673c
 800b81c:	08016810 	.word	0x08016810
 800b820:	08016784 	.word	0x08016784

0800b824 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d050      	beq.n	800b8d4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d006      	beq.n	800b84a <mem_free+0x26>
 800b83c:	4b27      	ldr	r3, [pc, #156]	; (800b8dc <mem_free+0xb8>)
 800b83e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b842:	4927      	ldr	r1, [pc, #156]	; (800b8e0 <mem_free+0xbc>)
 800b844:	4827      	ldr	r0, [pc, #156]	; (800b8e4 <mem_free+0xc0>)
 800b846:	f008 fefd 	bl	8014644 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b84a:	4b27      	ldr	r3, [pc, #156]	; (800b8e8 <mem_free+0xc4>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d304      	bcc.n	800b85e <mem_free+0x3a>
 800b854:	4b25      	ldr	r3, [pc, #148]	; (800b8ec <mem_free+0xc8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d306      	bcc.n	800b86c <mem_free+0x48>
 800b85e:	4b1f      	ldr	r3, [pc, #124]	; (800b8dc <mem_free+0xb8>)
 800b860:	f240 12af 	movw	r2, #431	; 0x1af
 800b864:	4922      	ldr	r1, [pc, #136]	; (800b8f0 <mem_free+0xcc>)
 800b866:	481f      	ldr	r0, [pc, #124]	; (800b8e4 <mem_free+0xc0>)
 800b868:	f008 feec 	bl	8014644 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b86c:	4b1e      	ldr	r3, [pc, #120]	; (800b8e8 <mem_free+0xc4>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	429a      	cmp	r2, r3
 800b874:	d304      	bcc.n	800b880 <mem_free+0x5c>
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <mem_free+0xc8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d306      	bcc.n	800b88e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b880:	f007 fcc8 	bl	8013214 <sys_arch_protect>
 800b884:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b886:	68b8      	ldr	r0, [r7, #8]
 800b888:	f007 fcd2 	bl	8013230 <sys_arch_unprotect>
    return;
 800b88c:	e023      	b.n	800b8d6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b88e:	4819      	ldr	r0, [pc, #100]	; (800b8f4 <mem_free+0xd0>)
 800b890:	f007 fc86 	bl	80131a0 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3b08      	subs	r3, #8
 800b898:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	791b      	ldrb	r3, [r3, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <mem_free+0x8c>
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <mem_free+0xb8>)
 800b8a4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b8a8:	4913      	ldr	r1, [pc, #76]	; (800b8f8 <mem_free+0xd4>)
 800b8aa:	480e      	ldr	r0, [pc, #56]	; (800b8e4 <mem_free+0xc0>)
 800b8ac:	f008 feca 	bl	8014644 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <mem_free+0xd8>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d202      	bcs.n	800b8c6 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b8c0:	4a0e      	ldr	r2, [pc, #56]	; (800b8fc <mem_free+0xd8>)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff fec4 	bl	800b654 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b8cc:	4809      	ldr	r0, [pc, #36]	; (800b8f4 <mem_free+0xd0>)
 800b8ce:	f007 fc76 	bl	80131be <sys_mutex_unlock>
 800b8d2:	e000      	b.n	800b8d6 <mem_free+0xb2>
    return;
 800b8d4:	bf00      	nop
}
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	0801673c 	.word	0x0801673c
 800b8e0:	0801682c 	.word	0x0801682c
 800b8e4:	08016784 	.word	0x08016784
 800b8e8:	20003f44 	.word	0x20003f44
 800b8ec:	20003f48 	.word	0x20003f48
 800b8f0:	08016850 	.word	0x08016850
 800b8f4:	20003f50 	.word	0x20003f50
 800b8f8:	08016868 	.word	0x08016868
 800b8fc:	20003f4c 	.word	0x20003f4c

0800b900 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b90c:	887b      	ldrh	r3, [r7, #2]
 800b90e:	3303      	adds	r3, #3
 800b910:	b29b      	uxth	r3, r3
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b918:	887b      	ldrh	r3, [r7, #2]
 800b91a:	2b0b      	cmp	r3, #11
 800b91c:	d801      	bhi.n	800b922 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b91e:	230c      	movs	r3, #12
 800b920:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b922:	887b      	ldrh	r3, [r7, #2]
 800b924:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b928:	d901      	bls.n	800b92e <mem_trim+0x2e>
    return NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e0bd      	b.n	800baaa <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b92e:	4b61      	ldr	r3, [pc, #388]	; (800bab4 <mem_trim+0x1b4>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d304      	bcc.n	800b942 <mem_trim+0x42>
 800b938:	4b5f      	ldr	r3, [pc, #380]	; (800bab8 <mem_trim+0x1b8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d306      	bcc.n	800b950 <mem_trim+0x50>
 800b942:	4b5e      	ldr	r3, [pc, #376]	; (800babc <mem_trim+0x1bc>)
 800b944:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b948:	495d      	ldr	r1, [pc, #372]	; (800bac0 <mem_trim+0x1c0>)
 800b94a:	485e      	ldr	r0, [pc, #376]	; (800bac4 <mem_trim+0x1c4>)
 800b94c:	f008 fe7a 	bl	8014644 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b950:	4b58      	ldr	r3, [pc, #352]	; (800bab4 <mem_trim+0x1b4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d304      	bcc.n	800b964 <mem_trim+0x64>
 800b95a:	4b57      	ldr	r3, [pc, #348]	; (800bab8 <mem_trim+0x1b8>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	429a      	cmp	r2, r3
 800b962:	d307      	bcc.n	800b974 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b964:	f007 fc56 	bl	8013214 <sys_arch_protect>
 800b968:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f007 fc60 	bl	8013230 <sys_arch_unprotect>
    return rmem;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	e09a      	b.n	800baaa <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3b08      	subs	r3, #8
 800b978:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4a4d      	ldr	r2, [pc, #308]	; (800bab4 <mem_trim+0x1b4>)
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	881a      	ldrh	r2, [r3, #0]
 800b988:	8b7b      	ldrh	r3, [r7, #26]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3b08      	subs	r3, #8
 800b990:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b992:	887a      	ldrh	r2, [r7, #2]
 800b994:	8b3b      	ldrh	r3, [r7, #24]
 800b996:	429a      	cmp	r2, r3
 800b998:	d906      	bls.n	800b9a8 <mem_trim+0xa8>
 800b99a:	4b48      	ldr	r3, [pc, #288]	; (800babc <mem_trim+0x1bc>)
 800b99c:	f240 2206 	movw	r2, #518	; 0x206
 800b9a0:	4949      	ldr	r1, [pc, #292]	; (800bac8 <mem_trim+0x1c8>)
 800b9a2:	4848      	ldr	r0, [pc, #288]	; (800bac4 <mem_trim+0x1c4>)
 800b9a4:	f008 fe4e 	bl	8014644 <iprintf>
  if (newsize > size) {
 800b9a8:	887a      	ldrh	r2, [r7, #2]
 800b9aa:	8b3b      	ldrh	r3, [r7, #24]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d901      	bls.n	800b9b4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e07a      	b.n	800baaa <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b9b4:	887a      	ldrh	r2, [r7, #2]
 800b9b6:	8b3b      	ldrh	r3, [r7, #24]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d101      	bne.n	800b9c0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	e074      	b.n	800baaa <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b9c0:	4842      	ldr	r0, [pc, #264]	; (800bacc <mem_trim+0x1cc>)
 800b9c2:	f007 fbed 	bl	80131a0 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b9c6:	4b3b      	ldr	r3, [pc, #236]	; (800bab4 <mem_trim+0x1b4>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	8812      	ldrh	r2, [r2, #0]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	791b      	ldrb	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d131      	bne.n	800ba3e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b9e0:	8b7a      	ldrh	r2, [r7, #26]
 800b9e2:	887b      	ldrh	r3, [r7, #2]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800b9ec:	4b38      	ldr	r3, [pc, #224]	; (800bad0 <mem_trim+0x1d0>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d105      	bne.n	800ba02 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	; (800bab4 <mem_trim+0x1b4>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	8a3b      	ldrh	r3, [r7, #16]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4a34      	ldr	r2, [pc, #208]	; (800bad0 <mem_trim+0x1d0>)
 800ba00:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ba02:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <mem_trim+0x1b4>)
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	8a3b      	ldrh	r3, [r7, #16]
 800ba08:	4413      	add	r3, r2
 800ba0a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	8a7a      	ldrh	r2, [r7, #18]
 800ba16:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	8b7a      	ldrh	r2, [r7, #26]
 800ba1c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	8a3a      	ldrh	r2, [r7, #16]
 800ba22:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba2c:	d039      	beq.n	800baa2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ba2e:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <mem_trim+0x1b4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	8812      	ldrh	r2, [r2, #0]
 800ba36:	4413      	add	r3, r2
 800ba38:	8a3a      	ldrh	r2, [r7, #16]
 800ba3a:	805a      	strh	r2, [r3, #2]
 800ba3c:	e031      	b.n	800baa2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ba3e:	887b      	ldrh	r3, [r7, #2]
 800ba40:	f103 0214 	add.w	r2, r3, #20
 800ba44:	8b3b      	ldrh	r3, [r7, #24]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d82b      	bhi.n	800baa2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ba4a:	8b7a      	ldrh	r2, [r7, #26]
 800ba4c:	887b      	ldrh	r3, [r7, #2]
 800ba4e:	4413      	add	r3, r2
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	3308      	adds	r3, #8
 800ba54:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ba56:	4b17      	ldr	r3, [pc, #92]	; (800bab4 <mem_trim+0x1b4>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	8a3b      	ldrh	r3, [r7, #16]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800ba60:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <mem_trim+0x1d0>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d202      	bcs.n	800ba70 <mem_trim+0x170>
      lfree = mem2;
 800ba6a:	4a19      	ldr	r2, [pc, #100]	; (800bad0 <mem_trim+0x1d0>)
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2200      	movs	r2, #0
 800ba74:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	881a      	ldrh	r2, [r3, #0]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	8b7a      	ldrh	r2, [r7, #26]
 800ba82:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	8a3a      	ldrh	r2, [r7, #16]
 800ba88:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba92:	d006      	beq.n	800baa2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ba94:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <mem_trim+0x1b4>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	8812      	ldrh	r2, [r2, #0]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	8a3a      	ldrh	r2, [r7, #16]
 800baa0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800baa2:	480a      	ldr	r0, [pc, #40]	; (800bacc <mem_trim+0x1cc>)
 800baa4:	f007 fb8b 	bl	80131be <sys_mutex_unlock>
  return rmem;
 800baa8:	687b      	ldr	r3, [r7, #4]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20003f44 	.word	0x20003f44
 800bab8:	20003f48 	.word	0x20003f48
 800babc:	0801673c 	.word	0x0801673c
 800bac0:	0801687c 	.word	0x0801687c
 800bac4:	08016784 	.word	0x08016784
 800bac8:	08016894 	.word	0x08016894
 800bacc:	20003f50 	.word	0x20003f50
 800bad0:	20003f4c 	.word	0x20003f4c

0800bad4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <mem_malloc+0x14>
    return NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	e0d1      	b.n	800bc8c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	3303      	adds	r3, #3
 800baec:	b29b      	uxth	r3, r3
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800baf4:	88fb      	ldrh	r3, [r7, #6]
 800baf6:	2b0b      	cmp	r3, #11
 800baf8:	d801      	bhi.n	800bafe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bafa:	230c      	movs	r3, #12
 800bafc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800bafe:	88fb      	ldrh	r3, [r7, #6]
 800bb00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb04:	d901      	bls.n	800bb0a <mem_malloc+0x36>
    return NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e0c0      	b.n	800bc8c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bb0a:	4862      	ldr	r0, [pc, #392]	; (800bc94 <mem_malloc+0x1c0>)
 800bb0c:	f007 fb48 	bl	80131a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bb10:	4b61      	ldr	r3, [pc, #388]	; (800bc98 <mem_malloc+0x1c4>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	4b61      	ldr	r3, [pc, #388]	; (800bc9c <mem_malloc+0x1c8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	83fb      	strh	r3, [r7, #30]
 800bb1e:	e0aa      	b.n	800bc76 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800bb20:	4b5e      	ldr	r3, [pc, #376]	; (800bc9c <mem_malloc+0x1c8>)
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	8bfb      	ldrh	r3, [r7, #30]
 800bb26:	4413      	add	r3, r2
 800bb28:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	791b      	ldrb	r3, [r3, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f040 809b 	bne.w	800bc6a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	461a      	mov	r2, r3
 800bb3a:	8bfb      	ldrh	r3, [r7, #30]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	f1a3 0208 	sub.w	r2, r3, #8
 800bb42:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800bb44:	429a      	cmp	r2, r3
 800bb46:	f0c0 8090 	bcc.w	800bc6a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	8bfb      	ldrh	r3, [r7, #30]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	f1a3 0208 	sub.w	r2, r3, #8
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	3314      	adds	r3, #20
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d327      	bcc.n	800bbb0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800bb60:	8bfa      	ldrh	r2, [r7, #30]
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	4413      	add	r3, r2
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3308      	adds	r3, #8
 800bb6a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800bb6c:	4b4b      	ldr	r3, [pc, #300]	; (800bc9c <mem_malloc+0x1c8>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	8a7b      	ldrh	r3, [r7, #18]
 800bb72:	4413      	add	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	881a      	ldrh	r2, [r3, #0]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8bfa      	ldrh	r2, [r7, #30]
 800bb88:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	8a7a      	ldrh	r2, [r7, #18]
 800bb8e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2201      	movs	r2, #1
 800bb94:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	881b      	ldrh	r3, [r3, #0]
 800bb9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb9e:	d00a      	beq.n	800bbb6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800bba0:	4b3e      	ldr	r3, [pc, #248]	; (800bc9c <mem_malloc+0x1c8>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	8812      	ldrh	r2, [r2, #0]
 800bba8:	4413      	add	r3, r2
 800bbaa:	8a7a      	ldrh	r2, [r7, #18]
 800bbac:	805a      	strh	r2, [r3, #2]
 800bbae:	e002      	b.n	800bbb6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bbb6:	4b38      	ldr	r3, [pc, #224]	; (800bc98 <mem_malloc+0x1c4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d127      	bne.n	800bc10 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800bbc0:	4b35      	ldr	r3, [pc, #212]	; (800bc98 <mem_malloc+0x1c4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bbc6:	e005      	b.n	800bbd4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800bbc8:	4b34      	ldr	r3, [pc, #208]	; (800bc9c <mem_malloc+0x1c8>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	8812      	ldrh	r2, [r2, #0]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	791b      	ldrb	r3, [r3, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d004      	beq.n	800bbe6 <mem_malloc+0x112>
 800bbdc:	4b30      	ldr	r3, [pc, #192]	; (800bca0 <mem_malloc+0x1cc>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69ba      	ldr	r2, [r7, #24]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d1f0      	bne.n	800bbc8 <mem_malloc+0xf4>
          }
          lfree = cur;
 800bbe6:	4a2c      	ldr	r2, [pc, #176]	; (800bc98 <mem_malloc+0x1c4>)
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bbec:	4b2a      	ldr	r3, [pc, #168]	; (800bc98 <mem_malloc+0x1c4>)
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	4b2b      	ldr	r3, [pc, #172]	; (800bca0 <mem_malloc+0x1cc>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d00b      	beq.n	800bc10 <mem_malloc+0x13c>
 800bbf8:	4b27      	ldr	r3, [pc, #156]	; (800bc98 <mem_malloc+0x1c4>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	791b      	ldrb	r3, [r3, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d006      	beq.n	800bc10 <mem_malloc+0x13c>
 800bc02:	4b28      	ldr	r3, [pc, #160]	; (800bca4 <mem_malloc+0x1d0>)
 800bc04:	f240 22cf 	movw	r2, #719	; 0x2cf
 800bc08:	4927      	ldr	r1, [pc, #156]	; (800bca8 <mem_malloc+0x1d4>)
 800bc0a:	4828      	ldr	r0, [pc, #160]	; (800bcac <mem_malloc+0x1d8>)
 800bc0c:	f008 fd1a 	bl	8014644 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bc10:	4820      	ldr	r0, [pc, #128]	; (800bc94 <mem_malloc+0x1c0>)
 800bc12:	f007 fad4 	bl	80131be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bc16:	88fa      	ldrh	r2, [r7, #6]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	4a20      	ldr	r2, [pc, #128]	; (800bca0 <mem_malloc+0x1cc>)
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d906      	bls.n	800bc34 <mem_malloc+0x160>
 800bc26:	4b1f      	ldr	r3, [pc, #124]	; (800bca4 <mem_malloc+0x1d0>)
 800bc28:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bc2c:	4920      	ldr	r1, [pc, #128]	; (800bcb0 <mem_malloc+0x1dc>)
 800bc2e:	481f      	ldr	r0, [pc, #124]	; (800bcac <mem_malloc+0x1d8>)
 800bc30:	f008 fd08 	bl	8014644 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d006      	beq.n	800bc4c <mem_malloc+0x178>
 800bc3e:	4b19      	ldr	r3, [pc, #100]	; (800bca4 <mem_malloc+0x1d0>)
 800bc40:	f240 22d6 	movw	r2, #726	; 0x2d6
 800bc44:	491b      	ldr	r1, [pc, #108]	; (800bcb4 <mem_malloc+0x1e0>)
 800bc46:	4819      	ldr	r0, [pc, #100]	; (800bcac <mem_malloc+0x1d8>)
 800bc48:	f008 fcfc 	bl	8014644 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d006      	beq.n	800bc64 <mem_malloc+0x190>
 800bc56:	4b13      	ldr	r3, [pc, #76]	; (800bca4 <mem_malloc+0x1d0>)
 800bc58:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800bc5c:	4916      	ldr	r1, [pc, #88]	; (800bcb8 <mem_malloc+0x1e4>)
 800bc5e:	4813      	ldr	r0, [pc, #76]	; (800bcac <mem_malloc+0x1d8>)
 800bc60:	f008 fcf0 	bl	8014644 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	3308      	adds	r3, #8
 800bc68:	e010      	b.n	800bc8c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800bc6a:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <mem_malloc+0x1c8>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	8bfb      	ldrh	r3, [r7, #30]
 800bc70:	4413      	add	r3, r2
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800bc76:	8bfa      	ldrh	r2, [r7, #30]
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f4ff af4e 	bcc.w	800bb20 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bc84:	4803      	ldr	r0, [pc, #12]	; (800bc94 <mem_malloc+0x1c0>)
 800bc86:	f007 fa9a 	bl	80131be <sys_mutex_unlock>
  return NULL;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3720      	adds	r7, #32
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20003f50 	.word	0x20003f50
 800bc98:	20003f4c 	.word	0x20003f4c
 800bc9c:	20003f44 	.word	0x20003f44
 800bca0:	20003f48 	.word	0x20003f48
 800bca4:	0801673c 	.word	0x0801673c
 800bca8:	080168b4 	.word	0x080168b4
 800bcac:	08016784 	.word	0x08016784
 800bcb0:	080168d0 	.word	0x080168d0
 800bcb4:	08016900 	.word	0x08016900
 800bcb8:	08016930 	.word	0x08016930

0800bcbc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	f023 0303 	bic.w	r3, r3, #3
 800bcd6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bcd8:	2300      	movs	r3, #0
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	e011      	b.n	800bd02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	885b      	ldrh	r3, [r3, #2]
 800bd06:	461a      	mov	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	dce7      	bgt.n	800bcde <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bd0e:	bf00      	nop
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
	...

0800bd1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bd22:	2300      	movs	r3, #0
 800bd24:	80fb      	strh	r3, [r7, #6]
 800bd26:	e009      	b.n	800bd3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	4a08      	ldr	r2, [pc, #32]	; (800bd4c <memp_init+0x30>)
 800bd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff ffc3 	bl	800bcbc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bd36:	88fb      	ldrh	r3, [r7, #6]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	80fb      	strh	r3, [r7, #6]
 800bd3c:	88fb      	ldrh	r3, [r7, #6]
 800bd3e:	2b0c      	cmp	r3, #12
 800bd40:	d9f2      	bls.n	800bd28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	08017fe0 	.word	0x08017fe0

0800bd50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bd58:	f007 fa5c 	bl	8013214 <sys_arch_protect>
 800bd5c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d015      	beq.n	800bd98 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d006      	beq.n	800bd8e <do_memp_malloc_pool+0x3e>
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <do_memp_malloc_pool+0x58>)
 800bd82:	f240 1249 	movw	r2, #329	; 0x149
 800bd86:	4909      	ldr	r1, [pc, #36]	; (800bdac <do_memp_malloc_pool+0x5c>)
 800bd88:	4809      	ldr	r0, [pc, #36]	; (800bdb0 <do_memp_malloc_pool+0x60>)
 800bd8a:	f008 fc5b 	bl	8014644 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f007 fa4e 	bl	8013230 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	e003      	b.n	800bda0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f007 fa49 	bl	8013230 <sys_arch_unprotect>
  return NULL;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	08016954 	.word	0x08016954
 800bdac:	08016984 	.word	0x08016984
 800bdb0:	080169a8 	.word	0x080169a8

0800bdb4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	2b0c      	cmp	r3, #12
 800bdc2:	d908      	bls.n	800bdd6 <memp_malloc+0x22>
 800bdc4:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <memp_malloc+0x3c>)
 800bdc6:	f240 1287 	movw	r2, #391	; 0x187
 800bdca:	490a      	ldr	r1, [pc, #40]	; (800bdf4 <memp_malloc+0x40>)
 800bdcc:	480a      	ldr	r0, [pc, #40]	; (800bdf8 <memp_malloc+0x44>)
 800bdce:	f008 fc39 	bl	8014644 <iprintf>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e008      	b.n	800bde8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bdd6:	79fb      	ldrb	r3, [r7, #7]
 800bdd8:	4a08      	ldr	r2, [pc, #32]	; (800bdfc <memp_malloc+0x48>)
 800bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff ffb6 	bl	800bd50 <do_memp_malloc_pool>
 800bde4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bde6:	68fb      	ldr	r3, [r7, #12]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	08016954 	.word	0x08016954
 800bdf4:	080169e4 	.word	0x080169e4
 800bdf8:	080169a8 	.word	0x080169a8
 800bdfc:	08017fe0 	.word	0x08017fe0

0800be00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d006      	beq.n	800be22 <do_memp_free_pool+0x22>
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <do_memp_free_pool+0x4c>)
 800be16:	f240 129d 	movw	r2, #413	; 0x19d
 800be1a:	490d      	ldr	r1, [pc, #52]	; (800be50 <do_memp_free_pool+0x50>)
 800be1c:	480d      	ldr	r0, [pc, #52]	; (800be54 <do_memp_free_pool+0x54>)
 800be1e:	f008 fc11 	bl	8014644 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800be26:	f007 f9f5 	bl	8013214 <sys_arch_protect>
 800be2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800be3e:	68b8      	ldr	r0, [r7, #8]
 800be40:	f007 f9f6 	bl	8013230 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800be44:	bf00      	nop
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	08016954 	.word	0x08016954
 800be50:	08016a04 	.word	0x08016a04
 800be54:	080169a8 	.word	0x080169a8

0800be58 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	2b0c      	cmp	r3, #12
 800be68:	d907      	bls.n	800be7a <memp_free+0x22>
 800be6a:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <memp_free+0x44>)
 800be6c:	f240 12db 	movw	r2, #475	; 0x1db
 800be70:	490b      	ldr	r1, [pc, #44]	; (800bea0 <memp_free+0x48>)
 800be72:	480c      	ldr	r0, [pc, #48]	; (800bea4 <memp_free+0x4c>)
 800be74:	f008 fbe6 	bl	8014644 <iprintf>
 800be78:	e00c      	b.n	800be94 <memp_free+0x3c>

  if (mem == NULL) {
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d008      	beq.n	800be92 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	4a09      	ldr	r2, [pc, #36]	; (800bea8 <memp_free+0x50>)
 800be84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff ffb8 	bl	800be00 <do_memp_free_pool>
 800be90:	e000      	b.n	800be94 <memp_free+0x3c>
    return;
 800be92:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08016954 	.word	0x08016954
 800bea0:	08016a24 	.word	0x08016a24
 800bea4:	080169a8 	.word	0x080169a8
 800bea8:	08017fe0 	.word	0x08017fe0

0800beac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800beac:	b480      	push	{r7}
 800beae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800beb0:	bf00      	nop
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
	...

0800bebc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d105      	bne.n	800bedc <netif_add+0x20>
 800bed0:	4b1f      	ldr	r3, [pc, #124]	; (800bf50 <netif_add+0x94>)
 800bed2:	22fb      	movs	r2, #251	; 0xfb
 800bed4:	491f      	ldr	r1, [pc, #124]	; (800bf54 <netif_add+0x98>)
 800bed6:	4820      	ldr	r0, [pc, #128]	; (800bf58 <netif_add+0x9c>)
 800bed8:	f008 fbb4 	bl	8014644 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2203      	movs	r2, #3
 800befa:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800bf04:	4b15      	ldr	r3, [pc, #84]	; (800bf5c <netif_add+0xa0>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	b2d1      	uxtb	r1, r2
 800bf0c:	4a13      	ldr	r2, [pc, #76]	; (800bf5c <netif_add+0xa0>)
 800bf0e:	7011      	strb	r1, [r2, #0]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6a3a      	ldr	r2, [r7, #32]
 800bf1a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 f81e 	bl	800bf64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <netif_add+0x7c>
    return NULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	e007      	b.n	800bf48 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bf38:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <netif_add+0xa4>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bf40:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <netif_add+0xa4>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	08016a40 	.word	0x08016a40
 800bf54:	08016a74 	.word	0x08016a74
 800bf58:	08016a8c 	.word	0x08016a8c
 800bf5c:	20003f88 	.word	0x20003f88
 800bf60:	20007728 	.word	0x20007728

0800bf64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d003      	beq.n	800bf80 <netif_set_addr+0x1c>
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10c      	bne.n	800bf9a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f81a 	bl	800bfbc <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 f862 	bl	800c054 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f84a 	bl	800c02c <netif_set_gw>
 800bf98:	e00b      	b.n	800bfb2 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f859 	bl	800c054 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 f841 	bl	800c02c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 f805 	bl	800bfbc <netif_set_ipaddr>
  }
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <netif_set_ipaddr+0x18>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	e002      	b.n	800bfda <netif_set_ipaddr+0x1e>
 800bfd4:	4b14      	ldr	r3, [pc, #80]	; (800c028 <netif_set_ipaddr+0x6c>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d01c      	beq.n	800c020 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f107 020c 	add.w	r2, r7, #12
 800bfee:	4611      	mov	r1, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f002 fae1 	bl	800e5b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	3304      	adds	r3, #4
 800bffa:	f107 020c 	add.w	r2, r7, #12
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f006 fe33 	bl	8012c6c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <netif_set_ipaddr+0x56>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	e000      	b.n	800c014 <netif_set_ipaddr+0x58>
 800c012:	2300      	movs	r3, #0
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c018:	2101      	movs	r1, #1
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f861 	bl	800c0e2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c020:	bf00      	nop
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	08017f40 	.word	0x08017f40

0800c02c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <netif_set_gw+0x16>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	e000      	b.n	800c044 <netif_set_gw+0x18>
 800c042:	2300      	movs	r3, #0
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <netif_set_netmask+0x16>
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	e000      	b.n	800c06c <netif_set_netmask+0x18>
 800c06a:	2300      	movs	r3, #0
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c084:	4a04      	ldr	r2, [pc, #16]	; (800c098 <netif_set_default+0x1c>)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c08a:	bf00      	nop
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	2000772c 	.word	0x2000772c

0800c09c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d113      	bne.n	800c0da <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c0b8:	f043 0301 	orr.w	r3, r3, #1
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c0ca:	f003 0304 	and.w	r3, r3, #4
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800c0d2:	2103      	movs	r1, #3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f804 	bl	800c0e2 <netif_issue_reports>
    }
  }
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0ee:	78fb      	ldrb	r3, [r7, #3]
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d011      	beq.n	800c11c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00c      	beq.n	800c11c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c108:	f003 0308 	and.w	r3, r3, #8
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	3304      	adds	r3, #4
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fd ff28 	bl	8009f6c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800c11c:	bf00      	nop
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c132:	f003 0301 	and.w	r3, r3, #1
 800c136:	2b00      	cmp	r3, #0
 800c138:	d012      	beq.n	800c160 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c140:	f023 0301 	bic.w	r3, r3, #1
 800c144:	b2da      	uxtb	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800c152:	f003 0308 	and.w	r3, r3, #8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7fd facc 	bl	80096f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c16e:	f007 f851 	bl	8013214 <sys_arch_protect>
 800c172:	6038      	str	r0, [r7, #0]
 800c174:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <pbuf_free_ooseq+0x4c>)
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	6838      	ldr	r0, [r7, #0]
 800c17c:	f007 f858 	bl	8013230 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <pbuf_free_ooseq+0x50>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00f      	b.n	800c1a8 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c194:	4618      	mov	r0, r3
 800c196:	f001 fe8a 	bl	800deae <tcp_segs_free>
      pcb->ooseq = NULL;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800c1a0:	e005      	b.n	800c1ae <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	607b      	str	r3, [r7, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1ec      	bne.n	800c188 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	20007730 	.word	0x20007730
 800c1b8:	20007738 	.word	0x20007738

0800c1bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c1c4:	f7ff ffd0 	bl	800c168 <pbuf_free_ooseq>
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c1d6:	f007 f81d 	bl	8013214 <sys_arch_protect>
 800c1da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c1dc:	4b10      	ldr	r3, [pc, #64]	; (800c220 <pbuf_pool_is_empty+0x50>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <pbuf_pool_is_empty+0x50>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f007 f821 	bl	8013230 <sys_arch_unprotect>

  if (!queued) {
 800c1ee:	78fb      	ldrb	r3, [r7, #3]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d110      	bne.n	800c216 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	480a      	ldr	r0, [pc, #40]	; (800c224 <pbuf_pool_is_empty+0x54>)
 800c1fa:	f7fc feb3 	bl	8008f64 <tcpip_callback_with_block>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d008      	beq.n	800c216 <pbuf_pool_is_empty+0x46>
 800c204:	f007 f806 	bl	8013214 <sys_arch_protect>
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <pbuf_pool_is_empty+0x50>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f007 f80d 	bl	8013230 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c216:	bf00      	nop
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20007730 	.word	0x20007730
 800c224:	0800c1bd 	.word	0x0800c1bd

0800c228 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	71fb      	strb	r3, [r7, #7]
 800c232:	460b      	mov	r3, r1
 800c234:	80bb      	strh	r3, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d81c      	bhi.n	800c27a <pbuf_alloc+0x52>
 800c240:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <pbuf_alloc+0x20>)
 800c242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c246:	bf00      	nop
 800c248:	0800c25d 	.word	0x0800c25d
 800c24c:	0800c263 	.word	0x0800c263
 800c250:	0800c269 	.word	0x0800c269
 800c254:	0800c26f 	.word	0x0800c26f
 800c258:	0800c275 	.word	0x0800c275
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c25c:	2336      	movs	r3, #54	; 0x36
 800c25e:	82fb      	strh	r3, [r7, #22]
    break;
 800c260:	e014      	b.n	800c28c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c262:	2322      	movs	r3, #34	; 0x22
 800c264:	82fb      	strh	r3, [r7, #22]
    break;
 800c266:	e011      	b.n	800c28c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c268:	230e      	movs	r3, #14
 800c26a:	82fb      	strh	r3, [r7, #22]
    break;
 800c26c:	e00e      	b.n	800c28c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c26e:	2300      	movs	r3, #0
 800c270:	82fb      	strh	r3, [r7, #22]
    break;
 800c272:	e00b      	b.n	800c28c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	82fb      	strh	r3, [r7, #22]
    break;
 800c278:	e008      	b.n	800c28c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800c27a:	4ba5      	ldr	r3, [pc, #660]	; (800c510 <pbuf_alloc+0x2e8>)
 800c27c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800c280:	49a4      	ldr	r1, [pc, #656]	; (800c514 <pbuf_alloc+0x2ec>)
 800c282:	48a5      	ldr	r0, [pc, #660]	; (800c518 <pbuf_alloc+0x2f0>)
 800c284:	f008 f9de 	bl	8014644 <iprintf>
    return NULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	e15d      	b.n	800c548 <pbuf_alloc+0x320>
  }

  switch (type) {
 800c28c:	79bb      	ldrb	r3, [r7, #6]
 800c28e:	2b03      	cmp	r3, #3
 800c290:	f200 8134 	bhi.w	800c4fc <pbuf_alloc+0x2d4>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <pbuf_alloc+0x74>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c43d 	.word	0x0800c43d
 800c2a0:	0800c4c9 	.word	0x0800c4c9
 800c2a4:	0800c4c9 	.word	0x0800c4c9
 800c2a8:	0800c2ad 	.word	0x0800c2ad
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c2ac:	200c      	movs	r0, #12
 800c2ae:	f7ff fd81 	bl	800bdb4 <memp_malloc>
 800c2b2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d103      	bne.n	800c2c2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800c2ba:	f7ff ff89 	bl	800c1d0 <pbuf_pool_is_empty>
      return NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e142      	b.n	800c548 <pbuf_alloc+0x320>
    }
    p->type = type;
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	79ba      	ldrb	r2, [r7, #6]
 800c2c6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800c2ce:	8afb      	ldrh	r3, [r7, #22]
 800c2d0:	3310      	adds	r3, #16
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	3303      	adds	r3, #3
 800c2d8:	f023 0303 	bic.w	r3, r3, #3
 800c2dc:	461a      	mov	r2, r3
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f003 0303 	and.w	r3, r3, #3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d006      	beq.n	800c2fc <pbuf_alloc+0xd4>
 800c2ee:	4b88      	ldr	r3, [pc, #544]	; (800c510 <pbuf_alloc+0x2e8>)
 800c2f0:	f240 1229 	movw	r2, #297	; 0x129
 800c2f4:	4989      	ldr	r1, [pc, #548]	; (800c51c <pbuf_alloc+0x2f4>)
 800c2f6:	4888      	ldr	r0, [pc, #544]	; (800c518 <pbuf_alloc+0x2f0>)
 800c2f8:	f008 f9a4 	bl	8014644 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	88ba      	ldrh	r2, [r7, #4]
 800c300:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800c302:	8afb      	ldrh	r3, [r7, #22]
 800c304:	3303      	adds	r3, #3
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800c30e:	88bb      	ldrh	r3, [r7, #4]
 800c310:	4293      	cmp	r3, r2
 800c312:	bf28      	it	cs
 800c314:	4613      	movcs	r3, r2
 800c316:	b29a      	uxth	r2, r3
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	69fa      	ldr	r2, [r7, #28]
 800c322:	8952      	ldrh	r2, [r2, #10]
 800c324:	441a      	add	r2, r3
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d906      	bls.n	800c33e <pbuf_alloc+0x116>
 800c330:	4b77      	ldr	r3, [pc, #476]	; (800c510 <pbuf_alloc+0x2e8>)
 800c332:	f44f 7298 	mov.w	r2, #304	; 0x130
 800c336:	497a      	ldr	r1, [pc, #488]	; (800c520 <pbuf_alloc+0x2f8>)
 800c338:	4877      	ldr	r0, [pc, #476]	; (800c518 <pbuf_alloc+0x2f0>)
 800c33a:	f008 f983 	bl	8014644 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c33e:	8afb      	ldrh	r3, [r7, #22]
 800c340:	3303      	adds	r3, #3
 800c342:	f023 0303 	bic.w	r3, r3, #3
 800c346:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c34a:	d106      	bne.n	800c35a <pbuf_alloc+0x132>
 800c34c:	4b70      	ldr	r3, [pc, #448]	; (800c510 <pbuf_alloc+0x2e8>)
 800c34e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c352:	4974      	ldr	r1, [pc, #464]	; (800c524 <pbuf_alloc+0x2fc>)
 800c354:	4870      	ldr	r0, [pc, #448]	; (800c518 <pbuf_alloc+0x2f0>)
 800c356:	f008 f975 	bl	8014644 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	2201      	movs	r2, #1
 800c35e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800c364:	88bb      	ldrh	r3, [r7, #4]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	8952      	ldrh	r2, [r2, #10]
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800c36e:	e061      	b.n	800c434 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c370:	200c      	movs	r0, #12
 800c372:	f7ff fd1f 	bl	800bdb4 <memp_malloc>
 800c376:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d106      	bne.n	800c38c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800c37e:	f7ff ff27 	bl	800c1d0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800c382:	69f8      	ldr	r0, [r7, #28]
 800c384:	f000 fac2 	bl	800c90c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	e0dd      	b.n	800c548 <pbuf_alloc+0x320>
      }
      q->type = type;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	79ba      	ldrb	r2, [r7, #6]
 800c390:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	dd06      	ble.n	800c3bc <pbuf_alloc+0x194>
 800c3ae:	4b58      	ldr	r3, [pc, #352]	; (800c510 <pbuf_alloc+0x2e8>)
 800c3b0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c3b4:	495c      	ldr	r1, [pc, #368]	; (800c528 <pbuf_alloc+0x300>)
 800c3b6:	4858      	ldr	r0, [pc, #352]	; (800c518 <pbuf_alloc+0x2f0>)
 800c3b8:	f008 f944 	bl	8014644 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c3cc:	bf28      	it	cs
 800c3ce:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f103 0210 	add.w	r2, r3, #16
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d006      	beq.n	800c3fc <pbuf_alloc+0x1d4>
 800c3ee:	4b48      	ldr	r3, [pc, #288]	; (800c510 <pbuf_alloc+0x2e8>)
 800c3f0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c3f4:	494d      	ldr	r1, [pc, #308]	; (800c52c <pbuf_alloc+0x304>)
 800c3f6:	4848      	ldr	r0, [pc, #288]	; (800c518 <pbuf_alloc+0x2f0>)
 800c3f8:	f008 f924 	bl	8014644 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	8952      	ldrh	r2, [r2, #10]
 800c404:	441a      	add	r2, r3
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d906      	bls.n	800c41e <pbuf_alloc+0x1f6>
 800c410:	4b3f      	ldr	r3, [pc, #252]	; (800c510 <pbuf_alloc+0x2e8>)
 800c412:	f240 1255 	movw	r2, #341	; 0x155
 800c416:	4942      	ldr	r1, [pc, #264]	; (800c520 <pbuf_alloc+0x2f8>)
 800c418:	483f      	ldr	r0, [pc, #252]	; (800c518 <pbuf_alloc+0x2f0>)
 800c41a:	f008 f913 	bl	8014644 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	895b      	ldrh	r3, [r3, #10]
 800c428:	461a      	mov	r2, r3
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	dc9a      	bgt.n	800c370 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c43a:	e07e      	b.n	800c53a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c43c:	8afb      	ldrh	r3, [r7, #22]
 800c43e:	3313      	adds	r3, #19
 800c440:	b29b      	uxth	r3, r3
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	b29a      	uxth	r2, r3
 800c448:	88bb      	ldrh	r3, [r7, #4]
 800c44a:	3303      	adds	r3, #3
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	f023 0303 	bic.w	r3, r3, #3
 800c452:	b29b      	uxth	r3, r3
 800c454:	4413      	add	r3, r2
 800c456:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c458:	897a      	ldrh	r2, [r7, #10]
 800c45a:	88bb      	ldrh	r3, [r7, #4]
 800c45c:	3303      	adds	r3, #3
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	429a      	cmp	r2, r3
 800c464:	d201      	bcs.n	800c46a <pbuf_alloc+0x242>
        return NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	e06e      	b.n	800c548 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c46a:	897b      	ldrh	r3, [r7, #10]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff fb31 	bl	800bad4 <mem_malloc>
 800c472:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <pbuf_alloc+0x256>
      return NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	e064      	b.n	800c548 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c47e:	8afb      	ldrh	r3, [r7, #22]
 800c480:	3310      	adds	r3, #16
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	4413      	add	r3, r2
 800c486:	3303      	adds	r3, #3
 800c488:	f023 0303 	bic.w	r3, r3, #3
 800c48c:	461a      	mov	r2, r3
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	88ba      	ldrh	r2, [r7, #4]
 800c496:	811a      	strh	r2, [r3, #8]
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	891a      	ldrh	r2, [r3, #8]
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	79ba      	ldrb	r2, [r7, #6]
 800c4aa:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	f003 0303 	and.w	r3, r3, #3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d03f      	beq.n	800c538 <pbuf_alloc+0x310>
 800c4b8:	4b15      	ldr	r3, [pc, #84]	; (800c510 <pbuf_alloc+0x2e8>)
 800c4ba:	f240 1277 	movw	r2, #375	; 0x177
 800c4be:	491c      	ldr	r1, [pc, #112]	; (800c530 <pbuf_alloc+0x308>)
 800c4c0:	4815      	ldr	r0, [pc, #84]	; (800c518 <pbuf_alloc+0x2f0>)
 800c4c2:	f008 f8bf 	bl	8014644 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c4c6:	e037      	b.n	800c538 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c4c8:	200b      	movs	r0, #11
 800c4ca:	f7ff fc73 	bl	800bdb4 <memp_malloc>
 800c4ce:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e036      	b.n	800c548 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	88ba      	ldrh	r2, [r7, #4]
 800c4e4:	811a      	strh	r2, [r3, #8]
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	891a      	ldrh	r2, [r3, #8]
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	79ba      	ldrb	r2, [r7, #6]
 800c4f8:	731a      	strb	r2, [r3, #12]
    break;
 800c4fa:	e01e      	b.n	800c53a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c4fc:	4b04      	ldr	r3, [pc, #16]	; (800c510 <pbuf_alloc+0x2e8>)
 800c4fe:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c502:	490c      	ldr	r1, [pc, #48]	; (800c534 <pbuf_alloc+0x30c>)
 800c504:	4804      	ldr	r0, [pc, #16]	; (800c518 <pbuf_alloc+0x2f0>)
 800c506:	f008 f89d 	bl	8014644 <iprintf>
    return NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	e01c      	b.n	800c548 <pbuf_alloc+0x320>
 800c50e:	bf00      	nop
 800c510:	08016ab4 	.word	0x08016ab4
 800c514:	08016ae4 	.word	0x08016ae4
 800c518:	08016b00 	.word	0x08016b00
 800c51c:	08016b28 	.word	0x08016b28
 800c520:	08016b58 	.word	0x08016b58
 800c524:	08016b8c 	.word	0x08016b8c
 800c528:	08016bc0 	.word	0x08016bc0
 800c52c:	08016bd4 	.word	0x08016bd4
 800c530:	08016c04 	.word	0x08016c04
 800c534:	08016c30 	.word	0x08016c30
    break;
 800c538:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	2201      	movs	r2, #1
 800c53e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	2200      	movs	r2, #0
 800c544:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c546:	69fb      	ldr	r3, [r7, #28]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	603b      	str	r3, [r7, #0]
 800c558:	4603      	mov	r3, r0
 800c55a:	71fb      	strb	r3, [r7, #7]
 800c55c:	460b      	mov	r3, r1
 800c55e:	80bb      	strh	r3, [r7, #4]
 800c560:	4613      	mov	r3, r2
 800c562:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	2b04      	cmp	r3, #4
 800c568:	d81b      	bhi.n	800c5a2 <pbuf_alloced_custom+0x52>
 800c56a:	a201      	add	r2, pc, #4	; (adr r2, 800c570 <pbuf_alloced_custom+0x20>)
 800c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c570:	0800c585 	.word	0x0800c585
 800c574:	0800c58b 	.word	0x0800c58b
 800c578:	0800c591 	.word	0x0800c591
 800c57c:	0800c597 	.word	0x0800c597
 800c580:	0800c59d 	.word	0x0800c59d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c584:	2336      	movs	r3, #54	; 0x36
 800c586:	81fb      	strh	r3, [r7, #14]
    break;
 800c588:	e014      	b.n	800c5b4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c58a:	2322      	movs	r3, #34	; 0x22
 800c58c:	81fb      	strh	r3, [r7, #14]
    break;
 800c58e:	e011      	b.n	800c5b4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c590:	230e      	movs	r3, #14
 800c592:	81fb      	strh	r3, [r7, #14]
    break;
 800c594:	e00e      	b.n	800c5b4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c596:	2300      	movs	r3, #0
 800c598:	81fb      	strh	r3, [r7, #14]
    break;
 800c59a:	e00b      	b.n	800c5b4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	81fb      	strh	r3, [r7, #14]
    break;
 800c5a0:	e008      	b.n	800c5b4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c5a2:	4b1d      	ldr	r3, [pc, #116]	; (800c618 <pbuf_alloced_custom+0xc8>)
 800c5a4:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c5a8:	491c      	ldr	r1, [pc, #112]	; (800c61c <pbuf_alloced_custom+0xcc>)
 800c5aa:	481d      	ldr	r0, [pc, #116]	; (800c620 <pbuf_alloced_custom+0xd0>)
 800c5ac:	f008 f84a 	bl	8014644 <iprintf>
    return NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e02d      	b.n	800c610 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c5b4:	89fb      	ldrh	r3, [r7, #14]
 800c5b6:	3303      	adds	r3, #3
 800c5b8:	f023 0203 	bic.w	r2, r3, #3
 800c5bc:	88bb      	ldrh	r3, [r7, #4]
 800c5be:	441a      	add	r2, r3
 800c5c0:	8bbb      	ldrh	r3, [r7, #28]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d901      	bls.n	800c5ca <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e022      	b.n	800c610 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d008      	beq.n	800c5e8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c5d6:	89fb      	ldrh	r3, [r7, #14]
 800c5d8:	3303      	adds	r3, #3
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	441a      	add	r2, r3
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	e002      	b.n	800c5ee <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	88ba      	ldrh	r2, [r7, #4]
 800c5f8:	811a      	strh	r2, [r3, #8]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	891a      	ldrh	r2, [r3, #8]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	79ba      	ldrb	r2, [r7, #6]
 800c606:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2201      	movs	r2, #1
 800c60c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c60e:	683b      	ldr	r3, [r7, #0]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	08016ab4 	.word	0x08016ab4
 800c61c:	08016c4c 	.word	0x08016c4c
 800c620:	08016b00 	.word	0x08016b00

0800c624 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <pbuf_realloc+0x20>
 800c636:	4b4b      	ldr	r3, [pc, #300]	; (800c764 <pbuf_realloc+0x140>)
 800c638:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c63c:	494a      	ldr	r1, [pc, #296]	; (800c768 <pbuf_realloc+0x144>)
 800c63e:	484b      	ldr	r0, [pc, #300]	; (800c76c <pbuf_realloc+0x148>)
 800c640:	f008 f800 	bl	8014644 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7b1b      	ldrb	r3, [r3, #12]
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d012      	beq.n	800c672 <pbuf_realloc+0x4e>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7b1b      	ldrb	r3, [r3, #12]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d00e      	beq.n	800c672 <pbuf_realloc+0x4e>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7b1b      	ldrb	r3, [r3, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00a      	beq.n	800c672 <pbuf_realloc+0x4e>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	7b1b      	ldrb	r3, [r3, #12]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d006      	beq.n	800c672 <pbuf_realloc+0x4e>
 800c664:	4b3f      	ldr	r3, [pc, #252]	; (800c764 <pbuf_realloc+0x140>)
 800c666:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c66a:	4941      	ldr	r1, [pc, #260]	; (800c770 <pbuf_realloc+0x14c>)
 800c66c:	483f      	ldr	r0, [pc, #252]	; (800c76c <pbuf_realloc+0x148>)
 800c66e:	f007 ffe9 	bl	8014644 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	891b      	ldrh	r3, [r3, #8]
 800c676:	887a      	ldrh	r2, [r7, #2]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d26f      	bcs.n	800c75c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c67c:	887b      	ldrh	r3, [r7, #2]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	8912      	ldrh	r2, [r2, #8]
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c686:	887b      	ldrh	r3, [r7, #2]
 800c688:	827b      	strh	r3, [r7, #18]
  q = p;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c68e:	e025      	b.n	800c6dc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	895b      	ldrh	r3, [r3, #10]
 800c694:	8a7a      	ldrh	r2, [r7, #18]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	dd06      	ble.n	800c6b2 <pbuf_realloc+0x8e>
 800c6a4:	4b2f      	ldr	r3, [pc, #188]	; (800c764 <pbuf_realloc+0x140>)
 800c6a6:	f240 220b 	movw	r2, #523	; 0x20b
 800c6aa:	4932      	ldr	r1, [pc, #200]	; (800c774 <pbuf_realloc+0x150>)
 800c6ac:	482f      	ldr	r0, [pc, #188]	; (800c76c <pbuf_realloc+0x148>)
 800c6ae:	f007 ffc9 	bl	8014644 <iprintf>
    q->tot_len += (u16_t)grow;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	891a      	ldrh	r2, [r3, #8]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	4413      	add	r3, r2
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <pbuf_realloc+0xb8>
 800c6ce:	4b25      	ldr	r3, [pc, #148]	; (800c764 <pbuf_realloc+0x140>)
 800c6d0:	f240 220f 	movw	r2, #527	; 0x20f
 800c6d4:	4928      	ldr	r1, [pc, #160]	; (800c778 <pbuf_realloc+0x154>)
 800c6d6:	4825      	ldr	r0, [pc, #148]	; (800c76c <pbuf_realloc+0x148>)
 800c6d8:	f007 ffb4 	bl	8014644 <iprintf>
  while (rem_len > q->len) {
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	895b      	ldrh	r3, [r3, #10]
 800c6e0:	8a7a      	ldrh	r2, [r7, #18]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d8d4      	bhi.n	800c690 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	7b1b      	ldrb	r3, [r3, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d122      	bne.n	800c734 <pbuf_realloc+0x110>
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	895b      	ldrh	r3, [r3, #10]
 800c6f2:	8a7a      	ldrh	r2, [r7, #18]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d01d      	beq.n	800c734 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	7b5b      	ldrb	r3, [r3, #13]
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d117      	bne.n	800c734 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	461a      	mov	r2, r3
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	b29a      	uxth	r2, r3
 800c710:	8a7b      	ldrh	r3, [r7, #18]
 800c712:	4413      	add	r3, r2
 800c714:	b29b      	uxth	r3, r3
 800c716:	4619      	mov	r1, r3
 800c718:	6978      	ldr	r0, [r7, #20]
 800c71a:	f7ff f8f1 	bl	800b900 <mem_trim>
 800c71e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <pbuf_realloc+0x110>
 800c726:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <pbuf_realloc+0x140>)
 800c728:	f240 221d 	movw	r2, #541	; 0x21d
 800c72c:	4913      	ldr	r1, [pc, #76]	; (800c77c <pbuf_realloc+0x158>)
 800c72e:	480f      	ldr	r0, [pc, #60]	; (800c76c <pbuf_realloc+0x148>)
 800c730:	f007 ff88 	bl	8014644 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	8a7a      	ldrh	r2, [r7, #18]
 800c738:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	895a      	ldrh	r2, [r3, #10]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d004      	beq.n	800c754 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 f8dc 	bl	800c90c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2200      	movs	r2, #0
 800c758:	601a      	str	r2, [r3, #0]
 800c75a:	e000      	b.n	800c75e <pbuf_realloc+0x13a>
    return;
 800c75c:	bf00      	nop

}
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	08016ab4 	.word	0x08016ab4
 800c768:	08016c70 	.word	0x08016c70
 800c76c:	08016b00 	.word	0x08016b00
 800c770:	08016c88 	.word	0x08016c88
 800c774:	08016ca4 	.word	0x08016ca4
 800c778:	08016cb8 	.word	0x08016cb8
 800c77c:	08016cd0 	.word	0x08016cd0

0800c780 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	807b      	strh	r3, [r7, #2]
 800c78c:	4613      	mov	r3, r2
 800c78e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d106      	bne.n	800c7a4 <pbuf_header_impl+0x24>
 800c796:	4b46      	ldr	r3, [pc, #280]	; (800c8b0 <pbuf_header_impl+0x130>)
 800c798:	f240 223f 	movw	r2, #575	; 0x23f
 800c79c:	4945      	ldr	r1, [pc, #276]	; (800c8b4 <pbuf_header_impl+0x134>)
 800c79e:	4846      	ldr	r0, [pc, #280]	; (800c8b8 <pbuf_header_impl+0x138>)
 800c7a0:	f007 ff50 	bl	8014644 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c7a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <pbuf_header_impl+0x32>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <pbuf_header_impl+0x36>
    return 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e078      	b.n	800c8a8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c7b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	da10      	bge.n	800c7e0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c7be:	887b      	ldrh	r3, [r7, #2]
 800c7c0:	425b      	negs	r3, r3
 800c7c2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	895b      	ldrh	r3, [r3, #10]
 800c7c8:	89fa      	ldrh	r2, [r7, #14]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d90a      	bls.n	800c7e4 <pbuf_header_impl+0x64>
 800c7ce:	4b38      	ldr	r3, [pc, #224]	; (800c8b0 <pbuf_header_impl+0x130>)
 800c7d0:	f240 2247 	movw	r2, #583	; 0x247
 800c7d4:	4939      	ldr	r1, [pc, #228]	; (800c8bc <pbuf_header_impl+0x13c>)
 800c7d6:	4838      	ldr	r0, [pc, #224]	; (800c8b8 <pbuf_header_impl+0x138>)
 800c7d8:	f007 ff34 	bl	8014644 <iprintf>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e063      	b.n	800c8a8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c7e0:	887b      	ldrh	r3, [r7, #2]
 800c7e2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	7b1b      	ldrb	r3, [r3, #12]
 800c7e8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c7f0:	89bb      	ldrh	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <pbuf_header_impl+0x7c>
 800c7f6:	89bb      	ldrh	r3, [r7, #12]
 800c7f8:	2b03      	cmp	r3, #3
 800c7fa:	d112      	bne.n	800c822 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c804:	425b      	negs	r3, r3
 800c806:	441a      	add	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3310      	adds	r3, #16
 800c814:	429a      	cmp	r2, r3
 800c816:	d238      	bcs.n	800c88a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c81e:	2301      	movs	r3, #1
 800c820:	e042      	b.n	800c8a8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c822:	89bb      	ldrh	r3, [r7, #12]
 800c824:	2b02      	cmp	r3, #2
 800c826:	d002      	beq.n	800c82e <pbuf_header_impl+0xae>
 800c828:	89bb      	ldrh	r3, [r7, #12]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d124      	bne.n	800c878 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c82e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c832:	2b00      	cmp	r3, #0
 800c834:	da0d      	bge.n	800c852 <pbuf_header_impl+0xd2>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	895b      	ldrh	r3, [r3, #10]
 800c83a:	89fa      	ldrh	r2, [r7, #14]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d808      	bhi.n	800c852 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c848:	425b      	negs	r3, r3
 800c84a:	441a      	add	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	605a      	str	r2, [r3, #4]
 800c850:	e011      	b.n	800c876 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c852:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c856:	2b00      	cmp	r3, #0
 800c858:	dd0b      	ble.n	800c872 <pbuf_header_impl+0xf2>
 800c85a:	787b      	ldrb	r3, [r7, #1]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d008      	beq.n	800c872 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c868:	425b      	negs	r3, r3
 800c86a:	441a      	add	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	605a      	str	r2, [r3, #4]
 800c870:	e001      	b.n	800c876 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c872:	2301      	movs	r3, #1
 800c874:	e018      	b.n	800c8a8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c876:	e008      	b.n	800c88a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c878:	4b0d      	ldr	r3, [pc, #52]	; (800c8b0 <pbuf_header_impl+0x130>)
 800c87a:	f240 2277 	movw	r2, #631	; 0x277
 800c87e:	4910      	ldr	r1, [pc, #64]	; (800c8c0 <pbuf_header_impl+0x140>)
 800c880:	480d      	ldr	r0, [pc, #52]	; (800c8b8 <pbuf_header_impl+0x138>)
 800c882:	f007 fedf 	bl	8014644 <iprintf>
    return 1;
 800c886:	2301      	movs	r3, #1
 800c888:	e00e      	b.n	800c8a8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	895a      	ldrh	r2, [r3, #10]
 800c88e:	887b      	ldrh	r3, [r7, #2]
 800c890:	4413      	add	r3, r2
 800c892:	b29a      	uxth	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	891a      	ldrh	r2, [r3, #8]
 800c89c:	887b      	ldrh	r3, [r7, #2]
 800c89e:	4413      	add	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	08016ab4 	.word	0x08016ab4
 800c8b4:	08016cec 	.word	0x08016cec
 800c8b8:	08016b00 	.word	0x08016b00
 800c8bc:	08016cf8 	.word	0x08016cf8
 800c8c0:	08016d18 	.word	0x08016d18

0800c8c4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c8d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ff51 	bl	800c780 <pbuf_header_impl>
 800c8de:	4603      	mov	r3, r0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c8f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff ff3f 	bl	800c780 <pbuf_header_impl>
 800c902:	4603      	mov	r3, r0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10b      	bne.n	800c932 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d106      	bne.n	800c92e <pbuf_free+0x22>
 800c920:	4b41      	ldr	r3, [pc, #260]	; (800ca28 <pbuf_free+0x11c>)
 800c922:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c926:	4941      	ldr	r1, [pc, #260]	; (800ca2c <pbuf_free+0x120>)
 800c928:	4841      	ldr	r0, [pc, #260]	; (800ca30 <pbuf_free+0x124>)
 800c92a:	f007 fe8b 	bl	8014644 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	e076      	b.n	800ca20 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7b1b      	ldrb	r3, [r3, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d012      	beq.n	800c960 <pbuf_free+0x54>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7b1b      	ldrb	r3, [r3, #12]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d00e      	beq.n	800c960 <pbuf_free+0x54>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	7b1b      	ldrb	r3, [r3, #12]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d00a      	beq.n	800c960 <pbuf_free+0x54>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7b1b      	ldrb	r3, [r3, #12]
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d006      	beq.n	800c960 <pbuf_free+0x54>
 800c952:	4b35      	ldr	r3, [pc, #212]	; (800ca28 <pbuf_free+0x11c>)
 800c954:	f240 22de 	movw	r2, #734	; 0x2de
 800c958:	4936      	ldr	r1, [pc, #216]	; (800ca34 <pbuf_free+0x128>)
 800c95a:	4835      	ldr	r0, [pc, #212]	; (800ca30 <pbuf_free+0x124>)
 800c95c:	f007 fe72 	bl	8014644 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c960:	2300      	movs	r3, #0
 800c962:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c964:	e058      	b.n	800ca18 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c966:	f006 fc55 	bl	8013214 <sys_arch_protect>
 800c96a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	89db      	ldrh	r3, [r3, #14]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d106      	bne.n	800c982 <pbuf_free+0x76>
 800c974:	4b2c      	ldr	r3, [pc, #176]	; (800ca28 <pbuf_free+0x11c>)
 800c976:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c97a:	492f      	ldr	r1, [pc, #188]	; (800ca38 <pbuf_free+0x12c>)
 800c97c:	482c      	ldr	r0, [pc, #176]	; (800ca30 <pbuf_free+0x124>)
 800c97e:	f007 fe61 	bl	8014644 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	89db      	ldrh	r3, [r3, #14]
 800c986:	3b01      	subs	r3, #1
 800c988:	b29a      	uxth	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	81da      	strh	r2, [r3, #14]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	89db      	ldrh	r3, [r3, #14]
 800c992:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c994:	69b8      	ldr	r0, [r7, #24]
 800c996:	f006 fc4b 	bl	8013230 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c99a:	8afb      	ldrh	r3, [r7, #22]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d139      	bne.n	800ca14 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	7b1b      	ldrb	r3, [r3, #12]
 800c9aa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	7b5b      	ldrb	r3, [r3, #13]
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d011      	beq.n	800c9dc <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <pbuf_free+0xc6>
 800c9c4:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <pbuf_free+0x11c>)
 800c9c6:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c9ca:	491c      	ldr	r1, [pc, #112]	; (800ca3c <pbuf_free+0x130>)
 800c9cc:	4818      	ldr	r0, [pc, #96]	; (800ca30 <pbuf_free+0x124>)
 800c9ce:	f007 fe39 	bl	8014644 <iprintf>
        pc->custom_free_function(p);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	691b      	ldr	r3, [r3, #16]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	4798      	blx	r3
 800c9da:	e015      	b.n	800ca08 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c9dc:	89fb      	ldrh	r3, [r7, #14]
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d104      	bne.n	800c9ec <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c9e2:	6879      	ldr	r1, [r7, #4]
 800c9e4:	200c      	movs	r0, #12
 800c9e6:	f7ff fa37 	bl	800be58 <memp_free>
 800c9ea:	e00d      	b.n	800ca08 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d002      	beq.n	800c9f8 <pbuf_free+0xec>
 800c9f2:	89fb      	ldrh	r3, [r7, #14]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d104      	bne.n	800ca02 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	200b      	movs	r0, #11
 800c9fc:	f7ff fa2c 	bl	800be58 <memp_free>
 800ca00:	e002      	b.n	800ca08 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fe ff0e 	bl	800b824 <mem_free>
        }
      }
      count++;
 800ca08:	7ffb      	ldrb	r3, [r7, #31]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	607b      	str	r3, [r7, #4]
 800ca12:	e001      	b.n	800ca18 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1a3      	bne.n	800c966 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ca1e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	08016ab4 	.word	0x08016ab4
 800ca2c:	08016cec 	.word	0x08016cec
 800ca30:	08016b00 	.word	0x08016b00
 800ca34:	08016d28 	.word	0x08016d28
 800ca38:	08016d40 	.word	0x08016d40
 800ca3c:	08016d58 	.word	0x08016d58

0800ca40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ca4c:	e005      	b.n	800ca5a <pbuf_clen+0x1a>
    ++len;
 800ca4e:	89fb      	ldrh	r3, [r7, #14]
 800ca50:	3301      	adds	r3, #1
 800ca52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1f6      	bne.n	800ca4e <pbuf_clen+0xe>
  }
  return len;
 800ca60:	89fb      	ldrh	r3, [r7, #14]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
	...

0800ca70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d016      	beq.n	800caac <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800ca7e:	f006 fbc9 	bl	8013214 <sys_arch_protect>
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	89db      	ldrh	r3, [r3, #14]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	81da      	strh	r2, [r3, #14]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f006 fbcd 	bl	8013230 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	89db      	ldrh	r3, [r3, #14]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <pbuf_ref+0x3c>
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <pbuf_ref+0x44>)
 800caa0:	f240 3239 	movw	r2, #825	; 0x339
 800caa4:	4904      	ldr	r1, [pc, #16]	; (800cab8 <pbuf_ref+0x48>)
 800caa6:	4805      	ldr	r0, [pc, #20]	; (800cabc <pbuf_ref+0x4c>)
 800caa8:	f007 fdcc 	bl	8014644 <iprintf>
  }
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	08016ab4 	.word	0x08016ab4
 800cab8:	08016d7c 	.word	0x08016d7c
 800cabc:	08016b00 	.word	0x08016b00

0800cac0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <pbuf_cat+0x16>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d107      	bne.n	800cae6 <pbuf_cat+0x26>
 800cad6:	4b20      	ldr	r3, [pc, #128]	; (800cb58 <pbuf_cat+0x98>)
 800cad8:	f240 324d 	movw	r2, #845	; 0x34d
 800cadc:	491f      	ldr	r1, [pc, #124]	; (800cb5c <pbuf_cat+0x9c>)
 800cade:	4820      	ldr	r0, [pc, #128]	; (800cb60 <pbuf_cat+0xa0>)
 800cae0:	f007 fdb0 	bl	8014644 <iprintf>
 800cae4:	e034      	b.n	800cb50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	e00a      	b.n	800cb02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	891a      	ldrh	r2, [r3, #8]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	891b      	ldrh	r3, [r3, #8]
 800caf4:	4413      	add	r3, r2
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f0      	bne.n	800caec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	891a      	ldrh	r2, [r3, #8]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	895b      	ldrh	r3, [r3, #10]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d006      	beq.n	800cb24 <pbuf_cat+0x64>
 800cb16:	4b10      	ldr	r3, [pc, #64]	; (800cb58 <pbuf_cat+0x98>)
 800cb18:	f240 3255 	movw	r2, #853	; 0x355
 800cb1c:	4911      	ldr	r1, [pc, #68]	; (800cb64 <pbuf_cat+0xa4>)
 800cb1e:	4810      	ldr	r0, [pc, #64]	; (800cb60 <pbuf_cat+0xa0>)
 800cb20:	f007 fd90 	bl	8014644 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d006      	beq.n	800cb3a <pbuf_cat+0x7a>
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <pbuf_cat+0x98>)
 800cb2e:	f240 3256 	movw	r2, #854	; 0x356
 800cb32:	490d      	ldr	r1, [pc, #52]	; (800cb68 <pbuf_cat+0xa8>)
 800cb34:	480a      	ldr	r0, [pc, #40]	; (800cb60 <pbuf_cat+0xa0>)
 800cb36:	f007 fd85 	bl	8014644 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	891a      	ldrh	r2, [r3, #8]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	891b      	ldrh	r3, [r3, #8]
 800cb42:	4413      	add	r3, r2
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	08016ab4 	.word	0x08016ab4
 800cb5c:	08016d90 	.word	0x08016d90
 800cb60:	08016b00 	.word	0x08016b00
 800cb64:	08016dc8 	.word	0x08016dc8
 800cb68:	08016df8 	.word	0x08016df8

0800cb6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ffa1 	bl	800cac0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cb7e:	6838      	ldr	r0, [r7, #0]
 800cb80:	f7ff ff76 	bl	800ca70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800cb96:	2300      	movs	r3, #0
 800cb98:	81fb      	strh	r3, [r7, #14]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d008      	beq.n	800cbb6 <pbuf_copy+0x2a>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d005      	beq.n	800cbb6 <pbuf_copy+0x2a>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	891a      	ldrh	r2, [r3, #8]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	891b      	ldrh	r3, [r3, #8]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d209      	bcs.n	800cbca <pbuf_copy+0x3e>
 800cbb6:	4b54      	ldr	r3, [pc, #336]	; (800cd08 <pbuf_copy+0x17c>)
 800cbb8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cbbc:	4953      	ldr	r1, [pc, #332]	; (800cd0c <pbuf_copy+0x180>)
 800cbbe:	4854      	ldr	r0, [pc, #336]	; (800cd10 <pbuf_copy+0x184>)
 800cbc0:	f007 fd40 	bl	8014644 <iprintf>
 800cbc4:	f06f 030f 	mvn.w	r3, #15
 800cbc8:	e099      	b.n	800ccfe <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	895b      	ldrh	r3, [r3, #10]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	89fb      	ldrh	r3, [r7, #14]
 800cbd2:	1ad2      	subs	r2, r2, r3
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	895b      	ldrh	r3, [r3, #10]
 800cbd8:	4619      	mov	r1, r3
 800cbda:	89bb      	ldrh	r3, [r7, #12]
 800cbdc:	1acb      	subs	r3, r1, r3
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	db05      	blt.n	800cbee <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	895a      	ldrh	r2, [r3, #10]
 800cbe6:	89bb      	ldrh	r3, [r7, #12]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	817b      	strh	r3, [r7, #10]
 800cbec:	e004      	b.n	800cbf8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	895a      	ldrh	r2, [r3, #10]
 800cbf2:	89fb      	ldrh	r3, [r7, #14]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	89fb      	ldrh	r3, [r7, #14]
 800cbfe:	18d0      	adds	r0, r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	685a      	ldr	r2, [r3, #4]
 800cc04:	89bb      	ldrh	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	897a      	ldrh	r2, [r7, #10]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	f007 fd07 	bl	801461e <memcpy>
    offset_to += len;
 800cc10:	89fa      	ldrh	r2, [r7, #14]
 800cc12:	897b      	ldrh	r3, [r7, #10]
 800cc14:	4413      	add	r3, r2
 800cc16:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800cc18:	89ba      	ldrh	r2, [r7, #12]
 800cc1a:	897b      	ldrh	r3, [r7, #10]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	89fa      	ldrh	r2, [r7, #14]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d906      	bls.n	800cc38 <pbuf_copy+0xac>
 800cc2a:	4b37      	ldr	r3, [pc, #220]	; (800cd08 <pbuf_copy+0x17c>)
 800cc2c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cc30:	4938      	ldr	r1, [pc, #224]	; (800cd14 <pbuf_copy+0x188>)
 800cc32:	4837      	ldr	r0, [pc, #220]	; (800cd10 <pbuf_copy+0x184>)
 800cc34:	f007 fd06 	bl	8014644 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	895b      	ldrh	r3, [r3, #10]
 800cc3c:	89ba      	ldrh	r2, [r7, #12]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d906      	bls.n	800cc50 <pbuf_copy+0xc4>
 800cc42:	4b31      	ldr	r3, [pc, #196]	; (800cd08 <pbuf_copy+0x17c>)
 800cc44:	f240 32ce 	movw	r2, #974	; 0x3ce
 800cc48:	4933      	ldr	r1, [pc, #204]	; (800cd18 <pbuf_copy+0x18c>)
 800cc4a:	4831      	ldr	r0, [pc, #196]	; (800cd10 <pbuf_copy+0x184>)
 800cc4c:	f007 fcfa 	bl	8014644 <iprintf>
    if (offset_from >= p_from->len) {
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	895b      	ldrh	r3, [r3, #10]
 800cc54:	89ba      	ldrh	r2, [r7, #12]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d304      	bcc.n	800cc64 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	895b      	ldrh	r3, [r3, #10]
 800cc68:	89fa      	ldrh	r2, [r7, #14]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d114      	bne.n	800cc98 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10c      	bne.n	800cc98 <pbuf_copy+0x10c>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d009      	beq.n	800cc98 <pbuf_copy+0x10c>
 800cc84:	4b20      	ldr	r3, [pc, #128]	; (800cd08 <pbuf_copy+0x17c>)
 800cc86:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cc8a:	4924      	ldr	r1, [pc, #144]	; (800cd1c <pbuf_copy+0x190>)
 800cc8c:	4820      	ldr	r0, [pc, #128]	; (800cd10 <pbuf_copy+0x184>)
 800cc8e:	f007 fcd9 	bl	8014644 <iprintf>
 800cc92:	f06f 030f 	mvn.w	r3, #15
 800cc96:	e032      	b.n	800ccfe <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d013      	beq.n	800ccc6 <pbuf_copy+0x13a>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	895a      	ldrh	r2, [r3, #10]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	891b      	ldrh	r3, [r3, #8]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d10d      	bne.n	800ccc6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d009      	beq.n	800ccc6 <pbuf_copy+0x13a>
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <pbuf_copy+0x17c>)
 800ccb4:	f240 32de 	movw	r2, #990	; 0x3de
 800ccb8:	4919      	ldr	r1, [pc, #100]	; (800cd20 <pbuf_copy+0x194>)
 800ccba:	4815      	ldr	r0, [pc, #84]	; (800cd10 <pbuf_copy+0x184>)
 800ccbc:	f007 fcc2 	bl	8014644 <iprintf>
 800ccc0:	f06f 0305 	mvn.w	r3, #5
 800ccc4:	e01b      	b.n	800ccfe <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d013      	beq.n	800ccf4 <pbuf_copy+0x168>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	895a      	ldrh	r2, [r3, #10]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	891b      	ldrh	r3, [r3, #8]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d10d      	bne.n	800ccf4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d009      	beq.n	800ccf4 <pbuf_copy+0x168>
 800cce0:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <pbuf_copy+0x17c>)
 800cce2:	f240 32e3 	movw	r2, #995	; 0x3e3
 800cce6:	490e      	ldr	r1, [pc, #56]	; (800cd20 <pbuf_copy+0x194>)
 800cce8:	4809      	ldr	r0, [pc, #36]	; (800cd10 <pbuf_copy+0x184>)
 800ccea:	f007 fcab 	bl	8014644 <iprintf>
 800ccee:	f06f 0305 	mvn.w	r3, #5
 800ccf2:	e004      	b.n	800ccfe <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f47f af67 	bne.w	800cbca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	08016ab4 	.word	0x08016ab4
 800cd0c:	08016e44 	.word	0x08016e44
 800cd10:	08016b00 	.word	0x08016b00
 800cd14:	08016e74 	.word	0x08016e74
 800cd18:	08016e8c 	.word	0x08016e8c
 800cd1c:	08016ea8 	.word	0x08016ea8
 800cd20:	08016eb8 	.word	0x08016eb8

0800cd24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4611      	mov	r1, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	460b      	mov	r3, r1
 800cd34:	80fb      	strh	r3, [r7, #6]
 800cd36:	4613      	mov	r3, r2
 800cd38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d108      	bne.n	800cd56 <pbuf_copy_partial+0x32>
 800cd44:	4b30      	ldr	r3, [pc, #192]	; (800ce08 <pbuf_copy_partial+0xe4>)
 800cd46:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800cd4a:	4930      	ldr	r1, [pc, #192]	; (800ce0c <pbuf_copy_partial+0xe8>)
 800cd4c:	4830      	ldr	r0, [pc, #192]	; (800ce10 <pbuf_copy_partial+0xec>)
 800cd4e:	f007 fc79 	bl	8014644 <iprintf>
 800cd52:	2300      	movs	r3, #0
 800cd54:	e054      	b.n	800ce00 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d108      	bne.n	800cd6e <pbuf_copy_partial+0x4a>
 800cd5c:	4b2a      	ldr	r3, [pc, #168]	; (800ce08 <pbuf_copy_partial+0xe4>)
 800cd5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800cd62:	492c      	ldr	r1, [pc, #176]	; (800ce14 <pbuf_copy_partial+0xf0>)
 800cd64:	482a      	ldr	r0, [pc, #168]	; (800ce10 <pbuf_copy_partial+0xec>)
 800cd66:	f007 fc6d 	bl	8014644 <iprintf>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e048      	b.n	800ce00 <pbuf_copy_partial+0xdc>

  left = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <pbuf_copy_partial+0x5a>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <pbuf_copy_partial+0x5e>
    return 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e03e      	b.n	800ce00 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	61fb      	str	r3, [r7, #28]
 800cd86:	e034      	b.n	800cdf2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800cd88:	88bb      	ldrh	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00a      	beq.n	800cda4 <pbuf_copy_partial+0x80>
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	895b      	ldrh	r3, [r3, #10]
 800cd92:	88ba      	ldrh	r2, [r7, #4]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d305      	bcc.n	800cda4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	895b      	ldrh	r3, [r3, #10]
 800cd9c:	88ba      	ldrh	r2, [r7, #4]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	80bb      	strh	r3, [r7, #4]
 800cda2:	e023      	b.n	800cdec <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	895a      	ldrh	r2, [r3, #10]
 800cda8:	88bb      	ldrh	r3, [r7, #4]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cdae:	8b3a      	ldrh	r2, [r7, #24]
 800cdb0:	88fb      	ldrh	r3, [r7, #6]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d901      	bls.n	800cdba <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800cdba:	8b7b      	ldrh	r3, [r7, #26]
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	18d0      	adds	r0, r2, r3
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	88bb      	ldrh	r3, [r7, #4]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	8b3a      	ldrh	r2, [r7, #24]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f007 fc27 	bl	801461e <memcpy>
      copied_total += buf_copy_len;
 800cdd0:	8afa      	ldrh	r2, [r7, #22]
 800cdd2:	8b3b      	ldrh	r3, [r7, #24]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800cdd8:	8b7a      	ldrh	r2, [r7, #26]
 800cdda:	8b3b      	ldrh	r3, [r7, #24]
 800cddc:	4413      	add	r3, r2
 800cdde:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800cde0:	88fa      	ldrh	r2, [r7, #6]
 800cde2:	8b3b      	ldrh	r3, [r7, #24]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	88fb      	ldrh	r3, [r7, #6]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <pbuf_copy_partial+0xda>
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1c4      	bne.n	800cd88 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800cdfe:	8afb      	ldrh	r3, [r7, #22]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3720      	adds	r7, #32
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	08016ab4 	.word	0x08016ab4
 800ce0c:	08016ee4 	.word	0x08016ee4
 800ce10:	08016b00 	.word	0x08016b00
 800ce14:	08016f04 	.word	0x08016f04

0800ce18 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ce1c:	bf00      	nop
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ce2c:	f000 ff72 	bl	800dd14 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <tcp_tmr+0x28>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <tcp_tmr+0x28>)
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	4b04      	ldr	r3, [pc, #16]	; (800ce50 <tcp_tmr+0x28>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ce48:	f000 fca4 	bl	800d794 <tcp_slowtmr>
  }
}
 800ce4c:	bf00      	nop
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	20003f89 	.word	0x20003f89

0800ce54 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	e00a      	b.n	800ce7a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d102      	bne.n	800ce74 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f1      	bne.n	800ce64 <tcp_remove_listener+0x10>
      }
   }
}
 800ce80:	bf00      	nop
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <tcp_listen_closed+0x1a>
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <tcp_listen_closed+0x5c>)
 800ce9c:	22c0      	movs	r2, #192	; 0xc0
 800ce9e:	4913      	ldr	r1, [pc, #76]	; (800ceec <tcp_listen_closed+0x60>)
 800cea0:	4813      	ldr	r0, [pc, #76]	; (800cef0 <tcp_listen_closed+0x64>)
 800cea2:	f007 fbcf 	bl	8014644 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7d1b      	ldrb	r3, [r3, #20]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d005      	beq.n	800ceba <tcp_listen_closed+0x2e>
 800ceae:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <tcp_listen_closed+0x5c>)
 800ceb0:	22c1      	movs	r2, #193	; 0xc1
 800ceb2:	4910      	ldr	r1, [pc, #64]	; (800cef4 <tcp_listen_closed+0x68>)
 800ceb4:	480e      	ldr	r0, [pc, #56]	; (800cef0 <tcp_listen_closed+0x64>)
 800ceb6:	f007 fbc5 	bl	8014644 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ceba:	2301      	movs	r3, #1
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	e00b      	b.n	800ced8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800cec0:	4a0d      	ldr	r2, [pc, #52]	; (800cef8 <tcp_listen_closed+0x6c>)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6879      	ldr	r1, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff ffc1 	bl	800ce54 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d9f0      	bls.n	800cec0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08017038 	.word	0x08017038
 800ceec:	08017068 	.word	0x08017068
 800cef0:	08017074 	.word	0x08017074
 800cef4:	0801709c 	.word	0x0801709c
 800cef8:	0801802c 	.word	0x0801802c

0800cefc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cefc:	b5b0      	push	{r4, r5, r7, lr}
 800cefe:	b086      	sub	sp, #24
 800cf00:	af02      	add	r7, sp, #8
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d075      	beq.n	800cffa <tcp_close_shutdown+0xfe>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	7d1b      	ldrb	r3, [r3, #20]
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	d003      	beq.n	800cf1e <tcp_close_shutdown+0x22>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7d1b      	ldrb	r3, [r3, #20]
 800cf1a:	2b07      	cmp	r3, #7
 800cf1c:	d16d      	bne.n	800cffa <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d104      	bne.n	800cf30 <tcp_close_shutdown+0x34>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf2e:	d064      	beq.n	800cffa <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	7e9b      	ldrb	r3, [r3, #26]
 800cf34:	f003 0310 	and.w	r3, r3, #16
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <tcp_close_shutdown+0x4e>
 800cf3c:	4b59      	ldr	r3, [pc, #356]	; (800d0a4 <tcp_close_shutdown+0x1a8>)
 800cf3e:	f240 120f 	movw	r2, #271	; 0x10f
 800cf42:	4959      	ldr	r1, [pc, #356]	; (800d0a8 <tcp_close_shutdown+0x1ac>)
 800cf44:	4859      	ldr	r0, [pc, #356]	; (800d0ac <tcp_close_shutdown+0x1b0>)
 800cf46:	f007 fb7d 	bl	8014644 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf52:	687c      	ldr	r4, [r7, #4]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	1d1d      	adds	r5, r3, #4
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	8adb      	ldrh	r3, [r3, #22]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	8b12      	ldrh	r2, [r2, #24]
 800cf60:	9201      	str	r2, [sp, #4]
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	462b      	mov	r3, r5
 800cf66:	4622      	mov	r2, r4
 800cf68:	f004 fed6 	bl	8011d18 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 fa07 	bl	800e380 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cf72:	4b4f      	ldr	r3, [pc, #316]	; (800d0b0 <tcp_close_shutdown+0x1b4>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d105      	bne.n	800cf88 <tcp_close_shutdown+0x8c>
 800cf7c:	4b4c      	ldr	r3, [pc, #304]	; (800d0b0 <tcp_close_shutdown+0x1b4>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	4a4b      	ldr	r2, [pc, #300]	; (800d0b0 <tcp_close_shutdown+0x1b4>)
 800cf84:	6013      	str	r3, [r2, #0]
 800cf86:	e013      	b.n	800cfb0 <tcp_close_shutdown+0xb4>
 800cf88:	4b49      	ldr	r3, [pc, #292]	; (800d0b0 <tcp_close_shutdown+0x1b4>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	e00c      	b.n	800cfaa <tcp_close_shutdown+0xae>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d104      	bne.n	800cfa4 <tcp_close_shutdown+0xa8>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	60da      	str	r2, [r3, #12]
 800cfa2:	e005      	b.n	800cfb0 <tcp_close_shutdown+0xb4>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1ef      	bne.n	800cf90 <tcp_close_shutdown+0x94>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	60da      	str	r2, [r3, #12]
 800cfb6:	4b3f      	ldr	r3, [pc, #252]	; (800d0b4 <tcp_close_shutdown+0x1b8>)
 800cfb8:	2201      	movs	r2, #1
 800cfba:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1b      	ldrb	r3, [r3, #20]
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d10c      	bne.n	800cfde <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	220a      	movs	r2, #10
 800cfc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cfca:	4b3b      	ldr	r3, [pc, #236]	; (800d0b8 <tcp_close_shutdown+0x1bc>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60da      	str	r2, [r3, #12]
 800cfd2:	4a39      	ldr	r2, [pc, #228]	; (800d0b8 <tcp_close_shutdown+0x1bc>)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	f005 f8ee 	bl	80121b8 <tcp_timer_needed>
 800cfdc:	e00b      	b.n	800cff6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800cfde:	4b37      	ldr	r3, [pc, #220]	; (800d0bc <tcp_close_shutdown+0x1c0>)
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d102      	bne.n	800cfee <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800cfe8:	f003 fd2c 	bl	8010a44 <tcp_trigger_input_pcb_close>
 800cfec:	e003      	b.n	800cff6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	2001      	movs	r0, #1
 800cff2:	f7fe ff31 	bl	800be58 <memp_free>
        }
      }
      return ERR_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	e050      	b.n	800d09c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	7d1b      	ldrb	r3, [r3, #20]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d02e      	beq.n	800d060 <tcp_close_shutdown+0x164>
 800d002:	2b02      	cmp	r3, #2
 800d004:	d038      	beq.n	800d078 <tcp_close_shutdown+0x17c>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d142      	bne.n	800d090 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8adb      	ldrh	r3, [r3, #22]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d021      	beq.n	800d056 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d012:	4b2b      	ldr	r3, [pc, #172]	; (800d0c0 <tcp_close_shutdown+0x1c4>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d105      	bne.n	800d028 <tcp_close_shutdown+0x12c>
 800d01c:	4b28      	ldr	r3, [pc, #160]	; (800d0c0 <tcp_close_shutdown+0x1c4>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	4a27      	ldr	r2, [pc, #156]	; (800d0c0 <tcp_close_shutdown+0x1c4>)
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	e013      	b.n	800d050 <tcp_close_shutdown+0x154>
 800d028:	4b25      	ldr	r3, [pc, #148]	; (800d0c0 <tcp_close_shutdown+0x1c4>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	60bb      	str	r3, [r7, #8]
 800d02e:	e00c      	b.n	800d04a <tcp_close_shutdown+0x14e>
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	68da      	ldr	r2, [r3, #12]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	429a      	cmp	r2, r3
 800d038:	d104      	bne.n	800d044 <tcp_close_shutdown+0x148>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	68da      	ldr	r2, [r3, #12]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	60da      	str	r2, [r3, #12]
 800d042:	e005      	b.n	800d050 <tcp_close_shutdown+0x154>
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	60bb      	str	r3, [r7, #8]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1ef      	bne.n	800d030 <tcp_close_shutdown+0x134>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800d056:	6879      	ldr	r1, [r7, #4]
 800d058:	2001      	movs	r0, #1
 800d05a:	f7fe fefd 	bl	800be58 <memp_free>
    break;
 800d05e:	e01c      	b.n	800d09a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff ff13 	bl	800ce8c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	4816      	ldr	r0, [pc, #88]	; (800d0c4 <tcp_close_shutdown+0x1c8>)
 800d06a:	f001 f9cb 	bl	800e404 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d06e:	6879      	ldr	r1, [r7, #4]
 800d070:	2002      	movs	r0, #2
 800d072:	f7fe fef1 	bl	800be58 <memp_free>
    break;
 800d076:	e010      	b.n	800d09a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	480d      	ldr	r0, [pc, #52]	; (800d0b0 <tcp_close_shutdown+0x1b4>)
 800d07c:	f001 f9c2 	bl	800e404 <tcp_pcb_remove>
 800d080:	4b0c      	ldr	r3, [pc, #48]	; (800d0b4 <tcp_close_shutdown+0x1b8>)
 800d082:	2201      	movs	r2, #1
 800d084:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	2001      	movs	r0, #1
 800d08a:	f7fe fee5 	bl	800be58 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800d08e:	e004      	b.n	800d09a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f819 	bl	800d0c8 <tcp_close_shutdown_fin>
 800d096:	4603      	mov	r3, r0
 800d098:	e000      	b.n	800d09c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bdb0      	pop	{r4, r5, r7, pc}
 800d0a4:	08017038 	.word	0x08017038
 800d0a8:	080170b4 	.word	0x080170b4
 800d0ac:	08017074 	.word	0x08017074
 800d0b0:	20007738 	.word	0x20007738
 800d0b4:	20007734 	.word	0x20007734
 800d0b8:	20007748 	.word	0x20007748
 800d0bc:	2000774c 	.word	0x2000774c
 800d0c0:	20007744 	.word	0x20007744
 800d0c4:	20007740 	.word	0x20007740

0800d0c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <tcp_close_shutdown_fin+0x1c>
 800d0d6:	4b2c      	ldr	r3, [pc, #176]	; (800d188 <tcp_close_shutdown_fin+0xc0>)
 800d0d8:	f240 124d 	movw	r2, #333	; 0x14d
 800d0dc:	492b      	ldr	r1, [pc, #172]	; (800d18c <tcp_close_shutdown_fin+0xc4>)
 800d0de:	482c      	ldr	r0, [pc, #176]	; (800d190 <tcp_close_shutdown_fin+0xc8>)
 800d0e0:	f007 fab0 	bl	8014644 <iprintf>

  switch (pcb->state) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7d1b      	ldrb	r3, [r3, #20]
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d010      	beq.n	800d10e <tcp_close_shutdown_fin+0x46>
 800d0ec:	2b07      	cmp	r3, #7
 800d0ee:	d01b      	beq.n	800d128 <tcp_close_shutdown_fin+0x60>
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d126      	bne.n	800d142 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f003 fd31 	bl	8010b5c <tcp_send_fin>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d11f      	bne.n	800d146 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2205      	movs	r2, #5
 800d10a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d10c:	e01b      	b.n	800d146 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f003 fd24 	bl	8010b5c <tcp_send_fin>
 800d114:	4603      	mov	r3, r0
 800d116:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d114      	bne.n	800d14a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2205      	movs	r2, #5
 800d124:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d126:	e010      	b.n	800d14a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f003 fd17 	bl	8010b5c <tcp_send_fin>
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2209      	movs	r2, #9
 800d13e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d140:	e005      	b.n	800d14e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	e01c      	b.n	800d180 <tcp_close_shutdown_fin+0xb8>
    break;
 800d146:	bf00      	nop
 800d148:	e002      	b.n	800d150 <tcp_close_shutdown_fin+0x88>
    break;
 800d14a:	bf00      	nop
 800d14c:	e000      	b.n	800d150 <tcp_close_shutdown_fin+0x88>
    break;
 800d14e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d103      	bne.n	800d160 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f004 fb55 	bl	8011808 <tcp_output>
 800d15e:	e00d      	b.n	800d17c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d168:	d108      	bne.n	800d17c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7e9b      	ldrb	r3, [r3, #26]
 800d16e:	f043 0308 	orr.w	r3, r3, #8
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	e001      	b.n	800d180 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	08017038 	.word	0x08017038
 800d18c:	08017068 	.word	0x08017068
 800d190:	08017074 	.word	0x08017074

0800d194 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	7d1b      	ldrb	r3, [r3, #20]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d006      	beq.n	800d1b2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7e9b      	ldrb	r3, [r3, #26]
 800d1a8:	f043 0310 	orr.w	r3, r3, #16
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff fea1 	bl	800cefc <tcp_close_shutdown>
 800d1ba:	4603      	mov	r3, r0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	7d1b      	ldrb	r3, [r3, #20]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d102      	bne.n	800d1de <tcp_shutdown+0x1a>
    return ERR_CONN;
 800d1d8:	f06f 030a 	mvn.w	r3, #10
 800d1dc:	e035      	b.n	800d24a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d01b      	beq.n	800d21c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	7e9b      	ldrb	r3, [r3, #26]
 800d1e8:	f043 0310 	orr.w	r3, r3, #16
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d005      	beq.n	800d204 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff fe7e 	bl	800cefc <tcp_close_shutdown>
 800d200:	4603      	mov	r3, r0
 800d202:	e022      	b.n	800d24a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff fb7b 	bl	800c90c <pbuf_free>
      pcb->refused_data = NULL;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d012      	beq.n	800d248 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	7d1b      	ldrb	r3, [r3, #20]
 800d226:	2b03      	cmp	r3, #3
 800d228:	db0b      	blt.n	800d242 <tcp_shutdown+0x7e>
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	dd01      	ble.n	800d232 <tcp_shutdown+0x6e>
 800d22e:	2b07      	cmp	r3, #7
 800d230:	d107      	bne.n	800d242 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	b2db      	uxtb	r3, r3
 800d236:	4619      	mov	r1, r3
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7ff fe5f 	bl	800cefc <tcp_close_shutdown>
 800d23e:	4603      	mov	r3, r0
 800d240:	e003      	b.n	800d24a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800d242:	f06f 030a 	mvn.w	r3, #10
 800d246:	e000      	b.n	800d24a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08c      	sub	sp, #48	; 0x30
 800d258:	af02      	add	r7, sp, #8
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7d1b      	ldrb	r3, [r3, #20]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d106      	bne.n	800d274 <tcp_abandon+0x20>
 800d266:	4b4d      	ldr	r3, [pc, #308]	; (800d39c <tcp_abandon+0x148>)
 800d268:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d26c:	494c      	ldr	r1, [pc, #304]	; (800d3a0 <tcp_abandon+0x14c>)
 800d26e:	484d      	ldr	r0, [pc, #308]	; (800d3a4 <tcp_abandon+0x150>)
 800d270:	f007 f9e8 	bl	8014644 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
 800d278:	2b0a      	cmp	r3, #10
 800d27a:	d108      	bne.n	800d28e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	484a      	ldr	r0, [pc, #296]	; (800d3a8 <tcp_abandon+0x154>)
 800d280:	f001 f8c0 	bl	800e404 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800d284:	6879      	ldr	r1, [r7, #4]
 800d286:	2001      	movs	r0, #1
 800d288:	f7fe fde6 	bl	800be58 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800d28c:	e081      	b.n	800d392 <tcp_abandon+0x13e>
    int send_rst = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d29a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2a8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7d1b      	ldrb	r3, [r3, #20]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d126      	bne.n	800d306 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	8adb      	ldrh	r3, [r3, #22]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d02e      	beq.n	800d31e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2c0:	4b3a      	ldr	r3, [pc, #232]	; (800d3ac <tcp_abandon+0x158>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d105      	bne.n	800d2d6 <tcp_abandon+0x82>
 800d2ca:	4b38      	ldr	r3, [pc, #224]	; (800d3ac <tcp_abandon+0x158>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	4a36      	ldr	r2, [pc, #216]	; (800d3ac <tcp_abandon+0x158>)
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	e013      	b.n	800d2fe <tcp_abandon+0xaa>
 800d2d6:	4b35      	ldr	r3, [pc, #212]	; (800d3ac <tcp_abandon+0x158>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	e00c      	b.n	800d2f8 <tcp_abandon+0xa4>
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	68da      	ldr	r2, [r3, #12]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d104      	bne.n	800d2f2 <tcp_abandon+0x9e>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	60da      	str	r2, [r3, #12]
 800d2f0:	e005      	b.n	800d2fe <tcp_abandon+0xaa>
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	61fb      	str	r3, [r7, #28]
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1ef      	bne.n	800d2de <tcp_abandon+0x8a>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	60da      	str	r2, [r3, #12]
 800d304:	e00b      	b.n	800d31e <tcp_abandon+0xca>
      send_rst = reset;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8adb      	ldrh	r3, [r3, #22]
 800d30e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	4827      	ldr	r0, [pc, #156]	; (800d3b0 <tcp_abandon+0x15c>)
 800d314:	f001 f876 	bl	800e404 <tcp_pcb_remove>
 800d318:	4b26      	ldr	r3, [pc, #152]	; (800d3b4 <tcp_abandon+0x160>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d322:	2b00      	cmp	r3, #0
 800d324:	d004      	beq.n	800d330 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32a:	4618      	mov	r0, r3
 800d32c:	f000 fdbf 	bl	800deae <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d334:	2b00      	cmp	r3, #0
 800d336:	d004      	beq.n	800d342 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 fdb6 	bl	800deae <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d346:	2b00      	cmp	r3, #0
 800d348:	d004      	beq.n	800d354 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d34e:	4618      	mov	r0, r3
 800d350:	f000 fdad 	bl	800deae <tcp_segs_free>
    if (send_rst) {
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00c      	beq.n	800d374 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	1d19      	adds	r1, r3, #4
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	8b1b      	ldrh	r3, [r3, #24]
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	460b      	mov	r3, r1
 800d36c:	6979      	ldr	r1, [r7, #20]
 800d36e:	69b8      	ldr	r0, [r7, #24]
 800d370:	f004 fcd2 	bl	8011d18 <tcp_rst>
    last_state = pcb->state;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	2001      	movs	r0, #1
 800d37e:	f7fe fd6b 	bl	800be58 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d004      	beq.n	800d392 <tcp_abandon+0x13e>
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f06f 010c 	mvn.w	r1, #12
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	4798      	blx	r3
}
 800d392:	bf00      	nop
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	08017038 	.word	0x08017038
 800d3a0:	080170d0 	.word	0x080170d0
 800d3a4:	08017074 	.word	0x08017074
 800d3a8:	20007748 	.word	0x20007748
 800d3ac:	20007744 	.word	0x20007744
 800d3b0:	20007738 	.word	0x20007738
 800d3b4:	20007734 	.word	0x20007734

0800d3b8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7ff ff46 	bl	800d254 <tcp_abandon>
}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d3e0:	4413      	add	r3, r2
 800d3e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d3ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d3f0:	d802      	bhi.n	800d3f8 <tcp_update_rcv_ann_wnd+0x28>
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d3f6:	e001      	b.n	800d3fc <tcp_update_rcv_ann_wnd+0x2c>
 800d3f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3fc:	4413      	add	r3, r2
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	db08      	blt.n	800d418 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	e020      	b.n	800d45a <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	dd03      	ble.n	800d42e <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d42c:	e014      	b.n	800d458 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d440:	d306      	bcc.n	800d450 <tcp_update_rcv_ann_wnd+0x80>
 800d442:	4b08      	ldr	r3, [pc, #32]	; (800d464 <tcp_update_rcv_ann_wnd+0x94>)
 800d444:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d448:	4907      	ldr	r1, [pc, #28]	; (800d468 <tcp_update_rcv_ann_wnd+0x98>)
 800d44a:	4808      	ldr	r0, [pc, #32]	; (800d46c <tcp_update_rcv_ann_wnd+0x9c>)
 800d44c:	f007 f8fa 	bl	8014644 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	b29a      	uxth	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d458:	2300      	movs	r3, #0
  }
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	08017038 	.word	0x08017038
 800d468:	08017150 	.word	0x08017150
 800d46c:	08017074 	.word	0x08017074

0800d470 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	7d1b      	ldrb	r3, [r3, #20]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d106      	bne.n	800d492 <tcp_recved+0x22>
 800d484:	4b23      	ldr	r3, [pc, #140]	; (800d514 <tcp_recved+0xa4>)
 800d486:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d48a:	4923      	ldr	r1, [pc, #140]	; (800d518 <tcp_recved+0xa8>)
 800d48c:	4823      	ldr	r0, [pc, #140]	; (800d51c <tcp_recved+0xac>)
 800d48e:	f007 f8d9 	bl	8014644 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d496:	887b      	ldrh	r3, [r7, #2]
 800d498:	4413      	add	r3, r2
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d4a8:	d904      	bls.n	800d4b4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4b0:	851a      	strh	r2, [r3, #40]	; 0x28
 800d4b2:	e017      	b.n	800d4e4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d113      	bne.n	800d4e4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	d003      	beq.n	800d4cc <tcp_recved+0x5c>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7d1b      	ldrb	r3, [r3, #20]
 800d4c8:	2b09      	cmp	r3, #9
 800d4ca:	d104      	bne.n	800d4d6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d4d4:	e006      	b.n	800d4e4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d4d6:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <tcp_recved+0xa4>)
 800d4d8:	f240 322d 	movw	r2, #813	; 0x32d
 800d4dc:	4910      	ldr	r1, [pc, #64]	; (800d520 <tcp_recved+0xb0>)
 800d4de:	480f      	ldr	r0, [pc, #60]	; (800d51c <tcp_recved+0xac>)
 800d4e0:	f007 f8b0 	bl	8014644 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff ff73 	bl	800d3d0 <tcp_update_rcv_ann_wnd>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d4f4:	db09      	blt.n	800d50a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	7e9b      	ldrb	r3, [r3, #26]
 800d4fa:	f043 0302 	orr.w	r3, r3, #2
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f004 f97f 	bl	8011808 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d50a:	bf00      	nop
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	08017038 	.word	0x08017038
 800d518:	0801716c 	.word	0x0801716c
 800d51c:	08017074 	.word	0x08017074
 800d520:	08017194 	.word	0x08017194

0800d524 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d52e:	4b1d      	ldr	r3, [pc, #116]	; (800d5a4 <tcp_new_port+0x80>)
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	b291      	uxth	r1, r2
 800d536:	4a1b      	ldr	r2, [pc, #108]	; (800d5a4 <tcp_new_port+0x80>)
 800d538:	8011      	strh	r1, [r2, #0]
 800d53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d53e:	4293      	cmp	r3, r2
 800d540:	d103      	bne.n	800d54a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d542:	4b18      	ldr	r3, [pc, #96]	; (800d5a4 <tcp_new_port+0x80>)
 800d544:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d548:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d54a:	2300      	movs	r3, #0
 800d54c:	71fb      	strb	r3, [r7, #7]
 800d54e:	e01e      	b.n	800d58e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	4a15      	ldr	r2, [pc, #84]	; (800d5a8 <tcp_new_port+0x84>)
 800d554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	603b      	str	r3, [r7, #0]
 800d55c:	e011      	b.n	800d582 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	8ada      	ldrh	r2, [r3, #22]
 800d562:	4b10      	ldr	r3, [pc, #64]	; (800d5a4 <tcp_new_port+0x80>)
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	429a      	cmp	r2, r3
 800d568:	d108      	bne.n	800d57c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d56a:	88bb      	ldrh	r3, [r7, #4]
 800d56c:	3301      	adds	r3, #1
 800d56e:	80bb      	strh	r3, [r7, #4]
 800d570:	88bb      	ldrh	r3, [r7, #4]
 800d572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d576:	d3da      	bcc.n	800d52e <tcp_new_port+0xa>
          return 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	e00d      	b.n	800d598 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	603b      	str	r3, [r7, #0]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1ea      	bne.n	800d55e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	3301      	adds	r3, #1
 800d58c:	71fb      	strb	r3, [r7, #7]
 800d58e:	79fb      	ldrb	r3, [r7, #7]
 800d590:	2b03      	cmp	r3, #3
 800d592:	d9dd      	bls.n	800d550 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d594:	4b03      	ldr	r3, [pc, #12]	; (800d5a4 <tcp_new_port+0x80>)
 800d596:	881b      	ldrh	r3, [r3, #0]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	20000008 	.word	0x20000008
 800d5a8:	0801802c 	.word	0x0801802c

0800d5ac <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08a      	sub	sp, #40	; 0x28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	603b      	str	r3, [r7, #0]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d002      	beq.n	800d5c8 <tcp_connect+0x1c>
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <tcp_connect+0x22>
    return ERR_VAL;
 800d5c8:	f06f 0305 	mvn.w	r3, #5
 800d5cc:	e0d1      	b.n	800d772 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	7d1b      	ldrb	r3, [r3, #20]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <tcp_connect+0x3e>
 800d5d6:	4b69      	ldr	r3, [pc, #420]	; (800d77c <tcp_connect+0x1d0>)
 800d5d8:	f44f 725e 	mov.w	r2, #888	; 0x378
 800d5dc:	4968      	ldr	r1, [pc, #416]	; (800d780 <tcp_connect+0x1d4>)
 800d5de:	4869      	ldr	r0, [pc, #420]	; (800d784 <tcp_connect+0x1d8>)
 800d5e0:	f007 f830 	bl	8014644 <iprintf>
 800d5e4:	f06f 0309 	mvn.w	r3, #9
 800d5e8:	e0c3      	b.n	800d772 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <tcp_connect+0x4a>
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	e000      	b.n	800d5f8 <tcp_connect+0x4c>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	88fa      	ldrh	r2, [r7, #6]
 800d600:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d003      	beq.n	800d610 <tcp_connect+0x64>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d11a      	bne.n	800d646 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3304      	adds	r3, #4
 800d614:	4618      	mov	r0, r3
 800d616:	f7fc fe49 	bl	800a2ac <ip4_route>
 800d61a:	6238      	str	r0, [r7, #32]
 800d61c:	6a3b      	ldr	r3, [r7, #32]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d002      	beq.n	800d628 <tcp_connect+0x7c>
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	3304      	adds	r3, #4
 800d626:	e000      	b.n	800d62a <tcp_connect+0x7e>
 800d628:	2300      	movs	r3, #0
 800d62a:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <tcp_connect+0x8c>
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800d638:	f06f 0303 	mvn.w	r3, #3
 800d63c:	e099      	b.n	800d772 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	8adb      	ldrh	r3, [r3, #22]
 800d64a:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	8adb      	ldrh	r3, [r3, #22]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d10c      	bne.n	800d66e <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800d654:	f7ff ff66 	bl	800d524 <tcp_new_port>
 800d658:	4603      	mov	r3, r0
 800d65a:	461a      	mov	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	8adb      	ldrh	r3, [r3, #22]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <tcp_connect+0xc2>
      return ERR_BUF;
 800d668:	f06f 0301 	mvn.w	r3, #1
 800d66c:	e081      	b.n	800d772 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 ff44 	bl	800e4fc <tcp_next_iss>
 800d674:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	1e5a      	subs	r2, r3, #1
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	1e5a      	subs	r2, r3, #1
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	1e5a      	subs	r2, r3, #1
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d6a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d6b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d6c2:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f000 ff2c 	bl	800e52c <tcp_eff_send_mss_impl>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d6ec:	2102      	movs	r1, #2
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f003 ff30 	bl	8011554 <tcp_enqueue_flags>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d6f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d136      	bne.n	800d76e <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2202      	movs	r2, #2
 800d704:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d706:	8b7b      	ldrh	r3, [r7, #26]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d021      	beq.n	800d750 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d70c:	4b1e      	ldr	r3, [pc, #120]	; (800d788 <tcp_connect+0x1dc>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	429a      	cmp	r2, r3
 800d714:	d105      	bne.n	800d722 <tcp_connect+0x176>
 800d716:	4b1c      	ldr	r3, [pc, #112]	; (800d788 <tcp_connect+0x1dc>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	4a1a      	ldr	r2, [pc, #104]	; (800d788 <tcp_connect+0x1dc>)
 800d71e:	6013      	str	r3, [r2, #0]
 800d720:	e013      	b.n	800d74a <tcp_connect+0x19e>
 800d722:	4b19      	ldr	r3, [pc, #100]	; (800d788 <tcp_connect+0x1dc>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	627b      	str	r3, [r7, #36]	; 0x24
 800d728:	e00c      	b.n	800d744 <tcp_connect+0x198>
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	68da      	ldr	r2, [r3, #12]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	429a      	cmp	r2, r3
 800d732:	d104      	bne.n	800d73e <tcp_connect+0x192>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68da      	ldr	r2, [r3, #12]
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	60da      	str	r2, [r3, #12]
 800d73c:	e005      	b.n	800d74a <tcp_connect+0x19e>
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1ef      	bne.n	800d72a <tcp_connect+0x17e>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d750:	4b0e      	ldr	r3, [pc, #56]	; (800d78c <tcp_connect+0x1e0>)
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	60da      	str	r2, [r3, #12]
 800d758:	4a0c      	ldr	r2, [pc, #48]	; (800d78c <tcp_connect+0x1e0>)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	f004 fd2b 	bl	80121b8 <tcp_timer_needed>
 800d762:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <tcp_connect+0x1e4>)
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f004 f84d 	bl	8011808 <tcp_output>
  }
  return ret;
 800d76e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3728      	adds	r7, #40	; 0x28
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	08017038 	.word	0x08017038
 800d780:	080171b8 	.word	0x080171b8
 800d784:	08017074 	.word	0x08017074
 800d788:	20007744 	.word	0x20007744
 800d78c:	20007738 	.word	0x20007738
 800d790:	20007734 	.word	0x20007734

0800d794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d794:	b5b0      	push	{r4, r5, r7, lr}
 800d796:	b08c      	sub	sp, #48	; 0x30
 800d798:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d79e:	4b97      	ldr	r3, [pc, #604]	; (800d9fc <tcp_slowtmr+0x268>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	4a95      	ldr	r2, [pc, #596]	; (800d9fc <tcp_slowtmr+0x268>)
 800d7a6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d7a8:	4b95      	ldr	r3, [pc, #596]	; (800da00 <tcp_slowtmr+0x26c>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	4b93      	ldr	r3, [pc, #588]	; (800da00 <tcp_slowtmr+0x26c>)
 800d7b2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d7b8:	4b92      	ldr	r3, [pc, #584]	; (800da04 <tcp_slowtmr+0x270>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d7be:	e227      	b.n	800dc10 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	7d1b      	ldrb	r3, [r3, #20]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <tcp_slowtmr+0x42>
 800d7c8:	4b8f      	ldr	r3, [pc, #572]	; (800da08 <tcp_slowtmr+0x274>)
 800d7ca:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d7ce:	498f      	ldr	r1, [pc, #572]	; (800da0c <tcp_slowtmr+0x278>)
 800d7d0:	488f      	ldr	r0, [pc, #572]	; (800da10 <tcp_slowtmr+0x27c>)
 800d7d2:	f006 ff37 	bl	8014644 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	7d1b      	ldrb	r3, [r3, #20]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d106      	bne.n	800d7ec <tcp_slowtmr+0x58>
 800d7de:	4b8a      	ldr	r3, [pc, #552]	; (800da08 <tcp_slowtmr+0x274>)
 800d7e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7e4:	498b      	ldr	r1, [pc, #556]	; (800da14 <tcp_slowtmr+0x280>)
 800d7e6:	488a      	ldr	r0, [pc, #552]	; (800da10 <tcp_slowtmr+0x27c>)
 800d7e8:	f006 ff2c 	bl	8014644 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	7d1b      	ldrb	r3, [r3, #20]
 800d7f0:	2b0a      	cmp	r3, #10
 800d7f2:	d106      	bne.n	800d802 <tcp_slowtmr+0x6e>
 800d7f4:	4b84      	ldr	r3, [pc, #528]	; (800da08 <tcp_slowtmr+0x274>)
 800d7f6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d7fa:	4987      	ldr	r1, [pc, #540]	; (800da18 <tcp_slowtmr+0x284>)
 800d7fc:	4884      	ldr	r0, [pc, #528]	; (800da10 <tcp_slowtmr+0x27c>)
 800d7fe:	f006 ff21 	bl	8014644 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d804:	7f5a      	ldrb	r2, [r3, #29]
 800d806:	4b7e      	ldr	r3, [pc, #504]	; (800da00 <tcp_slowtmr+0x26c>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d103      	bne.n	800d816 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d814:	e1fc      	b.n	800dc10 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d816:	4b7a      	ldr	r3, [pc, #488]	; (800da00 <tcp_slowtmr+0x26c>)
 800d818:	781a      	ldrb	r2, [r3, #0]
 800d81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d108      	bne.n	800d840 <tcp_slowtmr+0xac>
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d834:	2b05      	cmp	r3, #5
 800d836:	d903      	bls.n	800d840 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d838:	7ffb      	ldrb	r3, [r7, #31]
 800d83a:	3301      	adds	r3, #1
 800d83c:	77fb      	strb	r3, [r7, #31]
 800d83e:	e0a2      	b.n	800d986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d846:	2b0b      	cmp	r3, #11
 800d848:	d903      	bls.n	800d852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d84a:	7ffb      	ldrb	r3, [r7, #31]
 800d84c:	3301      	adds	r3, #1
 800d84e:	77fb      	strb	r3, [r7, #31]
 800d850:	e099      	b.n	800d986 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d032      	beq.n	800d8c2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d862:	3b01      	subs	r3, #1
 800d864:	4a6d      	ldr	r2, [pc, #436]	; (800da1c <tcp_slowtmr+0x288>)
 800d866:	5cd3      	ldrb	r3, [r2, r3]
 800d868:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d870:	7f3a      	ldrb	r2, [r7, #28]
 800d872:	429a      	cmp	r2, r3
 800d874:	d907      	bls.n	800d886 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d87c:	3301      	adds	r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d88c:	7f3a      	ldrb	r2, [r7, #28]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d879      	bhi.n	800d986 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d894:	f004 fbd0 	bl	8012038 <tcp_zero_window_probe>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d173      	bne.n	800d986 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d8ac:	2b06      	cmp	r3, #6
 800d8ae:	d86a      	bhi.n	800d986 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d8c0:	e061      	b.n	800d986 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	db08      	blt.n	800d8de <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	b21a      	sxth	r2, r3
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d04f      	beq.n	800d986 <tcp_slowtmr+0x1f2>
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	db47      	blt.n	800d986 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	7d1b      	ldrb	r3, [r3, #20]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d018      	beq.n	800d930 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d904:	2b0c      	cmp	r3, #12
 800d906:	bf28      	it	cs
 800d908:	230c      	movcs	r3, #12
 800d90a:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d912:	10db      	asrs	r3, r3, #3
 800d914:	b21b      	sxth	r3, r3
 800d916:	461a      	mov	r2, r3
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d91e:	4413      	add	r3, r2
 800d920:	7efa      	ldrb	r2, [r7, #27]
 800d922:	493f      	ldr	r1, [pc, #252]	; (800da20 <tcp_slowtmr+0x28c>)
 800d924:	5c8a      	ldrb	r2, [r1, r2]
 800d926:	4093      	lsls	r3, r2
 800d928:	b21a      	sxth	r2, r3
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	2200      	movs	r2, #0
 800d934:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d938:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d942:	4293      	cmp	r3, r2
 800d944:	bf28      	it	cs
 800d946:	4613      	movcs	r3, r2
 800d948:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800d94a:	8b3b      	ldrh	r3, [r7, #24]
 800d94c:	085b      	lsrs	r3, r3, #1
 800d94e:	b29a      	uxth	r2, r3
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d958:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	b29b      	uxth	r3, r3
 800d964:	429a      	cmp	r2, r3
 800d966:	d206      	bcs.n	800d976 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d96c:	005b      	lsls	r3, r3, #1
 800d96e:	b29a      	uxth	r2, r3
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d982:	f004 fa3f 	bl	8011e04 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	7d1b      	ldrb	r3, [r3, #20]
 800d98a:	2b06      	cmp	r3, #6
 800d98c:	d10f      	bne.n	800d9ae <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	7e9b      	ldrb	r3, [r3, #26]
 800d992:	f003 0310 	and.w	r3, r3, #16
 800d996:	2b00      	cmp	r3, #0
 800d998:	d009      	beq.n	800d9ae <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d99a:	4b18      	ldr	r3, [pc, #96]	; (800d9fc <tcp_slowtmr+0x268>)
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	2b28      	cmp	r3, #40	; 0x28
 800d9a6:	d902      	bls.n	800d9ae <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d9a8:	7ffb      	ldrb	r3, [r7, #31]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	7a1b      	ldrb	r3, [r3, #8]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d05d      	beq.n	800da76 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	d003      	beq.n	800d9ca <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d9c6:	2b07      	cmp	r3, #7
 800d9c8:	d155      	bne.n	800da76 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <tcp_slowtmr+0x268>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9da:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d9de:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d9e2:	4910      	ldr	r1, [pc, #64]	; (800da24 <tcp_slowtmr+0x290>)
 800d9e4:	fba1 1303 	umull	r1, r3, r1, r3
 800d9e8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d91c      	bls.n	800da28 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d9ee:	7ffb      	ldrb	r3, [r7, #31]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d9f4:	7fbb      	ldrb	r3, [r7, #30]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	77bb      	strb	r3, [r7, #30]
 800d9fa:	e03c      	b.n	800da76 <tcp_slowtmr+0x2e2>
 800d9fc:	2000773c 	.word	0x2000773c
 800da00:	20003f8a 	.word	0x20003f8a
 800da04:	20007738 	.word	0x20007738
 800da08:	08017038 	.word	0x08017038
 800da0c:	080171e8 	.word	0x080171e8
 800da10:	08017074 	.word	0x08017074
 800da14:	08017214 	.word	0x08017214
 800da18:	08017240 	.word	0x08017240
 800da1c:	08018024 	.word	0x08018024
 800da20:	08018014 	.word	0x08018014
 800da24:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da28:	4b97      	ldr	r3, [pc, #604]	; (800dc88 <tcp_slowtmr+0x4f4>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800da38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800da3e:	4618      	mov	r0, r3
 800da40:	4b92      	ldr	r3, [pc, #584]	; (800dc8c <tcp_slowtmr+0x4f8>)
 800da42:	fb03 f300 	mul.w	r3, r3, r0
 800da46:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800da48:	4991      	ldr	r1, [pc, #580]	; (800dc90 <tcp_slowtmr+0x4fc>)
 800da4a:	fba1 1303 	umull	r1, r3, r1, r3
 800da4e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800da50:	429a      	cmp	r2, r3
 800da52:	d910      	bls.n	800da76 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800da54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da56:	f004 fab2 	bl	8011fbe <tcp_keepalive>
 800da5a:	4603      	mov	r3, r0
 800da5c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800da5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d107      	bne.n	800da76 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800da6c:	3301      	adds	r3, #1
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d016      	beq.n	800daac <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800da7e:	4b82      	ldr	r3, [pc, #520]	; (800dc88 <tcp_slowtmr+0x4f4>)
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	1ad2      	subs	r2, r2, r3
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800da8e:	4619      	mov	r1, r3
 800da90:	460b      	mov	r3, r1
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	440b      	add	r3, r1
 800da96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800da98:	429a      	cmp	r2, r3
 800da9a:	d307      	bcc.n	800daac <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fa04 	bl	800deae <tcp_segs_free>
      pcb->ooseq = NULL;
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	2200      	movs	r2, #0
 800daaa:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	7d1b      	ldrb	r3, [r3, #20]
 800dab0:	2b03      	cmp	r3, #3
 800dab2:	d109      	bne.n	800dac8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dab4:	4b74      	ldr	r3, [pc, #464]	; (800dc88 <tcp_slowtmr+0x4f4>)
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	6a1b      	ldr	r3, [r3, #32]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	2b28      	cmp	r3, #40	; 0x28
 800dac0:	d902      	bls.n	800dac8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dac2:	7ffb      	ldrb	r3, [r7, #31]
 800dac4:	3301      	adds	r3, #1
 800dac6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	7d1b      	ldrb	r3, [r3, #20]
 800dacc:	2b09      	cmp	r3, #9
 800dace:	d109      	bne.n	800dae4 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dad0:	4b6d      	ldr	r3, [pc, #436]	; (800dc88 <tcp_slowtmr+0x4f4>)
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	2bf0      	cmp	r3, #240	; 0xf0
 800dadc:	d902      	bls.n	800dae4 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800dade:	7ffb      	ldrb	r3, [r7, #31]
 800dae0:	3301      	adds	r3, #1
 800dae2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dae4:	7ffb      	ldrb	r3, [r7, #31]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d05d      	beq.n	800dba6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daf0:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800daf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daf4:	f000 fc44 	bl	800e380 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800daf8:	6a3b      	ldr	r3, [r7, #32]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d010      	beq.n	800db20 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dafe:	4b65      	ldr	r3, [pc, #404]	; (800dc94 <tcp_slowtmr+0x500>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db04:	429a      	cmp	r2, r3
 800db06:	d106      	bne.n	800db16 <tcp_slowtmr+0x382>
 800db08:	4b63      	ldr	r3, [pc, #396]	; (800dc98 <tcp_slowtmr+0x504>)
 800db0a:	f240 4289 	movw	r2, #1161	; 0x489
 800db0e:	4963      	ldr	r1, [pc, #396]	; (800dc9c <tcp_slowtmr+0x508>)
 800db10:	4863      	ldr	r0, [pc, #396]	; (800dca0 <tcp_slowtmr+0x50c>)
 800db12:	f006 fd97 	bl	8014644 <iprintf>
        prev->next = pcb->next;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	60da      	str	r2, [r3, #12]
 800db1e:	e00f      	b.n	800db40 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800db20:	4b5c      	ldr	r3, [pc, #368]	; (800dc94 <tcp_slowtmr+0x500>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	429a      	cmp	r2, r3
 800db28:	d006      	beq.n	800db38 <tcp_slowtmr+0x3a4>
 800db2a:	4b5b      	ldr	r3, [pc, #364]	; (800dc98 <tcp_slowtmr+0x504>)
 800db2c:	f240 428d 	movw	r2, #1165	; 0x48d
 800db30:	495c      	ldr	r1, [pc, #368]	; (800dca4 <tcp_slowtmr+0x510>)
 800db32:	485b      	ldr	r0, [pc, #364]	; (800dca0 <tcp_slowtmr+0x50c>)
 800db34:	f006 fd86 	bl	8014644 <iprintf>
        tcp_active_pcbs = pcb->next;
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	4a55      	ldr	r2, [pc, #340]	; (800dc94 <tcp_slowtmr+0x500>)
 800db3e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800db40:	7fbb      	ldrb	r3, [r7, #30]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d010      	beq.n	800db68 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800db4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	1d1d      	adds	r5, r3, #4
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	8adb      	ldrh	r3, [r3, #22]
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	8b12      	ldrh	r2, [r2, #24]
 800db5c:	9201      	str	r2, [sp, #4]
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	462b      	mov	r3, r5
 800db62:	4622      	mov	r2, r4
 800db64:	f004 f8d8 	bl	8011d18 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800db7e:	68b9      	ldr	r1, [r7, #8]
 800db80:	2001      	movs	r0, #1
 800db82:	f7fe f969 	bl	800be58 <memp_free>

      tcp_active_pcbs_changed = 0;
 800db86:	4b48      	ldr	r3, [pc, #288]	; (800dca8 <tcp_slowtmr+0x514>)
 800db88:	2200      	movs	r2, #0
 800db8a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d004      	beq.n	800db9c <tcp_slowtmr+0x408>
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	f06f 010c 	mvn.w	r1, #12
 800db98:	6938      	ldr	r0, [r7, #16]
 800db9a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800db9c:	4b42      	ldr	r3, [pc, #264]	; (800dca8 <tcp_slowtmr+0x514>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d035      	beq.n	800dc10 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800dba4:	e606      	b.n	800d7b4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	7edb      	ldrb	r3, [r3, #27]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	6a3b      	ldr	r3, [r7, #32]
 800dbba:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	7eda      	ldrb	r2, [r3, #27]
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	7f1b      	ldrb	r3, [r3, #28]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d323      	bcc.n	800dc10 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dbce:	4b36      	ldr	r3, [pc, #216]	; (800dca8 <tcp_slowtmr+0x514>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <tcp_slowtmr+0x460>
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbe4:	6a3a      	ldr	r2, [r7, #32]
 800dbe6:	6912      	ldr	r2, [r2, #16]
 800dbe8:	6a39      	ldr	r1, [r7, #32]
 800dbea:	4610      	mov	r0, r2
 800dbec:	4798      	blx	r3
 800dbee:	4603      	mov	r3, r0
 800dbf0:	777b      	strb	r3, [r7, #29]
 800dbf2:	e001      	b.n	800dbf8 <tcp_slowtmr+0x464>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800dbf8:	4b2b      	ldr	r3, [pc, #172]	; (800dca8 <tcp_slowtmr+0x514>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d000      	beq.n	800dc02 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800dc00:	e5d8      	b.n	800d7b4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800dc02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d102      	bne.n	800dc10 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800dc0a:	6a38      	ldr	r0, [r7, #32]
 800dc0c:	f003 fdfc 	bl	8011808 <tcp_output>
  while (pcb != NULL) {
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f47f add4 	bne.w	800d7c0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800dc1c:	4b23      	ldr	r3, [pc, #140]	; (800dcac <tcp_slowtmr+0x518>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800dc22:	e068      	b.n	800dcf6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	7d1b      	ldrb	r3, [r3, #20]
 800dc28:	2b0a      	cmp	r3, #10
 800dc2a:	d006      	beq.n	800dc3a <tcp_slowtmr+0x4a6>
 800dc2c:	4b1a      	ldr	r3, [pc, #104]	; (800dc98 <tcp_slowtmr+0x504>)
 800dc2e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dc32:	491f      	ldr	r1, [pc, #124]	; (800dcb0 <tcp_slowtmr+0x51c>)
 800dc34:	481a      	ldr	r0, [pc, #104]	; (800dca0 <tcp_slowtmr+0x50c>)
 800dc36:	f006 fd05 	bl	8014644 <iprintf>
    pcb_remove = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dc3e:	4b12      	ldr	r3, [pc, #72]	; (800dc88 <tcp_slowtmr+0x4f4>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	6a1b      	ldr	r3, [r3, #32]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	2bf0      	cmp	r3, #240	; 0xf0
 800dc4a:	d902      	bls.n	800dc52 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800dc4c:	7ffb      	ldrb	r3, [r7, #31]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dc52:	7ffb      	ldrb	r3, [r7, #31]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d049      	beq.n	800dcec <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dc58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc5a:	f000 fb91 	bl	800e380 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d029      	beq.n	800dcb8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dc64:	4b11      	ldr	r3, [pc, #68]	; (800dcac <tcp_slowtmr+0x518>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d106      	bne.n	800dc7c <tcp_slowtmr+0x4e8>
 800dc6e:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <tcp_slowtmr+0x504>)
 800dc70:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800dc74:	490f      	ldr	r1, [pc, #60]	; (800dcb4 <tcp_slowtmr+0x520>)
 800dc76:	480a      	ldr	r0, [pc, #40]	; (800dca0 <tcp_slowtmr+0x50c>)
 800dc78:	f006 fce4 	bl	8014644 <iprintf>
        prev->next = pcb->next;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	68da      	ldr	r2, [r3, #12]
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	60da      	str	r2, [r3, #12]
 800dc84:	e028      	b.n	800dcd8 <tcp_slowtmr+0x544>
 800dc86:	bf00      	nop
 800dc88:	2000773c 	.word	0x2000773c
 800dc8c:	000124f8 	.word	0x000124f8
 800dc90:	10624dd3 	.word	0x10624dd3
 800dc94:	20007738 	.word	0x20007738
 800dc98:	08017038 	.word	0x08017038
 800dc9c:	08017270 	.word	0x08017270
 800dca0:	08017074 	.word	0x08017074
 800dca4:	0801729c 	.word	0x0801729c
 800dca8:	20007734 	.word	0x20007734
 800dcac:	20007748 	.word	0x20007748
 800dcb0:	080172c8 	.word	0x080172c8
 800dcb4:	080172f8 	.word	0x080172f8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dcb8:	4b12      	ldr	r3, [pc, #72]	; (800dd04 <tcp_slowtmr+0x570>)
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d006      	beq.n	800dcd0 <tcp_slowtmr+0x53c>
 800dcc2:	4b11      	ldr	r3, [pc, #68]	; (800dd08 <tcp_slowtmr+0x574>)
 800dcc4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800dcc8:	4910      	ldr	r1, [pc, #64]	; (800dd0c <tcp_slowtmr+0x578>)
 800dcca:	4811      	ldr	r0, [pc, #68]	; (800dd10 <tcp_slowtmr+0x57c>)
 800dccc:	f006 fcba 	bl	8014644 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	4a0b      	ldr	r2, [pc, #44]	; (800dd04 <tcp_slowtmr+0x570>)
 800dcd6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcda:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	2001      	movs	r0, #1
 800dce6:	f7fe f8b7 	bl	800be58 <memp_free>
 800dcea:	e004      	b.n	800dcf6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d193      	bne.n	800dc24 <tcp_slowtmr+0x490>
    }
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	3728      	adds	r7, #40	; 0x28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bdb0      	pop	{r4, r5, r7, pc}
 800dd04:	20007748 	.word	0x20007748
 800dd08:	08017038 	.word	0x08017038
 800dd0c:	08017320 	.word	0x08017320
 800dd10:	08017074 	.word	0x08017074

0800dd14 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dd1a:	4b2d      	ldr	r3, [pc, #180]	; (800ddd0 <tcp_fasttmr+0xbc>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	4b2b      	ldr	r3, [pc, #172]	; (800ddd0 <tcp_fasttmr+0xbc>)
 800dd24:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dd26:	4b2b      	ldr	r3, [pc, #172]	; (800ddd4 <tcp_fasttmr+0xc0>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd2c:	e048      	b.n	800ddc0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	7f5a      	ldrb	r2, [r3, #29]
 800dd32:	4b27      	ldr	r3, [pc, #156]	; (800ddd0 <tcp_fasttmr+0xbc>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d03f      	beq.n	800ddba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dd3a:	4b25      	ldr	r3, [pc, #148]	; (800ddd0 <tcp_fasttmr+0xbc>)
 800dd3c:	781a      	ldrb	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7e9b      	ldrb	r3, [r3, #26]
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d010      	beq.n	800dd70 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	7e9b      	ldrb	r3, [r3, #26]
 800dd52:	f043 0302 	orr.w	r3, r3, #2
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f003 fd53 	bl	8011808 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	7e9b      	ldrb	r3, [r3, #26]
 800dd66:	f023 0303 	bic.w	r3, r3, #3
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	7e9b      	ldrb	r3, [r3, #26]
 800dd74:	f003 0308 	and.w	r3, r3, #8
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d009      	beq.n	800dd90 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7e9b      	ldrb	r3, [r3, #26]
 800dd80:	f023 0308 	bic.w	r3, r3, #8
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7ff f99c 	bl	800d0c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dd9e:	4b0e      	ldr	r3, [pc, #56]	; (800ddd8 <tcp_fasttmr+0xc4>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f819 	bl	800dddc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ddaa:	4b0b      	ldr	r3, [pc, #44]	; (800ddd8 <tcp_fasttmr+0xc4>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d000      	beq.n	800ddb4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ddb2:	e7b8      	b.n	800dd26 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	607b      	str	r3, [r7, #4]
 800ddb8:	e002      	b.n	800ddc0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1b3      	bne.n	800dd2e <tcp_fasttmr+0x1a>
    }
  }
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	20003f8a 	.word	0x20003f8a
 800ddd4:	20007738 	.word	0x20007738
 800ddd8:	20007734 	.word	0x20007734

0800dddc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dddc:	b590      	push	{r4, r7, lr}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde8:	7b5b      	ldrb	r3, [r3, #13]
 800ddea:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00b      	beq.n	800de1a <tcp_process_refused_data+0x3e>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6918      	ldr	r0, [r3, #16]
 800de0c:	2300      	movs	r3, #0
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	47a0      	blx	r4
 800de14:	4603      	mov	r3, r0
 800de16:	73fb      	strb	r3, [r7, #15]
 800de18:	e007      	b.n	800de2a <tcp_process_refused_data+0x4e>
 800de1a:	2300      	movs	r3, #0
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	2000      	movs	r0, #0
 800de22:	f000 f88c 	bl	800df3e <tcp_recv_null>
 800de26:	4603      	mov	r3, r0
 800de28:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800de2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d12a      	bne.n	800de88 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	f003 0320 	and.w	r3, r3, #32
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d033      	beq.n	800dea4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de44:	d005      	beq.n	800de52 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de4a:	3301      	adds	r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <tcp_process_refused_data+0x98>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6918      	ldr	r0, [r3, #16]
 800de66:	2300      	movs	r3, #0
 800de68:	2200      	movs	r2, #0
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	47a0      	blx	r4
 800de6e:	4603      	mov	r3, r0
 800de70:	73fb      	strb	r3, [r7, #15]
 800de72:	e001      	b.n	800de78 <tcp_process_refused_data+0x9c>
 800de74:	2300      	movs	r3, #0
 800de76:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800de78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de7c:	f113 0f0d 	cmn.w	r3, #13
 800de80:	d110      	bne.n	800dea4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800de82:	f06f 030c 	mvn.w	r3, #12
 800de86:	e00e      	b.n	800dea6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800de88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de8c:	f113 0f0d 	cmn.w	r3, #13
 800de90:	d102      	bne.n	800de98 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de92:	f06f 030c 	mvn.w	r3, #12
 800de96:	e006      	b.n	800dea6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800de9e:	f06f 0304 	mvn.w	r3, #4
 800dea2:	e000      	b.n	800dea6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd90      	pop	{r4, r7, pc}

0800deae <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b084      	sub	sp, #16
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800deb6:	e007      	b.n	800dec8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 f809 	bl	800ded6 <tcp_seg_free>
    seg = next;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1f4      	bne.n	800deb8 <tcp_segs_free+0xa>
  }
}
 800dece:	bf00      	nop
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00c      	beq.n	800defe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fe fd0b 	bl	800c90c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800def6:	6879      	ldr	r1, [r7, #4]
 800def8:	2003      	movs	r0, #3
 800defa:	f7fd ffad 	bl	800be58 <memp_free>
  }
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b084      	sub	sp, #16
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800df0e:	2003      	movs	r0, #3
 800df10:	f7fd ff50 	bl	800bdb4 <memp_malloc>
 800df14:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <tcp_seg_copy+0x1a>
    return NULL;
 800df1c:	2300      	movs	r3, #0
 800df1e:	e00a      	b.n	800df36 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800df20:	2210      	movs	r2, #16
 800df22:	6879      	ldr	r1, [r7, #4]
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f006 fb7a 	bl	801461e <memcpy>
  pbuf_ref(cseg->p);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe fd9e 	bl	800ca70 <pbuf_ref>
  return cseg;
 800df34:	68fb      	ldr	r3, [r7, #12]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b084      	sub	sp, #16
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	60b9      	str	r1, [r7, #8]
 800df48:	607a      	str	r2, [r7, #4]
 800df4a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	891b      	ldrh	r3, [r3, #8]
 800df56:	4619      	mov	r1, r3
 800df58:	68b8      	ldr	r0, [r7, #8]
 800df5a:	f7ff fa89 	bl	800d470 <tcp_recved>
    pbuf_free(p);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7fe fcd4 	bl	800c90c <pbuf_free>
 800df64:	e008      	b.n	800df78 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800df66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d104      	bne.n	800df78 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800df6e:	68b8      	ldr	r0, [r7, #8]
 800df70:	f7ff f910 	bl	800d194 <tcp_close>
 800df74:	4603      	mov	r3, r0
 800df76:	e000      	b.n	800df7a <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df92:	2b00      	cmp	r3, #0
 800df94:	db01      	blt.n	800df9a <tcp_kill_prio+0x16>
 800df96:	79fb      	ldrb	r3, [r7, #7]
 800df98:	e000      	b.n	800df9c <tcp_kill_prio+0x18>
 800df9a:	237f      	movs	r3, #127	; 0x7f
 800df9c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa6:	4b16      	ldr	r3, [pc, #88]	; (800e000 <tcp_kill_prio+0x7c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	617b      	str	r3, [r7, #20]
 800dfac:	e01a      	b.n	800dfe4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	7d5b      	ldrb	r3, [r3, #21]
 800dfb2:	7afa      	ldrb	r2, [r7, #11]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d312      	bcc.n	800dfde <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dfb8:	4b12      	ldr	r3, [pc, #72]	; (800e004 <tcp_kill_prio+0x80>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d30a      	bcc.n	800dfde <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800dfc8:	4b0e      	ldr	r3, [pc, #56]	; (800e004 <tcp_kill_prio+0x80>)
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	7d5b      	ldrb	r3, [r3, #21]
 800dfdc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	617b      	str	r3, [r7, #20]
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1e1      	bne.n	800dfae <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d002      	beq.n	800dff6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dff0:	6938      	ldr	r0, [r7, #16]
 800dff2:	f7ff f9e1 	bl	800d3b8 <tcp_abort>
  }
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	20007738 	.word	0x20007738
 800e004:	2000773c 	.word	0x2000773c

0800e008 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e012:	79fb      	ldrb	r3, [r7, #7]
 800e014:	2b08      	cmp	r3, #8
 800e016:	d009      	beq.n	800e02c <tcp_kill_state+0x24>
 800e018:	79fb      	ldrb	r3, [r7, #7]
 800e01a:	2b09      	cmp	r3, #9
 800e01c:	d006      	beq.n	800e02c <tcp_kill_state+0x24>
 800e01e:	4b1a      	ldr	r3, [pc, #104]	; (800e088 <tcp_kill_state+0x80>)
 800e020:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e024:	4919      	ldr	r1, [pc, #100]	; (800e08c <tcp_kill_state+0x84>)
 800e026:	481a      	ldr	r0, [pc, #104]	; (800e090 <tcp_kill_state+0x88>)
 800e028:	f006 fb0c 	bl	8014644 <iprintf>

  inactivity = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e030:	2300      	movs	r3, #0
 800e032:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e034:	4b17      	ldr	r3, [pc, #92]	; (800e094 <tcp_kill_state+0x8c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	617b      	str	r3, [r7, #20]
 800e03a:	e017      	b.n	800e06c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	7d1b      	ldrb	r3, [r3, #20]
 800e040:	79fa      	ldrb	r2, [r7, #7]
 800e042:	429a      	cmp	r2, r3
 800e044:	d10f      	bne.n	800e066 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e046:	4b14      	ldr	r3, [pc, #80]	; (800e098 <tcp_kill_state+0x90>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	6a1b      	ldr	r3, [r3, #32]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	429a      	cmp	r2, r3
 800e054:	d307      	bcc.n	800e066 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e056:	4b10      	ldr	r3, [pc, #64]	; (800e098 <tcp_kill_state+0x90>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1e4      	bne.n	800e03c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e078:	2100      	movs	r1, #0
 800e07a:	6938      	ldr	r0, [r7, #16]
 800e07c:	f7ff f8ea 	bl	800d254 <tcp_abandon>
  }
}
 800e080:	bf00      	nop
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	08017038 	.word	0x08017038
 800e08c:	08017348 	.word	0x08017348
 800e090:	08017074 	.word	0x08017074
 800e094:	20007738 	.word	0x20007738
 800e098:	2000773c 	.word	0x2000773c

0800e09c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0aa:	4b12      	ldr	r3, [pc, #72]	; (800e0f4 <tcp_kill_timewait+0x58>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]
 800e0b0:	e012      	b.n	800e0d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e0b2:	4b11      	ldr	r3, [pc, #68]	; (800e0f8 <tcp_kill_timewait+0x5c>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	1ad2      	subs	r2, r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d307      	bcc.n	800e0d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	; (800e0f8 <tcp_kill_timewait+0x5c>)
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e9      	bne.n	800e0b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0e4:	68b8      	ldr	r0, [r7, #8]
 800e0e6:	f7ff f967 	bl	800d3b8 <tcp_abort>
  }
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20007748 	.word	0x20007748
 800e0f8:	2000773c 	.word	0x2000773c

0800e0fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e106:	2001      	movs	r0, #1
 800e108:	f7fd fe54 	bl	800bdb4 <memp_malloc>
 800e10c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d124      	bne.n	800e15e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e114:	f7ff ffc2 	bl	800e09c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e118:	2001      	movs	r0, #1
 800e11a:	f7fd fe4b 	bl	800bdb4 <memp_malloc>
 800e11e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d11b      	bne.n	800e15e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e126:	2009      	movs	r0, #9
 800e128:	f7ff ff6e 	bl	800e008 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e12c:	2001      	movs	r0, #1
 800e12e:	f7fd fe41 	bl	800bdb4 <memp_malloc>
 800e132:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d111      	bne.n	800e15e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e13a:	2008      	movs	r0, #8
 800e13c:	f7ff ff64 	bl	800e008 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e140:	2001      	movs	r0, #1
 800e142:	f7fd fe37 	bl	800bdb4 <memp_malloc>
 800e146:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d107      	bne.n	800e15e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff ff17 	bl	800df84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e156:	2001      	movs	r0, #1
 800e158:	f7fd fe2c 	bl	800bdb4 <memp_malloc>
 800e15c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d03f      	beq.n	800e1e4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e164:	2298      	movs	r2, #152	; 0x98
 800e166:	2100      	movs	r1, #0
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f006 fa63 	bl	8014634 <memset>
    pcb->prio = prio;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	79fa      	ldrb	r2, [r7, #7]
 800e172:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e17a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e184:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	22ff      	movs	r2, #255	; 0xff
 800e192:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e19a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2206      	movs	r2, #6
 800e1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2206      	movs	r2, #6
 800e1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e1ba:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <tcp_alloc+0xf4>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e1c2:	4b0c      	ldr	r3, [pc, #48]	; (800e1f4 <tcp_alloc+0xf8>)
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4a08      	ldr	r2, [pc, #32]	; (800e1f8 <tcp_alloc+0xfc>)
 800e1d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4a07      	ldr	r2, [pc, #28]	; (800e1fc <tcp_alloc+0x100>)
 800e1e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	2000773c 	.word	0x2000773c
 800e1f4:	20003f8a 	.word	0x20003f8a
 800e1f8:	0800df3f 	.word	0x0800df3f
 800e1fc:	006ddd00 	.word	0x006ddd00

0800e200 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e20a:	2040      	movs	r0, #64	; 0x40
 800e20c:	f7ff ff76 	bl	800e0fc <tcp_alloc>
 800e210:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e212:	68fb      	ldr	r3, [r7, #12]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	611a      	str	r2, [r3, #16]
  }
}
 800e232:	bf00      	nop
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
	...

0800e240 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00e      	beq.n	800e26e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7d1b      	ldrb	r3, [r3, #20]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d106      	bne.n	800e266 <tcp_recv+0x26>
 800e258:	4b07      	ldr	r3, [pc, #28]	; (800e278 <tcp_recv+0x38>)
 800e25a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800e25e:	4907      	ldr	r1, [pc, #28]	; (800e27c <tcp_recv+0x3c>)
 800e260:	4807      	ldr	r0, [pc, #28]	; (800e280 <tcp_recv+0x40>)
 800e262:	f006 f9ef 	bl	8014644 <iprintf>
    pcb->recv = recv;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	08017038 	.word	0x08017038
 800e27c:	08017358 	.word	0x08017358
 800e280:	08017074 	.word	0x08017074

0800e284 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00d      	beq.n	800e2b0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7d1b      	ldrb	r3, [r3, #20]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d106      	bne.n	800e2aa <tcp_sent+0x26>
 800e29c:	4b06      	ldr	r3, [pc, #24]	; (800e2b8 <tcp_sent+0x34>)
 800e29e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800e2a2:	4906      	ldr	r1, [pc, #24]	; (800e2bc <tcp_sent+0x38>)
 800e2a4:	4806      	ldr	r0, [pc, #24]	; (800e2c0 <tcp_sent+0x3c>)
 800e2a6:	f006 f9cd 	bl	8014644 <iprintf>
    pcb->sent = sent;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800e2b0:	bf00      	nop
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	08017038 	.word	0x08017038
 800e2bc:	08017380 	.word	0x08017380
 800e2c0:	08017074 	.word	0x08017074

0800e2c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00e      	beq.n	800e2f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	7d1b      	ldrb	r3, [r3, #20]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d106      	bne.n	800e2ea <tcp_err+0x26>
 800e2dc:	4b07      	ldr	r3, [pc, #28]	; (800e2fc <tcp_err+0x38>)
 800e2de:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800e2e2:	4907      	ldr	r1, [pc, #28]	; (800e300 <tcp_err+0x3c>)
 800e2e4:	4807      	ldr	r0, [pc, #28]	; (800e304 <tcp_err+0x40>)
 800e2e6:	f006 f9ad 	bl	8014644 <iprintf>
    pcb->errf = err;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	08017038 	.word	0x08017038
 800e300:	080173a8 	.word	0x080173a8
 800e304:	08017074 	.word	0x08017074

0800e308 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d008      	beq.n	800e32a <tcp_accept+0x22>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7d1b      	ldrb	r3, [r3, #20]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d104      	bne.n	800e32a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	619a      	str	r2, [r3, #24]
  }
}
 800e32a:	bf00      	nop
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
	...

0800e338 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	4613      	mov	r3, r2
 800e344:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	7d1b      	ldrb	r3, [r3, #20]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d106      	bne.n	800e35c <tcp_poll+0x24>
 800e34e:	4b09      	ldr	r3, [pc, #36]	; (800e374 <tcp_poll+0x3c>)
 800e350:	f240 7203 	movw	r2, #1795	; 0x703
 800e354:	4908      	ldr	r1, [pc, #32]	; (800e378 <tcp_poll+0x40>)
 800e356:	4809      	ldr	r0, [pc, #36]	; (800e37c <tcp_poll+0x44>)
 800e358:	f006 f974 	bl	8014644 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	79fa      	ldrb	r2, [r7, #7]
 800e368:	771a      	strb	r2, [r3, #28]
}
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	08017038 	.word	0x08017038
 800e378:	080173d0 	.word	0x080173d0
 800e37c:	08017074 	.word	0x08017074

0800e380 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	7d1b      	ldrb	r3, [r3, #20]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d034      	beq.n	800e3fa <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e394:	2b0a      	cmp	r3, #10
 800e396:	d030      	beq.n	800e3fa <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d02c      	beq.n	800e3fa <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d007      	beq.n	800e3b8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe faad 	bl	800c90c <pbuf_free>
      pcb->refused_data = NULL;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7ff fd76 	bl	800deae <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7ff fd6a 	bl	800deae <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7ff fd65 	bl	800deae <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	669a      	str	r2, [r3, #104]	; 0x68
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
	...

0800e404 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d105      	bne.n	800e424 <tcp_pcb_remove+0x20>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68da      	ldr	r2, [r3, #12]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	e013      	b.n	800e44c <tcp_pcb_remove+0x48>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	e00c      	b.n	800e446 <tcp_pcb_remove+0x42>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d104      	bne.n	800e440 <tcp_pcb_remove+0x3c>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	68da      	ldr	r2, [r3, #12]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	60da      	str	r2, [r3, #12]
 800e43e:	e005      	b.n	800e44c <tcp_pcb_remove+0x48>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	60fb      	str	r3, [r7, #12]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1ef      	bne.n	800e42c <tcp_pcb_remove+0x28>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2200      	movs	r2, #0
 800e450:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e452:	6838      	ldr	r0, [r7, #0]
 800e454:	f7ff ff94 	bl	800e380 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b0a      	cmp	r3, #10
 800e45e:	d013      	beq.n	800e488 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e464:	2b01      	cmp	r3, #1
 800e466:	d00f      	beq.n	800e488 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	7e9b      	ldrb	r3, [r3, #26]
 800e46c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e470:	2b00      	cmp	r3, #0
 800e472:	d009      	beq.n	800e488 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	7e9b      	ldrb	r3, [r3, #26]
 800e478:	f043 0302 	orr.w	r3, r3, #2
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e482:	6838      	ldr	r0, [r7, #0]
 800e484:	f003 f9c0 	bl	8011808 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	7d1b      	ldrb	r3, [r3, #20]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d020      	beq.n	800e4d2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e494:	2b00      	cmp	r3, #0
 800e496:	d006      	beq.n	800e4a6 <tcp_pcb_remove+0xa2>
 800e498:	4b13      	ldr	r3, [pc, #76]	; (800e4e8 <tcp_pcb_remove+0xe4>)
 800e49a:	f240 7253 	movw	r2, #1875	; 0x753
 800e49e:	4913      	ldr	r1, [pc, #76]	; (800e4ec <tcp_pcb_remove+0xe8>)
 800e4a0:	4813      	ldr	r0, [pc, #76]	; (800e4f0 <tcp_pcb_remove+0xec>)
 800e4a2:	f006 f8cf 	bl	8014644 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d006      	beq.n	800e4bc <tcp_pcb_remove+0xb8>
 800e4ae:	4b0e      	ldr	r3, [pc, #56]	; (800e4e8 <tcp_pcb_remove+0xe4>)
 800e4b0:	f240 7254 	movw	r2, #1876	; 0x754
 800e4b4:	490f      	ldr	r1, [pc, #60]	; (800e4f4 <tcp_pcb_remove+0xf0>)
 800e4b6:	480e      	ldr	r0, [pc, #56]	; (800e4f0 <tcp_pcb_remove+0xec>)
 800e4b8:	f006 f8c4 	bl	8014644 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d006      	beq.n	800e4d2 <tcp_pcb_remove+0xce>
 800e4c4:	4b08      	ldr	r3, [pc, #32]	; (800e4e8 <tcp_pcb_remove+0xe4>)
 800e4c6:	f240 7256 	movw	r2, #1878	; 0x756
 800e4ca:	490b      	ldr	r1, [pc, #44]	; (800e4f8 <tcp_pcb_remove+0xf4>)
 800e4cc:	4808      	ldr	r0, [pc, #32]	; (800e4f0 <tcp_pcb_remove+0xec>)
 800e4ce:	f006 f8b9 	bl	8014644 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e4de:	bf00      	nop
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08017038 	.word	0x08017038
 800e4ec:	080173f0 	.word	0x080173f0
 800e4f0:	08017074 	.word	0x08017074
 800e4f4:	08017408 	.word	0x08017408
 800e4f8:	08017424 	.word	0x08017424

0800e4fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e504:	4b07      	ldr	r3, [pc, #28]	; (800e524 <tcp_next_iss+0x28>)
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	4b07      	ldr	r3, [pc, #28]	; (800e528 <tcp_next_iss+0x2c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4413      	add	r3, r2
 800e50e:	4a05      	ldr	r2, [pc, #20]	; (800e524 <tcp_next_iss+0x28>)
 800e510:	6013      	str	r3, [r2, #0]
  return iss;
 800e512:	4b04      	ldr	r3, [pc, #16]	; (800e524 <tcp_next_iss+0x28>)
 800e514:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e516:	4618      	mov	r0, r3
 800e518:	370c      	adds	r7, #12
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	2000000c 	.word	0x2000000c
 800e528:	2000773c 	.word	0x2000773c

0800e52c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	4603      	mov	r3, r0
 800e534:	6039      	str	r1, [r7, #0]
 800e536:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e538:	6838      	ldr	r0, [r7, #0]
 800e53a:	f7fb feb7 	bl	800a2ac <ip4_route>
 800e53e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e546:	88fb      	ldrh	r3, [r7, #6]
 800e548:	e010      	b.n	800e56c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e54e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e550:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d008      	beq.n	800e56a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e558:	897b      	ldrh	r3, [r7, #10]
 800e55a:	3b28      	subs	r3, #40	; 0x28
 800e55c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e55e:	893a      	ldrh	r2, [r7, #8]
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	4293      	cmp	r3, r2
 800e564:	bf28      	it	cs
 800e566:	4613      	movcs	r3, r2
 800e568:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e56a:	88fb      	ldrh	r3, [r7, #6]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e582:	e011      	b.n	800e5a8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d108      	bne.n	800e5a2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e596:	68f8      	ldr	r0, [r7, #12]
 800e598:	f7fe ff0e 	bl	800d3b8 <tcp_abort>
      pcb = next;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	e002      	b.n	800e5a8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1ea      	bne.n	800e584 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e5ae:	bf00      	nop
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
	...

0800e5b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d02c      	beq.n	800e622 <tcp_netif_ip_addr_changed+0x6a>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d028      	beq.n	800e622 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e5d0:	4b16      	ldr	r3, [pc, #88]	; (800e62c <tcp_netif_ip_addr_changed+0x74>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff ffcc 	bl	800e574 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e5dc:	4b14      	ldr	r3, [pc, #80]	; (800e630 <tcp_netif_ip_addr_changed+0x78>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff ffc6 	bl	800e574 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d019      	beq.n	800e622 <tcp_netif_ip_addr_changed+0x6a>
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d015      	beq.n	800e622 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e5f6:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <tcp_netif_ip_addr_changed+0x7c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	60fb      	str	r3, [r7, #12]
 800e5fc:	e00e      	b.n	800e61c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d103      	bne.n	800e618 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1ed      	bne.n	800e5fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20007738 	.word	0x20007738
 800e630:	20007744 	.word	0x20007744
 800e634:	20007740 	.word	0x20007740

0800e638 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e638:	b590      	push	{r4, r7, lr}
 800e63a:	b08b      	sub	sp, #44	; 0x2c
 800e63c:	af02      	add	r7, sp, #8
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	4a82      	ldr	r2, [pc, #520]	; (800e850 <tcp_input+0x218>)
 800e648:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	895b      	ldrh	r3, [r3, #10]
 800e64e:	2b13      	cmp	r3, #19
 800e650:	f240 8388 	bls.w	800ed64 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e654:	4b7f      	ldr	r3, [pc, #508]	; (800e854 <tcp_input+0x21c>)
 800e656:	695a      	ldr	r2, [r3, #20]
 800e658:	4b7e      	ldr	r3, [pc, #504]	; (800e854 <tcp_input+0x21c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4619      	mov	r1, r3
 800e65e:	4610      	mov	r0, r2
 800e660:	f7fc f89a 	bl	800a798 <ip4_addr_isbroadcast_u32>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	f040 837f 	bne.w	800ed6a <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e66c:	4b79      	ldr	r3, [pc, #484]	; (800e854 <tcp_input+0x21c>)
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e674:	2be0      	cmp	r3, #224	; 0xe0
 800e676:	f000 8378 	beq.w	800ed6a <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e67a:	4b75      	ldr	r3, [pc, #468]	; (800e850 <tcp_input+0x218>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	899b      	ldrh	r3, [r3, #12]
 800e680:	b29b      	uxth	r3, r3
 800e682:	4618      	mov	r0, r3
 800e684:	f7fa fd30 	bl	80090e8 <lwip_htons>
 800e688:	4603      	mov	r3, r0
 800e68a:	0b1b      	lsrs	r3, r3, #12
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e694:	7cbb      	ldrb	r3, [r7, #18]
 800e696:	2b13      	cmp	r3, #19
 800e698:	f240 8367 	bls.w	800ed6a <tcp_input+0x732>
 800e69c:	7cbb      	ldrb	r3, [r7, #18]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	891b      	ldrh	r3, [r3, #8]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	f200 8360 	bhi.w	800ed6a <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e6aa:	7cbb      	ldrb	r3, [r7, #18]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	3b14      	subs	r3, #20
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	4b69      	ldr	r3, [pc, #420]	; (800e858 <tcp_input+0x220>)
 800e6b4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e6b6:	4b69      	ldr	r3, [pc, #420]	; (800e85c <tcp_input+0x224>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	895a      	ldrh	r2, [r3, #10]
 800e6c0:	7cbb      	ldrb	r3, [r7, #18]
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d30d      	bcc.n	800e6e4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e6c8:	4b63      	ldr	r3, [pc, #396]	; (800e858 <tcp_input+0x220>)
 800e6ca:	881a      	ldrh	r2, [r3, #0]
 800e6cc:	4b64      	ldr	r3, [pc, #400]	; (800e860 <tcp_input+0x228>)
 800e6ce:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e6d0:	7cbb      	ldrb	r3, [r7, #18]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	425b      	negs	r3, r3
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	b21b      	sxth	r3, r3
 800e6da:	4619      	mov	r1, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7fe f8f1 	bl	800c8c4 <pbuf_header>
 800e6e2:	e055      	b.n	800e790 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d105      	bne.n	800e6f8 <tcp_input+0xc0>
 800e6ec:	4b5d      	ldr	r3, [pc, #372]	; (800e864 <tcp_input+0x22c>)
 800e6ee:	22b2      	movs	r2, #178	; 0xb2
 800e6f0:	495d      	ldr	r1, [pc, #372]	; (800e868 <tcp_input+0x230>)
 800e6f2:	485e      	ldr	r0, [pc, #376]	; (800e86c <tcp_input+0x234>)
 800e6f4:	f005 ffa6 	bl	8014644 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e6f8:	f06f 0113 	mvn.w	r1, #19
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7fe f8e1 	bl	800c8c4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	895a      	ldrh	r2, [r3, #10]
 800e706:	4b56      	ldr	r3, [pc, #344]	; (800e860 <tcp_input+0x228>)
 800e708:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e70a:	4b53      	ldr	r3, [pc, #332]	; (800e858 <tcp_input+0x220>)
 800e70c:	881a      	ldrh	r2, [r3, #0]
 800e70e:	4b54      	ldr	r3, [pc, #336]	; (800e860 <tcp_input+0x228>)
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e716:	4b52      	ldr	r3, [pc, #328]	; (800e860 <tcp_input+0x228>)
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	425b      	negs	r3, r3
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	b21b      	sxth	r3, r3
 800e720:	4619      	mov	r1, r3
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7fe f8ce 	bl	800c8c4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	895b      	ldrh	r3, [r3, #10]
 800e72e:	8a3a      	ldrh	r2, [r7, #16]
 800e730:	429a      	cmp	r2, r3
 800e732:	f200 8319 	bhi.w	800ed68 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	4a47      	ldr	r2, [pc, #284]	; (800e85c <tcp_input+0x224>)
 800e73e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	8a3b      	ldrh	r3, [r7, #16]
 800e746:	425b      	negs	r3, r3
 800e748:	b29b      	uxth	r3, r3
 800e74a:	b21b      	sxth	r3, r3
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f7fe f8b8 	bl	800c8c4 <pbuf_header>
    p->tot_len -= opt2len;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	891a      	ldrh	r2, [r3, #8]
 800e758:	8a3b      	ldrh	r3, [r7, #16]
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	895b      	ldrh	r3, [r3, #10]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d005      	beq.n	800e776 <tcp_input+0x13e>
 800e76a:	4b3e      	ldr	r3, [pc, #248]	; (800e864 <tcp_input+0x22c>)
 800e76c:	22cf      	movs	r2, #207	; 0xcf
 800e76e:	4940      	ldr	r1, [pc, #256]	; (800e870 <tcp_input+0x238>)
 800e770:	483e      	ldr	r0, [pc, #248]	; (800e86c <tcp_input+0x234>)
 800e772:	f005 ff67 	bl	8014644 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	891a      	ldrh	r2, [r3, #8]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	891b      	ldrh	r3, [r3, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d005      	beq.n	800e790 <tcp_input+0x158>
 800e784:	4b37      	ldr	r3, [pc, #220]	; (800e864 <tcp_input+0x22c>)
 800e786:	22d0      	movs	r2, #208	; 0xd0
 800e788:	493a      	ldr	r1, [pc, #232]	; (800e874 <tcp_input+0x23c>)
 800e78a:	4838      	ldr	r0, [pc, #224]	; (800e86c <tcp_input+0x234>)
 800e78c:	f005 ff5a 	bl	8014644 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e790:	4b2f      	ldr	r3, [pc, #188]	; (800e850 <tcp_input+0x218>)
 800e792:	681c      	ldr	r4, [r3, #0]
 800e794:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <tcp_input+0x218>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fa fca3 	bl	80090e8 <lwip_htons>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e7a6:	4b2a      	ldr	r3, [pc, #168]	; (800e850 <tcp_input+0x218>)
 800e7a8:	681c      	ldr	r4, [r3, #0]
 800e7aa:	4b29      	ldr	r3, [pc, #164]	; (800e850 <tcp_input+0x218>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	885b      	ldrh	r3, [r3, #2]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fa fc98 	bl	80090e8 <lwip_htons>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e7bc:	4b24      	ldr	r3, [pc, #144]	; (800e850 <tcp_input+0x218>)
 800e7be:	681c      	ldr	r4, [r3, #0]
 800e7c0:	4b23      	ldr	r3, [pc, #140]	; (800e850 <tcp_input+0x218>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fa fc9c 	bl	8009104 <lwip_htonl>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	6063      	str	r3, [r4, #4]
 800e7d0:	6863      	ldr	r3, [r4, #4]
 800e7d2:	4a29      	ldr	r2, [pc, #164]	; (800e878 <tcp_input+0x240>)
 800e7d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e7d6:	4b1e      	ldr	r3, [pc, #120]	; (800e850 <tcp_input+0x218>)
 800e7d8:	681c      	ldr	r4, [r3, #0]
 800e7da:	4b1d      	ldr	r3, [pc, #116]	; (800e850 <tcp_input+0x218>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fa fc8f 	bl	8009104 <lwip_htonl>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	68a3      	ldr	r3, [r4, #8]
 800e7ec:	4a23      	ldr	r2, [pc, #140]	; (800e87c <tcp_input+0x244>)
 800e7ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e7f0:	4b17      	ldr	r3, [pc, #92]	; (800e850 <tcp_input+0x218>)
 800e7f2:	681c      	ldr	r4, [r3, #0]
 800e7f4:	4b16      	ldr	r3, [pc, #88]	; (800e850 <tcp_input+0x218>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	89db      	ldrh	r3, [r3, #14]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fa fc73 	bl	80090e8 <lwip_htons>
 800e802:	4603      	mov	r3, r0
 800e804:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e806:	4b12      	ldr	r3, [pc, #72]	; (800e850 <tcp_input+0x218>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	899b      	ldrh	r3, [r3, #12]
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fa fc6a 	bl	80090e8 <lwip_htons>
 800e814:	4603      	mov	r3, r0
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	4b18      	ldr	r3, [pc, #96]	; (800e880 <tcp_input+0x248>)
 800e820:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	891a      	ldrh	r2, [r3, #8]
 800e826:	4b16      	ldr	r3, [pc, #88]	; (800e880 <tcp_input+0x248>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	f003 0303 	and.w	r3, r3, #3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	bf14      	ite	ne
 800e832:	2301      	movne	r3, #1
 800e834:	2300      	moveq	r3, #0
 800e836:	b2db      	uxtb	r3, r3
 800e838:	b29b      	uxth	r3, r3
 800e83a:	4413      	add	r3, r2
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	4b11      	ldr	r3, [pc, #68]	; (800e884 <tcp_input+0x24c>)
 800e840:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e842:	2300      	movs	r3, #0
 800e844:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e846:	4b10      	ldr	r3, [pc, #64]	; (800e888 <tcp_input+0x250>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	61fb      	str	r3, [r7, #28]
 800e84c:	e082      	b.n	800e954 <tcp_input+0x31c>
 800e84e:	bf00      	nop
 800e850:	20003f9c 	.word	0x20003f9c
 800e854:	20004028 	.word	0x20004028
 800e858:	20003fa0 	.word	0x20003fa0
 800e85c:	20003fa4 	.word	0x20003fa4
 800e860:	20003fa2 	.word	0x20003fa2
 800e864:	0801743c 	.word	0x0801743c
 800e868:	08017470 	.word	0x08017470
 800e86c:	08017480 	.word	0x08017480
 800e870:	080174a8 	.word	0x080174a8
 800e874:	080174b4 	.word	0x080174b4
 800e878:	20003fac 	.word	0x20003fac
 800e87c:	20003fb0 	.word	0x20003fb0
 800e880:	20003fb8 	.word	0x20003fb8
 800e884:	20003fb6 	.word	0x20003fb6
 800e888:	20007738 	.word	0x20007738
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	7d1b      	ldrb	r3, [r3, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <tcp_input+0x268>
 800e894:	4b8f      	ldr	r3, [pc, #572]	; (800ead4 <tcp_input+0x49c>)
 800e896:	22e2      	movs	r2, #226	; 0xe2
 800e898:	498f      	ldr	r1, [pc, #572]	; (800ead8 <tcp_input+0x4a0>)
 800e89a:	4890      	ldr	r0, [pc, #576]	; (800eadc <tcp_input+0x4a4>)
 800e89c:	f005 fed2 	bl	8014644 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	7d1b      	ldrb	r3, [r3, #20]
 800e8a4:	2b0a      	cmp	r3, #10
 800e8a6:	d105      	bne.n	800e8b4 <tcp_input+0x27c>
 800e8a8:	4b8a      	ldr	r3, [pc, #552]	; (800ead4 <tcp_input+0x49c>)
 800e8aa:	22e3      	movs	r2, #227	; 0xe3
 800e8ac:	498c      	ldr	r1, [pc, #560]	; (800eae0 <tcp_input+0x4a8>)
 800e8ae:	488b      	ldr	r0, [pc, #556]	; (800eadc <tcp_input+0x4a4>)
 800e8b0:	f005 fec8 	bl	8014644 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	7d1b      	ldrb	r3, [r3, #20]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d105      	bne.n	800e8c8 <tcp_input+0x290>
 800e8bc:	4b85      	ldr	r3, [pc, #532]	; (800ead4 <tcp_input+0x49c>)
 800e8be:	22e4      	movs	r2, #228	; 0xe4
 800e8c0:	4988      	ldr	r1, [pc, #544]	; (800eae4 <tcp_input+0x4ac>)
 800e8c2:	4886      	ldr	r0, [pc, #536]	; (800eadc <tcp_input+0x4a4>)
 800e8c4:	f005 febe 	bl	8014644 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	8b1a      	ldrh	r2, [r3, #24]
 800e8cc:	4b86      	ldr	r3, [pc, #536]	; (800eae8 <tcp_input+0x4b0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d138      	bne.n	800e94a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	8ada      	ldrh	r2, [r3, #22]
 800e8dc:	4b82      	ldr	r3, [pc, #520]	; (800eae8 <tcp_input+0x4b0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	885b      	ldrh	r3, [r3, #2]
 800e8e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d130      	bne.n	800e94a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	4b7f      	ldr	r3, [pc, #508]	; (800eaec <tcp_input+0x4b4>)
 800e8ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d12a      	bne.n	800e94a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	4b7c      	ldr	r3, [pc, #496]	; (800eaec <tcp_input+0x4b4>)
 800e8fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d124      	bne.n	800e94a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	68da      	ldr	r2, [r3, #12]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	429a      	cmp	r2, r3
 800e908:	d105      	bne.n	800e916 <tcp_input+0x2de>
 800e90a:	4b72      	ldr	r3, [pc, #456]	; (800ead4 <tcp_input+0x49c>)
 800e90c:	22ec      	movs	r2, #236	; 0xec
 800e90e:	4978      	ldr	r1, [pc, #480]	; (800eaf0 <tcp_input+0x4b8>)
 800e910:	4872      	ldr	r0, [pc, #456]	; (800eadc <tcp_input+0x4a4>)
 800e912:	f005 fe97 	bl	8014644 <iprintf>
      if (prev != NULL) {
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00a      	beq.n	800e932 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e924:	4b73      	ldr	r3, [pc, #460]	; (800eaf4 <tcp_input+0x4bc>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e92c:	4a71      	ldr	r2, [pc, #452]	; (800eaf4 <tcp_input+0x4bc>)
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d10f      	bne.n	800e95c <tcp_input+0x324>
 800e93c:	4b65      	ldr	r3, [pc, #404]	; (800ead4 <tcp_input+0x49c>)
 800e93e:	22f4      	movs	r2, #244	; 0xf4
 800e940:	496d      	ldr	r1, [pc, #436]	; (800eaf8 <tcp_input+0x4c0>)
 800e942:	4866      	ldr	r0, [pc, #408]	; (800eadc <tcp_input+0x4a4>)
 800e944:	f005 fe7e 	bl	8014644 <iprintf>
      break;
 800e948:	e008      	b.n	800e95c <tcp_input+0x324>
    }
    prev = pcb;
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d198      	bne.n	800e88c <tcp_input+0x254>
 800e95a:	e000      	b.n	800e95e <tcp_input+0x326>
      break;
 800e95c:	bf00      	nop
  }

  if (pcb == NULL) {
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d173      	bne.n	800ea4c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e964:	4b65      	ldr	r3, [pc, #404]	; (800eafc <tcp_input+0x4c4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	61fb      	str	r3, [r7, #28]
 800e96a:	e02f      	b.n	800e9cc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	7d1b      	ldrb	r3, [r3, #20]
 800e970:	2b0a      	cmp	r3, #10
 800e972:	d005      	beq.n	800e980 <tcp_input+0x348>
 800e974:	4b57      	ldr	r3, [pc, #348]	; (800ead4 <tcp_input+0x49c>)
 800e976:	22fe      	movs	r2, #254	; 0xfe
 800e978:	4961      	ldr	r1, [pc, #388]	; (800eb00 <tcp_input+0x4c8>)
 800e97a:	4858      	ldr	r0, [pc, #352]	; (800eadc <tcp_input+0x4a4>)
 800e97c:	f005 fe62 	bl	8014644 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	8b1a      	ldrh	r2, [r3, #24]
 800e984:	4b58      	ldr	r3, [pc, #352]	; (800eae8 <tcp_input+0x4b0>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d11a      	bne.n	800e9c6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	8ada      	ldrh	r2, [r3, #22]
 800e994:	4b54      	ldr	r3, [pc, #336]	; (800eae8 <tcp_input+0x4b0>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	885b      	ldrh	r3, [r3, #2]
 800e99a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d112      	bne.n	800e9c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	685a      	ldr	r2, [r3, #4]
 800e9a4:	4b51      	ldr	r3, [pc, #324]	; (800eaec <tcp_input+0x4b4>)
 800e9a6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d10c      	bne.n	800e9c6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	4b4e      	ldr	r3, [pc, #312]	; (800eaec <tcp_input+0x4b4>)
 800e9b2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d106      	bne.n	800e9c6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e9b8:	69f8      	ldr	r0, [r7, #28]
 800e9ba:	f000 fb11 	bl	800efe0 <tcp_timewait_input>
        pbuf_free(p);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7fd ffa4 	bl	800c90c <pbuf_free>
        return;
 800e9c4:	e1d6      	b.n	800ed74 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	61fb      	str	r3, [r7, #28]
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1cc      	bne.n	800e96c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9d6:	4b4b      	ldr	r3, [pc, #300]	; (800eb04 <tcp_input+0x4cc>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	617b      	str	r3, [r7, #20]
 800e9dc:	e019      	b.n	800ea12 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	8ada      	ldrh	r2, [r3, #22]
 800e9e2:	4b41      	ldr	r3, [pc, #260]	; (800eae8 <tcp_input+0x4b0>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	885b      	ldrh	r3, [r3, #2]
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d10c      	bne.n	800ea08 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	4b3e      	ldr	r3, [pc, #248]	; (800eaec <tcp_input+0x4b4>)
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d00f      	beq.n	800ea1a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00d      	beq.n	800ea1c <tcp_input+0x3e4>
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d009      	beq.n	800ea1c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e2      	bne.n	800e9de <tcp_input+0x3a6>
 800ea18:	e000      	b.n	800ea1c <tcp_input+0x3e4>
            break;
 800ea1a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d014      	beq.n	800ea4c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00a      	beq.n	800ea3e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	68da      	ldr	r2, [r3, #12]
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea30:	4b34      	ldr	r3, [pc, #208]	; (800eb04 <tcp_input+0x4cc>)
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea38:	4a32      	ldr	r2, [pc, #200]	; (800eb04 <tcp_input+0x4cc>)
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ea3e:	6978      	ldr	r0, [r7, #20]
 800ea40:	f000 f9ec 	bl	800ee1c <tcp_listen_input>
      pbuf_free(p);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7fd ff61 	bl	800c90c <pbuf_free>
      return;
 800ea4a:	e193      	b.n	800ed74 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 8162 	beq.w	800ed18 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea54:	4b2c      	ldr	r3, [pc, #176]	; (800eb08 <tcp_input+0x4d0>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	891a      	ldrh	r2, [r3, #8]
 800ea5e:	4b2a      	ldr	r3, [pc, #168]	; (800eb08 <tcp_input+0x4d0>)
 800ea60:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea62:	4a29      	ldr	r2, [pc, #164]	; (800eb08 <tcp_input+0x4d0>)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea68:	4b1f      	ldr	r3, [pc, #124]	; (800eae8 <tcp_input+0x4b0>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a26      	ldr	r2, [pc, #152]	; (800eb08 <tcp_input+0x4d0>)
 800ea6e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea70:	4b26      	ldr	r3, [pc, #152]	; (800eb0c <tcp_input+0x4d4>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea76:	4b26      	ldr	r3, [pc, #152]	; (800eb10 <tcp_input+0x4d8>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea7c:	4b25      	ldr	r3, [pc, #148]	; (800eb14 <tcp_input+0x4dc>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ea82:	4b25      	ldr	r3, [pc, #148]	; (800eb18 <tcp_input+0x4e0>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f003 0308 	and.w	r3, r3, #8
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d006      	beq.n	800ea9c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	7b5b      	ldrb	r3, [r3, #13]
 800ea92:	f043 0301 	orr.w	r3, r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d03d      	beq.n	800eb20 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eaa4:	69f8      	ldr	r0, [r7, #28]
 800eaa6:	f7ff f999 	bl	800dddc <tcp_process_refused_data>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	f113 0f0d 	cmn.w	r3, #13
 800eab0:	d007      	beq.n	800eac2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d032      	beq.n	800eb20 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800eaba:	4b18      	ldr	r3, [pc, #96]	; (800eb1c <tcp_input+0x4e4>)
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d02e      	beq.n	800eb20 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f040 8108 	bne.w	800ecdc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eacc:	69f8      	ldr	r0, [r7, #28]
 800eace:	f002 fe3f 	bl	8011750 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ead2:	e103      	b.n	800ecdc <tcp_input+0x6a4>
 800ead4:	0801743c 	.word	0x0801743c
 800ead8:	080174d4 	.word	0x080174d4
 800eadc:	08017480 	.word	0x08017480
 800eae0:	080174fc 	.word	0x080174fc
 800eae4:	08017528 	.word	0x08017528
 800eae8:	20003f9c 	.word	0x20003f9c
 800eaec:	20004028 	.word	0x20004028
 800eaf0:	08017550 	.word	0x08017550
 800eaf4:	20007738 	.word	0x20007738
 800eaf8:	0801757c 	.word	0x0801757c
 800eafc:	20007748 	.word	0x20007748
 800eb00:	080175a8 	.word	0x080175a8
 800eb04:	20007740 	.word	0x20007740
 800eb08:	20003f8c 	.word	0x20003f8c
 800eb0c:	20003fbc 	.word	0x20003fbc
 800eb10:	20003fb9 	.word	0x20003fb9
 800eb14:	20003fb4 	.word	0x20003fb4
 800eb18:	20003fb8 	.word	0x20003fb8
 800eb1c:	20003fb6 	.word	0x20003fb6
      }
    }
    tcp_input_pcb = pcb;
 800eb20:	4a96      	ldr	r2, [pc, #600]	; (800ed7c <tcp_input+0x744>)
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eb26:	69f8      	ldr	r0, [r7, #28]
 800eb28:	f000 fac2 	bl	800f0b0 <tcp_process>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb34:	f113 0f0d 	cmn.w	r3, #13
 800eb38:	f000 80db 	beq.w	800ecf2 <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 800eb3c:	4b90      	ldr	r3, [pc, #576]	; (800ed80 <tcp_input+0x748>)
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	f003 0308 	and.w	r3, r3, #8
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d016      	beq.n	800eb76 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d008      	beq.n	800eb64 <tcp_input+0x52c>
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb58:	69fa      	ldr	r2, [r7, #28]
 800eb5a:	6912      	ldr	r2, [r2, #16]
 800eb5c:	f06f 010d 	mvn.w	r1, #13
 800eb60:	4610      	mov	r0, r2
 800eb62:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb64:	69f9      	ldr	r1, [r7, #28]
 800eb66:	4887      	ldr	r0, [pc, #540]	; (800ed84 <tcp_input+0x74c>)
 800eb68:	f7ff fc4c 	bl	800e404 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800eb6c:	69f9      	ldr	r1, [r7, #28]
 800eb6e:	2001      	movs	r0, #1
 800eb70:	f7fd f972 	bl	800be58 <memp_free>
 800eb74:	e0bd      	b.n	800ecf2 <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 800eb76:	2300      	movs	r3, #0
 800eb78:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb7a:	4b83      	ldr	r3, [pc, #524]	; (800ed88 <tcp_input+0x750>)
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d01b      	beq.n	800ebba <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb82:	4b81      	ldr	r3, [pc, #516]	; (800ed88 <tcp_input+0x750>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d009      	beq.n	800eba4 <tcp_input+0x56c>
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	6910      	ldr	r0, [r2, #16]
 800eb98:	89fa      	ldrh	r2, [r7, #14]
 800eb9a:	69f9      	ldr	r1, [r7, #28]
 800eb9c:	4798      	blx	r3
 800eb9e:	4603      	mov	r3, r0
 800eba0:	74fb      	strb	r3, [r7, #19]
 800eba2:	e001      	b.n	800eba8 <tcp_input+0x570>
 800eba4:	2300      	movs	r3, #0
 800eba6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebac:	f113 0f0d 	cmn.w	r3, #13
 800ebb0:	f000 8096 	beq.w	800ece0 <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ebb4:	4b74      	ldr	r3, [pc, #464]	; (800ed88 <tcp_input+0x750>)
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ebba:	69f8      	ldr	r0, [r7, #28]
 800ebbc:	f000 f8fc 	bl	800edb8 <tcp_input_delayed_close>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f040 808e 	bne.w	800ece4 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ebc8:	4b70      	ldr	r3, [pc, #448]	; (800ed8c <tcp_input+0x754>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d041      	beq.n	800ec54 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <tcp_input+0x5ae>
 800ebd8:	4b6d      	ldr	r3, [pc, #436]	; (800ed90 <tcp_input+0x758>)
 800ebda:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800ebde:	496d      	ldr	r1, [pc, #436]	; (800ed94 <tcp_input+0x75c>)
 800ebe0:	486d      	ldr	r0, [pc, #436]	; (800ed98 <tcp_input+0x760>)
 800ebe2:	f005 fd2f 	bl	8014644 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	7e9b      	ldrb	r3, [r3, #26]
 800ebea:	f003 0310 	and.w	r3, r3, #16
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d008      	beq.n	800ec04 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ebf2:	4b66      	ldr	r3, [pc, #408]	; (800ed8c <tcp_input+0x754>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fd fe88 	bl	800c90c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ebfc:	69f8      	ldr	r0, [r7, #28]
 800ebfe:	f7fe fbdb 	bl	800d3b8 <tcp_abort>
            goto aborted;
 800ec02:	e076      	b.n	800ecf2 <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d00c      	beq.n	800ec28 <tcp_input+0x5f0>
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	6918      	ldr	r0, [r3, #16]
 800ec18:	4b5c      	ldr	r3, [pc, #368]	; (800ed8c <tcp_input+0x754>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	69f9      	ldr	r1, [r7, #28]
 800ec20:	47a0      	blx	r4
 800ec22:	4603      	mov	r3, r0
 800ec24:	74fb      	strb	r3, [r7, #19]
 800ec26:	e008      	b.n	800ec3a <tcp_input+0x602>
 800ec28:	4b58      	ldr	r3, [pc, #352]	; (800ed8c <tcp_input+0x754>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	69f9      	ldr	r1, [r7, #28]
 800ec30:	2000      	movs	r0, #0
 800ec32:	f7ff f984 	bl	800df3e <tcp_recv_null>
 800ec36:	4603      	mov	r3, r0
 800ec38:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec3e:	f113 0f0d 	cmn.w	r3, #13
 800ec42:	d051      	beq.n	800ece8 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d003      	beq.n	800ec54 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec4c:	4b4f      	ldr	r3, [pc, #316]	; (800ed8c <tcp_input+0x754>)
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec54:	4b4a      	ldr	r3, [pc, #296]	; (800ed80 <tcp_input+0x748>)
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	f003 0320 	and.w	r3, r3, #32
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d030      	beq.n	800ecc2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d009      	beq.n	800ec7c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6c:	69fa      	ldr	r2, [r7, #28]
 800ec6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ec70:	7b52      	ldrb	r2, [r2, #13]
 800ec72:	f042 0220 	orr.w	r2, r2, #32
 800ec76:	b2d2      	uxtb	r2, r2
 800ec78:	735a      	strb	r2, [r3, #13]
 800ec7a:	e022      	b.n	800ecc2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec84:	d005      	beq.n	800ec92 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00b      	beq.n	800ecb4 <tcp_input+0x67c>
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	6918      	ldr	r0, [r3, #16]
 800eca6:	2300      	movs	r3, #0
 800eca8:	2200      	movs	r2, #0
 800ecaa:	69f9      	ldr	r1, [r7, #28]
 800ecac:	47a0      	blx	r4
 800ecae:	4603      	mov	r3, r0
 800ecb0:	74fb      	strb	r3, [r7, #19]
 800ecb2:	e001      	b.n	800ecb8 <tcp_input+0x680>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ecb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecbc:	f113 0f0d 	cmn.w	r3, #13
 800ecc0:	d014      	beq.n	800ecec <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ecc2:	4b2e      	ldr	r3, [pc, #184]	; (800ed7c <tcp_input+0x744>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ecc8:	69f8      	ldr	r0, [r7, #28]
 800ecca:	f000 f875 	bl	800edb8 <tcp_input_delayed_close>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10d      	bne.n	800ecf0 <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ecd4:	69f8      	ldr	r0, [r7, #28]
 800ecd6:	f002 fd97 	bl	8011808 <tcp_output>
 800ecda:	e00a      	b.n	800ecf2 <tcp_input+0x6ba>
        goto aborted;
 800ecdc:	bf00      	nop
 800ecde:	e008      	b.n	800ecf2 <tcp_input+0x6ba>
              goto aborted;
 800ece0:	bf00      	nop
 800ece2:	e006      	b.n	800ecf2 <tcp_input+0x6ba>
          goto aborted;
 800ece4:	bf00      	nop
 800ece6:	e004      	b.n	800ecf2 <tcp_input+0x6ba>
            goto aborted;
 800ece8:	bf00      	nop
 800ecea:	e002      	b.n	800ecf2 <tcp_input+0x6ba>
              goto aborted;
 800ecec:	bf00      	nop
 800ecee:	e000      	b.n	800ecf2 <tcp_input+0x6ba>
          goto aborted;
 800ecf0:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800ecf2:	4b22      	ldr	r3, [pc, #136]	; (800ed7c <tcp_input+0x744>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ecf8:	4b24      	ldr	r3, [pc, #144]	; (800ed8c <tcp_input+0x754>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ecfe:	4b27      	ldr	r3, [pc, #156]	; (800ed9c <tcp_input+0x764>)
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d035      	beq.n	800ed72 <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800ed06:	4b25      	ldr	r3, [pc, #148]	; (800ed9c <tcp_input+0x764>)
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fd fdfe 	bl	800c90c <pbuf_free>
      inseg.p = NULL;
 800ed10:	4b22      	ldr	r3, [pc, #136]	; (800ed9c <tcp_input+0x764>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ed16:	e02c      	b.n	800ed72 <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ed18:	4b21      	ldr	r3, [pc, #132]	; (800eda0 <tcp_input+0x768>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	899b      	ldrh	r3, [r3, #12]
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fa f9e1 	bl	80090e8 <lwip_htons>
 800ed26:	4603      	mov	r3, r0
 800ed28:	f003 0304 	and.w	r3, r3, #4
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d115      	bne.n	800ed5c <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed30:	4b1c      	ldr	r3, [pc, #112]	; (800eda4 <tcp_input+0x76c>)
 800ed32:	6818      	ldr	r0, [r3, #0]
 800ed34:	4b1c      	ldr	r3, [pc, #112]	; (800eda8 <tcp_input+0x770>)
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	4b1c      	ldr	r3, [pc, #112]	; (800edac <tcp_input+0x774>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed40:	4b17      	ldr	r3, [pc, #92]	; (800eda0 <tcp_input+0x768>)
 800ed42:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed44:	885b      	ldrh	r3, [r3, #2]
 800ed46:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed48:	4a15      	ldr	r2, [pc, #84]	; (800eda0 <tcp_input+0x768>)
 800ed4a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed4c:	8812      	ldrh	r2, [r2, #0]
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	9201      	str	r2, [sp, #4]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	4b16      	ldr	r3, [pc, #88]	; (800edb0 <tcp_input+0x778>)
 800ed56:	4a17      	ldr	r2, [pc, #92]	; (800edb4 <tcp_input+0x77c>)
 800ed58:	f002 ffde 	bl	8011d18 <tcp_rst>
    pbuf_free(p);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7fd fdd5 	bl	800c90c <pbuf_free>
  return;
 800ed62:	e006      	b.n	800ed72 <tcp_input+0x73a>
    goto dropped;
 800ed64:	bf00      	nop
 800ed66:	e000      	b.n	800ed6a <tcp_input+0x732>
      goto dropped;
 800ed68:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7fd fdce 	bl	800c90c <pbuf_free>
 800ed70:	e000      	b.n	800ed74 <tcp_input+0x73c>
  return;
 800ed72:	bf00      	nop
}
 800ed74:	3724      	adds	r7, #36	; 0x24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd90      	pop	{r4, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	2000774c 	.word	0x2000774c
 800ed80:	20003fb9 	.word	0x20003fb9
 800ed84:	20007738 	.word	0x20007738
 800ed88:	20003fb4 	.word	0x20003fb4
 800ed8c:	20003fbc 	.word	0x20003fbc
 800ed90:	0801743c 	.word	0x0801743c
 800ed94:	080175d8 	.word	0x080175d8
 800ed98:	08017480 	.word	0x08017480
 800ed9c:	20003f8c 	.word	0x20003f8c
 800eda0:	20003f9c 	.word	0x20003f9c
 800eda4:	20003fb0 	.word	0x20003fb0
 800eda8:	20003fb6 	.word	0x20003fb6
 800edac:	20003fac 	.word	0x20003fac
 800edb0:	20004038 	.word	0x20004038
 800edb4:	2000403c 	.word	0x2000403c

0800edb8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800edc0:	4b14      	ldr	r3, [pc, #80]	; (800ee14 <tcp_input_delayed_close+0x5c>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	f003 0310 	and.w	r3, r3, #16
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d01d      	beq.n	800ee08 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7e9b      	ldrb	r3, [r3, #26]
 800edd0:	f003 0310 	and.w	r3, r3, #16
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10d      	bne.n	800edf4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d008      	beq.n	800edf4 <tcp_input_delayed_close+0x3c>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	6912      	ldr	r2, [r2, #16]
 800edec:	f06f 010e 	mvn.w	r1, #14
 800edf0:	4610      	mov	r0, r2
 800edf2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800edf4:	6879      	ldr	r1, [r7, #4]
 800edf6:	4808      	ldr	r0, [pc, #32]	; (800ee18 <tcp_input_delayed_close+0x60>)
 800edf8:	f7ff fb04 	bl	800e404 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	2001      	movs	r0, #1
 800ee00:	f7fd f82a 	bl	800be58 <memp_free>
    return 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e000      	b.n	800ee0a <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	20003fb9 	.word	0x20003fb9
 800ee18:	20007738 	.word	0x20007738

0800ee1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b088      	sub	sp, #32
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ee24:	4b64      	ldr	r3, [pc, #400]	; (800efb8 <tcp_listen_input+0x19c>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f003 0304 	and.w	r3, r3, #4
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f040 80bc 	bne.w	800efaa <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee32:	4b61      	ldr	r3, [pc, #388]	; (800efb8 <tcp_listen_input+0x19c>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 0310 	and.w	r3, r3, #16
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d016      	beq.n	800ee6c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee3e:	4b5f      	ldr	r3, [pc, #380]	; (800efbc <tcp_listen_input+0x1a0>)
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	4b5f      	ldr	r3, [pc, #380]	; (800efc0 <tcp_listen_input+0x1a4>)
 800ee44:	881b      	ldrh	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	4b5e      	ldr	r3, [pc, #376]	; (800efc4 <tcp_listen_input+0x1a8>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee4e:	4b5e      	ldr	r3, [pc, #376]	; (800efc8 <tcp_listen_input+0x1ac>)
 800ee50:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee52:	885b      	ldrh	r3, [r3, #2]
 800ee54:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee56:	4a5c      	ldr	r2, [pc, #368]	; (800efc8 <tcp_listen_input+0x1ac>)
 800ee58:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee5a:	8812      	ldrh	r2, [r2, #0]
 800ee5c:	b292      	uxth	r2, r2
 800ee5e:	9201      	str	r2, [sp, #4]
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	4b5a      	ldr	r3, [pc, #360]	; (800efcc <tcp_listen_input+0x1b0>)
 800ee64:	4a5a      	ldr	r2, [pc, #360]	; (800efd0 <tcp_listen_input+0x1b4>)
 800ee66:	f002 ff57 	bl	8011d18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ee6a:	e0a0      	b.n	800efae <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800ee6c:	4b52      	ldr	r3, [pc, #328]	; (800efb8 <tcp_listen_input+0x19c>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0302 	and.w	r3, r3, #2
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 809a 	beq.w	800efae <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	7d5b      	ldrb	r3, [r3, #21]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff f93c 	bl	800e0fc <tcp_alloc>
 800ee84:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d111      	bne.n	800eeb0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <tcp_listen_input+0x8e>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	6910      	ldr	r0, [r2, #16]
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eea0:	2100      	movs	r1, #0
 800eea2:	4798      	blx	r3
 800eea4:	4603      	mov	r3, r0
 800eea6:	74fb      	strb	r3, [r7, #19]
      return;
 800eea8:	e082      	b.n	800efb0 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eeaa:	23f0      	movs	r3, #240	; 0xf0
 800eeac:	74fb      	strb	r3, [r7, #19]
      return;
 800eeae:	e07f      	b.n	800efb0 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eeb0:	4b48      	ldr	r3, [pc, #288]	; (800efd4 <tcp_listen_input+0x1b8>)
 800eeb2:	695a      	ldr	r2, [r3, #20]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eeb8:	4b46      	ldr	r3, [pc, #280]	; (800efd4 <tcp_listen_input+0x1b8>)
 800eeba:	691a      	ldr	r2, [r3, #16]
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8ada      	ldrh	r2, [r3, #22]
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800eec8:	4b3f      	ldr	r3, [pc, #252]	; (800efc8 <tcp_listen_input+0x1ac>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	881b      	ldrh	r3, [r3, #0]
 800eece:	b29a      	uxth	r2, r3
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	2203      	movs	r2, #3
 800eed8:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eeda:	4b3a      	ldr	r3, [pc, #232]	; (800efc4 <tcp_listen_input+0x1a8>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	1c5a      	adds	r2, r3, #1
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800eeec:	6978      	ldr	r0, [r7, #20]
 800eeee:	f7ff fb05 	bl	800e4fc <tcp_next_iss>
 800eef2:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ef0c:	4b2d      	ldr	r3, [pc, #180]	; (800efc4 <tcp_listen_input+0x1a8>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	1e5a      	subs	r2, r3, #1
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	691a      	ldr	r2, [r3, #16]
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	7a1b      	ldrb	r3, [r3, #8]
 800ef28:	f003 030c 	and.w	r3, r3, #12
 800ef2c:	b2da      	uxtb	r2, r3
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef32:	4b29      	ldr	r3, [pc, #164]	; (800efd8 <tcp_listen_input+0x1bc>)
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	60da      	str	r2, [r3, #12]
 800ef3a:	4a27      	ldr	r2, [pc, #156]	; (800efd8 <tcp_listen_input+0x1bc>)
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	f003 f93a 	bl	80121b8 <tcp_timer_needed>
 800ef44:	4b25      	ldr	r3, [pc, #148]	; (800efdc <tcp_listen_input+0x1c0>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef4a:	6978      	ldr	r0, [r7, #20]
 800ef4c:	f001 fd16 	bl	801097c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef50:	4b1d      	ldr	r3, [pc, #116]	; (800efc8 <tcp_listen_input+0x1ac>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	89db      	ldrh	r3, [r3, #14]
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7ff fad9 	bl	800e52c <tcp_eff_send_mss_impl>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef82:	2112      	movs	r1, #18
 800ef84:	6978      	ldr	r0, [r7, #20]
 800ef86:	f002 fae5 	bl	8011554 <tcp_enqueue_flags>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800ef8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d004      	beq.n	800efa0 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ef96:	2100      	movs	r1, #0
 800ef98:	6978      	ldr	r0, [r7, #20]
 800ef9a:	f7fe f95b 	bl	800d254 <tcp_abandon>
      return;
 800ef9e:	e007      	b.n	800efb0 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800efa0:	6978      	ldr	r0, [r7, #20]
 800efa2:	f002 fc31 	bl	8011808 <tcp_output>
  return;
 800efa6:	bf00      	nop
 800efa8:	e001      	b.n	800efae <tcp_listen_input+0x192>
    return;
 800efaa:	bf00      	nop
 800efac:	e000      	b.n	800efb0 <tcp_listen_input+0x194>
  return;
 800efae:	bf00      	nop
}
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	20003fb8 	.word	0x20003fb8
 800efbc:	20003fb0 	.word	0x20003fb0
 800efc0:	20003fb6 	.word	0x20003fb6
 800efc4:	20003fac 	.word	0x20003fac
 800efc8:	20003f9c 	.word	0x20003f9c
 800efcc:	20004038 	.word	0x20004038
 800efd0:	2000403c 	.word	0x2000403c
 800efd4:	20004028 	.word	0x20004028
 800efd8:	20007738 	.word	0x20007738
 800efdc:	20007734 	.word	0x20007734

0800efe0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af02      	add	r7, sp, #8
 800efe6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800efe8:	4b29      	ldr	r3, [pc, #164]	; (800f090 <tcp_timewait_input+0xb0>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	f003 0304 	and.w	r3, r3, #4
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d147      	bne.n	800f084 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eff4:	4b26      	ldr	r3, [pc, #152]	; (800f090 <tcp_timewait_input+0xb0>)
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	f003 0302 	and.w	r3, r3, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d027      	beq.n	800f050 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f000:	4b24      	ldr	r3, [pc, #144]	; (800f094 <tcp_timewait_input+0xb4>)
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	db2a      	blt.n	800f064 <tcp_timewait_input+0x84>
 800f00e:	4b21      	ldr	r3, [pc, #132]	; (800f094 <tcp_timewait_input+0xb4>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f01a:	440b      	add	r3, r1
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	dc20      	bgt.n	800f064 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f022:	4b1d      	ldr	r3, [pc, #116]	; (800f098 <tcp_timewait_input+0xb8>)
 800f024:	6818      	ldr	r0, [r3, #0]
 800f026:	4b1d      	ldr	r3, [pc, #116]	; (800f09c <tcp_timewait_input+0xbc>)
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	4b19      	ldr	r3, [pc, #100]	; (800f094 <tcp_timewait_input+0xb4>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f032:	4b1b      	ldr	r3, [pc, #108]	; (800f0a0 <tcp_timewait_input+0xc0>)
 800f034:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f036:	885b      	ldrh	r3, [r3, #2]
 800f038:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f03a:	4a19      	ldr	r2, [pc, #100]	; (800f0a0 <tcp_timewait_input+0xc0>)
 800f03c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03e:	8812      	ldrh	r2, [r2, #0]
 800f040:	b292      	uxth	r2, r2
 800f042:	9201      	str	r2, [sp, #4]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	4b17      	ldr	r3, [pc, #92]	; (800f0a4 <tcp_timewait_input+0xc4>)
 800f048:	4a17      	ldr	r2, [pc, #92]	; (800f0a8 <tcp_timewait_input+0xc8>)
 800f04a:	f002 fe65 	bl	8011d18 <tcp_rst>
      return;
 800f04e:	e01c      	b.n	800f08a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800f050:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <tcp_timewait_input+0xb0>)
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d003      	beq.n	800f064 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f05c:	4b13      	ldr	r3, [pc, #76]	; (800f0ac <tcp_timewait_input+0xcc>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f064:	4b0d      	ldr	r3, [pc, #52]	; (800f09c <tcp_timewait_input+0xbc>)
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00d      	beq.n	800f088 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7e9b      	ldrb	r3, [r3, #26]
 800f070:	f043 0302 	orr.w	r3, r3, #2
 800f074:	b2da      	uxtb	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f002 fbc4 	bl	8011808 <tcp_output>
  }
  return;
 800f080:	bf00      	nop
 800f082:	e001      	b.n	800f088 <tcp_timewait_input+0xa8>
    return;
 800f084:	bf00      	nop
 800f086:	e000      	b.n	800f08a <tcp_timewait_input+0xaa>
  return;
 800f088:	bf00      	nop
}
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20003fb8 	.word	0x20003fb8
 800f094:	20003fac 	.word	0x20003fac
 800f098:	20003fb0 	.word	0x20003fb0
 800f09c:	20003fb6 	.word	0x20003fb6
 800f0a0:	20003f9c 	.word	0x20003f9c
 800f0a4:	20004038 	.word	0x20004038
 800f0a8:	2000403c 	.word	0x2000403c
 800f0ac:	2000773c 	.word	0x2000773c

0800f0b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08a      	sub	sp, #40	; 0x28
 800f0b4:	af02      	add	r7, sp, #8
 800f0b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f0c0:	4ba4      	ldr	r3, [pc, #656]	; (800f354 <tcp_process+0x2a4>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0304 	and.w	r3, r3, #4
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d04e      	beq.n	800f16a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	7d1b      	ldrb	r3, [r3, #20]
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d108      	bne.n	800f0e6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0d8:	4b9f      	ldr	r3, [pc, #636]	; (800f358 <tcp_process+0x2a8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d123      	bne.n	800f128 <tcp_process+0x78>
        acceptable = 1;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	76fb      	strb	r3, [r7, #27]
 800f0e4:	e020      	b.n	800f128 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0ea:	4b9c      	ldr	r3, [pc, #624]	; (800f35c <tcp_process+0x2ac>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d102      	bne.n	800f0f8 <tcp_process+0x48>
        acceptable = 1;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	76fb      	strb	r3, [r7, #27]
 800f0f6:	e017      	b.n	800f128 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0f8:	4b98      	ldr	r3, [pc, #608]	; (800f35c <tcp_process+0x2ac>)
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f100:	1ad3      	subs	r3, r2, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	db10      	blt.n	800f128 <tcp_process+0x78>
 800f106:	4b95      	ldr	r3, [pc, #596]	; (800f35c <tcp_process+0x2ac>)
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f112:	440b      	add	r3, r1
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	2b00      	cmp	r3, #0
 800f118:	dc06      	bgt.n	800f128 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7e9b      	ldrb	r3, [r3, #26]
 800f11e:	f043 0302 	orr.w	r3, r3, #2
 800f122:	b2da      	uxtb	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f128:	7efb      	ldrb	r3, [r7, #27]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d01b      	beq.n	800f166 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7d1b      	ldrb	r3, [r3, #20]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d106      	bne.n	800f144 <tcp_process+0x94>
 800f136:	4b8a      	ldr	r3, [pc, #552]	; (800f360 <tcp_process+0x2b0>)
 800f138:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f13c:	4989      	ldr	r1, [pc, #548]	; (800f364 <tcp_process+0x2b4>)
 800f13e:	488a      	ldr	r0, [pc, #552]	; (800f368 <tcp_process+0x2b8>)
 800f140:	f005 fa80 	bl	8014644 <iprintf>
      recv_flags |= TF_RESET;
 800f144:	4b89      	ldr	r3, [pc, #548]	; (800f36c <tcp_process+0x2bc>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	f043 0308 	orr.w	r3, r3, #8
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	4b87      	ldr	r3, [pc, #540]	; (800f36c <tcp_process+0x2bc>)
 800f150:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	7e9b      	ldrb	r3, [r3, #26]
 800f156:	f023 0301 	bic.w	r3, r3, #1
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800f160:	f06f 030d 	mvn.w	r3, #13
 800f164:	e34d      	b.n	800f802 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	e34b      	b.n	800f802 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f16a:	4b7a      	ldr	r3, [pc, #488]	; (800f354 <tcp_process+0x2a4>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	f003 0302 	and.w	r3, r3, #2
 800f172:	2b00      	cmp	r3, #0
 800f174:	d010      	beq.n	800f198 <tcp_process+0xe8>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d1b      	ldrb	r3, [r3, #20]
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d00c      	beq.n	800f198 <tcp_process+0xe8>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	7d1b      	ldrb	r3, [r3, #20]
 800f182:	2b03      	cmp	r3, #3
 800f184:	d008      	beq.n	800f198 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7e9b      	ldrb	r3, [r3, #26]
 800f18a:	f043 0302 	orr.w	r3, r3, #2
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800f194:	2300      	movs	r3, #0
 800f196:	e334      	b.n	800f802 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7e9b      	ldrb	r3, [r3, #26]
 800f19c:	f003 0310 	and.w	r3, r3, #16
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d103      	bne.n	800f1ac <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f1a4:	4b72      	ldr	r3, [pc, #456]	; (800f370 <tcp_process+0x2c0>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f001 fbe1 	bl	801097c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7d1b      	ldrb	r3, [r3, #20]
 800f1be:	3b02      	subs	r3, #2
 800f1c0:	2b07      	cmp	r3, #7
 800f1c2:	f200 830e 	bhi.w	800f7e2 <tcp_process+0x732>
 800f1c6:	a201      	add	r2, pc, #4	; (adr r2, 800f1cc <tcp_process+0x11c>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f1ed 	.word	0x0800f1ed
 800f1d0:	0800f3e5 	.word	0x0800f3e5
 800f1d4:	0800f53d 	.word	0x0800f53d
 800f1d8:	0800f567 	.word	0x0800f567
 800f1dc:	0800f691 	.word	0x0800f691
 800f1e0:	0800f53d 	.word	0x0800f53d
 800f1e4:	0800f71d 	.word	0x0800f71d
 800f1e8:	0800f7ad 	.word	0x0800f7ad
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f1ec:	4b59      	ldr	r3, [pc, #356]	; (800f354 <tcp_process+0x2a4>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	f003 0310 	and.w	r3, r3, #16
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f000 80cb 	beq.w	800f390 <tcp_process+0x2e0>
 800f1fa:	4b56      	ldr	r3, [pc, #344]	; (800f354 <tcp_process+0x2a4>)
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	f003 0302 	and.w	r3, r3, #2
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 80c4 	beq.w	800f390 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f20c:	1c5a      	adds	r2, r3, #1
 800f20e:	4b52      	ldr	r3, [pc, #328]	; (800f358 <tcp_process+0x2a8>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	429a      	cmp	r2, r3
 800f214:	f040 80bc 	bne.w	800f390 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800f218:	4b50      	ldr	r3, [pc, #320]	; (800f35c <tcp_process+0x2ac>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	1c5a      	adds	r2, r3, #1
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800f22a:	4b4b      	ldr	r3, [pc, #300]	; (800f358 <tcp_process+0x2a8>)
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800f232:	4b50      	ldr	r3, [pc, #320]	; (800f374 <tcp_process+0x2c4>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	89db      	ldrh	r3, [r3, #14]
 800f238:	b29a      	uxth	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f24c:	4b43      	ldr	r3, [pc, #268]	; (800f35c <tcp_process+0x2ac>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	1e5a      	subs	r2, r3, #1
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2204      	movs	r2, #4
 800f25a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	3304      	adds	r3, #4
 800f264:	4619      	mov	r1, r3
 800f266:	4610      	mov	r0, r2
 800f268:	f7ff f960 	bl	800e52c <tcp_eff_send_mss_impl>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461a      	mov	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f27e:	429a      	cmp	r2, r3
 800f280:	bf38      	it	cc
 800f282:	461a      	movcc	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4293      	cmp	r3, r2
 800f28c:	bf28      	it	cs
 800f28e:	4613      	movcs	r3, r2
 800f290:	b29a      	uxth	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <tcp_process+0x200>
 800f2a2:	4b2f      	ldr	r3, [pc, #188]	; (800f360 <tcp_process+0x2b0>)
 800f2a4:	f240 321a 	movw	r2, #794	; 0x31a
 800f2a8:	4933      	ldr	r1, [pc, #204]	; (800f378 <tcp_process+0x2c8>)
 800f2aa:	482f      	ldr	r0, [pc, #188]	; (800f368 <tcp_process+0x2b8>)
 800f2ac:	f005 f9ca 	bl	8014644 <iprintf>
      --pcb->snd_queuelen;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d111      	bne.n	800f2f0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2d0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d106      	bne.n	800f2e6 <tcp_process+0x236>
 800f2d8:	4b21      	ldr	r3, [pc, #132]	; (800f360 <tcp_process+0x2b0>)
 800f2da:	f240 3222 	movw	r2, #802	; 0x322
 800f2de:	4927      	ldr	r1, [pc, #156]	; (800f37c <tcp_process+0x2cc>)
 800f2e0:	4821      	ldr	r0, [pc, #132]	; (800f368 <tcp_process+0x2b8>)
 800f2e2:	f005 f9af 	bl	8014644 <iprintf>
        pcb->unsent = rseg->next;
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	669a      	str	r2, [r3, #104]	; 0x68
 800f2ee:	e003      	b.n	800f2f8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f2f8:	69f8      	ldr	r0, [r7, #28]
 800f2fa:	f7fe fdec 	bl	800ded6 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f302:	2b00      	cmp	r3, #0
 800f304:	d104      	bne.n	800f310 <tcp_process+0x260>
        pcb->rtime = -1;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f30c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f30e:	e006      	b.n	800f31e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00a      	beq.n	800f33e <tcp_process+0x28e>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	6910      	ldr	r0, [r2, #16]
 800f332:	2200      	movs	r2, #0
 800f334:	6879      	ldr	r1, [r7, #4]
 800f336:	4798      	blx	r3
 800f338:	4603      	mov	r3, r0
 800f33a:	76bb      	strb	r3, [r7, #26]
 800f33c:	e001      	b.n	800f342 <tcp_process+0x292>
 800f33e:	2300      	movs	r3, #0
 800f340:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f342:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f346:	f113 0f0d 	cmn.w	r3, #13
 800f34a:	d119      	bne.n	800f380 <tcp_process+0x2d0>
        return ERR_ABRT;
 800f34c:	f06f 030c 	mvn.w	r3, #12
 800f350:	e257      	b.n	800f802 <tcp_process+0x752>
 800f352:	bf00      	nop
 800f354:	20003fb8 	.word	0x20003fb8
 800f358:	20003fb0 	.word	0x20003fb0
 800f35c:	20003fac 	.word	0x20003fac
 800f360:	0801743c 	.word	0x0801743c
 800f364:	080175f4 	.word	0x080175f4
 800f368:	08017480 	.word	0x08017480
 800f36c:	20003fb9 	.word	0x20003fb9
 800f370:	2000773c 	.word	0x2000773c
 800f374:	20003f9c 	.word	0x20003f9c
 800f378:	08017614 	.word	0x08017614
 800f37c:	0801762c 	.word	0x0801762c
      }
      tcp_ack_now(pcb);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	7e9b      	ldrb	r3, [r3, #26]
 800f384:	f043 0302 	orr.w	r3, r3, #2
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f38e:	e22a      	b.n	800f7e6 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f390:	4b9f      	ldr	r3, [pc, #636]	; (800f610 <tcp_process+0x560>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 0310 	and.w	r3, r3, #16
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 8224 	beq.w	800f7e6 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f39e:	4b9d      	ldr	r3, [pc, #628]	; (800f614 <tcp_process+0x564>)
 800f3a0:	6818      	ldr	r0, [r3, #0]
 800f3a2:	4b9d      	ldr	r3, [pc, #628]	; (800f618 <tcp_process+0x568>)
 800f3a4:	881b      	ldrh	r3, [r3, #0]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	4b9c      	ldr	r3, [pc, #624]	; (800f61c <tcp_process+0x56c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3ae:	4b9c      	ldr	r3, [pc, #624]	; (800f620 <tcp_process+0x570>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3b2:	885b      	ldrh	r3, [r3, #2]
 800f3b4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3b6:	4a9a      	ldr	r2, [pc, #616]	; (800f620 <tcp_process+0x570>)
 800f3b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3ba:	8812      	ldrh	r2, [r2, #0]
 800f3bc:	b292      	uxth	r2, r2
 800f3be:	9201      	str	r2, [sp, #4]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	4b98      	ldr	r3, [pc, #608]	; (800f624 <tcp_process+0x574>)
 800f3c4:	4a98      	ldr	r2, [pc, #608]	; (800f628 <tcp_process+0x578>)
 800f3c6:	f002 fca7 	bl	8011d18 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3d0:	2b05      	cmp	r3, #5
 800f3d2:	f200 8208 	bhi.w	800f7e6 <tcp_process+0x736>
        pcb->rtime = 0;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f002 fd11 	bl	8011e04 <tcp_rexmit_rto>
    break;
 800f3e2:	e200      	b.n	800f7e6 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f3e4:	4b8a      	ldr	r3, [pc, #552]	; (800f610 <tcp_process+0x560>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	f003 0310 	and.w	r3, r3, #16
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f000 8091 	beq.w	800f514 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f3f2:	4b88      	ldr	r3, [pc, #544]	; (800f614 <tcp_process+0x564>)
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	db71      	blt.n	800f4e6 <tcp_process+0x436>
 800f402:	4b84      	ldr	r3, [pc, #528]	; (800f614 <tcp_process+0x564>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f40a:	1ad3      	subs	r3, r2, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	dc6a      	bgt.n	800f4e6 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2204      	movs	r2, #4
 800f414:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00b      	beq.n	800f436 <tcp_process+0x386>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <tcp_process+0x386>
 800f428:	4b80      	ldr	r3, [pc, #512]	; (800f62c <tcp_process+0x57c>)
 800f42a:	f240 3251 	movw	r2, #849	; 0x351
 800f42e:	4980      	ldr	r1, [pc, #512]	; (800f630 <tcp_process+0x580>)
 800f430:	4880      	ldr	r0, [pc, #512]	; (800f634 <tcp_process+0x584>)
 800f432:	f005 f907 	bl	8014644 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d102      	bne.n	800f444 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f43e:	23fa      	movs	r3, #250	; 0xfa
 800f440:	76bb      	strb	r3, [r7, #26]
 800f442:	e011      	b.n	800f468 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f448:	699b      	ldr	r3, [r3, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00a      	beq.n	800f464 <tcp_process+0x3b4>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	6910      	ldr	r0, [r2, #16]
 800f458:	2200      	movs	r2, #0
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	4798      	blx	r3
 800f45e:	4603      	mov	r3, r0
 800f460:	76bb      	strb	r3, [r7, #26]
 800f462:	e001      	b.n	800f468 <tcp_process+0x3b8>
 800f464:	23f0      	movs	r3, #240	; 0xf0
 800f466:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00a      	beq.n	800f486 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f474:	f113 0f0d 	cmn.w	r3, #13
 800f478:	d002      	beq.n	800f480 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7fd ff9c 	bl	800d3b8 <tcp_abort>
          }
          return ERR_ABRT;
 800f480:	f06f 030c 	mvn.w	r3, #12
 800f484:	e1bd      	b.n	800f802 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 fa42 	bl	800f910 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f48c:	4b6a      	ldr	r3, [pc, #424]	; (800f638 <tcp_process+0x588>)
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d005      	beq.n	800f4a0 <tcp_process+0x3f0>
          recv_acked--;
 800f494:	4b68      	ldr	r3, [pc, #416]	; (800f638 <tcp_process+0x588>)
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	3b01      	subs	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	4b66      	ldr	r3, [pc, #408]	; (800f638 <tcp_process+0x588>)
 800f49e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4a4:	005b      	lsls	r3, r3, #1
 800f4a6:	f241 121c 	movw	r2, #4380	; 0x111c
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	bf38      	it	cc
 800f4ae:	461a      	movcc	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	bf28      	it	cs
 800f4ba:	4613      	movcs	r3, r2
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f4c4:	4b5d      	ldr	r3, [pc, #372]	; (800f63c <tcp_process+0x58c>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f003 0320 	and.w	r3, r3, #32
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d034      	beq.n	800f53a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7e9b      	ldrb	r3, [r3, #26]
 800f4d4:	f043 0302 	orr.w	r3, r3, #2
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2207      	movs	r2, #7
 800f4e2:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f4e4:	e029      	b.n	800f53a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4e6:	4b4b      	ldr	r3, [pc, #300]	; (800f614 <tcp_process+0x564>)
 800f4e8:	6818      	ldr	r0, [r3, #0]
 800f4ea:	4b4b      	ldr	r3, [pc, #300]	; (800f618 <tcp_process+0x568>)
 800f4ec:	881b      	ldrh	r3, [r3, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	4b4a      	ldr	r3, [pc, #296]	; (800f61c <tcp_process+0x56c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4f6:	4b4a      	ldr	r3, [pc, #296]	; (800f620 <tcp_process+0x570>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4fe:	4a48      	ldr	r2, [pc, #288]	; (800f620 <tcp_process+0x570>)
 800f500:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f502:	8812      	ldrh	r2, [r2, #0]
 800f504:	b292      	uxth	r2, r2
 800f506:	9201      	str	r2, [sp, #4]
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	4b46      	ldr	r3, [pc, #280]	; (800f624 <tcp_process+0x574>)
 800f50c:	4a46      	ldr	r2, [pc, #280]	; (800f628 <tcp_process+0x578>)
 800f50e:	f002 fc03 	bl	8011d18 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f512:	e16a      	b.n	800f7ea <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f514:	4b3e      	ldr	r3, [pc, #248]	; (800f610 <tcp_process+0x560>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f003 0302 	and.w	r3, r3, #2
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f000 8164 	beq.w	800f7ea <tcp_process+0x73a>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f526:	1e5a      	subs	r2, r3, #1
 800f528:	4b3c      	ldr	r3, [pc, #240]	; (800f61c <tcp_process+0x56c>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	f040 815c 	bne.w	800f7ea <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f002 fc9c 	bl	8011e70 <tcp_rexmit>
    break;
 800f538:	e157      	b.n	800f7ea <tcp_process+0x73a>
 800f53a:	e156      	b.n	800f7ea <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f9e7 	bl	800f910 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f542:	4b3e      	ldr	r3, [pc, #248]	; (800f63c <tcp_process+0x58c>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	f003 0320 	and.w	r3, r3, #32
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f000 814f 	beq.w	800f7ee <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	7e9b      	ldrb	r3, [r3, #26]
 800f554:	f043 0302 	orr.w	r3, r3, #2
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2207      	movs	r2, #7
 800f562:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f564:	e143      	b.n	800f7ee <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f9d2 	bl	800f910 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f56c:	4b33      	ldr	r3, [pc, #204]	; (800f63c <tcp_process+0x58c>)
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	f003 0320 	and.w	r3, r3, #32
 800f574:	2b00      	cmp	r3, #0
 800f576:	d074      	beq.n	800f662 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f578:	4b25      	ldr	r3, [pc, #148]	; (800f610 <tcp_process+0x560>)
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	d063      	beq.n	800f64c <tcp_process+0x59c>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f588:	4b22      	ldr	r3, [pc, #136]	; (800f614 <tcp_process+0x564>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d15d      	bne.n	800f64c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f594:	2b00      	cmp	r3, #0
 800f596:	d159      	bne.n	800f64c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	7e9b      	ldrb	r3, [r3, #26]
 800f59c:	f043 0302 	orr.w	r3, r3, #2
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7fe feea 	bl	800e380 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5ac:	4b24      	ldr	r3, [pc, #144]	; (800f640 <tcp_process+0x590>)
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d105      	bne.n	800f5c2 <tcp_process+0x512>
 800f5b6:	4b22      	ldr	r3, [pc, #136]	; (800f640 <tcp_process+0x590>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	68db      	ldr	r3, [r3, #12]
 800f5bc:	4a20      	ldr	r2, [pc, #128]	; (800f640 <tcp_process+0x590>)
 800f5be:	6013      	str	r3, [r2, #0]
 800f5c0:	e013      	b.n	800f5ea <tcp_process+0x53a>
 800f5c2:	4b1f      	ldr	r3, [pc, #124]	; (800f640 <tcp_process+0x590>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	617b      	str	r3, [r7, #20]
 800f5c8:	e00c      	b.n	800f5e4 <tcp_process+0x534>
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d104      	bne.n	800f5de <tcp_process+0x52e>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68da      	ldr	r2, [r3, #12]
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	60da      	str	r2, [r3, #12]
 800f5dc:	e005      	b.n	800f5ea <tcp_process+0x53a>
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	617b      	str	r3, [r7, #20]
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1ef      	bne.n	800f5ca <tcp_process+0x51a>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	60da      	str	r2, [r3, #12]
 800f5f0:	4b14      	ldr	r3, [pc, #80]	; (800f644 <tcp_process+0x594>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	220a      	movs	r2, #10
 800f5fa:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f5fc:	4b12      	ldr	r3, [pc, #72]	; (800f648 <tcp_process+0x598>)
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	60da      	str	r2, [r3, #12]
 800f604:	4a10      	ldr	r2, [pc, #64]	; (800f648 <tcp_process+0x598>)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6013      	str	r3, [r2, #0]
 800f60a:	f002 fdd5 	bl	80121b8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f60e:	e0f0      	b.n	800f7f2 <tcp_process+0x742>
 800f610:	20003fb8 	.word	0x20003fb8
 800f614:	20003fb0 	.word	0x20003fb0
 800f618:	20003fb6 	.word	0x20003fb6
 800f61c:	20003fac 	.word	0x20003fac
 800f620:	20003f9c 	.word	0x20003f9c
 800f624:	20004038 	.word	0x20004038
 800f628:	2000403c 	.word	0x2000403c
 800f62c:	0801743c 	.word	0x0801743c
 800f630:	08017640 	.word	0x08017640
 800f634:	08017480 	.word	0x08017480
 800f638:	20003fb4 	.word	0x20003fb4
 800f63c:	20003fb9 	.word	0x20003fb9
 800f640:	20007738 	.word	0x20007738
 800f644:	20007734 	.word	0x20007734
 800f648:	20007748 	.word	0x20007748
        tcp_ack_now(pcb);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	7e9b      	ldrb	r3, [r3, #26]
 800f650:	f043 0302 	orr.w	r3, r3, #2
 800f654:	b2da      	uxtb	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2208      	movs	r2, #8
 800f65e:	751a      	strb	r2, [r3, #20]
    break;
 800f660:	e0c7      	b.n	800f7f2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f662:	4b6a      	ldr	r3, [pc, #424]	; (800f80c <tcp_process+0x75c>)
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	f003 0310 	and.w	r3, r3, #16
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f000 80c1 	beq.w	800f7f2 <tcp_process+0x742>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f674:	4b66      	ldr	r3, [pc, #408]	; (800f810 <tcp_process+0x760>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	429a      	cmp	r2, r3
 800f67a:	f040 80ba 	bne.w	800f7f2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f682:	2b00      	cmp	r3, #0
 800f684:	f040 80b5 	bne.w	800f7f2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2206      	movs	r2, #6
 800f68c:	751a      	strb	r2, [r3, #20]
    break;
 800f68e:	e0b0      	b.n	800f7f2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f93d 	bl	800f910 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f696:	4b5f      	ldr	r3, [pc, #380]	; (800f814 <tcp_process+0x764>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	f003 0320 	and.w	r3, r3, #32
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 80a9 	beq.w	800f7f6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	7e9b      	ldrb	r3, [r3, #26]
 800f6a8:	f043 0302 	orr.w	r3, r3, #2
 800f6ac:	b2da      	uxtb	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7fe fe64 	bl	800e380 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f6b8:	4b57      	ldr	r3, [pc, #348]	; (800f818 <tcp_process+0x768>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d105      	bne.n	800f6ce <tcp_process+0x61e>
 800f6c2:	4b55      	ldr	r3, [pc, #340]	; (800f818 <tcp_process+0x768>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	4a53      	ldr	r2, [pc, #332]	; (800f818 <tcp_process+0x768>)
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	e013      	b.n	800f6f6 <tcp_process+0x646>
 800f6ce:	4b52      	ldr	r3, [pc, #328]	; (800f818 <tcp_process+0x768>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	613b      	str	r3, [r7, #16]
 800f6d4:	e00c      	b.n	800f6f0 <tcp_process+0x640>
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	68da      	ldr	r2, [r3, #12]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d104      	bne.n	800f6ea <tcp_process+0x63a>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68da      	ldr	r2, [r3, #12]
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	60da      	str	r2, [r3, #12]
 800f6e8:	e005      	b.n	800f6f6 <tcp_process+0x646>
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1ef      	bne.n	800f6d6 <tcp_process+0x626>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	60da      	str	r2, [r3, #12]
 800f6fc:	4b47      	ldr	r3, [pc, #284]	; (800f81c <tcp_process+0x76c>)
 800f6fe:	2201      	movs	r2, #1
 800f700:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	220a      	movs	r2, #10
 800f706:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f708:	4b45      	ldr	r3, [pc, #276]	; (800f820 <tcp_process+0x770>)
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	60da      	str	r2, [r3, #12]
 800f710:	4a43      	ldr	r2, [pc, #268]	; (800f820 <tcp_process+0x770>)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6013      	str	r3, [r2, #0]
 800f716:	f002 fd4f 	bl	80121b8 <tcp_timer_needed>
    }
    break;
 800f71a:	e06c      	b.n	800f7f6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f8f7 	bl	800f910 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f722:	4b3a      	ldr	r3, [pc, #232]	; (800f80c <tcp_process+0x75c>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	f003 0310 	and.w	r3, r3, #16
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d065      	beq.n	800f7fa <tcp_process+0x74a>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f732:	4b37      	ldr	r3, [pc, #220]	; (800f810 <tcp_process+0x760>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	429a      	cmp	r2, r3
 800f738:	d15f      	bne.n	800f7fa <tcp_process+0x74a>
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d15b      	bne.n	800f7fa <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f7fe fe1c 	bl	800e380 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f748:	4b33      	ldr	r3, [pc, #204]	; (800f818 <tcp_process+0x768>)
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d105      	bne.n	800f75e <tcp_process+0x6ae>
 800f752:	4b31      	ldr	r3, [pc, #196]	; (800f818 <tcp_process+0x768>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	4a2f      	ldr	r2, [pc, #188]	; (800f818 <tcp_process+0x768>)
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	e013      	b.n	800f786 <tcp_process+0x6d6>
 800f75e:	4b2e      	ldr	r3, [pc, #184]	; (800f818 <tcp_process+0x768>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	e00c      	b.n	800f780 <tcp_process+0x6d0>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	68da      	ldr	r2, [r3, #12]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d104      	bne.n	800f77a <tcp_process+0x6ca>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	68da      	ldr	r2, [r3, #12]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	60da      	str	r2, [r3, #12]
 800f778:	e005      	b.n	800f786 <tcp_process+0x6d6>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1ef      	bne.n	800f766 <tcp_process+0x6b6>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	60da      	str	r2, [r3, #12]
 800f78c:	4b23      	ldr	r3, [pc, #140]	; (800f81c <tcp_process+0x76c>)
 800f78e:	2201      	movs	r2, #1
 800f790:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	220a      	movs	r2, #10
 800f796:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f798:	4b21      	ldr	r3, [pc, #132]	; (800f820 <tcp_process+0x770>)
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	60da      	str	r2, [r3, #12]
 800f7a0:	4a1f      	ldr	r2, [pc, #124]	; (800f820 <tcp_process+0x770>)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6013      	str	r3, [r2, #0]
 800f7a6:	f002 fd07 	bl	80121b8 <tcp_timer_needed>
    }
    break;
 800f7aa:	e026      	b.n	800f7fa <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f8af 	bl	800f910 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7b2:	4b16      	ldr	r3, [pc, #88]	; (800f80c <tcp_process+0x75c>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	f003 0310 	and.w	r3, r3, #16
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d01f      	beq.n	800f7fe <tcp_process+0x74e>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7c2:	4b13      	ldr	r3, [pc, #76]	; (800f810 <tcp_process+0x760>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d119      	bne.n	800f7fe <tcp_process+0x74e>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d115      	bne.n	800f7fe <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f7d2:	4b10      	ldr	r3, [pc, #64]	; (800f814 <tcp_process+0x764>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	f043 0310 	orr.w	r3, r3, #16
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	4b0d      	ldr	r3, [pc, #52]	; (800f814 <tcp_process+0x764>)
 800f7de:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f7e0:	e00d      	b.n	800f7fe <tcp_process+0x74e>
  default:
    break;
 800f7e2:	bf00      	nop
 800f7e4:	e00c      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7e6:	bf00      	nop
 800f7e8:	e00a      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7ea:	bf00      	nop
 800f7ec:	e008      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7ee:	bf00      	nop
 800f7f0:	e006      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7f2:	bf00      	nop
 800f7f4:	e004      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7f6:	bf00      	nop
 800f7f8:	e002      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7fa:	bf00      	nop
 800f7fc:	e000      	b.n	800f800 <tcp_process+0x750>
    break;
 800f7fe:	bf00      	nop
  }
  return ERR_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3720      	adds	r7, #32
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	20003fb8 	.word	0x20003fb8
 800f810:	20003fb0 	.word	0x20003fb0
 800f814:	20003fb9 	.word	0x20003fb9
 800f818:	20007738 	.word	0x20007738
 800f81c:	20007734 	.word	0x20007734
 800f820:	20007748 	.word	0x20007748

0800f824 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f824:	b5b0      	push	{r4, r5, r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	899b      	ldrh	r3, [r3, #12]
 800f834:	b29b      	uxth	r3, r3
 800f836:	4618      	mov	r0, r3
 800f838:	f7f9 fc56 	bl	80090e8 <lwip_htons>
 800f83c:	4603      	mov	r3, r0
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	2b00      	cmp	r3, #0
 800f844:	d026      	beq.n	800f894 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f846:	6838      	ldr	r0, [r7, #0]
 800f848:	f7fe fb31 	bl	800deae <tcp_segs_free>
    next = NULL;
 800f84c:	2300      	movs	r3, #0
 800f84e:	603b      	str	r3, [r7, #0]
 800f850:	e054      	b.n	800f8fc <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	899b      	ldrh	r3, [r3, #12]
 800f858:	b29b      	uxth	r3, r3
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7f9 fc44 	bl	80090e8 <lwip_htons>
 800f860:	4603      	mov	r3, r0
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00c      	beq.n	800f884 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68dc      	ldr	r4, [r3, #12]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	899b      	ldrh	r3, [r3, #12]
 800f874:	b29d      	uxth	r5, r3
 800f876:	2001      	movs	r0, #1
 800f878:	f7f9 fc36 	bl	80090e8 <lwip_htons>
 800f87c:	4603      	mov	r3, r0
 800f87e:	432b      	orrs	r3, r5
 800f880:	b29b      	uxth	r3, r3
 800f882:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f7fe fb21 	bl	800ded6 <tcp_seg_free>
    while (next &&
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00e      	beq.n	800f8b8 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	891b      	ldrh	r3, [r3, #8]
 800f89e:	461a      	mov	r2, r3
 800f8a0:	4b1a      	ldr	r3, [pc, #104]	; (800f90c <tcp_oos_insert_segment+0xe8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	441a      	add	r2, r3
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	8909      	ldrh	r1, [r1, #8]
 800f8b0:	440b      	add	r3, r1
 800f8b2:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	dacc      	bge.n	800f852 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d01e      	beq.n	800f8fc <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	891b      	ldrh	r3, [r3, #8]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4b11      	ldr	r3, [pc, #68]	; (800f90c <tcp_oos_insert_segment+0xe8>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	441a      	add	r2, r3
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dd12      	ble.n	800f8fc <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	4b0b      	ldr	r3, [pc, #44]	; (800f90c <tcp_oos_insert_segment+0xe8>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	685a      	ldr	r2, [r3, #4]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	891b      	ldrh	r3, [r3, #8]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	f7fc fe94 	bl	800c624 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	601a      	str	r2, [r3, #0]
}
 800f902:	bf00      	nop
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bdb0      	pop	{r4, r5, r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20003fac 	.word	0x20003fac

0800f910 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f912:	b08d      	sub	sp, #52	; 0x34
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f918:	2300      	movs	r3, #0
 800f91a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	7d1b      	ldrb	r3, [r3, #20]
 800f920:	2b03      	cmp	r3, #3
 800f922:	d806      	bhi.n	800f932 <tcp_receive+0x22>
 800f924:	4b9a      	ldr	r3, [pc, #616]	; (800fb90 <tcp_receive+0x280>)
 800f926:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f92a:	499a      	ldr	r1, [pc, #616]	; (800fb94 <tcp_receive+0x284>)
 800f92c:	489a      	ldr	r0, [pc, #616]	; (800fb98 <tcp_receive+0x288>)
 800f92e:	f004 fe89 	bl	8014644 <iprintf>

  if (flags & TCP_ACK) {
 800f932:	4b9a      	ldr	r3, [pc, #616]	; (800fb9c <tcp_receive+0x28c>)
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 0310 	and.w	r3, r3, #16
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 82c5 	beq.w	800feca <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f946:	461a      	mov	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f94c:	4413      	add	r3, r2
 800f94e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f954:	4b92      	ldr	r3, [pc, #584]	; (800fba0 <tcp_receive+0x290>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	db1b      	blt.n	800f996 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f962:	4b8f      	ldr	r3, [pc, #572]	; (800fba0 <tcp_receive+0x290>)
 800f964:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f966:	429a      	cmp	r2, r3
 800f968:	d106      	bne.n	800f978 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f96e:	4b8d      	ldr	r3, [pc, #564]	; (800fba4 <tcp_receive+0x294>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	db0e      	blt.n	800f996 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f97c:	4b89      	ldr	r3, [pc, #548]	; (800fba4 <tcp_receive+0x294>)
 800f97e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f980:	429a      	cmp	r2, r3
 800f982:	d141      	bne.n	800fa08 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f984:	4b88      	ldr	r3, [pc, #544]	; (800fba8 <tcp_receive+0x298>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	89db      	ldrh	r3, [r3, #14]
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f992:	429a      	cmp	r2, r3
 800f994:	d938      	bls.n	800fa08 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f996:	4b84      	ldr	r3, [pc, #528]	; (800fba8 <tcp_receive+0x298>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	89db      	ldrh	r3, [r3, #14]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d205      	bcs.n	800f9c0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f9c0:	4b77      	ldr	r3, [pc, #476]	; (800fba0 <tcp_receive+0x290>)
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f9c8:	4b76      	ldr	r3, [pc, #472]	; (800fba4 <tcp_receive+0x294>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10d      	bne.n	800f9f6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d111      	bne.n	800fa08 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f9f4:	e008      	b.n	800fa08 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa08:	4b66      	ldr	r3, [pc, #408]	; (800fba4 <tcp_receive+0x294>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	dc58      	bgt.n	800fac8 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa16:	4b65      	ldr	r3, [pc, #404]	; (800fbac <tcp_receive+0x29c>)
 800fa18:	881b      	ldrh	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d14b      	bne.n	800fab6 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800fa28:	441a      	add	r2, r3
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d142      	bne.n	800fab6 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	db3d      	blt.n	800fab6 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa3e:	4b59      	ldr	r3, [pc, #356]	; (800fba4 <tcp_receive+0x294>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d137      	bne.n	800fab6 <tcp_receive+0x1a6>
              found_dupack = 1;
 800fa46:	2301      	movs	r3, #1
 800fa48:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa50:	3301      	adds	r3, #1
 800fa52:	b2da      	uxtb	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d907      	bls.n	800fa6e <tcp_receive+0x15e>
                ++pcb->dupacks;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa64:	3301      	adds	r3, #1
 800fa66:	b2da      	uxtb	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d916      	bls.n	800faa6 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa82:	4413      	add	r3, r2
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d912      	bls.n	800fab6 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa9a:	4413      	add	r3, r2
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800faa4:	e007      	b.n	800fab6 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800faac:	2b03      	cmp	r3, #3
 800faae:	d102      	bne.n	800fab6 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f002 fa2d 	bl	8011f10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f040 8169 	bne.w	800fd90 <tcp_receive+0x480>
        pcb->dupacks = 0;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fac6:	e163      	b.n	800fd90 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fac8:	4b36      	ldr	r3, [pc, #216]	; (800fba4 <tcp_receive+0x294>)
 800faca:	681a      	ldr	r2, [r3, #0]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	3b01      	subs	r3, #1
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f2c0 8107 	blt.w	800fce8 <tcp_receive+0x3d8>
 800fada:	4b32      	ldr	r3, [pc, #200]	; (800fba4 <tcp_receive+0x294>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f300 80ff 	bgt.w	800fce8 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	7e9b      	ldrb	r3, [r3, #26]
 800faee:	f003 0304 	and.w	r3, r3, #4
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00c      	beq.n	800fb10 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7e9b      	ldrb	r3, [r3, #26]
 800fafa:	f023 0304 	bic.w	r3, r3, #4
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb1e:	10db      	asrs	r3, r3, #3
 800fb20:	b21b      	sxth	r3, r3
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	4413      	add	r3, r2
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	b21a      	sxth	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb40:	4b18      	ldr	r3, [pc, #96]	; (800fba4 <tcp_receive+0x294>)
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	7d1b      	ldrb	r3, [r3, #20]
 800fb4c:	2b03      	cmp	r3, #3
 800fb4e:	f240 8094 	bls.w	800fc7a <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d226      	bcs.n	800fbb0 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d97f      	bls.n	800fc7a <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb84:	4413      	add	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb8e:	e074      	b.n	800fc7a <tcp_receive+0x36a>
 800fb90:	0801743c 	.word	0x0801743c
 800fb94:	08017660 	.word	0x08017660
 800fb98:	08017480 	.word	0x08017480
 800fb9c:	20003fb8 	.word	0x20003fb8
 800fba0:	20003fac 	.word	0x20003fac
 800fba4:	20003fb0 	.word	0x20003fb0
 800fba8:	20003f9c 	.word	0x20003f9c
 800fbac:	20003fb6 	.word	0x20003fb6
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbba:	4619      	mov	r1, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbc0:	fb03 f301 	mul.w	r3, r3, r1
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800fbca:	fb93 f3f1 	sdiv	r3, r3, r1
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4413      	add	r3, r2
 800fbd2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbda:	8a7a      	ldrh	r2, [r7, #18]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d94c      	bls.n	800fc7a <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8a7a      	ldrh	r2, [r7, #18]
 800fbe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800fbe8:	e047      	b.n	800fc7a <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbee:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fc ff1b 	bl	800ca40 <pbuf_clen>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	429c      	cmp	r4, r3
 800fc0e:	d206      	bcs.n	800fc1e <tcp_receive+0x30e>
 800fc10:	4b70      	ldr	r3, [pc, #448]	; (800fdd4 <tcp_receive+0x4c4>)
 800fc12:	f240 429e 	movw	r2, #1182	; 0x49e
 800fc16:	4970      	ldr	r1, [pc, #448]	; (800fdd8 <tcp_receive+0x4c8>)
 800fc18:	4870      	ldr	r0, [pc, #448]	; (800fddc <tcp_receive+0x4cc>)
 800fc1a:	f004 fd13 	bl	8014644 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fc ff0c 	bl	800ca40 <pbuf_clen>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc32:	1a9b      	subs	r3, r3, r2
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	891a      	ldrh	r2, [r3, #8]
 800fc40:	4b67      	ldr	r3, [pc, #412]	; (800fde0 <tcp_receive+0x4d0>)
 800fc42:	881b      	ldrh	r3, [r3, #0]
 800fc44:	4413      	add	r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	4b65      	ldr	r3, [pc, #404]	; (800fde0 <tcp_receive+0x4d0>)
 800fc4a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800fc4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc4e:	f7fe f942 	bl	800ded6 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00e      	beq.n	800fc7a <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10a      	bne.n	800fc7a <tcp_receive+0x36a>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d106      	bne.n	800fc7a <tcp_receive+0x36a>
 800fc6c:	4b59      	ldr	r3, [pc, #356]	; (800fdd4 <tcp_receive+0x4c4>)
 800fc6e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800fc72:	495c      	ldr	r1, [pc, #368]	; (800fde4 <tcp_receive+0x4d4>)
 800fc74:	4859      	ldr	r0, [pc, #356]	; (800fddc <tcp_receive+0x4cc>)
 800fc76:	f004 fce5 	bl	8014644 <iprintf>
      while (pcb->unacked != NULL &&
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d022      	beq.n	800fcc8 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f9 fa3a 	bl	8009104 <lwip_htonl>
 800fc90:	4604      	mov	r4, r0
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc96:	891b      	ldrh	r3, [r3, #8]
 800fc98:	461d      	mov	r5, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f9 fa1f 	bl	80090e8 <lwip_htons>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	f003 0303 	and.w	r3, r3, #3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d001      	beq.n	800fcb8 <tcp_receive+0x3a8>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e000      	b.n	800fcba <tcp_receive+0x3aa>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	442b      	add	r3, r5
 800fcbc:	18e2      	adds	r2, r4, r3
 800fcbe:	4b4a      	ldr	r3, [pc, #296]	; (800fde8 <tcp_receive+0x4d8>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd90      	ble.n	800fbea <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d104      	bne.n	800fcda <tcp_receive+0x3ca>
        pcb->rtime = -1;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcd6:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcd8:	e002      	b.n	800fce0 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	76da      	strb	r2, [r3, #27]
 800fce6:	e002      	b.n	800fcee <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f001 fd31 	bl	8011750 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800fcee:	e04f      	b.n	800fd90 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d103      	bne.n	800fd10 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fc fe90 	bl	800ca40 <pbuf_clen>
 800fd20:	4603      	mov	r3, r0
 800fd22:	429c      	cmp	r4, r3
 800fd24:	d206      	bcs.n	800fd34 <tcp_receive+0x424>
 800fd26:	4b2b      	ldr	r3, [pc, #172]	; (800fdd4 <tcp_receive+0x4c4>)
 800fd28:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fd2c:	492a      	ldr	r1, [pc, #168]	; (800fdd8 <tcp_receive+0x4c8>)
 800fd2e:	482b      	ldr	r0, [pc, #172]	; (800fddc <tcp_receive+0x4cc>)
 800fd30:	f004 fc88 	bl	8014644 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800fd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fc fe81 	bl	800ca40 <pbuf_clen>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	461a      	mov	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd48:	1a9b      	subs	r3, r3, r2
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	891a      	ldrh	r2, [r3, #8]
 800fd56:	4b22      	ldr	r3, [pc, #136]	; (800fde0 <tcp_receive+0x4d0>)
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	4b20      	ldr	r3, [pc, #128]	; (800fde0 <tcp_receive+0x4d0>)
 800fd60:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fd62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd64:	f7fe f8b7 	bl	800ded6 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00e      	beq.n	800fd90 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10a      	bne.n	800fd90 <tcp_receive+0x480>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <tcp_receive+0x480>
 800fd82:	4b14      	ldr	r3, [pc, #80]	; (800fdd4 <tcp_receive+0x4c4>)
 800fd84:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fd88:	4916      	ldr	r1, [pc, #88]	; (800fde4 <tcp_receive+0x4d4>)
 800fd8a:	4814      	ldr	r0, [pc, #80]	; (800fddc <tcp_receive+0x4cc>)
 800fd8c:	f004 fc5a 	bl	8014644 <iprintf>
    while (pcb->unsent != NULL &&
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d037      	beq.n	800fe08 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fd98:	4b13      	ldr	r3, [pc, #76]	; (800fde8 <tcp_receive+0x4d8>)
 800fd9a:	681c      	ldr	r4, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f9 f9ad 	bl	8009104 <lwip_htonl>
 800fdaa:	4605      	mov	r5, r0
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdb0:	891b      	ldrh	r3, [r3, #8]
 800fdb2:	461e      	mov	r6, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	899b      	ldrh	r3, [r3, #12]
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7f9 f992 	bl	80090e8 <lwip_htons>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	f003 0303 	and.w	r3, r3, #3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d00e      	beq.n	800fdec <tcp_receive+0x4dc>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e00d      	b.n	800fdee <tcp_receive+0x4de>
 800fdd2:	bf00      	nop
 800fdd4:	0801743c 	.word	0x0801743c
 800fdd8:	0801767c 	.word	0x0801767c
 800fddc:	08017480 	.word	0x08017480
 800fde0:	20003fb4 	.word	0x20003fb4
 800fde4:	080176a4 	.word	0x080176a4
 800fde8:	20003fb0 	.word	0x20003fb0
 800fdec:	2300      	movs	r3, #0
 800fdee:	4433      	add	r3, r6
 800fdf0:	442b      	add	r3, r5
 800fdf2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	db07      	blt.n	800fe08 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fdf8:	4b8d      	ldr	r3, [pc, #564]	; (8010030 <tcp_receive+0x720>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f77f af74 	ble.w	800fcf0 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe0e:	4b89      	ldr	r3, [pc, #548]	; (8010034 <tcp_receive+0x724>)
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	4413      	add	r3, r2
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d052      	beq.n	800feca <tcp_receive+0x5ba>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe28:	4b81      	ldr	r3, [pc, #516]	; (8010030 <tcp_receive+0x720>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	1ad3      	subs	r3, r2, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da4b      	bge.n	800feca <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fe32:	4b81      	ldr	r3, [pc, #516]	; (8010038 <tcp_receive+0x728>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	1ad3      	subs	r3, r2, r3
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fe44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe4c:	10db      	asrs	r3, r3, #3
 800fe4e:	b21b      	sxth	r3, r3
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe62:	4413      	add	r3, r2
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	b21a      	sxth	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fe6c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	da03      	bge.n	800fe7c <tcp_receive+0x56c>
        m = -m;
 800fe74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe76:	425b      	negs	r3, r3
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fe7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe84:	109b      	asrs	r3, r3, #2
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe9a:	4413      	add	r3, r2
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	b21a      	sxth	r2, r3
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800feaa:	10db      	asrs	r3, r3, #3
 800feac:	b21b      	sxth	r3, r3
 800feae:	b29a      	uxth	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	4413      	add	r3, r2
 800feba:	b29b      	uxth	r3, r3
 800febc:	b21a      	sxth	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800feca:	4b5c      	ldr	r3, [pc, #368]	; (801003c <tcp_receive+0x72c>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	f000 84ee 	beq.w	80108b0 <tcp_receive+0xfa0>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	7d1b      	ldrb	r3, [r3, #20]
 800fed8:	2b06      	cmp	r3, #6
 800feda:	f200 84e9 	bhi.w	80108b0 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fee2:	4b57      	ldr	r3, [pc, #348]	; (8010040 <tcp_receive+0x730>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	3b01      	subs	r3, #1
 800feea:	2b00      	cmp	r3, #0
 800feec:	f2c0 80b8 	blt.w	8010060 <tcp_receive+0x750>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fef4:	4b51      	ldr	r3, [pc, #324]	; (801003c <tcp_receive+0x72c>)
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	4619      	mov	r1, r3
 800fefa:	4b51      	ldr	r3, [pc, #324]	; (8010040 <tcp_receive+0x730>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	440b      	add	r3, r1
 800ff00:	1ad3      	subs	r3, r2, r3
 800ff02:	3301      	adds	r3, #1
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f300 80ab 	bgt.w	8010060 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ff0a:	4b4e      	ldr	r3, [pc, #312]	; (8010044 <tcp_receive+0x734>)
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff14:	4b4a      	ldr	r3, [pc, #296]	; (8010040 <tcp_receive+0x730>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ff1c:	4b49      	ldr	r3, [pc, #292]	; (8010044 <tcp_receive+0x734>)
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d106      	bne.n	800ff32 <tcp_receive+0x622>
 800ff24:	4b48      	ldr	r3, [pc, #288]	; (8010048 <tcp_receive+0x738>)
 800ff26:	f240 523c 	movw	r2, #1340	; 0x53c
 800ff2a:	4948      	ldr	r1, [pc, #288]	; (801004c <tcp_receive+0x73c>)
 800ff2c:	4848      	ldr	r0, [pc, #288]	; (8010050 <tcp_receive+0x740>)
 800ff2e:	f004 fb89 	bl	8014644 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff34:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	dd06      	ble.n	800ff4a <tcp_receive+0x63a>
 800ff3c:	4b42      	ldr	r3, [pc, #264]	; (8010048 <tcp_receive+0x738>)
 800ff3e:	f240 523d 	movw	r2, #1341	; 0x53d
 800ff42:	4944      	ldr	r1, [pc, #272]	; (8010054 <tcp_receive+0x744>)
 800ff44:	4842      	ldr	r0, [pc, #264]	; (8010050 <tcp_receive+0x740>)
 800ff46:	f004 fb7d 	bl	8014644 <iprintf>
      if (inseg.p->len < off) {
 800ff4a:	4b3e      	ldr	r3, [pc, #248]	; (8010044 <tcp_receive+0x734>)
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	895b      	ldrh	r3, [r3, #10]
 800ff50:	461a      	mov	r2, r3
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff54:	429a      	cmp	r2, r3
 800ff56:	da3e      	bge.n	800ffd6 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ff58:	4b3a      	ldr	r3, [pc, #232]	; (8010044 <tcp_receive+0x734>)
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	891b      	ldrh	r3, [r3, #8]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff62:	429a      	cmp	r2, r3
 800ff64:	da06      	bge.n	800ff74 <tcp_receive+0x664>
 800ff66:	4b38      	ldr	r3, [pc, #224]	; (8010048 <tcp_receive+0x738>)
 800ff68:	f240 523f 	movw	r2, #1343	; 0x53f
 800ff6c:	493a      	ldr	r1, [pc, #232]	; (8010058 <tcp_receive+0x748>)
 800ff6e:	4838      	ldr	r0, [pc, #224]	; (8010050 <tcp_receive+0x740>)
 800ff70:	f004 fb68 	bl	8014644 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff74:	4b33      	ldr	r3, [pc, #204]	; (8010044 <tcp_receive+0x734>)
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	891a      	ldrh	r2, [r3, #8]
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800ff82:	e00e      	b.n	800ffa2 <tcp_receive+0x692>
          off -= p->len;
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	895b      	ldrh	r3, [r3, #10]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	1a9b      	subs	r3, r3, r2
 800ff8e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	8a3a      	ldrh	r2, [r7, #16]
 800ff94:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	895b      	ldrh	r3, [r3, #10]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	dbea      	blt.n	800ff84 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ffae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	425b      	negs	r3, r3
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	b21b      	sxth	r3, r3
 800ffb8:	4619      	mov	r1, r3
 800ffba:	69b8      	ldr	r0, [r7, #24]
 800ffbc:	f7fc fc82 	bl	800c8c4 <pbuf_header>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d01c      	beq.n	8010000 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ffc6:	4b20      	ldr	r3, [pc, #128]	; (8010048 <tcp_receive+0x738>)
 800ffc8:	f240 524c 	movw	r2, #1356	; 0x54c
 800ffcc:	4923      	ldr	r1, [pc, #140]	; (801005c <tcp_receive+0x74c>)
 800ffce:	4820      	ldr	r0, [pc, #128]	; (8010050 <tcp_receive+0x740>)
 800ffd0:	f004 fb38 	bl	8014644 <iprintf>
 800ffd4:	e014      	b.n	8010000 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ffd6:	4b1b      	ldr	r3, [pc, #108]	; (8010044 <tcp_receive+0x734>)
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffdc:	b292      	uxth	r2, r2
 800ffde:	4252      	negs	r2, r2
 800ffe0:	b292      	uxth	r2, r2
 800ffe2:	b212      	sxth	r2, r2
 800ffe4:	4611      	mov	r1, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fc fc6c 	bl	800c8c4 <pbuf_header>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d006      	beq.n	8010000 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fff2:	4b15      	ldr	r3, [pc, #84]	; (8010048 <tcp_receive+0x738>)
 800fff4:	f240 5251 	movw	r2, #1361	; 0x551
 800fff8:	4918      	ldr	r1, [pc, #96]	; (801005c <tcp_receive+0x74c>)
 800fffa:	4815      	ldr	r0, [pc, #84]	; (8010050 <tcp_receive+0x740>)
 800fffc:	f004 fb22 	bl	8014644 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010000:	4b10      	ldr	r3, [pc, #64]	; (8010044 <tcp_receive+0x734>)
 8010002:	891a      	ldrh	r2, [r3, #8]
 8010004:	4b0e      	ldr	r3, [pc, #56]	; (8010040 <tcp_receive+0x730>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	b299      	uxth	r1, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000e:	b29b      	uxth	r3, r3
 8010010:	1acb      	subs	r3, r1, r3
 8010012:	b29b      	uxth	r3, r3
 8010014:	4413      	add	r3, r2
 8010016:	b29a      	uxth	r2, r3
 8010018:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <tcp_receive+0x734>)
 801001a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801001c:	4b09      	ldr	r3, [pc, #36]	; (8010044 <tcp_receive+0x734>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010024:	4906      	ldr	r1, [pc, #24]	; (8010040 <tcp_receive+0x730>)
 8010026:	600a      	str	r2, [r1, #0]
 8010028:	4a05      	ldr	r2, [pc, #20]	; (8010040 <tcp_receive+0x730>)
 801002a:	6812      	ldr	r2, [r2, #0]
 801002c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801002e:	e025      	b.n	801007c <tcp_receive+0x76c>
 8010030:	20003fb0 	.word	0x20003fb0
 8010034:	20003fb4 	.word	0x20003fb4
 8010038:	2000773c 	.word	0x2000773c
 801003c:	20003fb6 	.word	0x20003fb6
 8010040:	20003fac 	.word	0x20003fac
 8010044:	20003f8c 	.word	0x20003f8c
 8010048:	0801743c 	.word	0x0801743c
 801004c:	080176c4 	.word	0x080176c4
 8010050:	08017480 	.word	0x08017480
 8010054:	080176d4 	.word	0x080176d4
 8010058:	080176e4 	.word	0x080176e4
 801005c:	080176f4 	.word	0x080176f4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010060:	4b86      	ldr	r3, [pc, #536]	; (801027c <tcp_receive+0x96c>)
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	2b00      	cmp	r3, #0
 801006c:	da06      	bge.n	801007c <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	7e9b      	ldrb	r3, [r3, #26]
 8010072:	f043 0302 	orr.w	r3, r3, #2
 8010076:	b2da      	uxtb	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801007c:	4b7f      	ldr	r3, [pc, #508]	; (801027c <tcp_receive+0x96c>)
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	f2c0 840d 	blt.w	80108a6 <tcp_receive+0xf96>
 801008c:	4b7b      	ldr	r3, [pc, #492]	; (801027c <tcp_receive+0x96c>)
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010094:	6879      	ldr	r1, [r7, #4]
 8010096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010098:	440b      	add	r3, r1
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	3301      	adds	r3, #1
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f300 8401 	bgt.w	80108a6 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100a8:	4b74      	ldr	r3, [pc, #464]	; (801027c <tcp_receive+0x96c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	f040 8285 	bne.w	80105bc <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80100b2:	4b73      	ldr	r3, [pc, #460]	; (8010280 <tcp_receive+0x970>)
 80100b4:	891c      	ldrh	r4, [r3, #8]
 80100b6:	4b72      	ldr	r3, [pc, #456]	; (8010280 <tcp_receive+0x970>)
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	899b      	ldrh	r3, [r3, #12]
 80100bc:	b29b      	uxth	r3, r3
 80100be:	4618      	mov	r0, r3
 80100c0:	f7f9 f812 	bl	80090e8 <lwip_htons>
 80100c4:	4603      	mov	r3, r0
 80100c6:	f003 0303 	and.w	r3, r3, #3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <tcp_receive+0x7c2>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <tcp_receive+0x7c4>
 80100d2:	2300      	movs	r3, #0
 80100d4:	4423      	add	r3, r4
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	4b6a      	ldr	r3, [pc, #424]	; (8010284 <tcp_receive+0x974>)
 80100da:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100e0:	4b68      	ldr	r3, [pc, #416]	; (8010284 <tcp_receive+0x974>)
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d26d      	bcs.n	80101c4 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80100e8:	4b65      	ldr	r3, [pc, #404]	; (8010280 <tcp_receive+0x970>)
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f8 fff9 	bl	80090e8 <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d01a      	beq.n	8010136 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010100:	4b5f      	ldr	r3, [pc, #380]	; (8010280 <tcp_receive+0x970>)
 8010102:	68dc      	ldr	r4, [r3, #12]
 8010104:	4b5e      	ldr	r3, [pc, #376]	; (8010280 <tcp_receive+0x970>)
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	899b      	ldrh	r3, [r3, #12]
 801010a:	b29b      	uxth	r3, r3
 801010c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010110:	b29d      	uxth	r5, r3
 8010112:	4b5b      	ldr	r3, [pc, #364]	; (8010280 <tcp_receive+0x970>)
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	899b      	ldrh	r3, [r3, #12]
 8010118:	b29b      	uxth	r3, r3
 801011a:	4618      	mov	r0, r3
 801011c:	f7f8 ffe4 	bl	80090e8 <lwip_htons>
 8010120:	4603      	mov	r3, r0
 8010122:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010126:	b29b      	uxth	r3, r3
 8010128:	4618      	mov	r0, r3
 801012a:	f7f8 ffdd 	bl	80090e8 <lwip_htons>
 801012e:	4603      	mov	r3, r0
 8010130:	432b      	orrs	r3, r5
 8010132:	b29b      	uxth	r3, r3
 8010134:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801013a:	4b51      	ldr	r3, [pc, #324]	; (8010280 <tcp_receive+0x970>)
 801013c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801013e:	4b50      	ldr	r3, [pc, #320]	; (8010280 <tcp_receive+0x970>)
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	899b      	ldrh	r3, [r3, #12]
 8010144:	b29b      	uxth	r3, r3
 8010146:	4618      	mov	r0, r3
 8010148:	f7f8 ffce 	bl	80090e8 <lwip_htons>
 801014c:	4603      	mov	r3, r0
 801014e:	f003 0302 	and.w	r3, r3, #2
 8010152:	2b00      	cmp	r3, #0
 8010154:	d005      	beq.n	8010162 <tcp_receive+0x852>
            inseg.len -= 1;
 8010156:	4b4a      	ldr	r3, [pc, #296]	; (8010280 <tcp_receive+0x970>)
 8010158:	891b      	ldrh	r3, [r3, #8]
 801015a:	3b01      	subs	r3, #1
 801015c:	b29a      	uxth	r2, r3
 801015e:	4b48      	ldr	r3, [pc, #288]	; (8010280 <tcp_receive+0x970>)
 8010160:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010162:	4b47      	ldr	r3, [pc, #284]	; (8010280 <tcp_receive+0x970>)
 8010164:	685a      	ldr	r2, [r3, #4]
 8010166:	4b46      	ldr	r3, [pc, #280]	; (8010280 <tcp_receive+0x970>)
 8010168:	891b      	ldrh	r3, [r3, #8]
 801016a:	4619      	mov	r1, r3
 801016c:	4610      	mov	r0, r2
 801016e:	f7fc fa59 	bl	800c624 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010172:	4b43      	ldr	r3, [pc, #268]	; (8010280 <tcp_receive+0x970>)
 8010174:	891c      	ldrh	r4, [r3, #8]
 8010176:	4b42      	ldr	r3, [pc, #264]	; (8010280 <tcp_receive+0x970>)
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	899b      	ldrh	r3, [r3, #12]
 801017c:	b29b      	uxth	r3, r3
 801017e:	4618      	mov	r0, r3
 8010180:	f7f8 ffb2 	bl	80090e8 <lwip_htons>
 8010184:	4603      	mov	r3, r0
 8010186:	f003 0303 	and.w	r3, r3, #3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <tcp_receive+0x882>
 801018e:	2301      	movs	r3, #1
 8010190:	e000      	b.n	8010194 <tcp_receive+0x884>
 8010192:	2300      	movs	r3, #0
 8010194:	4423      	add	r3, r4
 8010196:	b29a      	uxth	r2, r3
 8010198:	4b3a      	ldr	r3, [pc, #232]	; (8010284 <tcp_receive+0x974>)
 801019a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801019c:	4b39      	ldr	r3, [pc, #228]	; (8010284 <tcp_receive+0x974>)
 801019e:	881b      	ldrh	r3, [r3, #0]
 80101a0:	461a      	mov	r2, r3
 80101a2:	4b36      	ldr	r3, [pc, #216]	; (801027c <tcp_receive+0x96c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	441a      	add	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	6879      	ldr	r1, [r7, #4]
 80101ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101b0:	440b      	add	r3, r1
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d006      	beq.n	80101c4 <tcp_receive+0x8b4>
 80101b6:	4b34      	ldr	r3, [pc, #208]	; (8010288 <tcp_receive+0x978>)
 80101b8:	f240 527f 	movw	r2, #1407	; 0x57f
 80101bc:	4933      	ldr	r1, [pc, #204]	; (801028c <tcp_receive+0x97c>)
 80101be:	4834      	ldr	r0, [pc, #208]	; (8010290 <tcp_receive+0x980>)
 80101c0:	f004 fa40 	bl	8014644 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 80e0 	beq.w	801038e <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80101ce:	4b2c      	ldr	r3, [pc, #176]	; (8010280 <tcp_receive+0x970>)
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	899b      	ldrh	r3, [r3, #12]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7f8 ff86 	bl	80090e8 <lwip_htons>
 80101dc:	4603      	mov	r3, r0
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d010      	beq.n	8010208 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80101e6:	e00a      	b.n	80101fe <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7fd fe6c 	bl	800ded6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1f0      	bne.n	80101e8 <tcp_receive+0x8d8>
 8010206:	e0c2      	b.n	801038e <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801020c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801020e:	e04e      	b.n	80102ae <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	899b      	ldrh	r3, [r3, #12]
 8010216:	b29b      	uxth	r3, r3
 8010218:	4618      	mov	r0, r3
 801021a:	f7f8 ff65 	bl	80090e8 <lwip_htons>
 801021e:	4603      	mov	r3, r0
 8010220:	f003 0301 	and.w	r3, r3, #1
 8010224:	2b00      	cmp	r3, #0
 8010226:	d03a      	beq.n	801029e <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010228:	4b15      	ldr	r3, [pc, #84]	; (8010280 <tcp_receive+0x970>)
 801022a:	68db      	ldr	r3, [r3, #12]
 801022c:	899b      	ldrh	r3, [r3, #12]
 801022e:	b29b      	uxth	r3, r3
 8010230:	4618      	mov	r0, r3
 8010232:	f7f8 ff59 	bl	80090e8 <lwip_htons>
 8010236:	4603      	mov	r3, r0
 8010238:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801023c:	2b00      	cmp	r3, #0
 801023e:	d12e      	bne.n	801029e <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010240:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <tcp_receive+0x970>)
 8010242:	68dc      	ldr	r4, [r3, #12]
 8010244:	4b0e      	ldr	r3, [pc, #56]	; (8010280 <tcp_receive+0x970>)
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	899b      	ldrh	r3, [r3, #12]
 801024a:	b29d      	uxth	r5, r3
 801024c:	2001      	movs	r0, #1
 801024e:	f7f8 ff4b 	bl	80090e8 <lwip_htons>
 8010252:	4603      	mov	r3, r0
 8010254:	432b      	orrs	r3, r5
 8010256:	b29b      	uxth	r3, r3
 8010258:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801025a:	4b09      	ldr	r3, [pc, #36]	; (8010280 <tcp_receive+0x970>)
 801025c:	891c      	ldrh	r4, [r3, #8]
 801025e:	4b08      	ldr	r3, [pc, #32]	; (8010280 <tcp_receive+0x970>)
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7f8 ff3e 	bl	80090e8 <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	f003 0303 	and.w	r3, r3, #3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00e      	beq.n	8010294 <tcp_receive+0x984>
 8010276:	2301      	movs	r3, #1
 8010278:	e00d      	b.n	8010296 <tcp_receive+0x986>
 801027a:	bf00      	nop
 801027c:	20003fac 	.word	0x20003fac
 8010280:	20003f8c 	.word	0x20003f8c
 8010284:	20003fb6 	.word	0x20003fb6
 8010288:	0801743c 	.word	0x0801743c
 801028c:	08017708 	.word	0x08017708
 8010290:	08017480 	.word	0x08017480
 8010294:	2300      	movs	r3, #0
 8010296:	4423      	add	r3, r4
 8010298:	b29a      	uxth	r2, r3
 801029a:	4b95      	ldr	r3, [pc, #596]	; (80104f0 <tcp_receive+0xbe0>)
 801029c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801029e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80102a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102aa:	f7fd fe14 	bl	800ded6 <tcp_seg_free>
            while (next &&
 80102ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d00e      	beq.n	80102d2 <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80102b4:	4b8e      	ldr	r3, [pc, #568]	; (80104f0 <tcp_receive+0xbe0>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	461a      	mov	r2, r3
 80102ba:	4b8e      	ldr	r3, [pc, #568]	; (80104f4 <tcp_receive+0xbe4>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	441a      	add	r2, r3
 80102c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102c8:	8909      	ldrh	r1, [r1, #8]
 80102ca:	440b      	add	r3, r1
 80102cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	da9e      	bge.n	8010210 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80102d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d057      	beq.n	8010388 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 80102d8:	4b85      	ldr	r3, [pc, #532]	; (80104f0 <tcp_receive+0xbe0>)
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	461a      	mov	r2, r3
 80102de:	4b85      	ldr	r3, [pc, #532]	; (80104f4 <tcp_receive+0xbe4>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	441a      	add	r2, r3
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	dd4b      	ble.n	8010388 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80102f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	4b7e      	ldr	r3, [pc, #504]	; (80104f4 <tcp_receive+0xbe4>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	b29a      	uxth	r2, r3
 8010302:	4b7d      	ldr	r3, [pc, #500]	; (80104f8 <tcp_receive+0xbe8>)
 8010304:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010306:	4b7c      	ldr	r3, [pc, #496]	; (80104f8 <tcp_receive+0xbe8>)
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	899b      	ldrh	r3, [r3, #12]
 801030c:	b29b      	uxth	r3, r3
 801030e:	4618      	mov	r0, r3
 8010310:	f7f8 feea 	bl	80090e8 <lwip_htons>
 8010314:	4603      	mov	r3, r0
 8010316:	f003 0302 	and.w	r3, r3, #2
 801031a:	2b00      	cmp	r3, #0
 801031c:	d005      	beq.n	801032a <tcp_receive+0xa1a>
                inseg.len -= 1;
 801031e:	4b76      	ldr	r3, [pc, #472]	; (80104f8 <tcp_receive+0xbe8>)
 8010320:	891b      	ldrh	r3, [r3, #8]
 8010322:	3b01      	subs	r3, #1
 8010324:	b29a      	uxth	r2, r3
 8010326:	4b74      	ldr	r3, [pc, #464]	; (80104f8 <tcp_receive+0xbe8>)
 8010328:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801032a:	4b73      	ldr	r3, [pc, #460]	; (80104f8 <tcp_receive+0xbe8>)
 801032c:	685a      	ldr	r2, [r3, #4]
 801032e:	4b72      	ldr	r3, [pc, #456]	; (80104f8 <tcp_receive+0xbe8>)
 8010330:	891b      	ldrh	r3, [r3, #8]
 8010332:	4619      	mov	r1, r3
 8010334:	4610      	mov	r0, r2
 8010336:	f7fc f975 	bl	800c624 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801033a:	4b6f      	ldr	r3, [pc, #444]	; (80104f8 <tcp_receive+0xbe8>)
 801033c:	891c      	ldrh	r4, [r3, #8]
 801033e:	4b6e      	ldr	r3, [pc, #440]	; (80104f8 <tcp_receive+0xbe8>)
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	899b      	ldrh	r3, [r3, #12]
 8010344:	b29b      	uxth	r3, r3
 8010346:	4618      	mov	r0, r3
 8010348:	f7f8 fece 	bl	80090e8 <lwip_htons>
 801034c:	4603      	mov	r3, r0
 801034e:	f003 0303 	and.w	r3, r3, #3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <tcp_receive+0xa4a>
 8010356:	2301      	movs	r3, #1
 8010358:	e000      	b.n	801035c <tcp_receive+0xa4c>
 801035a:	2300      	movs	r3, #0
 801035c:	4423      	add	r3, r4
 801035e:	b29a      	uxth	r2, r3
 8010360:	4b63      	ldr	r3, [pc, #396]	; (80104f0 <tcp_receive+0xbe0>)
 8010362:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010364:	4b62      	ldr	r3, [pc, #392]	; (80104f0 <tcp_receive+0xbe0>)
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	461a      	mov	r2, r3
 801036a:	4b62      	ldr	r3, [pc, #392]	; (80104f4 <tcp_receive+0xbe4>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	441a      	add	r2, r3
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	429a      	cmp	r2, r3
 8010378:	d006      	beq.n	8010388 <tcp_receive+0xa78>
 801037a:	4b60      	ldr	r3, [pc, #384]	; (80104fc <tcp_receive+0xbec>)
 801037c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010380:	495f      	ldr	r1, [pc, #380]	; (8010500 <tcp_receive+0xbf0>)
 8010382:	4860      	ldr	r0, [pc, #384]	; (8010504 <tcp_receive+0xbf4>)
 8010384:	f004 f95e 	bl	8014644 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801038c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801038e:	4b58      	ldr	r3, [pc, #352]	; (80104f0 <tcp_receive+0xbe0>)
 8010390:	881b      	ldrh	r3, [r3, #0]
 8010392:	461a      	mov	r2, r3
 8010394:	4b57      	ldr	r3, [pc, #348]	; (80104f4 <tcp_receive+0xbe4>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	441a      	add	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103a2:	4b53      	ldr	r3, [pc, #332]	; (80104f0 <tcp_receive+0xbe0>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d206      	bcs.n	80103b8 <tcp_receive+0xaa8>
 80103aa:	4b54      	ldr	r3, [pc, #336]	; (80104fc <tcp_receive+0xbec>)
 80103ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80103b0:	4955      	ldr	r1, [pc, #340]	; (8010508 <tcp_receive+0xbf8>)
 80103b2:	4854      	ldr	r0, [pc, #336]	; (8010504 <tcp_receive+0xbf4>)
 80103b4:	f004 f946 	bl	8014644 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103bc:	4b4c      	ldr	r3, [pc, #304]	; (80104f0 <tcp_receive+0xbe0>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7fd f801 	bl	800d3d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80103ce:	4b4a      	ldr	r3, [pc, #296]	; (80104f8 <tcp_receive+0xbe8>)
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	891b      	ldrh	r3, [r3, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d006      	beq.n	80103e6 <tcp_receive+0xad6>
          recv_data = inseg.p;
 80103d8:	4b47      	ldr	r3, [pc, #284]	; (80104f8 <tcp_receive+0xbe8>)
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	4a4b      	ldr	r2, [pc, #300]	; (801050c <tcp_receive+0xbfc>)
 80103de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80103e0:	4b45      	ldr	r3, [pc, #276]	; (80104f8 <tcp_receive+0xbe8>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80103e6:	4b44      	ldr	r3, [pc, #272]	; (80104f8 <tcp_receive+0xbe8>)
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	899b      	ldrh	r3, [r3, #12]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7f8 fe7a 	bl	80090e8 <lwip_htons>
 80103f4:	4603      	mov	r3, r0
 80103f6:	f003 0301 	and.w	r3, r3, #1
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 80b4 	beq.w	8010568 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010400:	4b43      	ldr	r3, [pc, #268]	; (8010510 <tcp_receive+0xc00>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	f043 0320 	orr.w	r3, r3, #32
 8010408:	b2da      	uxtb	r2, r3
 801040a:	4b41      	ldr	r3, [pc, #260]	; (8010510 <tcp_receive+0xc00>)
 801040c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801040e:	e0ab      	b.n	8010568 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010414:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	4a35      	ldr	r2, [pc, #212]	; (80104f4 <tcp_receive+0xbe4>)
 8010420:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	891b      	ldrh	r3, [r3, #8]
 8010426:	461c      	mov	r4, r3
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	899b      	ldrh	r3, [r3, #12]
 801042e:	b29b      	uxth	r3, r3
 8010430:	4618      	mov	r0, r3
 8010432:	f7f8 fe59 	bl	80090e8 <lwip_htons>
 8010436:	4603      	mov	r3, r0
 8010438:	f003 0303 	and.w	r3, r3, #3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d001      	beq.n	8010444 <tcp_receive+0xb34>
 8010440:	2301      	movs	r3, #1
 8010442:	e000      	b.n	8010446 <tcp_receive+0xb36>
 8010444:	2300      	movs	r3, #0
 8010446:	4423      	add	r3, r4
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801044c:	441a      	add	r2, r3
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010456:	461c      	mov	r4, r3
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	891b      	ldrh	r3, [r3, #8]
 801045c:	461d      	mov	r5, r3
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	899b      	ldrh	r3, [r3, #12]
 8010464:	b29b      	uxth	r3, r3
 8010466:	4618      	mov	r0, r3
 8010468:	f7f8 fe3e 	bl	80090e8 <lwip_htons>
 801046c:	4603      	mov	r3, r0
 801046e:	f003 0303 	and.w	r3, r3, #3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d001      	beq.n	801047a <tcp_receive+0xb6a>
 8010476:	2301      	movs	r3, #1
 8010478:	e000      	b.n	801047c <tcp_receive+0xb6c>
 801047a:	2300      	movs	r3, #0
 801047c:	442b      	add	r3, r5
 801047e:	429c      	cmp	r4, r3
 8010480:	d206      	bcs.n	8010490 <tcp_receive+0xb80>
 8010482:	4b1e      	ldr	r3, [pc, #120]	; (80104fc <tcp_receive+0xbec>)
 8010484:	f240 52de 	movw	r2, #1502	; 0x5de
 8010488:	4922      	ldr	r1, [pc, #136]	; (8010514 <tcp_receive+0xc04>)
 801048a:	481e      	ldr	r0, [pc, #120]	; (8010504 <tcp_receive+0xbf4>)
 801048c:	f004 f8da 	bl	8014644 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	891b      	ldrh	r3, [r3, #8]
 8010494:	461c      	mov	r4, r3
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	899b      	ldrh	r3, [r3, #12]
 801049c:	b29b      	uxth	r3, r3
 801049e:	4618      	mov	r0, r3
 80104a0:	f7f8 fe22 	bl	80090e8 <lwip_htons>
 80104a4:	4603      	mov	r3, r0
 80104a6:	f003 0303 	and.w	r3, r3, #3
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <tcp_receive+0xba2>
 80104ae:	2301      	movs	r3, #1
 80104b0:	e000      	b.n	80104b4 <tcp_receive+0xba4>
 80104b2:	2300      	movs	r3, #0
 80104b4:	18e1      	adds	r1, r4, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80104ba:	b28b      	uxth	r3, r1
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	b29a      	uxth	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7fc ff83 	bl	800d3d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	891b      	ldrh	r3, [r3, #8]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d028      	beq.n	8010526 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80104d4:	4b0d      	ldr	r3, [pc, #52]	; (801050c <tcp_receive+0xbfc>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d01d      	beq.n	8010518 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 80104dc:	4b0b      	ldr	r3, [pc, #44]	; (801050c <tcp_receive+0xbfc>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fc faea 	bl	800cac0 <pbuf_cat>
 80104ec:	e018      	b.n	8010520 <tcp_receive+0xc10>
 80104ee:	bf00      	nop
 80104f0:	20003fb6 	.word	0x20003fb6
 80104f4:	20003fac 	.word	0x20003fac
 80104f8:	20003f8c 	.word	0x20003f8c
 80104fc:	0801743c 	.word	0x0801743c
 8010500:	08017740 	.word	0x08017740
 8010504:	08017480 	.word	0x08017480
 8010508:	0801777c 	.word	0x0801777c
 801050c:	20003fbc 	.word	0x20003fbc
 8010510:	20003fb9 	.word	0x20003fb9
 8010514:	0801779c 	.word	0x0801779c
            } else {
              recv_data = cseg->p;
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	4a71      	ldr	r2, [pc, #452]	; (80106e4 <tcp_receive+0xdd4>)
 801051e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	2200      	movs	r2, #0
 8010524:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	68db      	ldr	r3, [r3, #12]
 801052a:	899b      	ldrh	r3, [r3, #12]
 801052c:	b29b      	uxth	r3, r3
 801052e:	4618      	mov	r0, r3
 8010530:	f7f8 fdda 	bl	80090e8 <lwip_htons>
 8010534:	4603      	mov	r3, r0
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00d      	beq.n	801055a <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801053e:	4b6a      	ldr	r3, [pc, #424]	; (80106e8 <tcp_receive+0xdd8>)
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	f043 0320 	orr.w	r3, r3, #32
 8010546:	b2da      	uxtb	r2, r3
 8010548:	4b67      	ldr	r3, [pc, #412]	; (80106e8 <tcp_receive+0xdd8>)
 801054a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	7d1b      	ldrb	r3, [r3, #20]
 8010550:	2b04      	cmp	r3, #4
 8010552:	d102      	bne.n	801055a <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2207      	movs	r2, #7
 8010558:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8010562:	68b8      	ldr	r0, [r7, #8]
 8010564:	f7fd fcb7 	bl	800ded6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801056c:	2b00      	cmp	r3, #0
 801056e:	d008      	beq.n	8010582 <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	685a      	ldr	r2, [r3, #4]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801057c:	429a      	cmp	r2, r3
 801057e:	f43f af47 	beq.w	8010410 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7e9b      	ldrb	r3, [r3, #26]
 8010586:	f003 0301 	and.w	r3, r3, #1
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00e      	beq.n	80105ac <tcp_receive+0xc9c>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	7e9b      	ldrb	r3, [r3, #26]
 8010592:	f023 0301 	bic.w	r3, r3, #1
 8010596:	b2da      	uxtb	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	769a      	strb	r2, [r3, #26]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	7e9b      	ldrb	r3, [r3, #26]
 80105a0:	f043 0302 	orr.w	r3, r3, #2
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80105aa:	e180      	b.n	80108ae <tcp_receive+0xf9e>
        tcp_ack(pcb);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7e9b      	ldrb	r3, [r3, #26]
 80105b0:	f043 0301 	orr.w	r3, r3, #1
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80105ba:	e178      	b.n	80108ae <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f001 f8c7 	bl	8011750 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d106      	bne.n	80105d8 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80105ca:	4848      	ldr	r0, [pc, #288]	; (80106ec <tcp_receive+0xddc>)
 80105cc:	f7fd fc9b 	bl	800df06 <tcp_seg_copy>
 80105d0:	4602      	mov	r2, r0
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80105d6:	e16a      	b.n	80108ae <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80105d8:	2300      	movs	r3, #0
 80105da:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105e2:	e14f      	b.n	8010884 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 80105e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	4b41      	ldr	r3, [pc, #260]	; (80106f0 <tcp_receive+0xde0>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d11d      	bne.n	801062e <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80105f2:	4b3e      	ldr	r3, [pc, #248]	; (80106ec <tcp_receive+0xddc>)
 80105f4:	891a      	ldrh	r2, [r3, #8]
 80105f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f8:	891b      	ldrh	r3, [r3, #8]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	f240 8147 	bls.w	801088e <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8010600:	483a      	ldr	r0, [pc, #232]	; (80106ec <tcp_receive+0xddc>)
 8010602:	f7fd fc80 	bl	800df06 <tcp_seg_copy>
 8010606:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b00      	cmp	r3, #0
 801060c:	f000 8141 	beq.w	8010892 <tcp_receive+0xf82>
                  if (prev != NULL) {
 8010610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <tcp_receive+0xd0e>
                    prev->next = cseg;
 8010616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	601a      	str	r2, [r3, #0]
 801061c:	e002      	b.n	8010624 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010626:	68b8      	ldr	r0, [r7, #8]
 8010628:	f7ff f8fc 	bl	800f824 <tcp_oos_insert_segment>
                }
                break;
 801062c:	e131      	b.n	8010892 <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010630:	2b00      	cmp	r3, #0
 8010632:	d117      	bne.n	8010664 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010634:	4b2e      	ldr	r3, [pc, #184]	; (80106f0 <tcp_receive+0xde0>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	da57      	bge.n	80106f4 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8010644:	4829      	ldr	r0, [pc, #164]	; (80106ec <tcp_receive+0xddc>)
 8010646:	f7fd fc5e 	bl	800df06 <tcp_seg_copy>
 801064a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	2b00      	cmp	r3, #0
 8010650:	f000 8121 	beq.w	8010896 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	68ba      	ldr	r2, [r7, #8]
 8010658:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801065a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801065c:	68b8      	ldr	r0, [r7, #8]
 801065e:	f7ff f8e1 	bl	800f824 <tcp_oos_insert_segment>
                  }
                  break;
 8010662:	e118      	b.n	8010896 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8010664:	4b22      	ldr	r3, [pc, #136]	; (80106f0 <tcp_receive+0xde0>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	3b01      	subs	r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	db3e      	blt.n	80106f4 <tcp_receive+0xde4>
 8010676:	4b1e      	ldr	r3, [pc, #120]	; (80106f0 <tcp_receive+0xde0>)
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	3301      	adds	r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	dc35      	bgt.n	80106f4 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010688:	4818      	ldr	r0, [pc, #96]	; (80106ec <tcp_receive+0xddc>)
 801068a:	f7fd fc3c 	bl	800df06 <tcp_seg_copy>
 801068e:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	f000 8101 	beq.w	801089a <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106a0:	8912      	ldrh	r2, [r2, #8]
 80106a2:	441a      	add	r2, r3
 80106a4:	4b12      	ldr	r3, [pc, #72]	; (80106f0 <tcp_receive+0xde0>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd12      	ble.n	80106d4 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80106ae:	4b10      	ldr	r3, [pc, #64]	; (80106f0 <tcp_receive+0xde0>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	1ad3      	subs	r3, r2, r3
 80106be:	b29a      	uxth	r2, r3
 80106c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	685a      	ldr	r2, [r3, #4]
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ca:	891b      	ldrh	r3, [r3, #8]
 80106cc:	4619      	mov	r1, r3
 80106ce:	4610      	mov	r0, r2
 80106d0:	f7fb ffa8 	bl	800c624 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80106d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80106da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106dc:	68b8      	ldr	r0, [r7, #8]
 80106de:	f7ff f8a1 	bl	800f824 <tcp_oos_insert_segment>
                  }
                  break;
 80106e2:	e0da      	b.n	801089a <tcp_receive+0xf8a>
 80106e4:	20003fbc 	.word	0x20003fbc
 80106e8:	20003fb9 	.word	0x20003fb9
 80106ec:	20003f8c 	.word	0x20003f8c
 80106f0:	20003fac 	.word	0x20003fac
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f040 80be 	bne.w	801087a <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80106fe:	4b7b      	ldr	r3, [pc, #492]	; (80108ec <tcp_receive+0xfdc>)
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801070a:	2b00      	cmp	r3, #0
 801070c:	f340 80b5 	ble.w	801087a <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	899b      	ldrh	r3, [r3, #12]
 8010716:	b29b      	uxth	r3, r3
 8010718:	4618      	mov	r0, r3
 801071a:	f7f8 fce5 	bl	80090e8 <lwip_htons>
 801071e:	4603      	mov	r3, r0
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	f040 80ba 	bne.w	801089e <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801072a:	4871      	ldr	r0, [pc, #452]	; (80108f0 <tcp_receive+0xfe0>)
 801072c:	f7fd fbeb 	bl	800df06 <tcp_seg_copy>
 8010730:	4602      	mov	r2, r0
 8010732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010734:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 80b1 	beq.w	80108a2 <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010748:	8912      	ldrh	r2, [r2, #8]
 801074a:	441a      	add	r2, r3
 801074c:	4b67      	ldr	r3, [pc, #412]	; (80108ec <tcp_receive+0xfdc>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	dd12      	ble.n	801077c <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010756:	4b65      	ldr	r3, [pc, #404]	; (80108ec <tcp_receive+0xfdc>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	b29a      	uxth	r2, r3
 801075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	b29b      	uxth	r3, r3
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	b29a      	uxth	r2, r3
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	891b      	ldrh	r3, [r3, #8]
 8010774:	4619      	mov	r1, r3
 8010776:	4610      	mov	r0, r2
 8010778:	f7fb ff54 	bl	800c624 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801077c:	4b5d      	ldr	r3, [pc, #372]	; (80108f4 <tcp_receive+0xfe4>)
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	461a      	mov	r2, r3
 8010782:	4b5a      	ldr	r3, [pc, #360]	; (80108ec <tcp_receive+0xfdc>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	441a      	add	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078c:	6879      	ldr	r1, [r7, #4]
 801078e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010790:	440b      	add	r3, r1
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	2b00      	cmp	r3, #0
 8010796:	f340 8084 	ble.w	80108a2 <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f8 fc9f 	bl	80090e8 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	f003 0301 	and.w	r3, r3, #1
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d01d      	beq.n	80107f0 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	68dc      	ldr	r4, [r3, #12]
 80107ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	899b      	ldrh	r3, [r3, #12]
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107c8:	b29d      	uxth	r5, r3
 80107ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	899b      	ldrh	r3, [r3, #12]
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7f8 fc87 	bl	80090e8 <lwip_htons>
 80107da:	4603      	mov	r3, r0
 80107dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f8 fc80 	bl	80090e8 <lwip_htons>
 80107e8:	4603      	mov	r3, r0
 80107ea:	432b      	orrs	r3, r5
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80107f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80107f8:	b291      	uxth	r1, r2
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80107fe:	440a      	add	r2, r1
 8010800:	b291      	uxth	r1, r2
 8010802:	4a3a      	ldr	r2, [pc, #232]	; (80108ec <tcp_receive+0xfdc>)
 8010804:	6812      	ldr	r2, [r2, #0]
 8010806:	b292      	uxth	r2, r2
 8010808:	1a8a      	subs	r2, r1, r2
 801080a:	b292      	uxth	r2, r2
 801080c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	685a      	ldr	r2, [r3, #4]
 8010814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	891b      	ldrh	r3, [r3, #8]
 801081a:	4619      	mov	r1, r3
 801081c:	4610      	mov	r0, r2
 801081e:	f7fb ff01 	bl	800c624 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	891c      	ldrh	r4, [r3, #8]
 8010828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	899b      	ldrh	r3, [r3, #12]
 8010830:	b29b      	uxth	r3, r3
 8010832:	4618      	mov	r0, r3
 8010834:	f7f8 fc58 	bl	80090e8 <lwip_htons>
 8010838:	4603      	mov	r3, r0
 801083a:	f003 0303 	and.w	r3, r3, #3
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <tcp_receive+0xf36>
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <tcp_receive+0xf38>
 8010846:	2300      	movs	r3, #0
 8010848:	4423      	add	r3, r4
 801084a:	b29a      	uxth	r2, r3
 801084c:	4b29      	ldr	r3, [pc, #164]	; (80108f4 <tcp_receive+0xfe4>)
 801084e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <tcp_receive+0xfe4>)
 8010852:	881b      	ldrh	r3, [r3, #0]
 8010854:	461a      	mov	r2, r3
 8010856:	4b25      	ldr	r3, [pc, #148]	; (80108ec <tcp_receive+0xfdc>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	441a      	add	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010864:	440b      	add	r3, r1
 8010866:	429a      	cmp	r2, r3
 8010868:	d01b      	beq.n	80108a2 <tcp_receive+0xf92>
 801086a:	4b23      	ldr	r3, [pc, #140]	; (80108f8 <tcp_receive+0xfe8>)
 801086c:	f240 627b 	movw	r2, #1659	; 0x67b
 8010870:	4922      	ldr	r1, [pc, #136]	; (80108fc <tcp_receive+0xfec>)
 8010872:	4823      	ldr	r0, [pc, #140]	; (8010900 <tcp_receive+0xff0>)
 8010874:	f003 fee6 	bl	8014644 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010878:	e013      	b.n	80108a2 <tcp_receive+0xf92>
              }
            }
            prev = next;
 801087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087c:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010886:	2b00      	cmp	r3, #0
 8010888:	f47f aeac 	bne.w	80105e4 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 801088c:	e00f      	b.n	80108ae <tcp_receive+0xf9e>
                break;
 801088e:	bf00      	nop
 8010890:	e00d      	b.n	80108ae <tcp_receive+0xf9e>
                break;
 8010892:	bf00      	nop
 8010894:	e00b      	b.n	80108ae <tcp_receive+0xf9e>
                  break;
 8010896:	bf00      	nop
 8010898:	e009      	b.n	80108ae <tcp_receive+0xf9e>
                  break;
 801089a:	bf00      	nop
 801089c:	e007      	b.n	80108ae <tcp_receive+0xf9e>
                  break;
 801089e:	bf00      	nop
 80108a0:	e005      	b.n	80108ae <tcp_receive+0xf9e>
                break;
 80108a2:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80108a4:	e003      	b.n	80108ae <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 ff52 	bl	8011750 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80108ac:	e01a      	b.n	80108e4 <tcp_receive+0xfd4>
 80108ae:	e019      	b.n	80108e4 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80108b0:	4b0e      	ldr	r3, [pc, #56]	; (80108ec <tcp_receive+0xfdc>)
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	db0a      	blt.n	80108d4 <tcp_receive+0xfc4>
 80108be:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <tcp_receive+0xfdc>)
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c6:	6879      	ldr	r1, [r7, #4]
 80108c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108ca:	440b      	add	r3, r1
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	3301      	adds	r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dd07      	ble.n	80108e4 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7e9b      	ldrb	r3, [r3, #26]
 80108d8:	f043 0302 	orr.w	r3, r3, #2
 80108dc:	b2da      	uxtb	r2, r3
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80108e2:	e7ff      	b.n	80108e4 <tcp_receive+0xfd4>
 80108e4:	bf00      	nop
 80108e6:	3734      	adds	r7, #52	; 0x34
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ec:	20003fac 	.word	0x20003fac
 80108f0:	20003f8c 	.word	0x20003f8c
 80108f4:	20003fb6 	.word	0x20003fb6
 80108f8:	0801743c 	.word	0x0801743c
 80108fc:	08017708 	.word	0x08017708
 8010900:	08017480 	.word	0x08017480

08010904 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801090a:	4b18      	ldr	r3, [pc, #96]	; (801096c <tcp_getoptbyte+0x68>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d005      	beq.n	801091e <tcp_getoptbyte+0x1a>
 8010912:	4b17      	ldr	r3, [pc, #92]	; (8010970 <tcp_getoptbyte+0x6c>)
 8010914:	881a      	ldrh	r2, [r3, #0]
 8010916:	4b17      	ldr	r3, [pc, #92]	; (8010974 <tcp_getoptbyte+0x70>)
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	429a      	cmp	r2, r3
 801091c:	d20e      	bcs.n	801093c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801091e:	4b16      	ldr	r3, [pc, #88]	; (8010978 <tcp_getoptbyte+0x74>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3314      	adds	r3, #20
 8010924:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8010926:	4b12      	ldr	r3, [pc, #72]	; (8010970 <tcp_getoptbyte+0x6c>)
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	1c5a      	adds	r2, r3, #1
 801092c:	b291      	uxth	r1, r2
 801092e:	4a10      	ldr	r2, [pc, #64]	; (8010970 <tcp_getoptbyte+0x6c>)
 8010930:	8011      	strh	r1, [r2, #0]
 8010932:	461a      	mov	r2, r3
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	4413      	add	r3, r2
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	e010      	b.n	801095e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801093c:	4b0c      	ldr	r3, [pc, #48]	; (8010970 <tcp_getoptbyte+0x6c>)
 801093e:	881b      	ldrh	r3, [r3, #0]
 8010940:	1c5a      	adds	r2, r3, #1
 8010942:	b291      	uxth	r1, r2
 8010944:	4a0a      	ldr	r2, [pc, #40]	; (8010970 <tcp_getoptbyte+0x6c>)
 8010946:	8011      	strh	r1, [r2, #0]
 8010948:	b2da      	uxtb	r2, r3
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <tcp_getoptbyte+0x70>)
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8010954:	4b05      	ldr	r3, [pc, #20]	; (801096c <tcp_getoptbyte+0x68>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	4413      	add	r3, r2
 801095c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801095e:	4618      	mov	r0, r3
 8010960:	370c      	adds	r7, #12
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	20003fa4 	.word	0x20003fa4
 8010970:	20003fa8 	.word	0x20003fa8
 8010974:	20003fa2 	.word	0x20003fa2
 8010978:	20003f9c 	.word	0x20003f9c

0801097c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010984:	4b2d      	ldr	r3, [pc, #180]	; (8010a3c <tcp_parseopt+0xc0>)
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d053      	beq.n	8010a34 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801098c:	4b2c      	ldr	r3, [pc, #176]	; (8010a40 <tcp_parseopt+0xc4>)
 801098e:	2200      	movs	r2, #0
 8010990:	801a      	strh	r2, [r3, #0]
 8010992:	e043      	b.n	8010a1c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8010994:	f7ff ffb6 	bl	8010904 <tcp_getoptbyte>
 8010998:	4603      	mov	r3, r0
 801099a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d03c      	beq.n	8010a1c <tcp_parseopt+0xa0>
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d002      	beq.n	80109ac <tcp_parseopt+0x30>
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d03f      	beq.n	8010a2a <tcp_parseopt+0xae>
 80109aa:	e026      	b.n	80109fa <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80109ac:	f7ff ffaa 	bl	8010904 <tcp_getoptbyte>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b04      	cmp	r3, #4
 80109b4:	d13b      	bne.n	8010a2e <tcp_parseopt+0xb2>
 80109b6:	4b22      	ldr	r3, [pc, #136]	; (8010a40 <tcp_parseopt+0xc4>)
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	3302      	adds	r3, #2
 80109bc:	4a1f      	ldr	r2, [pc, #124]	; (8010a3c <tcp_parseopt+0xc0>)
 80109be:	8812      	ldrh	r2, [r2, #0]
 80109c0:	4293      	cmp	r3, r2
 80109c2:	dc34      	bgt.n	8010a2e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80109c4:	f7ff ff9e 	bl	8010904 <tcp_getoptbyte>
 80109c8:	4603      	mov	r3, r0
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	021b      	lsls	r3, r3, #8
 80109ce:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80109d0:	f7ff ff98 	bl	8010904 <tcp_getoptbyte>
 80109d4:	4603      	mov	r3, r0
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	89bb      	ldrh	r3, [r7, #12]
 80109da:	4313      	orrs	r3, r2
 80109dc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80109de:	89bb      	ldrh	r3, [r7, #12]
 80109e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80109e4:	d804      	bhi.n	80109f0 <tcp_parseopt+0x74>
 80109e6:	89bb      	ldrh	r3, [r7, #12]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <tcp_parseopt+0x74>
 80109ec:	89ba      	ldrh	r2, [r7, #12]
 80109ee:	e001      	b.n	80109f4 <tcp_parseopt+0x78>
 80109f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80109f8:	e010      	b.n	8010a1c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80109fa:	f7ff ff83 	bl	8010904 <tcp_getoptbyte>
 80109fe:	4603      	mov	r3, r0
 8010a00:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8010a02:	7afb      	ldrb	r3, [r7, #11]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d914      	bls.n	8010a32 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010a08:	7afb      	ldrb	r3, [r7, #11]
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	4b0c      	ldr	r3, [pc, #48]	; (8010a40 <tcp_parseopt+0xc4>)
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	4413      	add	r3, r2
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	3b02      	subs	r3, #2
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	4b09      	ldr	r3, [pc, #36]	; (8010a40 <tcp_parseopt+0xc4>)
 8010a1a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010a1c:	4b08      	ldr	r3, [pc, #32]	; (8010a40 <tcp_parseopt+0xc4>)
 8010a1e:	881a      	ldrh	r2, [r3, #0]
 8010a20:	4b06      	ldr	r3, [pc, #24]	; (8010a3c <tcp_parseopt+0xc0>)
 8010a22:	881b      	ldrh	r3, [r3, #0]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d3b5      	bcc.n	8010994 <tcp_parseopt+0x18>
 8010a28:	e004      	b.n	8010a34 <tcp_parseopt+0xb8>
        return;
 8010a2a:	bf00      	nop
 8010a2c:	e002      	b.n	8010a34 <tcp_parseopt+0xb8>
          return;
 8010a2e:	bf00      	nop
 8010a30:	e000      	b.n	8010a34 <tcp_parseopt+0xb8>
          return;
 8010a32:	bf00      	nop
      }
    }
  }
}
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	20003fa0 	.word	0x20003fa0
 8010a40:	20003fa8 	.word	0x20003fa8

08010a44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010a44:	b480      	push	{r7}
 8010a46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010a48:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <tcp_trigger_input_pcb_close+0x1c>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f043 0310 	orr.w	r3, r3, #16
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <tcp_trigger_input_pcb_close+0x1c>)
 8010a54:	701a      	strb	r2, [r3, #0]
}
 8010a56:	bf00      	nop
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr
 8010a60:	20003fb9 	.word	0x20003fb9

08010a64 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b086      	sub	sp, #24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	607b      	str	r3, [r7, #4]
 8010a6e:	460b      	mov	r3, r1
 8010a70:	817b      	strh	r3, [r7, #10]
 8010a72:	4613      	mov	r3, r2
 8010a74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010a76:	897a      	ldrh	r2, [r7, #10]
 8010a78:	893b      	ldrh	r3, [r7, #8]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3314      	adds	r3, #20
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	2200      	movs	r2, #0
 8010a84:	4619      	mov	r1, r3
 8010a86:	2001      	movs	r0, #1
 8010a88:	f7fb fbce 	bl	800c228 <pbuf_alloc>
 8010a8c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d057      	beq.n	8010b44 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	895b      	ldrh	r3, [r3, #10]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	897b      	ldrh	r3, [r7, #10]
 8010a9c:	3314      	adds	r3, #20
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	da05      	bge.n	8010aae <tcp_output_alloc_header+0x4a>
 8010aa2:	4b2b      	ldr	r3, [pc, #172]	; (8010b50 <tcp_output_alloc_header+0xec>)
 8010aa4:	2273      	movs	r2, #115	; 0x73
 8010aa6:	492b      	ldr	r1, [pc, #172]	; (8010b54 <tcp_output_alloc_header+0xf0>)
 8010aa8:	482b      	ldr	r0, [pc, #172]	; (8010b58 <tcp_output_alloc_header+0xf4>)
 8010aaa:	f003 fdcb 	bl	8014644 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	8adb      	ldrh	r3, [r3, #22]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f8 fb15 	bl	80090e8 <lwip_htons>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	8b1b      	ldrh	r3, [r3, #24]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f8 fb0c 	bl	80090e8 <lwip_htons>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f8 fb0e 	bl	8009104 <lwip_htonl>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010aee:	897b      	ldrh	r3, [r7, #10]
 8010af0:	089b      	lsrs	r3, r3, #2
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	3305      	adds	r3, #5
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	031b      	lsls	r3, r3, #12
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	f043 0310 	orr.w	r3, r3, #16
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7f8 faf0 	bl	80090e8 <lwip_htons>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7f8 fae7 	bl	80090e8 <lwip_htons>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	2200      	movs	r2, #0
 8010b26:	741a      	strb	r2, [r3, #16]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010b2c:	693b      	ldr	r3, [r7, #16]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	749a      	strb	r2, [r3, #18]
 8010b32:	2200      	movs	r2, #0
 8010b34:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3a:	68fa      	ldr	r2, [r7, #12]
 8010b3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b3e:	441a      	add	r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010b44:	697b      	ldr	r3, [r7, #20]
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3718      	adds	r7, #24
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	080177c4 	.word	0x080177c4
 8010b54:	080177f8 	.word	0x080177f8
 8010b58:	08017828 	.word	0x08017828

08010b5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010b5c:	b5b0      	push	{r4, r5, r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d02c      	beq.n	8010bc6 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b70:	60fb      	str	r3, [r7, #12]
 8010b72:	e002      	b.n	8010b7a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d1f8      	bne.n	8010b74 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	899b      	ldrh	r3, [r3, #12]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f8 faac 	bl	80090e8 <lwip_htons>
 8010b90:	4603      	mov	r3, r0
 8010b92:	f003 0307 	and.w	r3, r3, #7
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d115      	bne.n	8010bc6 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	68dc      	ldr	r4, [r3, #12]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	899b      	ldrh	r3, [r3, #12]
 8010ba4:	b29d      	uxth	r5, r3
 8010ba6:	2001      	movs	r0, #1
 8010ba8:	f7f8 fa9e 	bl	80090e8 <lwip_htons>
 8010bac:	4603      	mov	r3, r0
 8010bae:	432b      	orrs	r3, r5
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	7e9b      	ldrb	r3, [r3, #26]
 8010bb8:	f043 0320 	orr.w	r3, r3, #32
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e004      	b.n	8010bd0 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010bc6:	2101      	movs	r1, #1
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 fcc3 	bl	8011554 <tcp_enqueue_flags>
 8010bce:	4603      	mov	r3, r0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3710      	adds	r7, #16
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bdb0      	pop	{r4, r5, r7, pc}

08010bd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010bd8:	b590      	push	{r4, r7, lr}
 8010bda:	b087      	sub	sp, #28
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	4613      	mov	r3, r2
 8010be6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010be8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bec:	f003 0301 	and.w	r3, r3, #1
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d001      	beq.n	8010bf8 <tcp_create_segment+0x20>
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	e000      	b.n	8010bfa <tcp_create_segment+0x22>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010bfc:	2003      	movs	r0, #3
 8010bfe:	f7fb f8d9 	bl	800bdb4 <memp_malloc>
 8010c02:	6138      	str	r0, [r7, #16]
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d104      	bne.n	8010c14 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010c0a:	68b8      	ldr	r0, [r7, #8]
 8010c0c:	f7fb fe7e 	bl	800c90c <pbuf_free>
    return NULL;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e061      	b.n	8010cd8 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010c1a:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	891a      	ldrh	r2, [r3, #8]
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d205      	bcs.n	8010c40 <tcp_create_segment+0x68>
 8010c34:	4b2a      	ldr	r3, [pc, #168]	; (8010ce0 <tcp_create_segment+0x108>)
 8010c36:	22ba      	movs	r2, #186	; 0xba
 8010c38:	492a      	ldr	r1, [pc, #168]	; (8010ce4 <tcp_create_segment+0x10c>)
 8010c3a:	482b      	ldr	r0, [pc, #172]	; (8010ce8 <tcp_create_segment+0x110>)
 8010c3c:	f003 fd02 	bl	8014644 <iprintf>
  seg->len = p->tot_len - optlen;
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	891a      	ldrh	r2, [r3, #8]
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010c50:	2114      	movs	r1, #20
 8010c52:	68b8      	ldr	r0, [r7, #8]
 8010c54:	f7fb fe36 	bl	800c8c4 <pbuf_header>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d004      	beq.n	8010c68 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010c5e:	6938      	ldr	r0, [r7, #16]
 8010c60:	f7fd f939 	bl	800ded6 <tcp_seg_free>
    return NULL;
 8010c64:	2300      	movs	r3, #0
 8010c66:	e037      	b.n	8010cd8 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	685a      	ldr	r2, [r3, #4]
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	68dc      	ldr	r4, [r3, #12]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	8adb      	ldrh	r3, [r3, #22]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7f8 fa34 	bl	80090e8 <lwip_htons>
 8010c80:	4603      	mov	r3, r0
 8010c82:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	68dc      	ldr	r4, [r3, #12]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	8b1b      	ldrh	r3, [r3, #24]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f8 fa2b 	bl	80090e8 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	68dc      	ldr	r4, [r3, #12]
 8010c9a:	6838      	ldr	r0, [r7, #0]
 8010c9c:	f7f8 fa32 	bl	8009104 <lwip_htonl>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	68dc      	ldr	r4, [r3, #12]
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
 8010caa:	089b      	lsrs	r3, r3, #2
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	3305      	adds	r3, #5
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	031b      	lsls	r3, r3, #12
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	4313      	orrs	r3, r2
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7f8 fa11 	bl	80090e8 <lwip_htons>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	749a      	strb	r2, [r3, #18]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	74da      	strb	r2, [r3, #19]
  return seg;
 8010cd6:	693b      	ldr	r3, [r7, #16]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	371c      	adds	r7, #28
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd90      	pop	{r4, r7, pc}
 8010ce0:	080177c4 	.word	0x080177c4
 8010ce4:	08017850 	.word	0x08017850
 8010ce8:	08017828 	.word	0x08017828

08010cec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	607b      	str	r3, [r7, #4]
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	73fb      	strb	r3, [r7, #15]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	81bb      	strh	r3, [r7, #12]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010d00:	89bb      	ldrh	r3, [r7, #12]
 8010d02:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010d04:	89ba      	ldrh	r2, [r7, #12]
 8010d06:	897b      	ldrh	r3, [r7, #10]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d221      	bcs.n	8010d50 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d10:	f003 0302 	and.w	r3, r3, #2
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d111      	bne.n	8010d3c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010d18:	6a3b      	ldr	r3, [r7, #32]
 8010d1a:	7e9b      	ldrb	r3, [r3, #26]
 8010d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d115      	bne.n	8010d50 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8010d24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d007      	beq.n	8010d3c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d103      	bne.n	8010d3c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8010d34:	6a3b      	ldr	r3, [r7, #32]
 8010d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d009      	beq.n	8010d50 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010d3c:	89bb      	ldrh	r3, [r7, #12]
 8010d3e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010d42:	f023 0203 	bic.w	r2, r3, #3
 8010d46:	897b      	ldrh	r3, [r7, #10]
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	bf28      	it	cs
 8010d4c:	4613      	movcs	r3, r2
 8010d4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010d50:	8af9      	ldrh	r1, [r7, #22]
 8010d52:	7bfb      	ldrb	r3, [r7, #15]
 8010d54:	2200      	movs	r2, #0
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fb fa66 	bl	800c228 <pbuf_alloc>
 8010d5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d101      	bne.n	8010d68 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8010d64:	2300      	movs	r3, #0
 8010d66:	e019      	b.n	8010d9c <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d006      	beq.n	8010d7e <tcp_pbuf_prealloc+0x92>
 8010d70:	4b0c      	ldr	r3, [pc, #48]	; (8010da4 <tcp_pbuf_prealloc+0xb8>)
 8010d72:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010d76:	490c      	ldr	r1, [pc, #48]	; (8010da8 <tcp_pbuf_prealloc+0xbc>)
 8010d78:	480c      	ldr	r0, [pc, #48]	; (8010dac <tcp_pbuf_prealloc+0xc0>)
 8010d7a:	f003 fc63 	bl	8014644 <iprintf>
  *oversize = p->len - length;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	895a      	ldrh	r2, [r3, #10]
 8010d82:	89bb      	ldrh	r3, [r7, #12]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	89ba      	ldrh	r2, [r7, #12]
 8010d90:	811a      	strh	r2, [r3, #8]
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	891a      	ldrh	r2, [r3, #8]
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	815a      	strh	r2, [r3, #10]
  return p;
 8010d9a:	693b      	ldr	r3, [r7, #16]
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3718      	adds	r7, #24
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	080177c4 	.word	0x080177c4
 8010da8:	08017868 	.word	0x08017868
 8010dac:	08017828 	.word	0x08017828

08010db0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	460b      	mov	r3, r1
 8010dba:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	7d1b      	ldrb	r3, [r3, #20]
 8010dc0:	2b04      	cmp	r3, #4
 8010dc2:	d00e      	beq.n	8010de2 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010dc8:	2b07      	cmp	r3, #7
 8010dca:	d00a      	beq.n	8010de2 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	d006      	beq.n	8010de2 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010dd8:	2b03      	cmp	r3, #3
 8010dda:	d002      	beq.n	8010de2 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010ddc:	f06f 030a 	mvn.w	r3, #10
 8010de0:	e04f      	b.n	8010e82 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8010de2:	887b      	ldrh	r3, [r7, #2]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d101      	bne.n	8010dec <tcp_write_checks+0x3c>
    return ERR_OK;
 8010de8:	2300      	movs	r3, #0
 8010dea:	e04a      	b.n	8010e82 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010df2:	887a      	ldrh	r2, [r7, #2]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d909      	bls.n	8010e0c <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	7e9b      	ldrb	r3, [r3, #26]
 8010dfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e0a:	e03a      	b.n	8010e82 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e12:	2b08      	cmp	r3, #8
 8010e14:	d806      	bhi.n	8010e24 <tcp_write_checks+0x74>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e1c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d909      	bls.n	8010e38 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	7e9b      	ldrb	r3, [r3, #26]
 8010e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e36:	e024      	b.n	8010e82 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00f      	beq.n	8010e62 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d11a      	bne.n	8010e80 <tcp_write_checks+0xd0>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d116      	bne.n	8010e80 <tcp_write_checks+0xd0>
 8010e52:	4b0e      	ldr	r3, [pc, #56]	; (8010e8c <tcp_write_checks+0xdc>)
 8010e54:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010e58:	490d      	ldr	r1, [pc, #52]	; (8010e90 <tcp_write_checks+0xe0>)
 8010e5a:	480e      	ldr	r0, [pc, #56]	; (8010e94 <tcp_write_checks+0xe4>)
 8010e5c:	f003 fbf2 	bl	8014644 <iprintf>
 8010e60:	e00e      	b.n	8010e80 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d103      	bne.n	8010e72 <tcp_write_checks+0xc2>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d006      	beq.n	8010e80 <tcp_write_checks+0xd0>
 8010e72:	4b06      	ldr	r3, [pc, #24]	; (8010e8c <tcp_write_checks+0xdc>)
 8010e74:	f240 1259 	movw	r2, #345	; 0x159
 8010e78:	4907      	ldr	r1, [pc, #28]	; (8010e98 <tcp_write_checks+0xe8>)
 8010e7a:	4806      	ldr	r0, [pc, #24]	; (8010e94 <tcp_write_checks+0xe4>)
 8010e7c:	f003 fbe2 	bl	8014644 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3708      	adds	r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	080177c4 	.word	0x080177c4
 8010e90:	0801787c 	.word	0x0801787c
 8010e94:	08017828 	.word	0x08017828
 8010e98:	080178b8 	.word	0x080178b8

08010e9c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010e9c:	b5b0      	push	{r4, r5, r7, lr}
 8010e9e:	b09a      	sub	sp, #104	; 0x68
 8010ea0:	af04      	add	r7, sp, #16
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	4611      	mov	r1, r2
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	460b      	mov	r3, r1
 8010eac:	80fb      	strh	r3, [r7, #6]
 8010eae:	4613      	mov	r3, r2
 8010eb0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8010eba:	2300      	movs	r3, #0
 8010ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010edc:	2300      	movs	r3, #0
 8010ede:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010eea:	085b      	lsrs	r3, r3, #1
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	bf28      	it	cs
 8010ef6:	4613      	movcs	r3, r2
 8010ef8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d102      	bne.n	8010f06 <tcp_write+0x6a>
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f04:	e000      	b.n	8010f08 <tcp_write+0x6c>
 8010f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f08:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d109      	bne.n	8010f24 <tcp_write+0x88>
 8010f10:	4b94      	ldr	r3, [pc, #592]	; (8011164 <tcp_write+0x2c8>)
 8010f12:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8010f16:	4994      	ldr	r1, [pc, #592]	; (8011168 <tcp_write+0x2cc>)
 8010f18:	4894      	ldr	r0, [pc, #592]	; (801116c <tcp_write+0x2d0>)
 8010f1a:	f003 fb93 	bl	8014644 <iprintf>
 8010f1e:	f06f 030f 	mvn.w	r3, #15
 8010f22:	e30d      	b.n	8011540 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010f24:	88fb      	ldrh	r3, [r7, #6]
 8010f26:	4619      	mov	r1, r3
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f7ff ff41 	bl	8010db0 <tcp_write_checks>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010f34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d002      	beq.n	8010f42 <tcp_write+0xa6>
    return err;
 8010f3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f40:	e2fe      	b.n	8011540 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010f48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 80f8 	beq.w	8011146 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8010f5c:	e002      	b.n	8010f64 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1f8      	bne.n	8010f5e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f6e:	7a9b      	ldrb	r3, [r3, #10]
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <tcp_write+0xe0>
 8010f78:	2304      	movs	r3, #4
 8010f7a:	e000      	b.n	8010f7e <tcp_write+0xe2>
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010f80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	4619      	mov	r1, r3
 8010f88:	8c3b      	ldrh	r3, [r7, #32]
 8010f8a:	440b      	add	r3, r1
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	da06      	bge.n	8010f9e <tcp_write+0x102>
 8010f90:	4b74      	ldr	r3, [pc, #464]	; (8011164 <tcp_write+0x2c8>)
 8010f92:	f240 12c7 	movw	r2, #455	; 0x1c7
 8010f96:	4976      	ldr	r1, [pc, #472]	; (8011170 <tcp_write+0x2d4>)
 8010f98:	4874      	ldr	r0, [pc, #464]	; (801116c <tcp_write+0x2d0>)
 8010f9a:	f003 fb53 	bl	8014644 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa0:	891a      	ldrh	r2, [r3, #8]
 8010fa2:	8c3b      	ldrh	r3, [r7, #32]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010fb4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010fb6:	8a7b      	ldrh	r3, [r7, #18]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d027      	beq.n	801100c <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010fbc:	8a7b      	ldrh	r3, [r7, #18]
 8010fbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d206      	bcs.n	8010fd2 <tcp_write+0x136>
 8010fc4:	4b67      	ldr	r3, [pc, #412]	; (8011164 <tcp_write+0x2c8>)
 8010fc6:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010fca:	496a      	ldr	r1, [pc, #424]	; (8011174 <tcp_write+0x2d8>)
 8010fcc:	4867      	ldr	r0, [pc, #412]	; (801116c <tcp_write+0x2d0>)
 8010fce:	f003 fb39 	bl	8014644 <iprintf>
      seg = last_unsent;
 8010fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010fd6:	8a7b      	ldrh	r3, [r7, #18]
 8010fd8:	88fa      	ldrh	r2, [r7, #6]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d901      	bls.n	8010fe2 <tcp_write+0x146>
 8010fde:	8a7b      	ldrh	r3, [r7, #18]
 8010fe0:	e000      	b.n	8010fe4 <tcp_write+0x148>
 8010fe2:	88fb      	ldrh	r3, [r7, #6]
 8010fe4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	bfa8      	it	ge
 8010fea:	4613      	movge	r3, r2
 8010fec:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010fee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ff2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ff4:	4413      	add	r3, r2
 8010ff6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010ffa:	8a7a      	ldrh	r2, [r7, #18]
 8010ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	b29b      	uxth	r3, r3
 8011002:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011004:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011006:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801100c:	8a7b      	ldrh	r3, [r7, #18]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00b      	beq.n	801102a <tcp_write+0x18e>
 8011012:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011016:	88fb      	ldrh	r3, [r7, #6]
 8011018:	429a      	cmp	r2, r3
 801101a:	d006      	beq.n	801102a <tcp_write+0x18e>
 801101c:	4b51      	ldr	r3, [pc, #324]	; (8011164 <tcp_write+0x2c8>)
 801101e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011022:	4955      	ldr	r1, [pc, #340]	; (8011178 <tcp_write+0x2dc>)
 8011024:	4851      	ldr	r0, [pc, #324]	; (801116c <tcp_write+0x2d0>)
 8011026:	f003 fb0d 	bl	8014644 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801102a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801102e:	88fb      	ldrh	r3, [r7, #6]
 8011030:	429a      	cmp	r2, r3
 8011032:	f080 8169 	bcs.w	8011308 <tcp_write+0x46c>
 8011036:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 8165 	beq.w	8011308 <tcp_write+0x46c>
 801103e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011040:	891b      	ldrh	r3, [r3, #8]
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 8160 	beq.w	8011308 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011048:	88fa      	ldrh	r2, [r7, #6]
 801104a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801104e:	1ad2      	subs	r2, r2, r3
 8011050:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011052:	4293      	cmp	r3, r2
 8011054:	bfa8      	it	ge
 8011056:	4613      	movge	r3, r2
 8011058:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801105a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801105c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801105e:	797b      	ldrb	r3, [r7, #5]
 8011060:	f003 0301 	and.w	r3, r3, #1
 8011064:	2b00      	cmp	r3, #0
 8011066:	d027      	beq.n	80110b8 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011068:	f107 0012 	add.w	r0, r7, #18
 801106c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801106e:	8bf9      	ldrh	r1, [r7, #30]
 8011070:	2301      	movs	r3, #1
 8011072:	9302      	str	r3, [sp, #8]
 8011074:	797b      	ldrb	r3, [r7, #5]
 8011076:	9301      	str	r3, [sp, #4]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	4603      	mov	r3, r0
 801107e:	2004      	movs	r0, #4
 8011080:	f7ff fe34 	bl	8010cec <tcp_pbuf_prealloc>
 8011084:	6578      	str	r0, [r7, #84]	; 0x54
 8011086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011088:	2b00      	cmp	r3, #0
 801108a:	f000 8227 	beq.w	80114dc <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801108e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011090:	6858      	ldr	r0, [r3, #4]
 8011092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	4413      	add	r3, r2
 801109a:	8bfa      	ldrh	r2, [r7, #30]
 801109c:	4619      	mov	r1, r3
 801109e:	f003 fabe 	bl	801461e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80110a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80110a4:	f7fb fccc 	bl	800ca40 <pbuf_clen>
 80110a8:	4603      	mov	r3, r0
 80110aa:	461a      	mov	r2, r3
 80110ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80110b0:	4413      	add	r3, r2
 80110b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80110b6:	e03f      	b.n	8011138 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80110b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	637b      	str	r3, [r7, #52]	; 0x34
 80110be:	e002      	b.n	80110c6 <tcp_write+0x22a>
 80110c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	637b      	str	r3, [r7, #52]	; 0x34
 80110c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1f8      	bne.n	80110c0 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80110ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d0:	7b1b      	ldrb	r3, [r3, #12]
 80110d2:	2b01      	cmp	r3, #1
 80110d4:	d115      	bne.n	8011102 <tcp_write+0x266>
 80110d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110dc:	8952      	ldrh	r2, [r2, #10]
 80110de:	441a      	add	r2, r3
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d10d      	bne.n	8011102 <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80110e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d006      	beq.n	80110fc <tcp_write+0x260>
 80110ee:	4b1d      	ldr	r3, [pc, #116]	; (8011164 <tcp_write+0x2c8>)
 80110f0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80110f4:	4921      	ldr	r1, [pc, #132]	; (801117c <tcp_write+0x2e0>)
 80110f6:	481d      	ldr	r0, [pc, #116]	; (801116c <tcp_write+0x2d0>)
 80110f8:	f003 faa4 	bl	8014644 <iprintf>
          extendlen = seglen;
 80110fc:	8bfb      	ldrh	r3, [r7, #30]
 80110fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011100:	e01a      	b.n	8011138 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011102:	8bfb      	ldrh	r3, [r7, #30]
 8011104:	2201      	movs	r2, #1
 8011106:	4619      	mov	r1, r3
 8011108:	2004      	movs	r0, #4
 801110a:	f7fb f88d 	bl	800c228 <pbuf_alloc>
 801110e:	6578      	str	r0, [r7, #84]	; 0x54
 8011110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011112:	2b00      	cmp	r3, #0
 8011114:	f000 81e4 	beq.w	80114e0 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801111c:	68ba      	ldr	r2, [r7, #8]
 801111e:	441a      	add	r2, r3
 8011120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011122:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011124:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011126:	f7fb fc8b 	bl	800ca40 <pbuf_clen>
 801112a:	4603      	mov	r3, r0
 801112c:	461a      	mov	r2, r3
 801112e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011132:	4413      	add	r3, r2
 8011134:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801113c:	8bfb      	ldrh	r3, [r7, #30]
 801113e:	4413      	add	r3, r2
 8011140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011144:	e0e0      	b.n	8011308 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 80db 	beq.w	8011308 <tcp_write+0x46c>
 8011152:	4b04      	ldr	r3, [pc, #16]	; (8011164 <tcp_write+0x2c8>)
 8011154:	f240 2225 	movw	r2, #549	; 0x225
 8011158:	4909      	ldr	r1, [pc, #36]	; (8011180 <tcp_write+0x2e4>)
 801115a:	4804      	ldr	r0, [pc, #16]	; (801116c <tcp_write+0x2d0>)
 801115c:	f003 fa72 	bl	8014644 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011160:	e0d2      	b.n	8011308 <tcp_write+0x46c>
 8011162:	bf00      	nop
 8011164:	080177c4 	.word	0x080177c4
 8011168:	080178ec 	.word	0x080178ec
 801116c:	08017828 	.word	0x08017828
 8011170:	08017920 	.word	0x08017920
 8011174:	08017938 	.word	0x08017938
 8011178:	08017958 	.word	0x08017958
 801117c:	08017978 	.word	0x08017978
 8011180:	080179a4 	.word	0x080179a4
    struct pbuf *p;
    u16_t left = len - pos;
 8011184:	88fa      	ldrh	r2, [r7, #6]
 8011186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801118e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011192:	b29b      	uxth	r3, r3
 8011194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011196:	1ad3      	subs	r3, r2, r3
 8011198:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801119a:	8b7a      	ldrh	r2, [r7, #26]
 801119c:	8bbb      	ldrh	r3, [r7, #28]
 801119e:	4293      	cmp	r3, r2
 80111a0:	bf28      	it	cs
 80111a2:	4613      	movcs	r3, r2
 80111a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80111a6:	797b      	ldrb	r3, [r7, #5]
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d036      	beq.n	801121e <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80111b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	8b3b      	ldrh	r3, [r7, #24]
 80111b8:	4413      	add	r3, r2
 80111ba:	b299      	uxth	r1, r3
 80111bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bf0c      	ite	eq
 80111c2:	2301      	moveq	r3, #1
 80111c4:	2300      	movne	r3, #0
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	f107 0012 	add.w	r0, r7, #18
 80111cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111ce:	9302      	str	r3, [sp, #8]
 80111d0:	797b      	ldrb	r3, [r7, #5]
 80111d2:	9301      	str	r3, [sp, #4]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	4603      	mov	r3, r0
 80111da:	2000      	movs	r0, #0
 80111dc:	f7ff fd86 	bl	8010cec <tcp_pbuf_prealloc>
 80111e0:	6338      	str	r0, [r7, #48]	; 0x30
 80111e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 817d 	beq.w	80114e4 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80111ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ec:	895b      	ldrh	r3, [r3, #10]
 80111ee:	8b3a      	ldrh	r2, [r7, #24]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d906      	bls.n	8011202 <tcp_write+0x366>
 80111f4:	4b8f      	ldr	r3, [pc, #572]	; (8011434 <tcp_write+0x598>)
 80111f6:	f240 2241 	movw	r2, #577	; 0x241
 80111fa:	498f      	ldr	r1, [pc, #572]	; (8011438 <tcp_write+0x59c>)
 80111fc:	488f      	ldr	r0, [pc, #572]	; (801143c <tcp_write+0x5a0>)
 80111fe:	f003 fa21 	bl	8014644 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	685a      	ldr	r2, [r3, #4]
 8011206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801120a:	18d0      	adds	r0, r2, r3
 801120c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	4413      	add	r3, r2
 8011214:	8b3a      	ldrh	r2, [r7, #24]
 8011216:	4619      	mov	r1, r3
 8011218:	f003 fa01 	bl	801461e <memcpy>
 801121c:	e02e      	b.n	801127c <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801121e:	8a7b      	ldrh	r3, [r7, #18]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d006      	beq.n	8011232 <tcp_write+0x396>
 8011224:	4b83      	ldr	r3, [pc, #524]	; (8011434 <tcp_write+0x598>)
 8011226:	f240 224b 	movw	r2, #587	; 0x24b
 801122a:	4985      	ldr	r1, [pc, #532]	; (8011440 <tcp_write+0x5a4>)
 801122c:	4883      	ldr	r0, [pc, #524]	; (801143c <tcp_write+0x5a0>)
 801122e:	f003 fa09 	bl	8014644 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011232:	8b3b      	ldrh	r3, [r7, #24]
 8011234:	2201      	movs	r2, #1
 8011236:	4619      	mov	r1, r3
 8011238:	2000      	movs	r0, #0
 801123a:	f7fa fff5 	bl	800c228 <pbuf_alloc>
 801123e:	6178      	str	r0, [r7, #20]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	2b00      	cmp	r3, #0
 8011244:	f000 8150 	beq.w	80114e8 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	441a      	add	r2, r3
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011258:	b29b      	uxth	r3, r3
 801125a:	2200      	movs	r2, #0
 801125c:	4619      	mov	r1, r3
 801125e:	2000      	movs	r0, #0
 8011260:	f7fa ffe2 	bl	800c228 <pbuf_alloc>
 8011264:	6338      	str	r0, [r7, #48]	; 0x30
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	2b00      	cmp	r3, #0
 801126a:	d103      	bne.n	8011274 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801126c:	6978      	ldr	r0, [r7, #20]
 801126e:	f7fb fb4d 	bl	800c90c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011272:	e13c      	b.n	80114ee <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011274:	6979      	ldr	r1, [r7, #20]
 8011276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011278:	f7fb fc22 	bl	800cac0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801127c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801127e:	f7fb fbdf 	bl	800ca40 <pbuf_clen>
 8011282:	4603      	mov	r3, r0
 8011284:	461a      	mov	r2, r3
 8011286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801128a:	4413      	add	r3, r2
 801128c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011294:	2b09      	cmp	r3, #9
 8011296:	d805      	bhi.n	80112a4 <tcp_write+0x408>
 8011298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801129c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d903      	bls.n	80112ac <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80112a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a6:	f7fb fb31 	bl	800c90c <pbuf_free>
      goto memerr;
 80112aa:	e120      	b.n	80114ee <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112b4:	441a      	add	r2, r3
 80112b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	4613      	mov	r3, r2
 80112be:	2200      	movs	r2, #0
 80112c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f7ff fc88 	bl	8010bd8 <tcp_create_segment>
 80112c8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80112ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f000 810d 	beq.w	80114ec <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80112d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d102      	bne.n	80112de <tcp_write+0x442>
      queue = seg;
 80112d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112da:	647b      	str	r3, [r7, #68]	; 0x44
 80112dc:	e00c      	b.n	80112f8 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80112de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d106      	bne.n	80112f2 <tcp_write+0x456>
 80112e4:	4b53      	ldr	r3, [pc, #332]	; (8011434 <tcp_write+0x598>)
 80112e6:	f240 2285 	movw	r2, #645	; 0x285
 80112ea:	4956      	ldr	r1, [pc, #344]	; (8011444 <tcp_write+0x5a8>)
 80112ec:	4853      	ldr	r0, [pc, #332]	; (801143c <tcp_write+0x5a0>)
 80112ee:	f003 f9a9 	bl	8014644 <iprintf>
      prev_seg->next = seg;
 80112f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112f6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80112f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112fa:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80112fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011300:	8b3b      	ldrh	r3, [r7, #24]
 8011302:	4413      	add	r3, r2
 8011304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801130c:	88fb      	ldrh	r3, [r7, #6]
 801130e:	429a      	cmp	r2, r3
 8011310:	f4ff af38 	bcc.w	8011184 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011316:	2b00      	cmp	r3, #0
 8011318:	d02c      	beq.n	8011374 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801131a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011320:	e01e      	b.n	8011360 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	891a      	ldrh	r2, [r3, #8]
 8011326:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011328:	4413      	add	r3, r2
 801132a:	b29a      	uxth	r2, r3
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d110      	bne.n	801135a <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801133e:	8952      	ldrh	r2, [r2, #10]
 8011340:	4413      	add	r3, r2
 8011342:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	4618      	mov	r0, r3
 8011348:	f003 f969 	bl	801461e <memcpy>
        p->len += oversize_used;
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	895a      	ldrh	r2, [r3, #10]
 8011350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011352:	4413      	add	r3, r2
 8011354:	b29a      	uxth	r2, r3
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011362:	2b00      	cmp	r3, #0
 8011364:	d1dd      	bne.n	8011322 <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8011366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011368:	891a      	ldrh	r2, [r3, #8]
 801136a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801136c:	4413      	add	r3, r2
 801136e:	b29a      	uxth	r2, r3
 8011370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011372:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011374:	8a7a      	ldrh	r2, [r7, #18]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801137c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801137e:	2b00      	cmp	r3, #0
 8011380:	d018      	beq.n	80113b4 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011384:	2b00      	cmp	r3, #0
 8011386:	d106      	bne.n	8011396 <tcp_write+0x4fa>
 8011388:	4b2a      	ldr	r3, [pc, #168]	; (8011434 <tcp_write+0x598>)
 801138a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801138e:	492e      	ldr	r1, [pc, #184]	; (8011448 <tcp_write+0x5ac>)
 8011390:	482a      	ldr	r0, [pc, #168]	; (801143c <tcp_write+0x5a0>)
 8011392:	f003 f957 	bl	8014644 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801139c:	4618      	mov	r0, r3
 801139e:	f7fb fb8f 	bl	800cac0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80113a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a4:	891a      	ldrh	r2, [r3, #8]
 80113a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113a8:	891b      	ldrh	r3, [r3, #8]
 80113aa:	4413      	add	r3, r2
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113b0:	811a      	strh	r2, [r3, #8]
 80113b2:	e037      	b.n	8011424 <tcp_write+0x588>
  } else if (extendlen > 0) {
 80113b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d034      	beq.n	8011424 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80113ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d003      	beq.n	80113c8 <tcp_write+0x52c>
 80113c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d106      	bne.n	80113d6 <tcp_write+0x53a>
 80113c8:	4b1a      	ldr	r3, [pc, #104]	; (8011434 <tcp_write+0x598>)
 80113ca:	f240 22c1 	movw	r2, #705	; 0x2c1
 80113ce:	491f      	ldr	r1, [pc, #124]	; (801144c <tcp_write+0x5b0>)
 80113d0:	481a      	ldr	r0, [pc, #104]	; (801143c <tcp_write+0x5a0>)
 80113d2:	f003 f937 	bl	8014644 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	62bb      	str	r3, [r7, #40]	; 0x28
 80113dc:	e009      	b.n	80113f2 <tcp_write+0x556>
      p->tot_len += extendlen;
 80113de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e0:	891a      	ldrh	r2, [r3, #8]
 80113e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113e4:	4413      	add	r3, r2
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d1f1      	bne.n	80113de <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	891a      	ldrh	r2, [r3, #8]
 80113fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011400:	4413      	add	r3, r2
 8011402:	b29a      	uxth	r2, r3
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	895a      	ldrh	r2, [r3, #10]
 801140c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801140e:	4413      	add	r3, r2
 8011410:	b29a      	uxth	r2, r3
 8011412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011414:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011418:	891a      	ldrh	r2, [r3, #8]
 801141a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801141c:	4413      	add	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011422:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011426:	2b00      	cmp	r3, #0
 8011428:	d112      	bne.n	8011450 <tcp_write+0x5b4>
    pcb->unsent = queue;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801142e:	669a      	str	r2, [r3, #104]	; 0x68
 8011430:	e011      	b.n	8011456 <tcp_write+0x5ba>
 8011432:	bf00      	nop
 8011434:	080177c4 	.word	0x080177c4
 8011438:	080179d4 	.word	0x080179d4
 801143c:	08017828 	.word	0x08017828
 8011440:	08017a14 	.word	0x08017a14
 8011444:	08017a24 	.word	0x08017a24
 8011448:	08017a38 	.word	0x08017a38
 801144c:	08017a70 	.word	0x08017a70
  } else {
    last_unsent->next = queue;
 8011450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011454:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801145a:	88fb      	ldrh	r3, [r7, #6]
 801145c:	441a      	add	r2, r3
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011468:	88fb      	ldrh	r3, [r7, #6]
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	b29a      	uxth	r2, r3
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801147a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00e      	beq.n	80114a6 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801148c:	2b00      	cmp	r3, #0
 801148e:	d10a      	bne.n	80114a6 <tcp_write+0x60a>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011494:	2b00      	cmp	r3, #0
 8011496:	d106      	bne.n	80114a6 <tcp_write+0x60a>
 8011498:	4b2b      	ldr	r3, [pc, #172]	; (8011548 <tcp_write+0x6ac>)
 801149a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801149e:	492b      	ldr	r1, [pc, #172]	; (801154c <tcp_write+0x6b0>)
 80114a0:	482b      	ldr	r0, [pc, #172]	; (8011550 <tcp_write+0x6b4>)
 80114a2:	f003 f8cf 	bl	8014644 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80114a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d015      	beq.n	80114d8 <tcp_write+0x63c>
 80114ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d011      	beq.n	80114d8 <tcp_write+0x63c>
 80114b4:	797b      	ldrb	r3, [r7, #5]
 80114b6:	f003 0302 	and.w	r3, r3, #2
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10c      	bne.n	80114d8 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80114be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c0:	68dc      	ldr	r4, [r3, #12]
 80114c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	899b      	ldrh	r3, [r3, #12]
 80114c8:	b29d      	uxth	r5, r3
 80114ca:	2008      	movs	r0, #8
 80114cc:	f7f7 fe0c 	bl	80090e8 <lwip_htons>
 80114d0:	4603      	mov	r3, r0
 80114d2:	432b      	orrs	r3, r5
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 80114d8:	2300      	movs	r3, #0
 80114da:	e031      	b.n	8011540 <tcp_write+0x6a4>
          goto memerr;
 80114dc:	bf00      	nop
 80114de:	e006      	b.n	80114ee <tcp_write+0x652>
            goto memerr;
 80114e0:	bf00      	nop
 80114e2:	e004      	b.n	80114ee <tcp_write+0x652>
        goto memerr;
 80114e4:	bf00      	nop
 80114e6:	e002      	b.n	80114ee <tcp_write+0x652>
        goto memerr;
 80114e8:	bf00      	nop
 80114ea:	e000      	b.n	80114ee <tcp_write+0x652>
      goto memerr;
 80114ec:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	7e9b      	ldrb	r3, [r3, #26]
 80114f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80114f6:	b2da      	uxtb	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80114fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d002      	beq.n	8011508 <tcp_write+0x66c>
    pbuf_free(concat_p);
 8011502:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011504:	f7fb fa02 	bl	800c90c <pbuf_free>
  }
  if (queue != NULL) {
 8011508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150a:	2b00      	cmp	r3, #0
 801150c:	d002      	beq.n	8011514 <tcp_write+0x678>
    tcp_segs_free(queue);
 801150e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011510:	f7fc fccd 	bl	800deae <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00e      	beq.n	801153c <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011522:	2b00      	cmp	r3, #0
 8011524:	d10a      	bne.n	801153c <tcp_write+0x6a0>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801152a:	2b00      	cmp	r3, #0
 801152c:	d106      	bne.n	801153c <tcp_write+0x6a0>
 801152e:	4b06      	ldr	r3, [pc, #24]	; (8011548 <tcp_write+0x6ac>)
 8011530:	f240 3202 	movw	r2, #770	; 0x302
 8011534:	4905      	ldr	r1, [pc, #20]	; (801154c <tcp_write+0x6b0>)
 8011536:	4806      	ldr	r0, [pc, #24]	; (8011550 <tcp_write+0x6b4>)
 8011538:	f003 f884 	bl	8014644 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011540:	4618      	mov	r0, r3
 8011542:	3758      	adds	r7, #88	; 0x58
 8011544:	46bd      	mov	sp, r7
 8011546:	bdb0      	pop	{r4, r5, r7, pc}
 8011548:	080177c4 	.word	0x080177c4
 801154c:	08017aa8 	.word	0x08017aa8
 8011550:	08017828 	.word	0x08017828

08011554 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b08a      	sub	sp, #40	; 0x28
 8011558:	af02      	add	r7, sp, #8
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	460b      	mov	r3, r1
 801155e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011560:	2300      	movs	r3, #0
 8011562:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011564:	2300      	movs	r3, #0
 8011566:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011568:	78fb      	ldrb	r3, [r7, #3]
 801156a:	f003 0303 	and.w	r3, r3, #3
 801156e:	2b00      	cmp	r3, #0
 8011570:	d106      	bne.n	8011580 <tcp_enqueue_flags+0x2c>
 8011572:	4b70      	ldr	r3, [pc, #448]	; (8011734 <tcp_enqueue_flags+0x1e0>)
 8011574:	f240 321b 	movw	r2, #795	; 0x31b
 8011578:	496f      	ldr	r1, [pc, #444]	; (8011738 <tcp_enqueue_flags+0x1e4>)
 801157a:	4870      	ldr	r0, [pc, #448]	; (801173c <tcp_enqueue_flags+0x1e8>)
 801157c:	f003 f862 	bl	8014644 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011586:	2b08      	cmp	r3, #8
 8011588:	d806      	bhi.n	8011598 <tcp_enqueue_flags+0x44>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011590:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011594:	4293      	cmp	r3, r2
 8011596:	d90e      	bls.n	80115b6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011598:	78fb      	ldrb	r3, [r7, #3]
 801159a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d109      	bne.n	80115b6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	7e9b      	ldrb	r3, [r3, #26]
 80115a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80115aa:	b2da      	uxtb	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80115b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115b4:	e0ba      	b.n	801172c <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 80115b6:	78fb      	ldrb	r3, [r7, #3]
 80115b8:	f003 0302 	and.w	r3, r3, #2
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80115c0:	2301      	movs	r3, #1
 80115c2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80115c4:	7ffb      	ldrb	r3, [r7, #31]
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <tcp_enqueue_flags+0x7e>
 80115ce:	2304      	movs	r3, #4
 80115d0:	e000      	b.n	80115d4 <tcp_enqueue_flags+0x80>
 80115d2:	2300      	movs	r3, #0
 80115d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80115d6:	7dfb      	ldrb	r3, [r7, #23]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	2200      	movs	r2, #0
 80115dc:	4619      	mov	r1, r3
 80115de:	2000      	movs	r0, #0
 80115e0:	f7fa fe22 	bl	800c228 <pbuf_alloc>
 80115e4:	6138      	str	r0, [r7, #16]
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d109      	bne.n	8011600 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	7e9b      	ldrb	r3, [r3, #26]
 80115f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80115fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115fe:	e095      	b.n	801172c <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	895a      	ldrh	r2, [r3, #10]
 8011604:	7dfb      	ldrb	r3, [r7, #23]
 8011606:	b29b      	uxth	r3, r3
 8011608:	429a      	cmp	r2, r3
 801160a:	d206      	bcs.n	801161a <tcp_enqueue_flags+0xc6>
 801160c:	4b49      	ldr	r3, [pc, #292]	; (8011734 <tcp_enqueue_flags+0x1e0>)
 801160e:	f240 3241 	movw	r2, #833	; 0x341
 8011612:	494b      	ldr	r1, [pc, #300]	; (8011740 <tcp_enqueue_flags+0x1ec>)
 8011614:	4849      	ldr	r0, [pc, #292]	; (801173c <tcp_enqueue_flags+0x1e8>)
 8011616:	f003 f815 	bl	8014644 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801161e:	78fa      	ldrb	r2, [r7, #3]
 8011620:	7ffb      	ldrb	r3, [r7, #31]
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	460b      	mov	r3, r1
 8011626:	6939      	ldr	r1, [r7, #16]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff fad5 	bl	8010bd8 <tcp_create_segment>
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d109      	bne.n	801164a <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	7e9b      	ldrb	r3, [r3, #26]
 801163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801163e:	b2da      	uxtb	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011648:	e070      	b.n	801172c <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	f003 0303 	and.w	r3, r3, #3
 8011652:	2b00      	cmp	r3, #0
 8011654:	d006      	beq.n	8011664 <tcp_enqueue_flags+0x110>
 8011656:	4b37      	ldr	r3, [pc, #220]	; (8011734 <tcp_enqueue_flags+0x1e0>)
 8011658:	f240 3249 	movw	r2, #841	; 0x349
 801165c:	4939      	ldr	r1, [pc, #228]	; (8011744 <tcp_enqueue_flags+0x1f0>)
 801165e:	4837      	ldr	r0, [pc, #220]	; (801173c <tcp_enqueue_flags+0x1e8>)
 8011660:	f002 fff0 	bl	8014644 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	891b      	ldrh	r3, [r3, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d006      	beq.n	801167a <tcp_enqueue_flags+0x126>
 801166c:	4b31      	ldr	r3, [pc, #196]	; (8011734 <tcp_enqueue_flags+0x1e0>)
 801166e:	f240 324a 	movw	r2, #842	; 0x34a
 8011672:	4935      	ldr	r1, [pc, #212]	; (8011748 <tcp_enqueue_flags+0x1f4>)
 8011674:	4831      	ldr	r0, [pc, #196]	; (801173c <tcp_enqueue_flags+0x1e8>)
 8011676:	f002 ffe5 	bl	8014644 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801167e:	2b00      	cmp	r3, #0
 8011680:	d103      	bne.n	801168a <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	669a      	str	r2, [r3, #104]	; 0x68
 8011688:	e00d      	b.n	80116a6 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801168e:	61bb      	str	r3, [r7, #24]
 8011690:	e002      	b.n	8011698 <tcp_enqueue_flags+0x144>
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	61bb      	str	r3, [r7, #24]
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1f8      	bne.n	8011692 <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80116ae:	78fb      	ldrb	r3, [r7, #3]
 80116b0:	f003 0302 	and.w	r3, r3, #2
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d104      	bne.n	80116c2 <tcp_enqueue_flags+0x16e>
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	f003 0301 	and.w	r3, r3, #1
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d004      	beq.n	80116cc <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80116cc:	78fb      	ldrb	r3, [r7, #3]
 80116ce:	f003 0301 	and.w	r3, r3, #1
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d006      	beq.n	80116e4 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	7e9b      	ldrb	r3, [r3, #26]
 80116da:	f043 0320 	orr.w	r3, r3, #32
 80116de:	b2da      	uxtb	r2, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fb f9a9 	bl	800ca40 <pbuf_clen>
 80116ee:	4603      	mov	r3, r0
 80116f0:	461a      	mov	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80116f8:	4413      	add	r3, r2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00e      	beq.n	801172a <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011710:	2b00      	cmp	r3, #0
 8011712:	d10a      	bne.n	801172a <tcp_enqueue_flags+0x1d6>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011718:	2b00      	cmp	r3, #0
 801171a:	d106      	bne.n	801172a <tcp_enqueue_flags+0x1d6>
 801171c:	4b05      	ldr	r3, [pc, #20]	; (8011734 <tcp_enqueue_flags+0x1e0>)
 801171e:	f240 326d 	movw	r2, #877	; 0x36d
 8011722:	490a      	ldr	r1, [pc, #40]	; (801174c <tcp_enqueue_flags+0x1f8>)
 8011724:	4805      	ldr	r0, [pc, #20]	; (801173c <tcp_enqueue_flags+0x1e8>)
 8011726:	f002 ff8d 	bl	8014644 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3720      	adds	r7, #32
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	080177c4 	.word	0x080177c4
 8011738:	08017ac8 	.word	0x08017ac8
 801173c:	08017828 	.word	0x08017828
 8011740:	08017b20 	.word	0x08017b20
 8011744:	08017b5c 	.word	0x08017b5c
 8011748:	08017b74 	.word	0x08017b74
 801174c:	08017ba0 	.word	0x08017ba0

08011750 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011750:	b590      	push	{r4, r7, lr}
 8011752:	b08b      	sub	sp, #44	; 0x2c
 8011754:	af04      	add	r7, sp, #16
 8011756:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801175c:	7dbb      	ldrb	r3, [r7, #22]
 801175e:	b29c      	uxth	r4, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011764:	4618      	mov	r0, r3
 8011766:	f7f7 fccd 	bl	8009104 <lwip_htonl>
 801176a:	4603      	mov	r3, r0
 801176c:	2200      	movs	r2, #0
 801176e:	4621      	mov	r1, r4
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff f977 	bl	8010a64 <tcp_output_alloc_header>
 8011776:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d109      	bne.n	8011792 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7e9b      	ldrb	r3, [r3, #26]
 8011782:	f043 0303 	orr.w	r3, r3, #3
 8011786:	b2da      	uxtb	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801178c:	f06f 0301 	mvn.w	r3, #1
 8011790:	e036      	b.n	8011800 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	3304      	adds	r3, #4
 8011796:	4618      	mov	r0, r3
 8011798:	f7f8 fd88 	bl	800a2ac <ip4_route>
 801179c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80117a4:	23fc      	movs	r3, #252	; 0xfc
 80117a6:	75fb      	strb	r3, [r7, #23]
 80117a8:	e012      	b.n	80117d0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80117aa:	6879      	ldr	r1, [r7, #4]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	1d18      	adds	r0, r3, #4
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7a9c      	ldrb	r4, [r3, #10]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	7a5b      	ldrb	r3, [r3, #9]
 80117b8:	68fa      	ldr	r2, [r7, #12]
 80117ba:	9202      	str	r2, [sp, #8]
 80117bc:	2206      	movs	r2, #6
 80117be:	9201      	str	r2, [sp, #4]
 80117c0:	9300      	str	r3, [sp, #0]
 80117c2:	4623      	mov	r3, r4
 80117c4:	4602      	mov	r2, r0
 80117c6:	6938      	ldr	r0, [r7, #16]
 80117c8:	f7f8 ff14 	bl	800a5f4 <ip4_output_if>
 80117cc:	4603      	mov	r3, r0
 80117ce:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80117d0:	6938      	ldr	r0, [r7, #16]
 80117d2:	f7fb f89b 	bl	800c90c <pbuf_free>

  if (err != ERR_OK) {
 80117d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d007      	beq.n	80117ee <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	7e9b      	ldrb	r3, [r3, #26]
 80117e2:	f043 0303 	orr.w	r3, r3, #3
 80117e6:	b2da      	uxtb	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	769a      	strb	r2, [r3, #26]
 80117ec:	e006      	b.n	80117fc <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	7e9b      	ldrb	r3, [r3, #26]
 80117f2:	f023 0303 	bic.w	r3, r3, #3
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80117fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011800:	4618      	mov	r0, r3
 8011802:	371c      	adds	r7, #28
 8011804:	46bd      	mov	sp, r7
 8011806:	bd90      	pop	{r4, r7, pc}

08011808 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011808:	b5b0      	push	{r4, r5, r7, lr}
 801180a:	b08a      	sub	sp, #40	; 0x28
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	7d1b      	ldrb	r3, [r3, #20]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d106      	bne.n	8011826 <tcp_output+0x1e>
 8011818:	4b9b      	ldr	r3, [pc, #620]	; (8011a88 <tcp_output+0x280>)
 801181a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801181e:	499b      	ldr	r1, [pc, #620]	; (8011a8c <tcp_output+0x284>)
 8011820:	489b      	ldr	r0, [pc, #620]	; (8011a90 <tcp_output+0x288>)
 8011822:	f002 ff0f 	bl	8014644 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011826:	4b9b      	ldr	r3, [pc, #620]	; (8011a94 <tcp_output+0x28c>)
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	429a      	cmp	r2, r3
 801182e:	d101      	bne.n	8011834 <tcp_output+0x2c>
    return ERR_OK;
 8011830:	2300      	movs	r3, #0
 8011832:	e1cd      	b.n	8011bd0 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011840:	429a      	cmp	r2, r3
 8011842:	d203      	bcs.n	801184c <tcp_output+0x44>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801184a:	e002      	b.n	8011852 <tcp_output+0x4a>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011852:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	7e9b      	ldrb	r3, [r3, #26]
 801185e:	f003 0302 	and.w	r3, r3, #2
 8011862:	2b00      	cmp	r3, #0
 8011864:	d017      	beq.n	8011896 <tcp_output+0x8e>
 8011866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00f      	beq.n	801188c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	f7f7 fc46 	bl	8009104 <lwip_htonl>
 8011878:	4602      	mov	r2, r0
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011882:	8912      	ldrh	r2, [r2, #8]
 8011884:	441a      	add	r2, r3
     (seg == NULL ||
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	429a      	cmp	r2, r3
 801188a:	d904      	bls.n	8011896 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff ff5f 	bl	8011750 <tcp_send_empty_ack>
 8011892:	4603      	mov	r3, r0
 8011894:	e19c      	b.n	8011bd0 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801189a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801189c:	6a3b      	ldr	r3, [r7, #32]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d007      	beq.n	80118b2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80118a2:	e002      	b.n	80118aa <tcp_output+0xa2>
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	623b      	str	r3, [r7, #32]
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1f8      	bne.n	80118a4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3304      	adds	r3, #4
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7f8 fcf8 	bl	800a2ac <ip4_route>
 80118bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d102      	bne.n	80118ca <tcp_output+0xc2>
    return ERR_RTE;
 80118c4:	f06f 0303 	mvn.w	r3, #3
 80118c8:	e182      	b.n	8011bd0 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d003      	beq.n	80118d8 <tcp_output+0xd0>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d111      	bne.n	80118fc <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d002      	beq.n	80118e4 <tcp_output+0xdc>
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	3304      	adds	r3, #4
 80118e2:	e000      	b.n	80118e6 <tcp_output+0xde>
 80118e4:	2300      	movs	r3, #0
 80118e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d102      	bne.n	80118f4 <tcp_output+0xec>
      return ERR_RTE;
 80118ee:	f06f 0303 	mvn.w	r3, #3
 80118f2:	e16d      	b.n	8011bd0 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80118fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fe:	2b00      	cmp	r3, #0
 8011900:	f000 813e 	beq.w	8011b80 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	4618      	mov	r0, r3
 801190c:	f7f7 fbfa 	bl	8009104 <lwip_htonl>
 8011910:	4602      	mov	r2, r0
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801191a:	8912      	ldrh	r2, [r2, #8]
 801191c:	441a      	add	r2, r3
  if (seg != NULL &&
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	429a      	cmp	r2, r3
 8011922:	f240 812d 	bls.w	8011b80 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 8129 	beq.w	8011b80 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011934:	461a      	mov	r2, r3
 8011936:	69bb      	ldr	r3, [r7, #24]
 8011938:	429a      	cmp	r2, r3
 801193a:	f040 8121 	bne.w	8011b80 <tcp_output+0x378>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011942:	2b00      	cmp	r3, #0
 8011944:	f040 811c 	bne.w	8011b80 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801194e:	2b00      	cmp	r3, #0
 8011950:	f040 812b 	bne.w	8011baa <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2201      	movs	r2, #1
 8011960:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011964:	e121      	b.n	8011baa <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	899b      	ldrh	r3, [r3, #12]
 801196c:	b29b      	uxth	r3, r3
 801196e:	4618      	mov	r0, r3
 8011970:	f7f7 fbba 	bl	80090e8 <lwip_htons>
 8011974:	4603      	mov	r3, r0
 8011976:	f003 0304 	and.w	r3, r3, #4
 801197a:	2b00      	cmp	r3, #0
 801197c:	d006      	beq.n	801198c <tcp_output+0x184>
 801197e:	4b42      	ldr	r3, [pc, #264]	; (8011a88 <tcp_output+0x280>)
 8011980:	f240 4246 	movw	r2, #1094	; 0x446
 8011984:	4944      	ldr	r1, [pc, #272]	; (8011a98 <tcp_output+0x290>)
 8011986:	4842      	ldr	r0, [pc, #264]	; (8011a90 <tcp_output+0x288>)
 8011988:	f002 fe5c 	bl	8014644 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d01f      	beq.n	80119d4 <tcp_output+0x1cc>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	7e9b      	ldrb	r3, [r3, #26]
 8011998:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801199c:	2b00      	cmp	r3, #0
 801199e:	d119      	bne.n	80119d4 <tcp_output+0x1cc>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00b      	beq.n	80119c0 <tcp_output+0x1b8>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d110      	bne.n	80119d4 <tcp_output+0x1cc>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119b6:	891a      	ldrh	r2, [r3, #8]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119bc:	429a      	cmp	r2, r3
 80119be:	d209      	bcs.n	80119d4 <tcp_output+0x1cc>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d004      	beq.n	80119d4 <tcp_output+0x1cc>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119d0:	2b08      	cmp	r3, #8
 80119d2:	d901      	bls.n	80119d8 <tcp_output+0x1d0>
 80119d4:	2301      	movs	r3, #1
 80119d6:	e000      	b.n	80119da <tcp_output+0x1d2>
 80119d8:	2300      	movs	r3, #0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d106      	bne.n	80119ec <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	7e9b      	ldrb	r3, [r3, #26]
 80119e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	f000 80e1 	beq.w	8011bae <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	7d1b      	ldrb	r3, [r3, #20]
 80119f0:	2b02      	cmp	r3, #2
 80119f2:	d00c      	beq.n	8011a0e <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f6:	68dc      	ldr	r4, [r3, #12]
 80119f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	899b      	ldrh	r3, [r3, #12]
 80119fe:	b29d      	uxth	r5, r3
 8011a00:	2010      	movs	r0, #16
 8011a02:	f7f7 fb71 	bl	80090e8 <lwip_htons>
 8011a06:	4603      	mov	r3, r0
 8011a08:	432b      	orrs	r3, r5
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011a0e:	697a      	ldr	r2, [r7, #20]
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a14:	f000 f8e0 	bl	8011bd8 <tcp_output_segment>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d009      	beq.n	8011a38 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7e9b      	ldrb	r3, [r3, #26]
 8011a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	769a      	strb	r2, [r3, #26]
      return err;
 8011a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a36:	e0cb      	b.n	8011bd0 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 8011a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	7d1b      	ldrb	r3, [r3, #20]
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d006      	beq.n	8011a56 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7e9b      	ldrb	r3, [r3, #26]
 8011a4c:	f023 0303 	bic.w	r3, r3, #3
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f7 fb51 	bl	8009104 <lwip_htonl>
 8011a62:	4604      	mov	r4, r0
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	891b      	ldrh	r3, [r3, #8]
 8011a68:	461d      	mov	r5, r3
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	899b      	ldrh	r3, [r3, #12]
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7f7 fb38 	bl	80090e8 <lwip_htons>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	f003 0303 	and.w	r3, r3, #3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00c      	beq.n	8011a9c <tcp_output+0x294>
 8011a82:	2301      	movs	r3, #1
 8011a84:	e00b      	b.n	8011a9e <tcp_output+0x296>
 8011a86:	bf00      	nop
 8011a88:	080177c4 	.word	0x080177c4
 8011a8c:	08017bc8 	.word	0x08017bc8
 8011a90:	08017828 	.word	0x08017828
 8011a94:	2000774c 	.word	0x2000774c
 8011a98:	08017bf0 	.word	0x08017bf0
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	442b      	add	r3, r5
 8011aa0:	4423      	add	r3, r4
 8011aa2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	1ad3      	subs	r3, r2, r3
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da02      	bge.n	8011ab6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab8:	891b      	ldrh	r3, [r3, #8]
 8011aba:	461c      	mov	r4, r3
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	899b      	ldrh	r3, [r3, #12]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7f7 fb0f 	bl	80090e8 <lwip_htons>
 8011aca:	4603      	mov	r3, r0
 8011acc:	f003 0303 	and.w	r3, r3, #3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <tcp_output+0x2d0>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e000      	b.n	8011ada <tcp_output+0x2d2>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4423      	add	r3, r4
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d049      	beq.n	8011b74 <tcp_output+0x36c>
      seg->next = NULL;
 8011ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d105      	bne.n	8011afa <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011af2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	623b      	str	r3, [r7, #32]
 8011af8:	e03f      	b.n	8011b7a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7f7 faff 	bl	8009104 <lwip_htonl>
 8011b06:	4604      	mov	r4, r0
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7f7 faf8 	bl	8009104 <lwip_htonl>
 8011b14:	4603      	mov	r3, r0
 8011b16:	1ae3      	subs	r3, r4, r3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	da24      	bge.n	8011b66 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	336c      	adds	r3, #108	; 0x6c
 8011b20:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b22:	e002      	b.n	8011b2a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d011      	beq.n	8011b56 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7f7 fae2 	bl	8009104 <lwip_htonl>
 8011b40:	4604      	mov	r4, r0
 8011b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f7 fadb 	bl	8009104 <lwip_htonl>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	dbe6      	blt.n	8011b24 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	e009      	b.n	8011b7a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b6a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b6c:	6a3b      	ldr	r3, [r7, #32]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	623b      	str	r3, [r7, #32]
 8011b72:	e002      	b.n	8011b7a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b76:	f7fc f9ae 	bl	800ded6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d014      	beq.n	8011bb0 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f7 fab9 	bl	8009104 <lwip_htonl>
 8011b92:	4602      	mov	r2, r0
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b9c:	8912      	ldrh	r2, [r2, #8]
 8011b9e:	441a      	add	r2, r3
  while (seg != NULL &&
 8011ba0:	69bb      	ldr	r3, [r7, #24]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	f67f aedf 	bls.w	8011966 <tcp_output+0x15e>
 8011ba8:	e002      	b.n	8011bb0 <tcp_output+0x3a8>
    goto output_done;
 8011baa:	bf00      	nop
 8011bac:	e000      	b.n	8011bb0 <tcp_output+0x3a8>
      break;
 8011bae:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d103      	bne.n	8011bc0 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	7e9b      	ldrb	r3, [r3, #26]
 8011bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bc8:	b2da      	uxtb	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011bce:	2300      	movs	r3, #0
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3728      	adds	r7, #40	; 0x28
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bdb0      	pop	{r4, r5, r7, pc}

08011bd8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011bd8:	b5b0      	push	{r4, r5, r7, lr}
 8011bda:	b08c      	sub	sp, #48	; 0x30
 8011bdc:	af04      	add	r7, sp, #16
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	89db      	ldrh	r3, [r3, #14]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d001      	beq.n	8011bf2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e08b      	b.n	8011d0a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68dc      	ldr	r4, [r3, #12]
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7f7 fa82 	bl	8009104 <lwip_htonl>
 8011c00:	4603      	mov	r3, r0
 8011c02:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68dc      	ldr	r4, [r3, #12]
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7f7 fa6b 	bl	80090e8 <lwip_htons>
 8011c12:	4603      	mov	r3, r0
 8011c14:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c1e:	441a      	add	r2, r3
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	3314      	adds	r3, #20
 8011c2a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	7a9b      	ldrb	r3, [r3, #10]
 8011c30:	f003 0301 	and.w	r3, r3, #1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d014      	beq.n	8011c62 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011c42:	f7fc fc73 	bl	800e52c <tcp_eff_send_mss_impl>
 8011c46:	4603      	mov	r3, r0
 8011c48:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011c4a:	8b7b      	ldrh	r3, [r7, #26]
 8011c4c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7f7 fa57 	bl	8009104 <lwip_htonl>
 8011c56:	4602      	mov	r2, r0
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	da02      	bge.n	8011c72 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d10c      	bne.n	8011c94 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011c7a:	4b26      	ldr	r3, [pc, #152]	; (8011d14 <tcp_output_segment+0x13c>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7f7 fa3b 	bl	8009104 <lwip_htonl>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	461a      	mov	r2, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	6852      	ldr	r2, [r2, #4]
 8011cac:	8951      	ldrh	r1, [r2, #10]
 8011cae:	8b3a      	ldrh	r2, [r7, #24]
 8011cb0:	1a8a      	subs	r2, r1, r2
 8011cb2:	b292      	uxth	r2, r2
 8011cb4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	68fa      	ldr	r2, [r7, #12]
 8011cbc:	6852      	ldr	r2, [r2, #4]
 8011cbe:	8911      	ldrh	r1, [r2, #8]
 8011cc0:	8b3a      	ldrh	r2, [r7, #24]
 8011cc2:	1a8a      	subs	r2, r1, r2
 8011cc4:	b292      	uxth	r2, r2
 8011cc6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	68fa      	ldr	r2, [r7, #12]
 8011cce:	68d2      	ldr	r2, [r2, #12]
 8011cd0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	741a      	strb	r2, [r3, #16]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	6858      	ldr	r0, [r3, #4]
 8011ce2:	68b9      	ldr	r1, [r7, #8]
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	1d1c      	adds	r4, r3, #4
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	7a9d      	ldrb	r5, [r3, #10]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	7a5b      	ldrb	r3, [r3, #9]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	9202      	str	r2, [sp, #8]
 8011cf4:	2206      	movs	r2, #6
 8011cf6:	9201      	str	r2, [sp, #4]
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	4622      	mov	r2, r4
 8011cfe:	f7f8 fc79 	bl	800a5f4 <ip4_output_if>
 8011d02:	4603      	mov	r3, r0
 8011d04:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3720      	adds	r7, #32
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bdb0      	pop	{r4, r5, r7, pc}
 8011d12:	bf00      	nop
 8011d14:	2000773c 	.word	0x2000773c

08011d18 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b08c      	sub	sp, #48	; 0x30
 8011d1c:	af04      	add	r7, sp, #16
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011d26:	2200      	movs	r2, #0
 8011d28:	2114      	movs	r1, #20
 8011d2a:	2001      	movs	r0, #1
 8011d2c:	f7fa fa7c 	bl	800c228 <pbuf_alloc>
 8011d30:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d05b      	beq.n	8011df0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	895b      	ldrh	r3, [r3, #10]
 8011d3c:	2b13      	cmp	r3, #19
 8011d3e:	d806      	bhi.n	8011d4e <tcp_rst+0x36>
 8011d40:	4b2d      	ldr	r3, [pc, #180]	; (8011df8 <tcp_rst+0xe0>)
 8011d42:	f240 524d 	movw	r2, #1357	; 0x54d
 8011d46:	492d      	ldr	r1, [pc, #180]	; (8011dfc <tcp_rst+0xe4>)
 8011d48:	482d      	ldr	r0, [pc, #180]	; (8011e00 <tcp_rst+0xe8>)
 8011d4a:	f002 fc7b 	bl	8014644 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011d54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7f7 f9c6 	bl	80090e8 <lwip_htons>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	461a      	mov	r2, r3
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011d64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7f7 f9be 	bl	80090e8 <lwip_htons>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	461a      	mov	r2, r3
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f7f7 f9c5 	bl	8009104 <lwip_htonl>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011d80:	68b8      	ldr	r0, [r7, #8]
 8011d82:	f7f7 f9bf 	bl	8009104 <lwip_htonl>
 8011d86:	4602      	mov	r2, r0
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011d8c:	f245 0014 	movw	r0, #20500	; 0x5014
 8011d90:	f7f7 f9aa 	bl	80090e8 <lwip_htons>
 8011d94:	4603      	mov	r3, r0
 8011d96:	461a      	mov	r2, r3
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011d9c:	69bb      	ldr	r3, [r7, #24]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f042 0208 	orr.w	r2, r2, #8
 8011da4:	739a      	strb	r2, [r3, #14]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011dac:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	2200      	movs	r2, #0
 8011db2:	741a      	strb	r2, [r3, #16]
 8011db4:	2200      	movs	r2, #0
 8011db6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	749a      	strb	r2, [r3, #18]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011dc2:	6838      	ldr	r0, [r7, #0]
 8011dc4:	f7f8 fa72 	bl	800a2ac <ip4_route>
 8011dc8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00b      	beq.n	8011de8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	9302      	str	r3, [sp, #8]
 8011dd4:	2306      	movs	r3, #6
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	23ff      	movs	r3, #255	; 0xff
 8011dde:	683a      	ldr	r2, [r7, #0]
 8011de0:	6879      	ldr	r1, [r7, #4]
 8011de2:	69f8      	ldr	r0, [r7, #28]
 8011de4:	f7f8 fc06 	bl	800a5f4 <ip4_output_if>
  }
  pbuf_free(p);
 8011de8:	69f8      	ldr	r0, [r7, #28]
 8011dea:	f7fa fd8f 	bl	800c90c <pbuf_free>
 8011dee:	e000      	b.n	8011df2 <tcp_rst+0xda>
    return;
 8011df0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011df2:	3720      	adds	r7, #32
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	080177c4 	.word	0x080177c4
 8011dfc:	080177f8 	.word	0x080177f8
 8011e00:	08017828 	.word	0x08017828

08011e04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d029      	beq.n	8011e68 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e18:	60fb      	str	r3, [r7, #12]
 8011e1a:	e002      	b.n	8011e22 <tcp_rexmit_rto+0x1e>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1f8      	bne.n	8011e1c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e46:	2bff      	cmp	r3, #255	; 0xff
 8011e48:	d007      	beq.n	8011e5a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e50:	3301      	adds	r3, #1
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff fcd1 	bl	8011808 <tcp_output>
 8011e66:	e000      	b.n	8011e6a <tcp_rexmit_rto+0x66>
    return;
 8011e68:	bf00      	nop
}
 8011e6a:	3710      	adds	r7, #16
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011e70:	b590      	push	{r4, r7, lr}
 8011e72:	b085      	sub	sp, #20
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d043      	beq.n	8011f08 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e84:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	3368      	adds	r3, #104	; 0x68
 8011e92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011e94:	e002      	b.n	8011e9c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d011      	beq.n	8011ec8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7f7 f929 	bl	8009104 <lwip_htonl>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f7 f922 	bl	8009104 <lwip_htonl>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	dbe6      	blt.n	8011e96 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	68ba      	ldr	r2, [r7, #8]
 8011ed4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d103      	bne.n	8011ee6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011eec:	2bff      	cmp	r3, #255	; 0xff
 8011eee:	d007      	beq.n	8011f00 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	635a      	str	r2, [r3, #52]	; 0x34
 8011f06:	e000      	b.n	8011f0a <tcp_rexmit+0x9a>
    return;
 8011f08:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011f0a:	3714      	adds	r7, #20
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd90      	pop	{r4, r7, pc}

08011f10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d04a      	beq.n	8011fb6 <tcp_rexmit_fast+0xa6>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	7e9b      	ldrb	r3, [r3, #26]
 8011f24:	f003 0304 	and.w	r3, r3, #4
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d144      	bne.n	8011fb6 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff ff9f 	bl	8011e70 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d207      	bcs.n	8011f52 <tcp_rexmit_fast+0x42>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f48:	0fda      	lsrs	r2, r3, #31
 8011f4a:	4413      	add	r3, r2
 8011f4c:	105b      	asrs	r3, r3, #1
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	e006      	b.n	8011f60 <tcp_rexmit_fast+0x50>
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f58:	0fda      	lsrs	r2, r3, #31
 8011f5a:	4413      	add	r3, r2
 8011f5c:	105b      	asrs	r3, r3, #1
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d206      	bcs.n	8011f86 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f7c:	005b      	lsls	r3, r3, #1
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f90:	4619      	mov	r1, r3
 8011f92:	0049      	lsls	r1, r1, #1
 8011f94:	440b      	add	r3, r1
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	4413      	add	r3, r2
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	7e9b      	ldrb	r3, [r3, #26]
 8011fa6:	f043 0304 	orr.w	r3, r3, #4
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8011fb6:	bf00      	nop
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b08a      	sub	sp, #40	; 0x28
 8011fc2:	af04      	add	r7, sp, #16
 8011fc4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f7 f899 	bl	8009104 <lwip_htonl>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7fe fd43 	bl	8010a64 <tcp_output_alloc_header>
 8011fde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d102      	bne.n	8011fec <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fea:	e021      	b.n	8012030 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	3304      	adds	r3, #4
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f8 f95b 	bl	800a2ac <ip4_route>
 8011ff6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d102      	bne.n	8012004 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011ffe:	23fc      	movs	r3, #252	; 0xfc
 8012000:	75fb      	strb	r3, [r7, #23]
 8012002:	e010      	b.n	8012026 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	1d1a      	adds	r2, r3, #4
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	7a98      	ldrb	r0, [r3, #10]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	9302      	str	r3, [sp, #8]
 8012012:	2306      	movs	r3, #6
 8012014:	9301      	str	r3, [sp, #4]
 8012016:	2300      	movs	r3, #0
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	4603      	mov	r3, r0
 801201c:	6938      	ldr	r0, [r7, #16]
 801201e:	f7f8 fae9 	bl	800a5f4 <ip4_output_if>
 8012022:	4603      	mov	r3, r0
 8012024:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012026:	6938      	ldr	r0, [r7, #16]
 8012028:	f7fa fc70 	bl	800c90c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801202c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3718      	adds	r7, #24
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012038:	b590      	push	{r4, r7, lr}
 801203a:	b08f      	sub	sp, #60	; 0x3c
 801203c:	af04      	add	r7, sp, #16
 801203e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012044:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012046:	6a3b      	ldr	r3, [r7, #32]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d102      	bne.n	8012052 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012050:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012052:	6a3b      	ldr	r3, [r7, #32]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d101      	bne.n	801205c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	e085      	b.n	8012168 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801205c:	6a3b      	ldr	r3, [r7, #32]
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	899b      	ldrh	r3, [r3, #12]
 8012062:	b29b      	uxth	r3, r3
 8012064:	4618      	mov	r0, r3
 8012066:	f7f7 f83f 	bl	80090e8 <lwip_htons>
 801206a:	4603      	mov	r3, r0
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d005      	beq.n	8012080 <tcp_zero_window_probe+0x48>
 8012074:	6a3b      	ldr	r3, [r7, #32]
 8012076:	891b      	ldrh	r3, [r3, #8]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <tcp_zero_window_probe+0x48>
 801207c:	2301      	movs	r3, #1
 801207e:	e000      	b.n	8012082 <tcp_zero_window_probe+0x4a>
 8012080:	2300      	movs	r3, #0
 8012082:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012084:	7ffb      	ldrb	r3, [r7, #31]
 8012086:	2b00      	cmp	r3, #0
 8012088:	bf0c      	ite	eq
 801208a:	2301      	moveq	r3, #1
 801208c:	2300      	movne	r3, #0
 801208e:	b2db      	uxtb	r3, r3
 8012090:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	8bba      	ldrh	r2, [r7, #28]
 801209a:	2100      	movs	r1, #0
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7fe fce1 	bl	8010a64 <tcp_output_alloc_header>
 80120a2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d102      	bne.n	80120b0 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80120aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120ae:	e05b      	b.n	8012168 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80120b0:	69bb      	ldr	r3, [r7, #24]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80120b6:	7ffb      	ldrb	r3, [r7, #31]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00e      	beq.n	80120da <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	899b      	ldrh	r3, [r3, #12]
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80120c6:	b29c      	uxth	r4, r3
 80120c8:	2011      	movs	r0, #17
 80120ca:	f7f7 f80d 	bl	80090e8 <lwip_htons>
 80120ce:	4603      	mov	r3, r0
 80120d0:	4323      	orrs	r3, r4
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	819a      	strh	r2, [r3, #12]
 80120d8:	e010      	b.n	80120fc <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	3314      	adds	r3, #20
 80120e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	6858      	ldr	r0, [r3, #4]
 80120e6:	6a3b      	ldr	r3, [r7, #32]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	891a      	ldrh	r2, [r3, #8]
 80120ec:	6a3b      	ldr	r3, [r7, #32]
 80120ee:	891b      	ldrh	r3, [r3, #8]
 80120f0:	1ad3      	subs	r3, r2, r3
 80120f2:	b29b      	uxth	r3, r3
 80120f4:	2201      	movs	r2, #1
 80120f6:	6939      	ldr	r1, [r7, #16]
 80120f8:	f7fa fe14 	bl	800cd24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	4618      	mov	r0, r3
 8012104:	f7f6 fffe 	bl	8009104 <lwip_htonl>
 8012108:	4603      	mov	r3, r0
 801210a:	3301      	adds	r3, #1
 801210c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	da02      	bge.n	8012120 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3304      	adds	r3, #4
 8012124:	4618      	mov	r0, r3
 8012126:	f7f8 f8c1 	bl	800a2ac <ip4_route>
 801212a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d103      	bne.n	801213a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012132:	23fc      	movs	r3, #252	; 0xfc
 8012134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012138:	e011      	b.n	801215e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801213a:	6879      	ldr	r1, [r7, #4]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	7a98      	ldrb	r0, [r3, #10]
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	9302      	str	r3, [sp, #8]
 8012148:	2306      	movs	r3, #6
 801214a:	9301      	str	r3, [sp, #4]
 801214c:	2300      	movs	r3, #0
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	4603      	mov	r3, r0
 8012152:	69b8      	ldr	r0, [r7, #24]
 8012154:	f7f8 fa4e 	bl	800a5f4 <ip4_output_if>
 8012158:	4603      	mov	r3, r0
 801215a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801215e:	69b8      	ldr	r0, [r7, #24]
 8012160:	f7fa fbd4 	bl	800c90c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012168:	4618      	mov	r0, r3
 801216a:	372c      	adds	r7, #44	; 0x2c
 801216c:	46bd      	mov	sp, r7
 801216e:	bd90      	pop	{r4, r7, pc}

08012170 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012178:	f7fa fe56 	bl	800ce28 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801217c:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <tcpip_tcp_timer+0x38>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d103      	bne.n	801218c <tcpip_tcp_timer+0x1c>
 8012184:	4b09      	ldr	r3, [pc, #36]	; (80121ac <tcpip_tcp_timer+0x3c>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d005      	beq.n	8012198 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801218c:	2200      	movs	r2, #0
 801218e:	4908      	ldr	r1, [pc, #32]	; (80121b0 <tcpip_tcp_timer+0x40>)
 8012190:	20fa      	movs	r0, #250	; 0xfa
 8012192:	f000 f86f 	bl	8012274 <sys_timeout>
 8012196:	e002      	b.n	801219e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <tcpip_tcp_timer+0x44>)
 801219a:	2200      	movs	r2, #0
 801219c:	601a      	str	r2, [r3, #0]
  }
}
 801219e:	bf00      	nop
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20007738 	.word	0x20007738
 80121ac:	20007748 	.word	0x20007748
 80121b0:	08012171 	.word	0x08012171
 80121b4:	20003fc8 	.word	0x20003fc8

080121b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80121bc:	4b0a      	ldr	r3, [pc, #40]	; (80121e8 <tcp_timer_needed+0x30>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10f      	bne.n	80121e4 <tcp_timer_needed+0x2c>
 80121c4:	4b09      	ldr	r3, [pc, #36]	; (80121ec <tcp_timer_needed+0x34>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d103      	bne.n	80121d4 <tcp_timer_needed+0x1c>
 80121cc:	4b08      	ldr	r3, [pc, #32]	; (80121f0 <tcp_timer_needed+0x38>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d007      	beq.n	80121e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80121d4:	4b04      	ldr	r3, [pc, #16]	; (80121e8 <tcp_timer_needed+0x30>)
 80121d6:	2201      	movs	r2, #1
 80121d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121da:	2200      	movs	r2, #0
 80121dc:	4905      	ldr	r1, [pc, #20]	; (80121f4 <tcp_timer_needed+0x3c>)
 80121de:	20fa      	movs	r0, #250	; 0xfa
 80121e0:	f000 f848 	bl	8012274 <sys_timeout>
  }
}
 80121e4:	bf00      	nop
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20003fc8 	.word	0x20003fc8
 80121ec:	20007738 	.word	0x20007738
 80121f0:	20007748 	.word	0x20007748
 80121f4:	08012171 	.word	0x08012171

080121f8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	4903      	ldr	r1, [pc, #12]	; (8012220 <cyclic_timer+0x28>)
 8012212:	4618      	mov	r0, r3
 8012214:	f000 f82e 	bl	8012274 <sys_timeout>
}
 8012218:	bf00      	nop
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	080121f9 	.word	0x080121f9

08012224 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801222a:	2301      	movs	r3, #1
 801222c:	607b      	str	r3, [r7, #4]
 801222e:	e00e      	b.n	801224e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012230:	4a0d      	ldr	r2, [pc, #52]	; (8012268 <sys_timeouts_init+0x44>)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	4a0a      	ldr	r2, [pc, #40]	; (8012268 <sys_timeouts_init+0x44>)
 801223e:	4413      	add	r3, r2
 8012240:	461a      	mov	r2, r3
 8012242:	490a      	ldr	r1, [pc, #40]	; (801226c <sys_timeouts_init+0x48>)
 8012244:	f000 f816 	bl	8012274 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3301      	adds	r3, #1
 801224c:	607b      	str	r3, [r7, #4]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b02      	cmp	r3, #2
 8012252:	d9ed      	bls.n	8012230 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012254:	f001 fb44 	bl	80138e0 <sys_now>
 8012258:	4602      	mov	r2, r0
 801225a:	4b05      	ldr	r3, [pc, #20]	; (8012270 <sys_timeouts_init+0x4c>)
 801225c:	601a      	str	r2, [r3, #0]
}
 801225e:	bf00      	nop
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	0801803c 	.word	0x0801803c
 801226c:	080121f9 	.word	0x080121f9
 8012270:	20003fc4 	.word	0x20003fc4

08012274 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012280:	200a      	movs	r0, #10
 8012282:	f7f9 fd97 	bl	800bdb4 <memp_malloc>
 8012286:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10a      	bne.n	80122a4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2b00      	cmp	r3, #0
 8012292:	f040 8084 	bne.w	801239e <sys_timeout+0x12a>
 8012296:	4b44      	ldr	r3, [pc, #272]	; (80123a8 <sys_timeout+0x134>)
 8012298:	22d4      	movs	r2, #212	; 0xd4
 801229a:	4944      	ldr	r1, [pc, #272]	; (80123ac <sys_timeout+0x138>)
 801229c:	4844      	ldr	r0, [pc, #272]	; (80123b0 <sys_timeout+0x13c>)
 801229e:	f002 f9d1 	bl	8014644 <iprintf>
    return;
 80122a2:	e07c      	b.n	801239e <sys_timeout+0x12a>
  }

  now = sys_now();
 80122a4:	f001 fb1c 	bl	80138e0 <sys_now>
 80122a8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80122aa:	4b42      	ldr	r3, [pc, #264]	; (80123b4 <sys_timeout+0x140>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d105      	bne.n	80122be <sys_timeout+0x4a>
    diff = 0;
 80122b2:	2300      	movs	r3, #0
 80122b4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80122b6:	4a40      	ldr	r2, [pc, #256]	; (80123b8 <sys_timeout+0x144>)
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	e004      	b.n	80122c8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80122be:	4b3e      	ldr	r3, [pc, #248]	; (80123b8 <sys_timeout+0x144>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	693a      	ldr	r2, [r7, #16]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	2200      	movs	r2, #0
 80122cc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	68ba      	ldr	r2, [r7, #8]
 80122d2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	441a      	add	r2, r3
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80122e4:	4b33      	ldr	r3, [pc, #204]	; (80123b4 <sys_timeout+0x140>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d103      	bne.n	80122f4 <sys_timeout+0x80>
    next_timeout = timeout;
 80122ec:	4a31      	ldr	r2, [pc, #196]	; (80123b4 <sys_timeout+0x140>)
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	6013      	str	r3, [r2, #0]
    return;
 80122f2:	e055      	b.n	80123a0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80122f4:	4b2f      	ldr	r3, [pc, #188]	; (80123b4 <sys_timeout+0x140>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	685a      	ldr	r2, [r3, #4]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d90f      	bls.n	8012320 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012300:	4b2c      	ldr	r3, [pc, #176]	; (80123b4 <sys_timeout+0x140>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a2b      	ldr	r2, [pc, #172]	; (80123b4 <sys_timeout+0x140>)
 8012306:	6812      	ldr	r2, [r2, #0]
 8012308:	6851      	ldr	r1, [r2, #4]
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	1a8a      	subs	r2, r1, r2
 801230e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012310:	4b28      	ldr	r3, [pc, #160]	; (80123b4 <sys_timeout+0x140>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012318:	4a26      	ldr	r2, [pc, #152]	; (80123b4 <sys_timeout+0x140>)
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	6013      	str	r3, [r2, #0]
 801231e:	e03f      	b.n	80123a0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012320:	4b24      	ldr	r3, [pc, #144]	; (80123b4 <sys_timeout+0x140>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	61fb      	str	r3, [r7, #28]
 8012326:	e036      	b.n	8012396 <sys_timeout+0x122>
      timeout->time -= t->time;
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	685a      	ldr	r2, [r3, #4]
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	1ad2      	subs	r2, r2, r3
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d006      	beq.n	801234c <sys_timeout+0xd8>
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	685a      	ldr	r2, [r3, #4]
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	429a      	cmp	r2, r3
 801234a:	d921      	bls.n	8012390 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d009      	beq.n	8012368 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	69fa      	ldr	r2, [r7, #28]
 801235a:	6812      	ldr	r2, [r2, #0]
 801235c:	6851      	ldr	r1, [r2, #4]
 801235e:	697a      	ldr	r2, [r7, #20]
 8012360:	6852      	ldr	r2, [r2, #4]
 8012362:	1a8a      	subs	r2, r1, r2
 8012364:	605a      	str	r2, [r3, #4]
 8012366:	e00b      	b.n	8012380 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	685a      	ldr	r2, [r3, #4]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	429a      	cmp	r2, r3
 8012370:	d906      	bls.n	8012380 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012372:	4b10      	ldr	r3, [pc, #64]	; (80123b4 <sys_timeout+0x140>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	685a      	ldr	r2, [r3, #4]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	441a      	add	r2, r3
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	697a      	ldr	r2, [r7, #20]
 801238c:	601a      	str	r2, [r3, #0]
        break;
 801238e:	e007      	b.n	80123a0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	61fb      	str	r3, [r7, #28]
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d1c5      	bne.n	8012328 <sys_timeout+0xb4>
 801239c:	e000      	b.n	80123a0 <sys_timeout+0x12c>
    return;
 801239e:	bf00      	nop
      }
    }
  }
}
 80123a0:	3720      	adds	r7, #32
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	08017c08 	.word	0x08017c08
 80123ac:	08017c3c 	.word	0x08017c3c
 80123b0:	08017c7c 	.word	0x08017c7c
 80123b4:	20003fc0 	.word	0x20003fc0
 80123b8:	20003fc4 	.word	0x20003fc4

080123bc <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80123c2:	4b21      	ldr	r3, [pc, #132]	; (8012448 <sys_check_timeouts+0x8c>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d039      	beq.n	801243e <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80123ca:	f001 fa89 	bl	80138e0 <sys_now>
 80123ce:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80123d0:	4b1e      	ldr	r3, [pc, #120]	; (801244c <sys_check_timeouts+0x90>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80123de:	4b1a      	ldr	r3, [pc, #104]	; (8012448 <sys_check_timeouts+0x8c>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d026      	beq.n	8012438 <sys_check_timeouts+0x7c>
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d821      	bhi.n	8012438 <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 80123f4:	2301      	movs	r3, #1
 80123f6:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	685a      	ldr	r2, [r3, #4]
 80123fc:	4b13      	ldr	r3, [pc, #76]	; (801244c <sys_check_timeouts+0x90>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4413      	add	r3, r2
 8012402:	4a12      	ldr	r2, [pc, #72]	; (801244c <sys_check_timeouts+0x90>)
 8012404:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	697a      	ldr	r2, [r7, #20]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4a0c      	ldr	r2, [pc, #48]	; (8012448 <sys_check_timeouts+0x8c>)
 8012416:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	689b      	ldr	r3, [r3, #8]
 801241c:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012424:	68b9      	ldr	r1, [r7, #8]
 8012426:	200a      	movs	r0, #10
 8012428:	f7f9 fd16 	bl	800be58 <memp_free>
        if (handler != NULL) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d002      	beq.n	8012438 <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6838      	ldr	r0, [r7, #0]
 8012436:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012438:	7cfb      	ldrb	r3, [r7, #19]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1cd      	bne.n	80123da <sys_check_timeouts+0x1e>
  }
}
 801243e:	bf00      	nop
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	20003fc0 	.word	0x20003fc0
 801244c:	20003fc4 	.word	0x20003fc4

08012450 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012456:	4b0f      	ldr	r3, [pc, #60]	; (8012494 <sys_timeouts_sleeptime+0x44>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d102      	bne.n	8012464 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801245e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012462:	e013      	b.n	801248c <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012464:	f001 fa3c 	bl	80138e0 <sys_now>
 8012468:	4602      	mov	r2, r0
 801246a:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <sys_timeouts_sleeptime+0x48>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8012472:	4b08      	ldr	r3, [pc, #32]	; (8012494 <sys_timeouts_sleeptime+0x44>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	429a      	cmp	r2, r3
 801247c:	d201      	bcs.n	8012482 <sys_timeouts_sleeptime+0x32>
    return 0;
 801247e:	2300      	movs	r3, #0
 8012480:	e004      	b.n	801248c <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8012482:	4b04      	ldr	r3, [pc, #16]	; (8012494 <sys_timeouts_sleeptime+0x44>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	685a      	ldr	r2, [r3, #4]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	1ad3      	subs	r3, r2, r3
  }
}
 801248c:	4618      	mov	r0, r3
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	20003fc0 	.word	0x20003fc0
 8012498:	20003fc4 	.word	0x20003fc4

0801249c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80124a6:	4b0f      	ldr	r3, [pc, #60]	; (80124e4 <sys_timeouts_mbox_fetch+0x48>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d105      	bne.n	80124ba <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80124ae:	2200      	movs	r2, #0
 80124b0:	6839      	ldr	r1, [r7, #0]
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fd43 	bl	8012f3e <sys_arch_mbox_fetch>
    return;
 80124b8:	e011      	b.n	80124de <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80124ba:	f7ff ffc9 	bl	8012450 <sys_timeouts_sleeptime>
 80124be:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d008      	beq.n	80124d8 <sys_timeouts_mbox_fetch+0x3c>
 80124c6:	68fa      	ldr	r2, [r7, #12]
 80124c8:	6839      	ldr	r1, [r7, #0]
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f000 fd37 	bl	8012f3e <sys_arch_mbox_fetch>
 80124d0:	4603      	mov	r3, r0
 80124d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124d6:	d102      	bne.n	80124de <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80124d8:	f7ff ff70 	bl	80123bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80124dc:	e7e3      	b.n	80124a6 <sys_timeouts_mbox_fetch+0xa>
  }
}
 80124de:	3710      	adds	r7, #16
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	20003fc0 	.word	0x20003fc0

080124e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80124e8:	b480      	push	{r7}
 80124ea:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80124ec:	bf00      	nop
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
	...

080124f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80124fe:	2300      	movs	r3, #0
 8012500:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012502:	4b17      	ldr	r3, [pc, #92]	; (8012560 <udp_new_port+0x68>)
 8012504:	881b      	ldrh	r3, [r3, #0]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	b291      	uxth	r1, r2
 801250a:	4a15      	ldr	r2, [pc, #84]	; (8012560 <udp_new_port+0x68>)
 801250c:	8011      	strh	r1, [r2, #0]
 801250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012512:	4293      	cmp	r3, r2
 8012514:	d103      	bne.n	801251e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012516:	4b12      	ldr	r3, [pc, #72]	; (8012560 <udp_new_port+0x68>)
 8012518:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801251c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801251e:	4b11      	ldr	r3, [pc, #68]	; (8012564 <udp_new_port+0x6c>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	603b      	str	r3, [r7, #0]
 8012524:	e011      	b.n	801254a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	8a5a      	ldrh	r2, [r3, #18]
 801252a:	4b0d      	ldr	r3, [pc, #52]	; (8012560 <udp_new_port+0x68>)
 801252c:	881b      	ldrh	r3, [r3, #0]
 801252e:	429a      	cmp	r2, r3
 8012530:	d108      	bne.n	8012544 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012532:	88fb      	ldrh	r3, [r7, #6]
 8012534:	3301      	adds	r3, #1
 8012536:	80fb      	strh	r3, [r7, #6]
 8012538:	88fb      	ldrh	r3, [r7, #6]
 801253a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801253e:	d3e0      	bcc.n	8012502 <udp_new_port+0xa>
        return 0;
 8012540:	2300      	movs	r3, #0
 8012542:	e007      	b.n	8012554 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	603b      	str	r3, [r7, #0]
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1ea      	bne.n	8012526 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012550:	4b03      	ldr	r3, [pc, #12]	; (8012560 <udp_new_port+0x68>)
 8012552:	881b      	ldrh	r3, [r3, #0]
}
 8012554:	4618      	mov	r0, r3
 8012556:	370c      	adds	r7, #12
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	20000010 	.word	0x20000010
 8012564:	20007750 	.word	0x20007750

08012568 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	4613      	mov	r3, r2
 8012574:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012576:	79fb      	ldrb	r3, [r7, #7]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d018      	beq.n	80125ae <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d013      	beq.n	80125aa <udp_input_local_match+0x42>
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00f      	beq.n	80125aa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801258a:	4b14      	ldr	r3, [pc, #80]	; (80125dc <udp_input_local_match+0x74>)
 801258c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801258e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012592:	d00a      	beq.n	80125aa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	4b10      	ldr	r3, [pc, #64]	; (80125dc <udp_input_local_match+0x74>)
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	405a      	eors	r2, r3
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	3308      	adds	r3, #8
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d110      	bne.n	80125cc <udp_input_local_match+0x64>
          return 1;
 80125aa:	2301      	movs	r3, #1
 80125ac:	e00f      	b.n	80125ce <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d009      	beq.n	80125c8 <udp_input_local_match+0x60>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d005      	beq.n	80125c8 <udp_input_local_match+0x60>
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	4b06      	ldr	r3, [pc, #24]	; (80125dc <udp_input_local_match+0x74>)
 80125c2:	695b      	ldr	r3, [r3, #20]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d101      	bne.n	80125cc <udp_input_local_match+0x64>
      return 1;
 80125c8:	2301      	movs	r3, #1
 80125ca:	e000      	b.n	80125ce <udp_input_local_match+0x66>
    }
  }

  return 0;
 80125cc:	2300      	movs	r3, #0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3714      	adds	r7, #20
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop
 80125dc:	20004028 	.word	0x20004028

080125e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80125e0:	b590      	push	{r4, r7, lr}
 80125e2:	b08d      	sub	sp, #52	; 0x34
 80125e4:	af02      	add	r7, sp, #8
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	895b      	ldrh	r3, [r3, #10]
 80125f2:	2b07      	cmp	r3, #7
 80125f4:	d803      	bhi.n	80125fe <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7fa f988 	bl	800c90c <pbuf_free>
    goto end;
 80125fc:	e0c6      	b.n	801278c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012604:	4b63      	ldr	r3, [pc, #396]	; (8012794 <udp_input+0x1b4>)
 8012606:	695a      	ldr	r2, [r3, #20]
 8012608:	4b62      	ldr	r3, [pc, #392]	; (8012794 <udp_input+0x1b4>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4619      	mov	r1, r3
 801260e:	4610      	mov	r0, r2
 8012610:	f7f8 f8c2 	bl	800a798 <ip4_addr_isbroadcast_u32>
 8012614:	4603      	mov	r3, r0
 8012616:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	b29b      	uxth	r3, r3
 801261e:	4618      	mov	r0, r3
 8012620:	f7f6 fd62 	bl	80090e8 <lwip_htons>
 8012624:	4603      	mov	r3, r0
 8012626:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	885b      	ldrh	r3, [r3, #2]
 801262c:	b29b      	uxth	r3, r3
 801262e:	4618      	mov	r0, r3
 8012630:	f7f6 fd5a 	bl	80090e8 <lwip_htons>
 8012634:	4603      	mov	r3, r0
 8012636:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012638:	2300      	movs	r3, #0
 801263a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801263c:	2300      	movs	r3, #0
 801263e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012640:	2300      	movs	r3, #0
 8012642:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012644:	4b54      	ldr	r3, [pc, #336]	; (8012798 <udp_input+0x1b8>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	627b      	str	r3, [r7, #36]	; 0x24
 801264a:	e03b      	b.n	80126c4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264e:	8a5b      	ldrh	r3, [r3, #18]
 8012650:	89fa      	ldrh	r2, [r7, #14]
 8012652:	429a      	cmp	r2, r3
 8012654:	d131      	bne.n	80126ba <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012656:	7cfb      	ldrb	r3, [r7, #19]
 8012658:	461a      	mov	r2, r3
 801265a:	6839      	ldr	r1, [r7, #0]
 801265c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801265e:	f7ff ff83 	bl	8012568 <udp_input_local_match>
 8012662:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012664:	2b00      	cmp	r3, #0
 8012666:	d028      	beq.n	80126ba <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266a:	7c1b      	ldrb	r3, [r3, #16]
 801266c:	f003 0304 	and.w	r3, r3, #4
 8012670:	2b00      	cmp	r3, #0
 8012672:	d104      	bne.n	801267e <udp_input+0x9e>
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d101      	bne.n	801267e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012680:	8a9b      	ldrh	r3, [r3, #20]
 8012682:	8a3a      	ldrh	r2, [r7, #16]
 8012684:	429a      	cmp	r2, r3
 8012686:	d118      	bne.n	80126ba <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801268c:	2b00      	cmp	r3, #0
 801268e:	d005      	beq.n	801269c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012692:	685a      	ldr	r2, [r3, #4]
 8012694:	4b3f      	ldr	r3, [pc, #252]	; (8012794 <udp_input+0x1b4>)
 8012696:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012698:	429a      	cmp	r2, r3
 801269a:	d10e      	bne.n	80126ba <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d014      	beq.n	80126cc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80126a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a4:	68da      	ldr	r2, [r3, #12]
 80126a6:	6a3b      	ldr	r3, [r7, #32]
 80126a8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80126aa:	4b3b      	ldr	r3, [pc, #236]	; (8012798 <udp_input+0x1b8>)
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80126b2:	4a39      	ldr	r2, [pc, #228]	; (8012798 <udp_input+0x1b8>)
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80126b8:	e008      	b.n	80126cc <udp_input+0xec>
      }
    }

    prev = pcb;
 80126ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126bc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
 80126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1c0      	bne.n	801264c <udp_input+0x6c>
 80126ca:	e000      	b.n	80126ce <udp_input+0xee>
        break;
 80126cc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <udp_input+0xf8>
    pcb = uncon_pcb;
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d002      	beq.n	80126e4 <udp_input+0x104>
    for_us = 1;
 80126de:	2301      	movs	r3, #1
 80126e0:	76fb      	strb	r3, [r7, #27]
 80126e2:	e00a      	b.n	80126fa <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	3304      	adds	r3, #4
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	4b2a      	ldr	r3, [pc, #168]	; (8012794 <udp_input+0x1b4>)
 80126ec:	695b      	ldr	r3, [r3, #20]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	bf0c      	ite	eq
 80126f2:	2301      	moveq	r3, #1
 80126f4:	2300      	movne	r3, #0
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80126fa:	7efb      	ldrb	r3, [r7, #27]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d042      	beq.n	8012786 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012700:	f06f 0107 	mvn.w	r1, #7
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7fa f8dd 	bl	800c8c4 <pbuf_header>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00a      	beq.n	8012726 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012710:	4b22      	ldr	r3, [pc, #136]	; (801279c <udp_input+0x1bc>)
 8012712:	f240 1255 	movw	r2, #341	; 0x155
 8012716:	4922      	ldr	r1, [pc, #136]	; (80127a0 <udp_input+0x1c0>)
 8012718:	4822      	ldr	r0, [pc, #136]	; (80127a4 <udp_input+0x1c4>)
 801271a:	f001 ff93 	bl	8014644 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7fa f8f4 	bl	800c90c <pbuf_free>
      goto end;
 8012724:	e032      	b.n	801278c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	2b00      	cmp	r3, #0
 801272a:	d012      	beq.n	8012752 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	699b      	ldr	r3, [r3, #24]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00a      	beq.n	801274a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012736:	699c      	ldr	r4, [r3, #24]
 8012738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273a:	69d8      	ldr	r0, [r3, #28]
 801273c:	8a3b      	ldrh	r3, [r7, #16]
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	4b19      	ldr	r3, [pc, #100]	; (80127a8 <udp_input+0x1c8>)
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012746:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012748:	e021      	b.n	801278e <udp_input+0x1ae>
        pbuf_free(p);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7fa f8de 	bl	800c90c <pbuf_free>
        goto end;
 8012750:	e01c      	b.n	801278c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012752:	7cfb      	ldrb	r3, [r7, #19]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d112      	bne.n	801277e <udp_input+0x19e>
 8012758:	4b0e      	ldr	r3, [pc, #56]	; (8012794 <udp_input+0x1b4>)
 801275a:	695b      	ldr	r3, [r3, #20]
 801275c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012760:	2be0      	cmp	r3, #224	; 0xe0
 8012762:	d00c      	beq.n	801277e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012764:	4b0b      	ldr	r3, [pc, #44]	; (8012794 <udp_input+0x1b4>)
 8012766:	899b      	ldrh	r3, [r3, #12]
 8012768:	3308      	adds	r3, #8
 801276a:	b29b      	uxth	r3, r3
 801276c:	b21b      	sxth	r3, r3
 801276e:	4619      	mov	r1, r3
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7fa f8b9 	bl	800c8e8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012776:	2103      	movs	r1, #3
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7f7 fd0f 	bl	800a19c <icmp_dest_unreach>
      pbuf_free(p);
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7fa f8c4 	bl	800c90c <pbuf_free>
  return;
 8012784:	e003      	b.n	801278e <udp_input+0x1ae>
    pbuf_free(p);
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7fa f8c0 	bl	800c90c <pbuf_free>
  return;
 801278c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801278e:	372c      	adds	r7, #44	; 0x2c
 8012790:	46bd      	mov	sp, r7
 8012792:	bd90      	pop	{r4, r7, pc}
 8012794:	20004028 	.word	0x20004028
 8012798:	20007750 	.word	0x20007750
 801279c:	08017ca4 	.word	0x08017ca4
 80127a0:	08017cd4 	.word	0x08017cd4
 80127a4:	08017ce8 	.word	0x08017ce8
 80127a8:	20004038 	.word	0x20004038

080127ac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d102      	bne.n	80127c2 <udp_send+0x16>
    return ERR_VAL;
 80127bc:	f06f 0305 	mvn.w	r3, #5
 80127c0:	e008      	b.n	80127d4 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	1d1a      	adds	r2, r3, #4
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	8a9b      	ldrh	r3, [r3, #20]
 80127ca:	6839      	ldr	r1, [r7, #0]
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 f805 	bl	80127dc <udp_sendto>
 80127d2:	4603      	mov	r3, r0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}

080127dc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b088      	sub	sp, #32
 80127e0:	af02      	add	r7, sp, #8
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
 80127e8:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <udp_sendto+0x1e>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <udp_sendto+0x24>
    return ERR_VAL;
 80127fa:	f06f 0305 	mvn.w	r3, #5
 80127fe:	e013      	b.n	8012828 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8012800:	6978      	ldr	r0, [r7, #20]
 8012802:	f7f7 fd53 	bl	800a2ac <ip4_route>
 8012806:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d102      	bne.n	8012814 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801280e:	f06f 0303 	mvn.w	r3, #3
 8012812:	e009      	b.n	8012828 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012814:	887a      	ldrh	r2, [r7, #2]
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	4613      	mov	r3, r2
 801281c:	687a      	ldr	r2, [r7, #4]
 801281e:	68b9      	ldr	r1, [r7, #8]
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f000 f805 	bl	8012830 <udp_sendto_if>
 8012826:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012828:	4618      	mov	r0, r3
 801282a:	3718      	adds	r7, #24
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af02      	add	r7, sp, #8
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d002      	beq.n	801284a <udp_sendto_if+0x1a>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d102      	bne.n	8012850 <udp_sendto_if+0x20>
    return ERR_VAL;
 801284a:	f06f 0305 	mvn.w	r3, #5
 801284e:	e028      	b.n	80128a2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d009      	beq.n	801286a <udp_sendto_if+0x3a>
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d005      	beq.n	801286a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012866:	2be0      	cmp	r3, #224	; 0xe0
 8012868:	d103      	bne.n	8012872 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801286a:	6a3b      	ldr	r3, [r7, #32]
 801286c:	3304      	adds	r3, #4
 801286e:	617b      	str	r3, [r7, #20]
 8012870:	e00b      	b.n	801288a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	3304      	adds	r3, #4
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	429a      	cmp	r2, r3
 801287e:	d002      	beq.n	8012886 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012880:	f06f 0303 	mvn.w	r3, #3
 8012884:	e00d      	b.n	80128a2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801288a:	887a      	ldrh	r2, [r7, #2]
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	9301      	str	r3, [sp, #4]
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	4613      	mov	r3, r2
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	68b9      	ldr	r1, [r7, #8]
 801289a:	68f8      	ldr	r0, [r7, #12]
 801289c:	f000 f806 	bl	80128ac <udp_sendto_if_src>
 80128a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3718      	adds	r7, #24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
	...

080128ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b08c      	sub	sp, #48	; 0x30
 80128b0:	af04      	add	r7, sp, #16
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
 80128b8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d002      	beq.n	80128c6 <udp_sendto_if_src+0x1a>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d102      	bne.n	80128cc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80128c6:	f06f 0305 	mvn.w	r3, #5
 80128ca:	e07e      	b.n	80129ca <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	8a5b      	ldrh	r3, [r3, #18]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d10f      	bne.n	80128f4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80128d4:	68f9      	ldr	r1, [r7, #12]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	8a5b      	ldrh	r3, [r3, #18]
 80128da:	461a      	mov	r2, r3
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f000 f87f 	bl	80129e0 <udp_bind>
 80128e2:	4603      	mov	r3, r0
 80128e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80128e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d002      	beq.n	80128f4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80128ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80128f2:	e06a      	b.n	80129ca <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80128f4:	2108      	movs	r1, #8
 80128f6:	68b8      	ldr	r0, [r7, #8]
 80128f8:	f7f9 ffe4 	bl	800c8c4 <pbuf_header>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d014      	beq.n	801292c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012902:	2200      	movs	r2, #0
 8012904:	2108      	movs	r1, #8
 8012906:	2001      	movs	r0, #1
 8012908:	f7f9 fc8e 	bl	800c228 <pbuf_alloc>
 801290c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d102      	bne.n	801291a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012918:	e057      	b.n	80129ca <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	891b      	ldrh	r3, [r3, #8]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d006      	beq.n	8012930 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012922:	68b9      	ldr	r1, [r7, #8]
 8012924:	69f8      	ldr	r0, [r7, #28]
 8012926:	f7fa f921 	bl	800cb6c <pbuf_chain>
 801292a:	e001      	b.n	8012930 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	895b      	ldrh	r3, [r3, #10]
 8012934:	2b07      	cmp	r3, #7
 8012936:	d806      	bhi.n	8012946 <udp_sendto_if_src+0x9a>
 8012938:	4b26      	ldr	r3, [pc, #152]	; (80129d4 <udp_sendto_if_src+0x128>)
 801293a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801293e:	4926      	ldr	r1, [pc, #152]	; (80129d8 <udp_sendto_if_src+0x12c>)
 8012940:	4826      	ldr	r0, [pc, #152]	; (80129dc <udp_sendto_if_src+0x130>)
 8012942:	f001 fe7f 	bl	8014644 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	8a5b      	ldrh	r3, [r3, #18]
 8012950:	4618      	mov	r0, r3
 8012952:	f7f6 fbc9 	bl	80090e8 <lwip_htons>
 8012956:	4603      	mov	r3, r0
 8012958:	461a      	mov	r2, r3
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801295e:	887b      	ldrh	r3, [r7, #2]
 8012960:	4618      	mov	r0, r3
 8012962:	f7f6 fbc1 	bl	80090e8 <lwip_htons>
 8012966:	4603      	mov	r3, r0
 8012968:	461a      	mov	r2, r3
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	2200      	movs	r2, #0
 8012972:	719a      	strb	r2, [r3, #6]
 8012974:	2200      	movs	r2, #0
 8012976:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	891b      	ldrh	r3, [r3, #8]
 801297c:	4618      	mov	r0, r3
 801297e:	f7f6 fbb3 	bl	80090e8 <lwip_htons>
 8012982:	4603      	mov	r3, r0
 8012984:	461a      	mov	r2, r3
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801298a:	2311      	movs	r3, #17
 801298c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	7a9b      	ldrb	r3, [r3, #10]
 8012992:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	7a5b      	ldrb	r3, [r3, #9]
 8012998:	7cb9      	ldrb	r1, [r7, #18]
 801299a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801299c:	9202      	str	r2, [sp, #8]
 801299e:	7cfa      	ldrb	r2, [r7, #19]
 80129a0:	9201      	str	r2, [sp, #4]
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	460b      	mov	r3, r1
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129aa:	69f8      	ldr	r0, [r7, #28]
 80129ac:	f7f7 fe4c 	bl	800a648 <ip4_output_if_src>
 80129b0:	4603      	mov	r3, r0
 80129b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80129b4:	69fa      	ldr	r2, [r7, #28]
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d004      	beq.n	80129c6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80129bc:	69f8      	ldr	r0, [r7, #28]
 80129be:	f7f9 ffa5 	bl	800c90c <pbuf_free>
    q = NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80129c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3720      	adds	r7, #32
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	08017ca4 	.word	0x08017ca4
 80129d8:	08017d10 	.word	0x08017d10
 80129dc:	08017ce8 	.word	0x08017ce8

080129e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	4613      	mov	r3, r2
 80129ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80129f4:	4b30      	ldr	r3, [pc, #192]	; (8012ab8 <udp_bind+0xd8>)
 80129f6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d002      	beq.n	8012a04 <udp_bind+0x24>
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d102      	bne.n	8012a0a <udp_bind+0x2a>
    return ERR_VAL;
 8012a04:	f06f 0305 	mvn.w	r3, #5
 8012a08:	e052      	b.n	8012ab0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a0e:	4b2b      	ldr	r3, [pc, #172]	; (8012abc <udp_bind+0xdc>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	617b      	str	r3, [r7, #20]
 8012a14:	e009      	b.n	8012a2a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d102      	bne.n	8012a24 <udp_bind+0x44>
      rebind = 1;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	74fb      	strb	r3, [r7, #19]
      break;
 8012a22:	e005      	b.n	8012a30 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	617b      	str	r3, [r7, #20]
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1f2      	bne.n	8012a16 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012a30:	88fb      	ldrh	r3, [r7, #6]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d109      	bne.n	8012a4a <udp_bind+0x6a>
    port = udp_new_port();
 8012a36:	f7ff fd5f 	bl	80124f8 <udp_new_port>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a3e:	88fb      	ldrh	r3, [r7, #6]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d11e      	bne.n	8012a82 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012a44:	f06f 0307 	mvn.w	r3, #7
 8012a48:	e032      	b.n	8012ab0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a4a:	4b1c      	ldr	r3, [pc, #112]	; (8012abc <udp_bind+0xdc>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	e014      	b.n	8012a7c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d00d      	beq.n	8012a76 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	8a5b      	ldrh	r3, [r3, #18]
 8012a5e:	88fa      	ldrh	r2, [r7, #6]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d108      	bne.n	8012a76 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d102      	bne.n	8012a76 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012a70:	f06f 0307 	mvn.w	r3, #7
 8012a74:	e01c      	b.n	8012ab0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	617b      	str	r3, [r7, #20]
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1e7      	bne.n	8012a52 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d002      	beq.n	8012a8e <udp_bind+0xae>
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	e000      	b.n	8012a90 <udp_bind+0xb0>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	68fa      	ldr	r2, [r7, #12]
 8012a92:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	88fa      	ldrh	r2, [r7, #6]
 8012a98:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012a9a:	7cfb      	ldrb	r3, [r7, #19]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d106      	bne.n	8012aae <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012aa0:	4b06      	ldr	r3, [pc, #24]	; (8012abc <udp_bind+0xdc>)
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012aa8:	4a04      	ldr	r2, [pc, #16]	; (8012abc <udp_bind+0xdc>)
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3718      	adds	r7, #24
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	08017f40 	.word	0x08017f40
 8012abc:	20007750 	.word	0x20007750

08012ac0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	4613      	mov	r3, r2
 8012acc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <udp_connect+0x1a>
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d102      	bne.n	8012ae0 <udp_connect+0x20>
    return ERR_VAL;
 8012ada:	f06f 0305 	mvn.w	r3, #5
 8012ade:	e03e      	b.n	8012b5e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	8a5b      	ldrh	r3, [r3, #18]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d10f      	bne.n	8012b08 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012ae8:	68f9      	ldr	r1, [r7, #12]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	8a5b      	ldrh	r3, [r3, #18]
 8012aee:	461a      	mov	r2, r3
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f7ff ff75 	bl	80129e0 <udp_bind>
 8012af6:	4603      	mov	r3, r0
 8012af8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012afa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <udp_connect+0x48>
      return err;
 8012b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b06:	e02a      	b.n	8012b5e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d002      	beq.n	8012b14 <udp_connect+0x54>
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	e000      	b.n	8012b16 <udp_connect+0x56>
 8012b14:	2300      	movs	r3, #0
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	88fa      	ldrh	r2, [r7, #6]
 8012b1e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	7c1b      	ldrb	r3, [r3, #16]
 8012b24:	f043 0304 	orr.w	r3, r3, #4
 8012b28:	b2da      	uxtb	r2, r3
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b2e:	4b0e      	ldr	r3, [pc, #56]	; (8012b68 <udp_connect+0xa8>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e008      	b.n	8012b48 <udp_connect+0x88>
    if (pcb == ipcb) {
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d101      	bne.n	8012b42 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e00d      	b.n	8012b5e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	617b      	str	r3, [r7, #20]
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1f3      	bne.n	8012b36 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012b4e:	4b06      	ldr	r3, [pc, #24]	; (8012b68 <udp_connect+0xa8>)
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012b56:	4a04      	ldr	r2, [pc, #16]	; (8012b68 <udp_connect+0xa8>)
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3718      	adds	r7, #24
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	20007750 	.word	0x20007750

08012b6c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	7c1b      	ldrb	r3, [r3, #16]
 8012b84:	f023 0304 	bic.w	r3, r3, #4
 8012b88:	b2da      	uxtb	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	741a      	strb	r2, [r3, #16]
}
 8012b8e:	bf00      	nop
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b085      	sub	sp, #20
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	60f8      	str	r0, [r7, #12]
 8012ba2:	60b9      	str	r1, [r7, #8]
 8012ba4:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	68ba      	ldr	r2, [r7, #8]
 8012baa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	61da      	str	r2, [r3, #28]
}
 8012bb2:	bf00      	nop
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr
	...

08012bc0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012bc8:	4b15      	ldr	r3, [pc, #84]	; (8012c20 <udp_remove+0x60>)
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d105      	bne.n	8012bde <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012bd2:	4b13      	ldr	r3, [pc, #76]	; (8012c20 <udp_remove+0x60>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	4a11      	ldr	r2, [pc, #68]	; (8012c20 <udp_remove+0x60>)
 8012bda:	6013      	str	r3, [r2, #0]
 8012bdc:	e017      	b.n	8012c0e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012bde:	4b10      	ldr	r3, [pc, #64]	; (8012c20 <udp_remove+0x60>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	60fb      	str	r3, [r7, #12]
 8012be4:	e010      	b.n	8012c08 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d009      	beq.n	8012c02 <udp_remove+0x42>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	68da      	ldr	r2, [r3, #12]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d104      	bne.n	8012c02 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	68da      	ldr	r2, [r3, #12]
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	60da      	str	r2, [r3, #12]
        break;
 8012c00:	e005      	b.n	8012c0e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	60fb      	str	r3, [r7, #12]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1eb      	bne.n	8012be6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012c0e:	6879      	ldr	r1, [r7, #4]
 8012c10:	2000      	movs	r0, #0
 8012c12:	f7f9 f921 	bl	800be58 <memp_free>
}
 8012c16:	bf00      	nop
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	20007750 	.word	0x20007750

08012c24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	f7f9 f8c2 	bl	800bdb4 <memp_malloc>
 8012c30:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d007      	beq.n	8012c48 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012c38:	2220      	movs	r2, #32
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f001 fcf9 	bl	8014634 <memset>
    pcb->ttl = UDP_TTL;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	22ff      	movs	r2, #255	; 0xff
 8012c46:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012c48:	687b      	ldr	r3, [r7, #4]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012c52:	b580      	push	{r7, lr}
 8012c54:	b084      	sub	sp, #16
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	4603      	mov	r3, r0
 8012c5a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012c5c:	f7ff ffe2 	bl	8012c24 <udp_new>
 8012c60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012c62:	68fb      	ldr	r3, [r7, #12]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b085      	sub	sp, #20
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d01e      	beq.n	8012cba <udp_netif_ip_addr_changed+0x4e>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01a      	beq.n	8012cba <udp_netif_ip_addr_changed+0x4e>
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d017      	beq.n	8012cba <udp_netif_ip_addr_changed+0x4e>
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d013      	beq.n	8012cba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012c92:	4b0d      	ldr	r3, [pc, #52]	; (8012cc8 <udp_netif_ip_addr_changed+0x5c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	60fb      	str	r3, [r7, #12]
 8012c98:	e00c      	b.n	8012cb4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d103      	bne.n	8012cae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	60fb      	str	r3, [r7, #12]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1ef      	bne.n	8012c9a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012cba:	bf00      	nop
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop
 8012cc8:	20007750 	.word	0x20007750

08012ccc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012cd6:	230e      	movs	r3, #14
 8012cd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	895b      	ldrh	r3, [r3, #10]
 8012cde:	2b0e      	cmp	r3, #14
 8012ce0:	d977      	bls.n	8012dd2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685b      	ldr	r3, [r3, #4]
 8012ce6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	7b1a      	ldrb	r2, [r3, #12]
 8012cec:	7b5b      	ldrb	r3, [r3, #13]
 8012cee:	021b      	lsls	r3, r3, #8
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012cf4:	693b      	ldr	r3, [r7, #16]
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	f003 0301 	and.w	r3, r3, #1
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d023      	beq.n	8012d48 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d10f      	bne.n	8012d28 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	785b      	ldrb	r3, [r3, #1]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d11b      	bne.n	8012d48 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d14:	2b5e      	cmp	r3, #94	; 0x5e
 8012d16:	d117      	bne.n	8012d48 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	7b5b      	ldrb	r3, [r3, #13]
 8012d1c:	f043 0310 	orr.w	r3, r3, #16
 8012d20:	b2da      	uxtb	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	735a      	strb	r2, [r3, #13]
 8012d26:	e00f      	b.n	8012d48 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	2206      	movs	r2, #6
 8012d2c:	492f      	ldr	r1, [pc, #188]	; (8012dec <ethernet_input+0x120>)
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f001 fc66 	bl	8014600 <memcmp>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d106      	bne.n	8012d48 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	7b5b      	ldrb	r3, [r3, #13]
 8012d3e:	f043 0308 	orr.w	r3, r3, #8
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012d48:	89fb      	ldrh	r3, [r7, #14]
 8012d4a:	2b08      	cmp	r3, #8
 8012d4c:	d003      	beq.n	8012d56 <ethernet_input+0x8a>
 8012d4e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012d52:	d01e      	beq.n	8012d92 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012d54:	e042      	b.n	8012ddc <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d5c:	f003 0308 	and.w	r3, r3, #8
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d038      	beq.n	8012dd6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	895b      	ldrh	r3, [r3, #10]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	db34      	blt.n	8012ddc <ethernet_input+0x110>
 8012d72:	8afb      	ldrh	r3, [r7, #22]
 8012d74:	425b      	negs	r3, r3
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	b21b      	sxth	r3, r3
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f7f9 fda1 	bl	800c8c4 <pbuf_header>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d129      	bne.n	8012ddc <ethernet_input+0x110>
        ip4_input(p, netif);
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7f7 faf6 	bl	800a37c <ip4_input>
      break;
 8012d90:	e01d      	b.n	8012dce <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012d98:	f003 0308 	and.w	r3, r3, #8
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d01c      	beq.n	8012dda <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	895b      	ldrh	r3, [r3, #10]
 8012da4:	461a      	mov	r2, r3
 8012da6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	db16      	blt.n	8012ddc <ethernet_input+0x110>
 8012dae:	8afb      	ldrh	r3, [r7, #22]
 8012db0:	425b      	negs	r3, r3
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	b21b      	sxth	r3, r3
 8012db6:	4619      	mov	r1, r3
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7f9 fd83 	bl	800c8c4 <pbuf_header>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10b      	bne.n	8012ddc <ethernet_input+0x110>
        etharp_input(p, netif);
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7f6 fcc6 	bl	8009758 <etharp_input>
      break;
 8012dcc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	e008      	b.n	8012de4 <ethernet_input+0x118>
    goto free_and_return;
 8012dd2:	bf00      	nop
 8012dd4:	e002      	b.n	8012ddc <ethernet_input+0x110>
        goto free_and_return;
 8012dd6:	bf00      	nop
 8012dd8:	e000      	b.n	8012ddc <ethernet_input+0x110>
        goto free_and_return;
 8012dda:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7f9 fd95 	bl	800c90c <pbuf_free>
  return ERR_OK;
 8012de2:	2300      	movs	r3, #0
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	3718      	adds	r7, #24
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}
 8012dec:	08018054 	.word	0x08018054

08012df0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012dfe:	8c3b      	ldrh	r3, [r7, #32]
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f6 f971 	bl	80090e8 <lwip_htons>
 8012e06:	4603      	mov	r3, r0
 8012e08:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012e0a:	210e      	movs	r1, #14
 8012e0c:	68b8      	ldr	r0, [r7, #8]
 8012e0e:	f7f9 fd59 	bl	800c8c4 <pbuf_header>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d125      	bne.n	8012e64 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	8afa      	ldrh	r2, [r7, #22]
 8012e22:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	2206      	movs	r2, #6
 8012e28:	6839      	ldr	r1, [r7, #0]
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f001 fbf7 	bl	801461e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	3306      	adds	r3, #6
 8012e34:	2206      	movs	r2, #6
 8012e36:	6879      	ldr	r1, [r7, #4]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f001 fbf0 	bl	801461e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012e44:	2b06      	cmp	r3, #6
 8012e46:	d006      	beq.n	8012e56 <ethernet_output+0x66>
 8012e48:	4b0a      	ldr	r3, [pc, #40]	; (8012e74 <ethernet_output+0x84>)
 8012e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012e4e:	490a      	ldr	r1, [pc, #40]	; (8012e78 <ethernet_output+0x88>)
 8012e50:	480a      	ldr	r0, [pc, #40]	; (8012e7c <ethernet_output+0x8c>)
 8012e52:	f001 fbf7 	bl	8014644 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	699b      	ldr	r3, [r3, #24]
 8012e5a:	68b9      	ldr	r1, [r7, #8]
 8012e5c:	68f8      	ldr	r0, [r7, #12]
 8012e5e:	4798      	blx	r3
 8012e60:	4603      	mov	r3, r0
 8012e62:	e002      	b.n	8012e6a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012e64:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012e66:	f06f 0301 	mvn.w	r3, #1
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3718      	adds	r7, #24
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	08017d40 	.word	0x08017d40
 8012e78:	08017d78 	.word	0x08017d78
 8012e7c:	08017dac 	.word	0x08017dac

08012e80 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	60bb      	str	r3, [r7, #8]
 8012e8e:	2304      	movs	r3, #4
 8012e90:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012e92:	f107 0308 	add.w	r3, r7, #8
 8012e96:	2100      	movs	r1, #0
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7f0 fd3c 	bl	8003916 <osMessageCreate>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d102      	bne.n	8012eb2 <sys_mbox_new+0x32>
    return ERR_MEM;
 8012eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eb0:	e000      	b.n	8012eb4 <sys_mbox_new+0x34>

  return ERR_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7f0 fdeb 	bl	8003aa4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7f0 fdfc 	bl	8003ad0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8012ed8:	bf00      	nop
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8012eea:	bf00      	nop
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7f0 fd20 	bl	800393c <osMessagePut>
 8012efc:	4603      	mov	r3, r0
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1f4      	bne.n	8012eec <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b084      	sub	sp, #16
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	6839      	ldr	r1, [r7, #0]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f0 fd0d 	bl	800393c <osMessagePut>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d102      	bne.n	8012f2e <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	73fb      	strb	r3, [r7, #15]
 8012f2c:	e001      	b.n	8012f32 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012f2e:	23ff      	movs	r3, #255	; 0xff
 8012f30:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b08c      	sub	sp, #48	; 0x30
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	61f8      	str	r0, [r7, #28]
 8012f46:	61b9      	str	r1, [r7, #24]
 8012f48:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012f4a:	f7f0 fb54 	bl	80035f6 <osKernelSysTick>
 8012f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d017      	beq.n	8012f86 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	6819      	ldr	r1, [r3, #0]
 8012f5a:	f107 0320 	add.w	r3, r7, #32
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f0 fd2b 	bl	80039bc <osMessageGet>

    if(event.status == osEventMessage)
 8012f66:	6a3b      	ldr	r3, [r7, #32]
 8012f68:	2b10      	cmp	r3, #16
 8012f6a:	d109      	bne.n	8012f80 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	461a      	mov	r2, r3
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012f74:	f7f0 fb3f 	bl	80035f6 <osKernelSysTick>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	e019      	b.n	8012fb4 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f84:	e016      	b.n	8012fb4 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	6819      	ldr	r1, [r3, #0]
 8012f8a:	463b      	mov	r3, r7
 8012f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f0 fd13 	bl	80039bc <osMessageGet>
 8012f96:	f107 0320 	add.w	r3, r7, #32
 8012f9a:	463a      	mov	r2, r7
 8012f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012faa:	f7f0 fb24 	bl	80035f6 <osKernelSysTick>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb2:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3730      	adds	r7, #48	; 0x30
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6819      	ldr	r1, [r3, #0]
 8012fca:	f107 030c 	add.w	r3, r7, #12
 8012fce:	2200      	movs	r2, #0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f0 fcf3 	bl	80039bc <osMessageGet>

  if(event.status == osEventMessage)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b10      	cmp	r3, #16
 8012fda:	d105      	bne.n	8012fe8 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	e001      	b.n	8012fec <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8012fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3718      	adds	r7, #24
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d101      	bne.n	8013008 <sys_mbox_valid+0x14>
    return 0;
 8013004:	2300      	movs	r3, #0
 8013006:	e000      	b.n	801300a <sys_mbox_valid+0x16>
  else
    return 1;
 8013008:	2301      	movs	r3, #1
}
 801300a:	4618      	mov	r0, r3
 801300c:	370c      	adds	r7, #12
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr

08013016 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8013016:	b480      	push	{r7}
 8013018:	b083      	sub	sp, #12
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2200      	movs	r2, #0
 8013022:	601a      	str	r2, [r3, #0]
}
 8013024:	bf00      	nop
 8013026:	370c      	adds	r7, #12
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr

08013030 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	460b      	mov	r3, r1
 801303a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801303c:	2300      	movs	r3, #0
 801303e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8013040:	f107 030c 	add.w	r3, r7, #12
 8013044:	2101      	movs	r1, #1
 8013046:	4618      	mov	r0, r3
 8013048:	f7f0 fbb0 	bl	80037ac <osSemaphoreCreate>
 801304c:	4602      	mov	r2, r0
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d102      	bne.n	8013060 <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801305e:	e009      	b.n	8013074 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8013060:	78fb      	ldrb	r3, [r7, #3]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d105      	bne.n	8013072 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2100      	movs	r1, #0
 801306c:	4618      	mov	r0, r3
 801306e:	f7f0 fbbb 	bl	80037e8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	3710      	adds	r7, #16
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8013086:	f7f0 fab6 	bl	80035f6 <osKernelSysTick>
 801308a:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d011      	beq.n	80130b6 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	6839      	ldr	r1, [r7, #0]
 8013098:	4618      	mov	r0, r3
 801309a:	f7f0 fba5 	bl	80037e8 <osSemaphoreWait>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d105      	bne.n	80130b0 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80130a4:	f7f0 faa7 	bl	80035f6 <osKernelSysTick>
 80130a8:	4602      	mov	r2, r0
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	e012      	b.n	80130d6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80130b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130b4:	e00f      	b.n	80130d6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80130b6:	bf00      	nop
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f0 fb91 	bl	80037e8 <osSemaphoreWait>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d1f5      	bne.n	80130b8 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80130cc:	f7f0 fa93 	bl	80035f6 <osKernelSysTick>
 80130d0:	4602      	mov	r2, r0
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3710      	adds	r7, #16
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80130de:	b580      	push	{r7, lr}
 80130e0:	b082      	sub	sp, #8
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f0 fbca 	bl	8003884 <osSemaphoreRelease>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	4618      	mov	r0, r3
 8013106:	f7f0 fbf3 	bl	80038f0 <osSemaphoreDelete>
}
 801310a:	bf00      	nop
 801310c:	3708      	adds	r7, #8
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}

08013112 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8013112:	b480      	push	{r7}
 8013114:	b083      	sub	sp, #12
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d101      	bne.n	8013126 <sys_sem_valid+0x14>
    return 0;
 8013122:	2300      	movs	r3, #0
 8013124:	e000      	b.n	8013128 <sys_sem_valid+0x16>
  else
    return 1;
 8013126:	2301      	movs	r3, #1
}
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	601a      	str	r2, [r3, #0]
}
 8013142:	bf00      	nop
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr
	...

08013150 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013154:	4803      	ldr	r0, [pc, #12]	; (8013164 <sys_init+0x14>)
 8013156:	f7f0 fa99 	bl	800368c <osMutexCreate>
 801315a:	4602      	mov	r2, r0
 801315c:	4b02      	ldr	r3, [pc, #8]	; (8013168 <sys_init+0x18>)
 801315e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013160:	bf00      	nop
 8013162:	bd80      	pop	{r7, pc}
 8013164:	08018064 	.word	0x08018064
 8013168:	20007758 	.word	0x20007758

0801316c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013174:	2300      	movs	r3, #0
 8013176:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013178:	f107 030c 	add.w	r3, r7, #12
 801317c:	4618      	mov	r0, r3
 801317e:	f7f0 fa85 	bl	800368c <osMutexCreate>
 8013182:	4602      	mov	r2, r0
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d102      	bne.n	8013196 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013194:	e000      	b.n	8013198 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013196:	2300      	movs	r3, #0
}
 8013198:	4618      	mov	r0, r3
 801319a:	3710      	adds	r7, #16
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f0 fa77 	bl	80036a4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7f0 fab8 	bl	8003740 <osMutexRelease>
}
 80131d0:	bf00      	nop
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b08a      	sub	sp, #40	; 0x28
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
 80131e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	617b      	str	r3, [r7, #20]
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	61bb      	str	r3, [r7, #24]
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	b21b      	sxth	r3, r3
 80131f2:	83bb      	strh	r3, [r7, #28]
 80131f4:	2300      	movs	r3, #0
 80131f6:	623b      	str	r3, [r7, #32]
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80131fc:	f107 0314 	add.w	r3, r7, #20
 8013200:	6879      	ldr	r1, [r7, #4]
 8013202:	4618      	mov	r0, r3
 8013204:	f7f0 fa07 	bl	8003616 <osThreadCreate>
 8013208:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801320a:	4618      	mov	r0, r3
 801320c:	3728      	adds	r7, #40	; 0x28
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
	...

08013214 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013218:	4b04      	ldr	r3, [pc, #16]	; (801322c <sys_arch_protect+0x18>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013220:	4618      	mov	r0, r3
 8013222:	f7f0 fa3f 	bl	80036a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013226:	2301      	movs	r3, #1
}
 8013228:	4618      	mov	r0, r3
 801322a:	bd80      	pop	{r7, pc}
 801322c:	20007758 	.word	0x20007758

08013230 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013238:	4b04      	ldr	r3, [pc, #16]	; (801324c <sys_arch_unprotect+0x1c>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f7f0 fa7f 	bl	8003740 <osMutexRelease>
}
 8013242:	bf00      	nop
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	20007758 	.word	0x20007758

08013250 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b08e      	sub	sp, #56	; 0x38
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4a59      	ldr	r2, [pc, #356]	; (80133c4 <HAL_ETH_MspInit+0x174>)
 801325e:	4293      	cmp	r3, r2
 8013260:	f040 80ac 	bne.w	80133bc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8013264:	2300      	movs	r3, #0
 8013266:	623b      	str	r3, [r7, #32]
 8013268:	4a57      	ldr	r2, [pc, #348]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 801326a:	4b57      	ldr	r3, [pc, #348]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 801326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013272:	6313      	str	r3, [r2, #48]	; 0x30
 8013274:	4b54      	ldr	r3, [pc, #336]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801327c:	623b      	str	r3, [r7, #32]
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	2300      	movs	r3, #0
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	4a50      	ldr	r2, [pc, #320]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013286:	4b50      	ldr	r3, [pc, #320]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801328a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801328e:	6313      	str	r3, [r2, #48]	; 0x30
 8013290:	4b4d      	ldr	r3, [pc, #308]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013298:	61fb      	str	r3, [r7, #28]
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	2300      	movs	r3, #0
 801329e:	61bb      	str	r3, [r7, #24]
 80132a0:	4a49      	ldr	r2, [pc, #292]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132a2:	4b49      	ldr	r3, [pc, #292]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80132aa:	6313      	str	r3, [r2, #48]	; 0x30
 80132ac:	4b46      	ldr	r3, [pc, #280]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80132b4:	61bb      	str	r3, [r7, #24]
 80132b6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80132b8:	2300      	movs	r3, #0
 80132ba:	617b      	str	r3, [r7, #20]
 80132bc:	4a42      	ldr	r2, [pc, #264]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132be:	4b42      	ldr	r3, [pc, #264]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c2:	f043 0304 	orr.w	r3, r3, #4
 80132c6:	6313      	str	r3, [r2, #48]	; 0x30
 80132c8:	4b3f      	ldr	r3, [pc, #252]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132cc:	f003 0304 	and.w	r3, r3, #4
 80132d0:	617b      	str	r3, [r7, #20]
 80132d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80132d4:	2300      	movs	r3, #0
 80132d6:	613b      	str	r3, [r7, #16]
 80132d8:	4a3b      	ldr	r2, [pc, #236]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132da:	4b3b      	ldr	r3, [pc, #236]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132de:	f043 0301 	orr.w	r3, r3, #1
 80132e2:	6313      	str	r3, [r2, #48]	; 0x30
 80132e4:	4b38      	ldr	r3, [pc, #224]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e8:	f003 0301 	and.w	r3, r3, #1
 80132ec:	613b      	str	r3, [r7, #16]
 80132ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80132f0:	2300      	movs	r3, #0
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	4a34      	ldr	r2, [pc, #208]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132f6:	4b34      	ldr	r3, [pc, #208]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 80132f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fa:	f043 0302 	orr.w	r3, r3, #2
 80132fe:	6313      	str	r3, [r2, #48]	; 0x30
 8013300:	4b31      	ldr	r3, [pc, #196]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013304:	f003 0302 	and.w	r3, r3, #2
 8013308:	60fb      	str	r3, [r7, #12]
 801330a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801330c:	2300      	movs	r3, #0
 801330e:	60bb      	str	r3, [r7, #8]
 8013310:	4a2d      	ldr	r2, [pc, #180]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013312:	4b2d      	ldr	r3, [pc, #180]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 8013314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801331a:	6313      	str	r3, [r2, #48]	; 0x30
 801331c:	4b2a      	ldr	r3, [pc, #168]	; (80133c8 <HAL_ETH_MspInit+0x178>)
 801331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013324:	60bb      	str	r3, [r7, #8]
 8013326:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013328:	2332      	movs	r3, #50	; 0x32
 801332a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801332c:	2302      	movs	r3, #2
 801332e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013330:	2300      	movs	r3, #0
 8013332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013334:	2303      	movs	r3, #3
 8013336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013338:	230b      	movs	r3, #11
 801333a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013340:	4619      	mov	r1, r3
 8013342:	4822      	ldr	r0, [pc, #136]	; (80133cc <HAL_ETH_MspInit+0x17c>)
 8013344:	f7ee fa80 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013348:	2386      	movs	r3, #134	; 0x86
 801334a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801334c:	2302      	movs	r3, #2
 801334e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013350:	2300      	movs	r3, #0
 8013352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013354:	2303      	movs	r3, #3
 8013356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013358:	230b      	movs	r3, #11
 801335a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801335c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013360:	4619      	mov	r1, r3
 8013362:	481b      	ldr	r0, [pc, #108]	; (80133d0 <HAL_ETH_MspInit+0x180>)
 8013364:	f7ee fa70 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801336e:	2302      	movs	r3, #2
 8013370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013372:	2300      	movs	r3, #0
 8013374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013376:	2303      	movs	r3, #3
 8013378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801337a:	230b      	movs	r3, #11
 801337c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 801337e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013382:	4619      	mov	r1, r3
 8013384:	4813      	ldr	r0, [pc, #76]	; (80133d4 <HAL_ETH_MspInit+0x184>)
 8013386:	f7ee fa5f 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801338a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801338e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013390:	2302      	movs	r3, #2
 8013392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013394:	2300      	movs	r3, #0
 8013396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013398:	2303      	movs	r3, #3
 801339a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801339c:	230b      	movs	r3, #11
 801339e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80133a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133a4:	4619      	mov	r1, r3
 80133a6:	480c      	ldr	r0, [pc, #48]	; (80133d8 <HAL_ETH_MspInit+0x188>)
 80133a8:	f7ee fa4e 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80133ac:	2200      	movs	r2, #0
 80133ae:	2105      	movs	r1, #5
 80133b0:	203d      	movs	r0, #61	; 0x3d
 80133b2:	f7ed fa0f 	bl	80007d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80133b6:	203d      	movs	r0, #61	; 0x3d
 80133b8:	f7ed fa28 	bl	800080c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80133bc:	bf00      	nop
 80133be:	3738      	adds	r7, #56	; 0x38
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	40028000 	.word	0x40028000
 80133c8:	40023800 	.word	0x40023800
 80133cc:	40020800 	.word	0x40020800
 80133d0:	40020000 	.word	0x40020000
 80133d4:	40020400 	.word	0x40020400
 80133d8:	40021800 	.word	0x40021800

080133dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80133e4:	4b04      	ldr	r3, [pc, #16]	; (80133f8 <HAL_ETH_RxCpltCallback+0x1c>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f0 fa4b 	bl	8003884 <osSemaphoreRelease>
}
 80133ee:	bf00      	nop
 80133f0:	3708      	adds	r7, #8
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	20003fcc 	.word	0x20003fcc

080133fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80133fc:	b5b0      	push	{r4, r5, r7, lr}
 80133fe:	b08c      	sub	sp, #48	; 0x30
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8013408:	4b5a      	ldr	r3, [pc, #360]	; (8013574 <low_level_init+0x178>)
 801340a:	4a5b      	ldr	r2, [pc, #364]	; (8013578 <low_level_init+0x17c>)
 801340c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801340e:	4b59      	ldr	r3, [pc, #356]	; (8013574 <low_level_init+0x178>)
 8013410:	2201      	movs	r2, #1
 8013412:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8013414:	4b57      	ldr	r3, [pc, #348]	; (8013574 <low_level_init+0x178>)
 8013416:	2200      	movs	r2, #0
 8013418:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801341a:	2300      	movs	r3, #0
 801341c:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 8013420:	2380      	movs	r3, #128	; 0x80
 8013422:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 8013426:	23e1      	movs	r3, #225	; 0xe1
 8013428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 801342c:	2300      	movs	r3, #0
 801342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x00;
 8013432:	2300      	movs	r3, #0
 8013434:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x00;
 8013438:	2300      	movs	r3, #0
 801343a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 801343e:	4a4d      	ldr	r2, [pc, #308]	; (8013574 <low_level_init+0x178>)
 8013440:	f107 0320 	add.w	r3, r7, #32
 8013444:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8013446:	4b4b      	ldr	r3, [pc, #300]	; (8013574 <low_level_init+0x178>)
 8013448:	2201      	movs	r2, #1
 801344a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801344c:	4b49      	ldr	r3, [pc, #292]	; (8013574 <low_level_init+0x178>)
 801344e:	2200      	movs	r2, #0
 8013450:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013452:	4b48      	ldr	r3, [pc, #288]	; (8013574 <low_level_init+0x178>)
 8013454:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013458:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801345a:	4846      	ldr	r0, [pc, #280]	; (8013574 <low_level_init+0x178>)
 801345c:	f7ed f9e4 	bl	8000828 <HAL_ETH_Init>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 8013466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801346a:	2b00      	cmp	r3, #0
 801346c:	d108      	bne.n	8013480 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013474:	f043 0304 	orr.w	r3, r3, #4
 8013478:	b2da      	uxtb	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8013480:	2304      	movs	r3, #4
 8013482:	4a3e      	ldr	r2, [pc, #248]	; (801357c <low_level_init+0x180>)
 8013484:	493e      	ldr	r1, [pc, #248]	; (8013580 <low_level_init+0x184>)
 8013486:	483b      	ldr	r0, [pc, #236]	; (8013574 <low_level_init+0x178>)
 8013488:	f7ed fb6c 	bl	8000b64 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801348c:	2304      	movs	r3, #4
 801348e:	4a3d      	ldr	r2, [pc, #244]	; (8013584 <low_level_init+0x188>)
 8013490:	493d      	ldr	r1, [pc, #244]	; (8013588 <low_level_init+0x18c>)
 8013492:	4838      	ldr	r0, [pc, #224]	; (8013574 <low_level_init+0x178>)
 8013494:	f7ed fbcf 	bl	8000c36 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2206      	movs	r2, #6
 801349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80134a0:	4b34      	ldr	r3, [pc, #208]	; (8013574 <low_level_init+0x178>)
 80134a2:	695b      	ldr	r3, [r3, #20]
 80134a4:	781a      	ldrb	r2, [r3, #0]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80134ac:	4b31      	ldr	r3, [pc, #196]	; (8013574 <low_level_init+0x178>)
 80134ae:	695b      	ldr	r3, [r3, #20]
 80134b0:	785a      	ldrb	r2, [r3, #1]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80134b8:	4b2e      	ldr	r3, [pc, #184]	; (8013574 <low_level_init+0x178>)
 80134ba:	695b      	ldr	r3, [r3, #20]
 80134bc:	789a      	ldrb	r2, [r3, #2]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80134c4:	4b2b      	ldr	r3, [pc, #172]	; (8013574 <low_level_init+0x178>)
 80134c6:	695b      	ldr	r3, [r3, #20]
 80134c8:	78da      	ldrb	r2, [r3, #3]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80134d0:	4b28      	ldr	r3, [pc, #160]	; (8013574 <low_level_init+0x178>)
 80134d2:	695b      	ldr	r3, [r3, #20]
 80134d4:	791a      	ldrb	r2, [r3, #4]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80134dc:	4b25      	ldr	r3, [pc, #148]	; (8013574 <low_level_init+0x178>)
 80134de:	695b      	ldr	r3, [r3, #20]
 80134e0:	795a      	ldrb	r2, [r3, #5]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80134ee:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80134f6:	f043 030a 	orr.w	r3, r3, #10
 80134fa:	b2da      	uxtb	r2, r3
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8013502:	2300      	movs	r3, #0
 8013504:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8013506:	f107 031c 	add.w	r3, r7, #28
 801350a:	2101      	movs	r1, #1
 801350c:	4618      	mov	r0, r3
 801350e:	f7f0 f94d 	bl	80037ac <osSemaphoreCreate>
 8013512:	4602      	mov	r2, r0
 8013514:	4b1d      	ldr	r3, [pc, #116]	; (801358c <low_level_init+0x190>)
 8013516:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8013518:	4b1d      	ldr	r3, [pc, #116]	; (8013590 <low_level_init+0x194>)
 801351a:	f107 0408 	add.w	r4, r7, #8
 801351e:	461d      	mov	r5, r3
 8013520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013524:	682b      	ldr	r3, [r5, #0]
 8013526:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8013528:	f107 0308 	add.w	r3, r7, #8
 801352c:	6879      	ldr	r1, [r7, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	f7f0 f871 	bl	8003616 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8013534:	480f      	ldr	r0, [pc, #60]	; (8013574 <low_level_init+0x178>)
 8013536:	f7ed fea6 	bl	8001286 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801353a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801353e:	461a      	mov	r2, r3
 8013540:	211d      	movs	r1, #29
 8013542:	480c      	ldr	r0, [pc, #48]	; (8013574 <low_level_init+0x178>)
 8013544:	f7ed fdd1 	bl	80010ea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8013548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801354a:	f043 030b 	orr.w	r3, r3, #11
 801354e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013552:	461a      	mov	r2, r3
 8013554:	211d      	movs	r1, #29
 8013556:	4807      	ldr	r0, [pc, #28]	; (8013574 <low_level_init+0x178>)
 8013558:	f7ed fe2f 	bl	80011ba <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801355c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013560:	461a      	mov	r2, r3
 8013562:	211d      	movs	r1, #29
 8013564:	4803      	ldr	r0, [pc, #12]	; (8013574 <low_level_init+0x178>)
 8013566:	f7ed fdc0 	bl	80010ea <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 801356a:	bf00      	nop
 801356c:	3730      	adds	r7, #48	; 0x30
 801356e:	46bd      	mov	sp, r7
 8013570:	bdb0      	pop	{r4, r5, r7, pc}
 8013572:	bf00      	nop
 8013574:	2000902c 	.word	0x2000902c
 8013578:	40028000 	.word	0x40028000
 801357c:	20009074 	.word	0x20009074
 8013580:	2000775c 	.word	0x2000775c
 8013584:	200077dc 	.word	0x200077dc
 8013588:	20008fac 	.word	0x20008fac
 801358c:	20003fcc 	.word	0x20003fcc
 8013590:	08017ddc 	.word	0x08017ddc

08013594 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b08a      	sub	sp, #40	; 0x28
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801359e:	4b4b      	ldr	r3, [pc, #300]	; (80136cc <low_level_output+0x138>)
 80135a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80135b2:	2300      	movs	r3, #0
 80135b4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80135b6:	4b45      	ldr	r3, [pc, #276]	; (80136cc <low_level_output+0x138>)
 80135b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ba:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80135bc:	2300      	movs	r3, #0
 80135be:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	623b      	str	r3, [r7, #32]
 80135c4:	e05a      	b.n	801367c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	da03      	bge.n	80135d6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80135ce:	23f8      	movs	r3, #248	; 0xf8
 80135d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80135d4:	e05c      	b.n	8013690 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80135d6:	6a3b      	ldr	r3, [r7, #32]
 80135d8:	895b      	ldrh	r3, [r3, #10]
 80135da:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80135dc:	2300      	movs	r3, #0
 80135de:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80135e0:	e02f      	b.n	8013642 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80135e2:	69fa      	ldr	r2, [r7, #28]
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	18d0      	adds	r0, r2, r3
 80135e8:	6a3b      	ldr	r3, [r7, #32]
 80135ea:	685a      	ldr	r2, [r3, #4]
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	18d1      	adds	r1, r2, r3
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80135f6:	3304      	adds	r3, #4
 80135f8:	461a      	mov	r2, r3
 80135fa:	f001 f810 	bl	801461e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013604:	69bb      	ldr	r3, [r7, #24]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	2b00      	cmp	r3, #0
 801360a:	da03      	bge.n	8013614 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801360c:	23f8      	movs	r3, #248	; 0xf8
 801360e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8013612:	e03d      	b.n	8013690 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801361a:	693a      	ldr	r2, [r7, #16]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4413      	add	r3, r2
 8013620:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013624:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8013626:	68ba      	ldr	r2, [r7, #8]
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	1ad3      	subs	r3, r2, r3
 801362c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013630:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8013632:	697a      	ldr	r2, [r7, #20]
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	1ad3      	subs	r3, r2, r3
 8013638:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801363c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801363e:	2300      	movs	r3, #0
 8013640:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013642:	68fa      	ldr	r2, [r7, #12]
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	4413      	add	r3, r2
 8013648:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801364c:	4293      	cmp	r3, r2
 801364e:	d8c8      	bhi.n	80135e2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013650:	69fa      	ldr	r2, [r7, #28]
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	18d0      	adds	r0, r2, r3
 8013656:	6a3b      	ldr	r3, [r7, #32]
 8013658:	685a      	ldr	r2, [r3, #4]
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	4413      	add	r3, r2
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	4619      	mov	r1, r3
 8013662:	f000 ffdc 	bl	801461e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8013666:	693a      	ldr	r2, [r7, #16]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	4413      	add	r3, r2
 801366c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801366e:	697a      	ldr	r2, [r7, #20]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4413      	add	r3, r2
 8013674:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8013676:	6a3b      	ldr	r3, [r7, #32]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	623b      	str	r3, [r7, #32]
 801367c:	6a3b      	ldr	r3, [r7, #32]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d1a1      	bne.n	80135c6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8013682:	6979      	ldr	r1, [r7, #20]
 8013684:	4811      	ldr	r0, [pc, #68]	; (80136cc <low_level_output+0x138>)
 8013686:	f7ed fb43 	bl	8000d10 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801368a:	2300      	movs	r3, #0
 801368c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013690:	4b0e      	ldr	r3, [pc, #56]	; (80136cc <low_level_output+0x138>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013698:	3314      	adds	r3, #20
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 0320 	and.w	r3, r3, #32
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d00d      	beq.n	80136c0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80136a4:	4b09      	ldr	r3, [pc, #36]	; (80136cc <low_level_output+0x138>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136ac:	3314      	adds	r3, #20
 80136ae:	2220      	movs	r2, #32
 80136b0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80136b2:	4b06      	ldr	r3, [pc, #24]	; (80136cc <low_level_output+0x138>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80136ba:	3304      	adds	r3, #4
 80136bc:	2200      	movs	r2, #0
 80136be:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80136c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3728      	adds	r7, #40	; 0x28
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	2000902c 	.word	0x2000902c

080136d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08c      	sub	sp, #48	; 0x30
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80136d8:	2300      	movs	r3, #0
 80136da:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80136dc:	2300      	movs	r3, #0
 80136de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80136e0:	2300      	movs	r3, #0
 80136e2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80136e4:	2300      	movs	r3, #0
 80136e6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80136ec:	2300      	movs	r3, #0
 80136ee:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80136f0:	2300      	movs	r3, #0
 80136f2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80136f4:	484e      	ldr	r0, [pc, #312]	; (8013830 <low_level_input+0x160>)
 80136f6:	f7ed fbf5 	bl	8000ee4 <HAL_ETH_GetReceivedFrame_IT>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <low_level_input+0x34>
    return NULL;
 8013700:	2300      	movs	r3, #0
 8013702:	e091      	b.n	8013828 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8013704:	4b4a      	ldr	r3, [pc, #296]	; (8013830 <low_level_input+0x160>)
 8013706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013708:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801370a:	4b49      	ldr	r3, [pc, #292]	; (8013830 <low_level_input+0x160>)
 801370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8013710:	89fb      	ldrh	r3, [r7, #14]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d006      	beq.n	8013724 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013716:	89fb      	ldrh	r3, [r7, #14]
 8013718:	2203      	movs	r2, #3
 801371a:	4619      	mov	r1, r3
 801371c:	2004      	movs	r0, #4
 801371e:	f7f8 fd83 	bl	800c228 <pbuf_alloc>
 8013722:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8013724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013726:	2b00      	cmp	r3, #0
 8013728:	d04b      	beq.n	80137c2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801372a:	4b41      	ldr	r3, [pc, #260]	; (8013830 <low_level_input+0x160>)
 801372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801372e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013730:	2300      	movs	r3, #0
 8013732:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013736:	62bb      	str	r3, [r7, #40]	; 0x28
 8013738:	e040      	b.n	80137bc <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373c:	895b      	ldrh	r3, [r3, #10]
 801373e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8013740:	2300      	movs	r3, #0
 8013742:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013744:	e021      	b.n	801378a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013748:	685a      	ldr	r2, [r3, #4]
 801374a:	69bb      	ldr	r3, [r7, #24]
 801374c:	18d0      	adds	r0, r2, r3
 801374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	18d1      	adds	r1, r2, r3
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801375a:	3304      	adds	r3, #4
 801375c:	461a      	mov	r2, r3
 801375e:	f000 ff5e 	bl	801461e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013762:	6a3b      	ldr	r3, [r7, #32]
 8013764:	68db      	ldr	r3, [r3, #12]
 8013766:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013768:	6a3b      	ldr	r3, [r7, #32]
 801376a:	689b      	ldr	r3, [r3, #8]
 801376c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801376e:	69fa      	ldr	r2, [r7, #28]
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	4413      	add	r3, r2
 8013774:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013778:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801377a:	69ba      	ldr	r2, [r7, #24]
 801377c:	69fb      	ldr	r3, [r7, #28]
 801377e:	1ad3      	subs	r3, r2, r3
 8013780:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013784:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8013786:	2300      	movs	r3, #0
 8013788:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801378a:	697a      	ldr	r2, [r7, #20]
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	4413      	add	r3, r2
 8013790:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013794:	4293      	cmp	r3, r2
 8013796:	d8d6      	bhi.n	8013746 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379a:	685a      	ldr	r2, [r3, #4]
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	18d0      	adds	r0, r2, r3
 80137a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	4413      	add	r3, r2
 80137a6:	697a      	ldr	r2, [r7, #20]
 80137a8:	4619      	mov	r1, r3
 80137aa:	f000 ff38 	bl	801461e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80137ae:	69fa      	ldr	r2, [r7, #28]
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	4413      	add	r3, r2
 80137b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1bb      	bne.n	801373a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80137c2:	4b1b      	ldr	r3, [pc, #108]	; (8013830 <low_level_input+0x160>)
 80137c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137c6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80137c8:	2300      	movs	r3, #0
 80137ca:	613b      	str	r3, [r7, #16]
 80137cc:	e00b      	b.n	80137e6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80137ce:	6a3b      	ldr	r3, [r7, #32]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80137d6:	6a3b      	ldr	r3, [r7, #32]
 80137d8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80137da:	6a3b      	ldr	r3, [r7, #32]
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	3301      	adds	r3, #1
 80137e4:	613b      	str	r3, [r7, #16]
 80137e6:	4b12      	ldr	r3, [pc, #72]	; (8013830 <low_level_input+0x160>)
 80137e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d8ee      	bhi.n	80137ce <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80137f0:	4b0f      	ldr	r3, [pc, #60]	; (8013830 <low_level_input+0x160>)
 80137f2:	2200      	movs	r2, #0
 80137f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80137f6:	4b0e      	ldr	r3, [pc, #56]	; (8013830 <low_level_input+0x160>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80137fe:	3314      	adds	r3, #20
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00d      	beq.n	8013826 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801380a:	4b09      	ldr	r3, [pc, #36]	; (8013830 <low_level_input+0x160>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013812:	3314      	adds	r3, #20
 8013814:	2280      	movs	r2, #128	; 0x80
 8013816:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8013818:	4b05      	ldr	r3, [pc, #20]	; (8013830 <low_level_input+0x160>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013820:	3308      	adds	r3, #8
 8013822:	2200      	movs	r2, #0
 8013824:	601a      	str	r2, [r3, #0]
  }
  return p;
 8013826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013828:	4618      	mov	r0, r3
 801382a:	3730      	adds	r7, #48	; 0x30
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	2000902c 	.word	0x2000902c

08013834 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b084      	sub	sp, #16
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8013840:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <ethernetif_input+0x4c>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013848:	4618      	mov	r0, r3
 801384a:	f7ef ffcd 	bl	80037e8 <osSemaphoreWait>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d1f5      	bne.n	8013840 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8013854:	68f8      	ldr	r0, [r7, #12]
 8013856:	f7ff ff3b 	bl	80136d0 <low_level_input>
 801385a:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00a      	beq.n	8013878 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	691b      	ldr	r3, [r3, #16]
 8013866:	68f9      	ldr	r1, [r7, #12]
 8013868:	68b8      	ldr	r0, [r7, #8]
 801386a:	4798      	blx	r3
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d002      	beq.n	8013878 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8013872:	68b8      	ldr	r0, [r7, #8]
 8013874:	f7f9 f84a 	bl	800c90c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1ea      	bne.n	8013854 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 801387e:	e7df      	b.n	8013840 <ethernetif_input+0xc>
 8013880:	20003fcc 	.word	0x20003fcc

08013884 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d106      	bne.n	80138a0 <ethernetif_init+0x1c>
 8013892:	4b0e      	ldr	r3, [pc, #56]	; (80138cc <ethernetif_init+0x48>)
 8013894:	f240 222d 	movw	r2, #557	; 0x22d
 8013898:	490d      	ldr	r1, [pc, #52]	; (80138d0 <ethernetif_init+0x4c>)
 801389a:	480e      	ldr	r0, [pc, #56]	; (80138d4 <ethernetif_init+0x50>)
 801389c:	f000 fed2 	bl	8014644 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2273      	movs	r2, #115	; 0x73
 80138a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2274      	movs	r2, #116	; 0x74
 80138ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	4a09      	ldr	r2, [pc, #36]	; (80138d8 <ethernetif_init+0x54>)
 80138b4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4a08      	ldr	r2, [pc, #32]	; (80138dc <ethernetif_init+0x58>)
 80138ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f7ff fd9d 	bl	80133fc <low_level_init>

  return ERR_OK;
 80138c2:	2300      	movs	r3, #0
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3708      	adds	r7, #8
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08017df0 	.word	0x08017df0
 80138d0:	08017e04 	.word	0x08017e04
 80138d4:	08017e14 	.word	0x08017e14
 80138d8:	080099a1 	.word	0x080099a1
 80138dc:	08013595 	.word	0x08013595

080138e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80138e4:	f7ec fe92 	bl	800060c <HAL_GetTick>
 80138e8:	4603      	mov	r3, r0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	bd80      	pop	{r7, pc}
	...

080138f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80138f6:	4b8b      	ldr	r3, [pc, #556]	; (8013b24 <MX_LWIP_Init+0x234>)
 80138f8:	22c0      	movs	r2, #192	; 0xc0
 80138fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80138fc:	4b89      	ldr	r3, [pc, #548]	; (8013b24 <MX_LWIP_Init+0x234>)
 80138fe:	22a8      	movs	r2, #168	; 0xa8
 8013900:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8013902:	4b88      	ldr	r3, [pc, #544]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013904:	2200      	movs	r2, #0
 8013906:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8013908:	4b86      	ldr	r3, [pc, #536]	; (8013b24 <MX_LWIP_Init+0x234>)
 801390a:	22c8      	movs	r2, #200	; 0xc8
 801390c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801390e:	4b86      	ldr	r3, [pc, #536]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013910:	22ff      	movs	r2, #255	; 0xff
 8013912:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8013914:	4b84      	ldr	r3, [pc, #528]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013916:	22ff      	movs	r2, #255	; 0xff
 8013918:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801391a:	4b83      	ldr	r3, [pc, #524]	; (8013b28 <MX_LWIP_Init+0x238>)
 801391c:	22ff      	movs	r2, #255	; 0xff
 801391e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8013920:	4b81      	ldr	r3, [pc, #516]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013922:	2200      	movs	r2, #0
 8013924:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8013926:	4b81      	ldr	r3, [pc, #516]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013928:	2200      	movs	r2, #0
 801392a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 801392c:	4b7f      	ldr	r3, [pc, #508]	; (8013b2c <MX_LWIP_Init+0x23c>)
 801392e:	2200      	movs	r2, #0
 8013930:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8013932:	4b7e      	ldr	r3, [pc, #504]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013934:	2200      	movs	r2, #0
 8013936:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8013938:	4b7c      	ldr	r3, [pc, #496]	; (8013b2c <MX_LWIP_Init+0x23c>)
 801393a:	2200      	movs	r2, #0
 801393c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801393e:	2100      	movs	r1, #0
 8013940:	2000      	movs	r0, #0
 8013942:	f7f5 fb99 	bl	8009078 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013946:	4b77      	ldr	r3, [pc, #476]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	061a      	lsls	r2, r3, #24
 801394c:	4b75      	ldr	r3, [pc, #468]	; (8013b24 <MX_LWIP_Init+0x234>)
 801394e:	785b      	ldrb	r3, [r3, #1]
 8013950:	041b      	lsls	r3, r3, #16
 8013952:	431a      	orrs	r2, r3
 8013954:	4b73      	ldr	r3, [pc, #460]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013956:	789b      	ldrb	r3, [r3, #2]
 8013958:	021b      	lsls	r3, r3, #8
 801395a:	4313      	orrs	r3, r2
 801395c:	4a71      	ldr	r2, [pc, #452]	; (8013b24 <MX_LWIP_Init+0x234>)
 801395e:	78d2      	ldrb	r2, [r2, #3]
 8013960:	4313      	orrs	r3, r2
 8013962:	061a      	lsls	r2, r3, #24
 8013964:	4b6f      	ldr	r3, [pc, #444]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	0619      	lsls	r1, r3, #24
 801396a:	4b6e      	ldr	r3, [pc, #440]	; (8013b24 <MX_LWIP_Init+0x234>)
 801396c:	785b      	ldrb	r3, [r3, #1]
 801396e:	041b      	lsls	r3, r3, #16
 8013970:	4319      	orrs	r1, r3
 8013972:	4b6c      	ldr	r3, [pc, #432]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013974:	789b      	ldrb	r3, [r3, #2]
 8013976:	021b      	lsls	r3, r3, #8
 8013978:	430b      	orrs	r3, r1
 801397a:	496a      	ldr	r1, [pc, #424]	; (8013b24 <MX_LWIP_Init+0x234>)
 801397c:	78c9      	ldrb	r1, [r1, #3]
 801397e:	430b      	orrs	r3, r1
 8013980:	021b      	lsls	r3, r3, #8
 8013982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013986:	431a      	orrs	r2, r3
 8013988:	4b66      	ldr	r3, [pc, #408]	; (8013b24 <MX_LWIP_Init+0x234>)
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	0619      	lsls	r1, r3, #24
 801398e:	4b65      	ldr	r3, [pc, #404]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013990:	785b      	ldrb	r3, [r3, #1]
 8013992:	041b      	lsls	r3, r3, #16
 8013994:	4319      	orrs	r1, r3
 8013996:	4b63      	ldr	r3, [pc, #396]	; (8013b24 <MX_LWIP_Init+0x234>)
 8013998:	789b      	ldrb	r3, [r3, #2]
 801399a:	021b      	lsls	r3, r3, #8
 801399c:	430b      	orrs	r3, r1
 801399e:	4961      	ldr	r1, [pc, #388]	; (8013b24 <MX_LWIP_Init+0x234>)
 80139a0:	78c9      	ldrb	r1, [r1, #3]
 80139a2:	430b      	orrs	r3, r1
 80139a4:	0a1b      	lsrs	r3, r3, #8
 80139a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80139aa:	431a      	orrs	r2, r3
 80139ac:	4b5d      	ldr	r3, [pc, #372]	; (8013b24 <MX_LWIP_Init+0x234>)
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	0619      	lsls	r1, r3, #24
 80139b2:	4b5c      	ldr	r3, [pc, #368]	; (8013b24 <MX_LWIP_Init+0x234>)
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	041b      	lsls	r3, r3, #16
 80139b8:	4319      	orrs	r1, r3
 80139ba:	4b5a      	ldr	r3, [pc, #360]	; (8013b24 <MX_LWIP_Init+0x234>)
 80139bc:	789b      	ldrb	r3, [r3, #2]
 80139be:	021b      	lsls	r3, r3, #8
 80139c0:	430b      	orrs	r3, r1
 80139c2:	4958      	ldr	r1, [pc, #352]	; (8013b24 <MX_LWIP_Init+0x234>)
 80139c4:	78c9      	ldrb	r1, [r1, #3]
 80139c6:	430b      	orrs	r3, r1
 80139c8:	0e1b      	lsrs	r3, r3, #24
 80139ca:	4313      	orrs	r3, r2
 80139cc:	4a58      	ldr	r2, [pc, #352]	; (8013b30 <MX_LWIP_Init+0x240>)
 80139ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80139d0:	4b55      	ldr	r3, [pc, #340]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	061a      	lsls	r2, r3, #24
 80139d6:	4b54      	ldr	r3, [pc, #336]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139d8:	785b      	ldrb	r3, [r3, #1]
 80139da:	041b      	lsls	r3, r3, #16
 80139dc:	431a      	orrs	r2, r3
 80139de:	4b52      	ldr	r3, [pc, #328]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139e0:	789b      	ldrb	r3, [r3, #2]
 80139e2:	021b      	lsls	r3, r3, #8
 80139e4:	4313      	orrs	r3, r2
 80139e6:	4a50      	ldr	r2, [pc, #320]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139e8:	78d2      	ldrb	r2, [r2, #3]
 80139ea:	4313      	orrs	r3, r2
 80139ec:	061a      	lsls	r2, r3, #24
 80139ee:	4b4e      	ldr	r3, [pc, #312]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	0619      	lsls	r1, r3, #24
 80139f4:	4b4c      	ldr	r3, [pc, #304]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139f6:	785b      	ldrb	r3, [r3, #1]
 80139f8:	041b      	lsls	r3, r3, #16
 80139fa:	4319      	orrs	r1, r3
 80139fc:	4b4a      	ldr	r3, [pc, #296]	; (8013b28 <MX_LWIP_Init+0x238>)
 80139fe:	789b      	ldrb	r3, [r3, #2]
 8013a00:	021b      	lsls	r3, r3, #8
 8013a02:	430b      	orrs	r3, r1
 8013a04:	4948      	ldr	r1, [pc, #288]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a06:	78c9      	ldrb	r1, [r1, #3]
 8013a08:	430b      	orrs	r3, r1
 8013a0a:	021b      	lsls	r3, r3, #8
 8013a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a10:	431a      	orrs	r2, r3
 8013a12:	4b45      	ldr	r3, [pc, #276]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	0619      	lsls	r1, r3, #24
 8013a18:	4b43      	ldr	r3, [pc, #268]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a1a:	785b      	ldrb	r3, [r3, #1]
 8013a1c:	041b      	lsls	r3, r3, #16
 8013a1e:	4319      	orrs	r1, r3
 8013a20:	4b41      	ldr	r3, [pc, #260]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a22:	789b      	ldrb	r3, [r3, #2]
 8013a24:	021b      	lsls	r3, r3, #8
 8013a26:	430b      	orrs	r3, r1
 8013a28:	493f      	ldr	r1, [pc, #252]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a2a:	78c9      	ldrb	r1, [r1, #3]
 8013a2c:	430b      	orrs	r3, r1
 8013a2e:	0a1b      	lsrs	r3, r3, #8
 8013a30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013a34:	431a      	orrs	r2, r3
 8013a36:	4b3c      	ldr	r3, [pc, #240]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	0619      	lsls	r1, r3, #24
 8013a3c:	4b3a      	ldr	r3, [pc, #232]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a3e:	785b      	ldrb	r3, [r3, #1]
 8013a40:	041b      	lsls	r3, r3, #16
 8013a42:	4319      	orrs	r1, r3
 8013a44:	4b38      	ldr	r3, [pc, #224]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a46:	789b      	ldrb	r3, [r3, #2]
 8013a48:	021b      	lsls	r3, r3, #8
 8013a4a:	430b      	orrs	r3, r1
 8013a4c:	4936      	ldr	r1, [pc, #216]	; (8013b28 <MX_LWIP_Init+0x238>)
 8013a4e:	78c9      	ldrb	r1, [r1, #3]
 8013a50:	430b      	orrs	r3, r1
 8013a52:	0e1b      	lsrs	r3, r3, #24
 8013a54:	4313      	orrs	r3, r2
 8013a56:	4a37      	ldr	r2, [pc, #220]	; (8013b34 <MX_LWIP_Init+0x244>)
 8013a58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013a5a:	4b34      	ldr	r3, [pc, #208]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	061a      	lsls	r2, r3, #24
 8013a60:	4b32      	ldr	r3, [pc, #200]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a62:	785b      	ldrb	r3, [r3, #1]
 8013a64:	041b      	lsls	r3, r3, #16
 8013a66:	431a      	orrs	r2, r3
 8013a68:	4b30      	ldr	r3, [pc, #192]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a6a:	789b      	ldrb	r3, [r3, #2]
 8013a6c:	021b      	lsls	r3, r3, #8
 8013a6e:	4313      	orrs	r3, r2
 8013a70:	4a2e      	ldr	r2, [pc, #184]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a72:	78d2      	ldrb	r2, [r2, #3]
 8013a74:	4313      	orrs	r3, r2
 8013a76:	061a      	lsls	r2, r3, #24
 8013a78:	4b2c      	ldr	r3, [pc, #176]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	0619      	lsls	r1, r3, #24
 8013a7e:	4b2b      	ldr	r3, [pc, #172]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a80:	785b      	ldrb	r3, [r3, #1]
 8013a82:	041b      	lsls	r3, r3, #16
 8013a84:	4319      	orrs	r1, r3
 8013a86:	4b29      	ldr	r3, [pc, #164]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a88:	789b      	ldrb	r3, [r3, #2]
 8013a8a:	021b      	lsls	r3, r3, #8
 8013a8c:	430b      	orrs	r3, r1
 8013a8e:	4927      	ldr	r1, [pc, #156]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a90:	78c9      	ldrb	r1, [r1, #3]
 8013a92:	430b      	orrs	r3, r1
 8013a94:	021b      	lsls	r3, r3, #8
 8013a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013a9a:	431a      	orrs	r2, r3
 8013a9c:	4b23      	ldr	r3, [pc, #140]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013a9e:	781b      	ldrb	r3, [r3, #0]
 8013aa0:	0619      	lsls	r1, r3, #24
 8013aa2:	4b22      	ldr	r3, [pc, #136]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013aa4:	785b      	ldrb	r3, [r3, #1]
 8013aa6:	041b      	lsls	r3, r3, #16
 8013aa8:	4319      	orrs	r1, r3
 8013aaa:	4b20      	ldr	r3, [pc, #128]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013aac:	789b      	ldrb	r3, [r3, #2]
 8013aae:	021b      	lsls	r3, r3, #8
 8013ab0:	430b      	orrs	r3, r1
 8013ab2:	491e      	ldr	r1, [pc, #120]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013ab4:	78c9      	ldrb	r1, [r1, #3]
 8013ab6:	430b      	orrs	r3, r1
 8013ab8:	0a1b      	lsrs	r3, r3, #8
 8013aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013abe:	431a      	orrs	r2, r3
 8013ac0:	4b1a      	ldr	r3, [pc, #104]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	0619      	lsls	r1, r3, #24
 8013ac6:	4b19      	ldr	r3, [pc, #100]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013ac8:	785b      	ldrb	r3, [r3, #1]
 8013aca:	041b      	lsls	r3, r3, #16
 8013acc:	4319      	orrs	r1, r3
 8013ace:	4b17      	ldr	r3, [pc, #92]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013ad0:	789b      	ldrb	r3, [r3, #2]
 8013ad2:	021b      	lsls	r3, r3, #8
 8013ad4:	430b      	orrs	r3, r1
 8013ad6:	4915      	ldr	r1, [pc, #84]	; (8013b2c <MX_LWIP_Init+0x23c>)
 8013ad8:	78c9      	ldrb	r1, [r1, #3]
 8013ada:	430b      	orrs	r3, r1
 8013adc:	0e1b      	lsrs	r3, r3, #24
 8013ade:	4313      	orrs	r3, r2
 8013ae0:	4a15      	ldr	r2, [pc, #84]	; (8013b38 <MX_LWIP_Init+0x248>)
 8013ae2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013ae4:	4b15      	ldr	r3, [pc, #84]	; (8013b3c <MX_LWIP_Init+0x24c>)
 8013ae6:	9302      	str	r3, [sp, #8]
 8013ae8:	4b15      	ldr	r3, [pc, #84]	; (8013b40 <MX_LWIP_Init+0x250>)
 8013aea:	9301      	str	r3, [sp, #4]
 8013aec:	2300      	movs	r3, #0
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	4b11      	ldr	r3, [pc, #68]	; (8013b38 <MX_LWIP_Init+0x248>)
 8013af2:	4a10      	ldr	r2, [pc, #64]	; (8013b34 <MX_LWIP_Init+0x244>)
 8013af4:	490e      	ldr	r1, [pc, #56]	; (8013b30 <MX_LWIP_Init+0x240>)
 8013af6:	4813      	ldr	r0, [pc, #76]	; (8013b44 <MX_LWIP_Init+0x254>)
 8013af8:	f7f8 f9e0 	bl	800bebc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013afc:	4811      	ldr	r0, [pc, #68]	; (8013b44 <MX_LWIP_Init+0x254>)
 8013afe:	f7f8 fabd 	bl	800c07c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013b02:	4b10      	ldr	r3, [pc, #64]	; (8013b44 <MX_LWIP_Init+0x254>)
 8013b04:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013b08:	f003 0304 	and.w	r3, r3, #4
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d003      	beq.n	8013b18 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013b10:	480c      	ldr	r0, [pc, #48]	; (8013b44 <MX_LWIP_Init+0x254>)
 8013b12:	f7f8 fac3 	bl	800c09c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013b16:	e002      	b.n	8013b1e <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8013b18:	480a      	ldr	r0, [pc, #40]	; (8013b44 <MX_LWIP_Init+0x254>)
 8013b1a:	f7f8 fb03 	bl	800c124 <netif_set_down>
}
 8013b1e:	bf00      	nop
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	2000a880 	.word	0x2000a880
 8013b28:	2000a87c 	.word	0x2000a87c
 8013b2c:	2000a844 	.word	0x2000a844
 8013b30:	2000a878 	.word	0x2000a878
 8013b34:	2000a884 	.word	0x2000a884
 8013b38:	2000a888 	.word	0x2000a888
 8013b3c:	08008f21 	.word	0x08008f21
 8013b40:	08013885 	.word	0x08013885
 8013b44:	2000a848 	.word	0x2000a848

08013b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013b48:	b5b0      	push	{r4, r5, r7, lr}
 8013b4a:	b09a      	sub	sp, #104	; 0x68
 8013b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013b4e:	f7ec fd27 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013b52:	f000 f893 	bl	8013c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013b56:	f000 f953 	bl	8013e00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8013b5a:	f000 f8f9 	bl	8013d50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8013b5e:	f000 f921 	bl	8013da4 <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of SocketReceiveStack */
  osMessageQDef(SocketReceiveStack, 16, uint16_t);
 8013b62:	4a3a      	ldr	r2, [pc, #232]	; (8013c4c <main+0x104>)
 8013b64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b6c:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketReceiveStackHandle = osMessageCreate(osMessageQ(SocketReceiveStack), NULL);
 8013b70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013b74:	2100      	movs	r1, #0
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7ef fecd 	bl	8003916 <osMessageCreate>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	4b34      	ldr	r3, [pc, #208]	; (8013c50 <main+0x108>)
 8013b80:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketSendStack */
  osMessageQDef(SocketSendStack, 16, uint16_t);
 8013b82:	4a32      	ldr	r2, [pc, #200]	; (8013c4c <main+0x104>)
 8013b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b8c:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketSendStackHandle = osMessageCreate(osMessageQ(SocketSendStack), NULL);
 8013b90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b94:	2100      	movs	r1, #0
 8013b96:	4618      	mov	r0, r3
 8013b98:	f7ef febd 	bl	8003916 <osMessageCreate>
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	4b2d      	ldr	r3, [pc, #180]	; (8013c54 <main+0x10c>)
 8013ba0:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketHandlerStack */
  osMessageQDef(SocketHandlerStack, 16, uint16_t);
 8013ba2:	4a2a      	ldr	r2, [pc, #168]	; (8013c4c <main+0x104>)
 8013ba4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bac:	e883 0003 	stmia.w	r3, {r0, r1}
  SocketHandlerStackHandle = osMessageCreate(osMessageQ(SocketHandlerStack), NULL);
 8013bb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ef fead 	bl	8003916 <osMessageCreate>
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	4b26      	ldr	r3, [pc, #152]	; (8013c58 <main+0x110>)
 8013bc0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8013bc2:	4b26      	ldr	r3, [pc, #152]	; (8013c5c <main+0x114>)
 8013bc4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8013bc8:	461d      	mov	r5, r3
 8013bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bce:	682b      	ldr	r3, [r5, #0]
 8013bd0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8013bd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013bd6:	2100      	movs	r1, #0
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7ef fd1c 	bl	8003616 <osThreadCreate>
 8013bde:	4602      	mov	r2, r0
 8013be0:	4b1f      	ldr	r3, [pc, #124]	; (8013c60 <main+0x118>)
 8013be2:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketSend */
  osThreadDef(SocketSend, SocketSendFunct, osPriorityNormal, 0, 128);
 8013be4:	4b1f      	ldr	r3, [pc, #124]	; (8013c64 <main+0x11c>)
 8013be6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8013bea:	461d      	mov	r5, r3
 8013bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013bf0:	682b      	ldr	r3, [r5, #0]
 8013bf2:	6023      	str	r3, [r4, #0]
  SocketSendHandle = osThreadCreate(osThread(SocketSend), NULL);
 8013bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ef fd0b 	bl	8003616 <osThreadCreate>
 8013c00:	4602      	mov	r2, r0
 8013c02:	4b19      	ldr	r3, [pc, #100]	; (8013c68 <main+0x120>)
 8013c04:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketReceived */
  osThreadDef(SocketReceived, SocketReceivedFunct, osPriorityNormal, 0, 128);
 8013c06:	4b19      	ldr	r3, [pc, #100]	; (8013c6c <main+0x124>)
 8013c08:	f107 0414 	add.w	r4, r7, #20
 8013c0c:	461d      	mov	r5, r3
 8013c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c12:	682b      	ldr	r3, [r5, #0]
 8013c14:	6023      	str	r3, [r4, #0]
  SocketReceivedHandle = osThreadCreate(osThread(SocketReceived), NULL);
 8013c16:	f107 0314 	add.w	r3, r7, #20
 8013c1a:	2100      	movs	r1, #0
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ef fcfa 	bl	8003616 <osThreadCreate>
 8013c22:	4602      	mov	r2, r0
 8013c24:	4b12      	ldr	r3, [pc, #72]	; (8013c70 <main+0x128>)
 8013c26:	601a      	str	r2, [r3, #0]

  /* definition and creation of SocketHandler */
  osThreadDef(SocketHandler, SocketHandlerFunct, osPriorityLow, 0, 128);
 8013c28:	4b12      	ldr	r3, [pc, #72]	; (8013c74 <main+0x12c>)
 8013c2a:	463c      	mov	r4, r7
 8013c2c:	461d      	mov	r5, r3
 8013c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c32:	682b      	ldr	r3, [r5, #0]
 8013c34:	6023      	str	r3, [r4, #0]
  SocketHandlerHandle = osThreadCreate(osThread(SocketHandler), NULL);
 8013c36:	463b      	mov	r3, r7
 8013c38:	2100      	movs	r1, #0
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ef fceb 	bl	8003616 <osThreadCreate>
 8013c40:	4602      	mov	r2, r0
 8013c42:	4b0d      	ldr	r3, [pc, #52]	; (8013c78 <main+0x130>)
 8013c44:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8013c46:	f7ef fccf 	bl	80035e8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013c4a:	e7fe      	b.n	8013c4a <main+0x102>
 8013c4c:	08017e3c 	.word	0x08017e3c
 8013c50:	2000ace4 	.word	0x2000ace4
 8013c54:	2000acf0 	.word	0x2000acf0
 8013c58:	2000ace8 	.word	0x2000ace8
 8013c5c:	08017e50 	.word	0x08017e50
 8013c60:	2000a88c 	.word	0x2000a88c
 8013c64:	08017e70 	.word	0x08017e70
 8013c68:	2000acec 	.word	0x2000acec
 8013c6c:	08017e94 	.word	0x08017e94
 8013c70:	2000a894 	.word	0x2000a894
 8013c74:	08017eb8 	.word	0x08017eb8
 8013c78:	2000a890 	.word	0x2000a890

08013c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b094      	sub	sp, #80	; 0x50
 8013c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013c82:	f107 0320 	add.w	r3, r7, #32
 8013c86:	2230      	movs	r2, #48	; 0x30
 8013c88:	2100      	movs	r1, #0
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f000 fcd2 	bl	8014634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013c90:	f107 030c 	add.w	r3, r7, #12
 8013c94:	2200      	movs	r2, #0
 8013c96:	601a      	str	r2, [r3, #0]
 8013c98:	605a      	str	r2, [r3, #4]
 8013c9a:	609a      	str	r2, [r3, #8]
 8013c9c:	60da      	str	r2, [r3, #12]
 8013c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	60bb      	str	r3, [r7, #8]
 8013ca4:	4a28      	ldr	r2, [pc, #160]	; (8013d48 <SystemClock_Config+0xcc>)
 8013ca6:	4b28      	ldr	r3, [pc, #160]	; (8013d48 <SystemClock_Config+0xcc>)
 8013ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cae:	6413      	str	r3, [r2, #64]	; 0x40
 8013cb0:	4b25      	ldr	r3, [pc, #148]	; (8013d48 <SystemClock_Config+0xcc>)
 8013cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013cb8:	60bb      	str	r3, [r7, #8]
 8013cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	607b      	str	r3, [r7, #4]
 8013cc0:	4a22      	ldr	r2, [pc, #136]	; (8013d4c <SystemClock_Config+0xd0>)
 8013cc2:	4b22      	ldr	r3, [pc, #136]	; (8013d4c <SystemClock_Config+0xd0>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013cca:	6013      	str	r3, [r2, #0]
 8013ccc:	4b1f      	ldr	r3, [pc, #124]	; (8013d4c <SystemClock_Config+0xd0>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013cd4:	607b      	str	r3, [r7, #4]
 8013cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013cd8:	2301      	movs	r3, #1
 8013cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8013cdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8013ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013ce2:	2302      	movs	r3, #2
 8013ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8013cec:	2304      	movs	r3, #4
 8013cee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013cf0:	23a8      	movs	r3, #168	; 0xa8
 8013cf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013cf8:	2307      	movs	r3, #7
 8013cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013cfc:	f107 0320 	add.w	r3, r7, #32
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ee f891 	bl	8001e28 <HAL_RCC_OscConfig>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d001      	beq.n	8013d10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8013d0c:	f000 f9fa 	bl	8014104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013d10:	230f      	movs	r3, #15
 8013d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013d14:	2302      	movs	r3, #2
 8013d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013d1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013d20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013d28:	f107 030c 	add.w	r3, r7, #12
 8013d2c:	2105      	movs	r1, #5
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ee fabc 	bl	80022ac <HAL_RCC_ClockConfig>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d001      	beq.n	8013d3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8013d3a:	f000 f9e3 	bl	8014104 <Error_Handler>
  }
}
 8013d3e:	bf00      	nop
 8013d40:	3750      	adds	r7, #80	; 0x50
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	40023800 	.word	0x40023800
 8013d4c:	40007000 	.word	0x40007000

08013d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8013d54:	4b11      	ldr	r3, [pc, #68]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d56:	4a12      	ldr	r2, [pc, #72]	; (8013da0 <MX_USART3_UART_Init+0x50>)
 8013d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8013d5a:	4b10      	ldr	r3, [pc, #64]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8013d62:	4b0e      	ldr	r3, [pc, #56]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d64:	2200      	movs	r2, #0
 8013d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8013d68:	4b0c      	ldr	r3, [pc, #48]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8013d6e:	4b0b      	ldr	r3, [pc, #44]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8013d74:	4b09      	ldr	r3, [pc, #36]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d76:	220c      	movs	r2, #12
 8013d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013d7a:	4b08      	ldr	r3, [pc, #32]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8013d80:	4b06      	ldr	r3, [pc, #24]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d82:	2200      	movs	r2, #0
 8013d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8013d86:	4805      	ldr	r0, [pc, #20]	; (8013d9c <MX_USART3_UART_Init+0x4c>)
 8013d88:	f7ee feee 	bl	8002b68 <HAL_UART_Init>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d001      	beq.n	8013d96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8013d92:	f000 f9b7 	bl	8014104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8013d96:	bf00      	nop
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	2000a898 	.word	0x2000a898
 8013da0:	40004800 	.word	0x40004800

08013da4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013da8:	4b14      	ldr	r3, [pc, #80]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013db0:	4b12      	ldr	r3, [pc, #72]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013db2:	2204      	movs	r2, #4
 8013db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013db6:	4b11      	ldr	r3, [pc, #68]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013db8:	2202      	movs	r2, #2
 8013dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013dbc:	4b0f      	ldr	r3, [pc, #60]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013dc2:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dc4:	2202      	movs	r2, #2
 8013dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8013dc8:	4b0c      	ldr	r3, [pc, #48]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dca:	2201      	movs	r2, #1
 8013dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013dce:	4b0b      	ldr	r3, [pc, #44]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013dd4:	4b09      	ldr	r3, [pc, #36]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013dda:	4b08      	ldr	r3, [pc, #32]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013ddc:	2201      	movs	r2, #1
 8013dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013de0:	4b06      	ldr	r3, [pc, #24]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013de2:	2200      	movs	r2, #0
 8013de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013de6:	4805      	ldr	r0, [pc, #20]	; (8013dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8013de8:	f7ed ff0c 	bl	8001c04 <HAL_PCD_Init>
 8013dec:	4603      	mov	r3, r0
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d001      	beq.n	8013df6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8013df2:	f000 f987 	bl	8014104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8013df6:	bf00      	nop
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	2000a8d8 	.word	0x2000a8d8

08013e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b08c      	sub	sp, #48	; 0x30
 8013e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e06:	f107 031c 	add.w	r3, r7, #28
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	601a      	str	r2, [r3, #0]
 8013e0e:	605a      	str	r2, [r3, #4]
 8013e10:	609a      	str	r2, [r3, #8]
 8013e12:	60da      	str	r2, [r3, #12]
 8013e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013e16:	2300      	movs	r3, #0
 8013e18:	61bb      	str	r3, [r7, #24]
 8013e1a:	4a56      	ldr	r2, [pc, #344]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e1c:	4b55      	ldr	r3, [pc, #340]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e20:	f043 0304 	orr.w	r3, r3, #4
 8013e24:	6313      	str	r3, [r2, #48]	; 0x30
 8013e26:	4b53      	ldr	r3, [pc, #332]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e2a:	f003 0304 	and.w	r3, r3, #4
 8013e2e:	61bb      	str	r3, [r7, #24]
 8013e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013e32:	2300      	movs	r3, #0
 8013e34:	617b      	str	r3, [r7, #20]
 8013e36:	4a4f      	ldr	r2, [pc, #316]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e38:	4b4e      	ldr	r3, [pc, #312]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e40:	6313      	str	r3, [r2, #48]	; 0x30
 8013e42:	4b4c      	ldr	r3, [pc, #304]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e4a:	617b      	str	r3, [r7, #20]
 8013e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e4e:	2300      	movs	r3, #0
 8013e50:	613b      	str	r3, [r7, #16]
 8013e52:	4a48      	ldr	r2, [pc, #288]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e54:	4b47      	ldr	r3, [pc, #284]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e58:	f043 0301 	orr.w	r3, r3, #1
 8013e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e5e:	4b45      	ldr	r3, [pc, #276]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e62:	f003 0301 	and.w	r3, r3, #1
 8013e66:	613b      	str	r3, [r7, #16]
 8013e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	4a41      	ldr	r2, [pc, #260]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e70:	4b40      	ldr	r3, [pc, #256]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e74:	f043 0302 	orr.w	r3, r3, #2
 8013e78:	6313      	str	r3, [r2, #48]	; 0x30
 8013e7a:	4b3e      	ldr	r3, [pc, #248]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7e:	f003 0302 	and.w	r3, r3, #2
 8013e82:	60fb      	str	r3, [r7, #12]
 8013e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013e86:	2300      	movs	r3, #0
 8013e88:	60bb      	str	r3, [r7, #8]
 8013e8a:	4a3a      	ldr	r2, [pc, #232]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e8c:	4b39      	ldr	r3, [pc, #228]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e90:	f043 0308 	orr.w	r3, r3, #8
 8013e94:	6313      	str	r3, [r2, #48]	; 0x30
 8013e96:	4b37      	ldr	r3, [pc, #220]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e9a:	f003 0308 	and.w	r3, r3, #8
 8013e9e:	60bb      	str	r3, [r7, #8]
 8013ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	607b      	str	r3, [r7, #4]
 8013ea6:	4a33      	ldr	r2, [pc, #204]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013ea8:	4b32      	ldr	r3, [pc, #200]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8013eb2:	4b30      	ldr	r3, [pc, #192]	; (8013f74 <MX_GPIO_Init+0x174>)
 8013eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013eba:	607b      	str	r3, [r7, #4]
 8013ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8013ec4:	482c      	ldr	r0, [pc, #176]	; (8013f78 <MX_GPIO_Init+0x178>)
 8013ec6:	f7ed fe69 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8013eca:	2200      	movs	r2, #0
 8013ecc:	2140      	movs	r1, #64	; 0x40
 8013ece:	482b      	ldr	r0, [pc, #172]	; (8013f7c <MX_GPIO_Init+0x17c>)
 8013ed0:	f7ed fe64 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013eda:	4829      	ldr	r0, [pc, #164]	; (8013f80 <MX_GPIO_Init+0x180>)
 8013edc:	f7ed fe5e 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8013ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013ee6:	4b27      	ldr	r3, [pc, #156]	; (8013f84 <MX_GPIO_Init+0x184>)
 8013ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013eea:	2300      	movs	r3, #0
 8013eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8013eee:	f107 031c 	add.w	r3, r7, #28
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	4822      	ldr	r0, [pc, #136]	; (8013f80 <MX_GPIO_Init+0x180>)
 8013ef6:	f7ed fca7 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8013efa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8013efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f00:	2301      	movs	r3, #1
 8013f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f04:	2300      	movs	r3, #0
 8013f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f08:	2300      	movs	r3, #0
 8013f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013f0c:	f107 031c 	add.w	r3, r7, #28
 8013f10:	4619      	mov	r1, r3
 8013f12:	4819      	ldr	r0, [pc, #100]	; (8013f78 <MX_GPIO_Init+0x178>)
 8013f14:	f7ed fc98 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8013f18:	2340      	movs	r3, #64	; 0x40
 8013f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f20:	2300      	movs	r3, #0
 8013f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f24:	2300      	movs	r3, #0
 8013f26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8013f28:	f107 031c 	add.w	r3, r7, #28
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	4813      	ldr	r0, [pc, #76]	; (8013f7c <MX_GPIO_Init+0x17c>)
 8013f30:	f7ed fc8a 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8013f34:	2380      	movs	r3, #128	; 0x80
 8013f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013f40:	f107 031c 	add.w	r3, r7, #28
 8013f44:	4619      	mov	r1, r3
 8013f46:	480d      	ldr	r0, [pc, #52]	; (8013f7c <MX_GPIO_Init+0x17c>)
 8013f48:	f7ed fc7e 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8013f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013f52:	2301      	movs	r3, #1
 8013f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f56:	2300      	movs	r3, #0
 8013f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8013f5e:	f107 031c 	add.w	r3, r7, #28
 8013f62:	4619      	mov	r1, r3
 8013f64:	4806      	ldr	r0, [pc, #24]	; (8013f80 <MX_GPIO_Init+0x180>)
 8013f66:	f7ed fc6f 	bl	8001848 <HAL_GPIO_Init>

}
 8013f6a:	bf00      	nop
 8013f6c:	3730      	adds	r7, #48	; 0x30
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	40023800 	.word	0x40023800
 8013f78:	40020400 	.word	0x40020400
 8013f7c:	40021800 	.word	0x40021800
 8013f80:	40020800 	.word	0x40020800
 8013f84:	10110000 	.word	0x10110000

08013f88 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8013f90:	f7ff fcae 	bl	80138f0 <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8013f94:	2201      	movs	r2, #1
 8013f96:	2180      	movs	r1, #128	; 0x80
 8013f98:	4805      	ldr	r0, [pc, #20]	; (8013fb0 <StartDefaultTask+0x28>)
 8013f9a:	f7ed fdff 	bl	8001b9c <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8013f9e:	2180      	movs	r1, #128	; 0x80
 8013fa0:	4803      	ldr	r0, [pc, #12]	; (8013fb0 <StartDefaultTask+0x28>)
 8013fa2:	f7ed fe14 	bl	8001bce <HAL_GPIO_TogglePin>
	  osDelay(500);
 8013fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013faa:	f7ef fb5b 	bl	8003664 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8013fae:	e7f6      	b.n	8013f9e <StartDefaultTask+0x16>
 8013fb0:	40020400 	.word	0x40020400

08013fb4 <SocketSendFunct>:
* @retval None
*/
int sock;
/* USER CODE END Header_SocketSendFunct */
void SocketSendFunct(void const * argument)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b084      	sub	sp, #16
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]


	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(2000);
 8013fbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8013fc0:	f7ef fb50 	bl	8003664 <osDelay>
	   	/* write something */
	    if(sock >=0)
 8013fc4:	4b10      	ldr	r3, [pc, #64]	; (8014008 <SocketSendFunct+0x54>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	dbf7      	blt.n	8013fbc <SocketSendFunct+0x8>
	     {
	    	if (cpt ==0)
 8013fcc:	4b0f      	ldr	r3, [pc, #60]	; (801400c <SocketSendFunct+0x58>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d10d      	bne.n	8013ff0 <SocketSendFunct+0x3c>
	    	{
	   	  	 ret = send(sock,"BONjour\n", 8, 0); cpt++;}
 8013fd4:	4b0c      	ldr	r3, [pc, #48]	; (8014008 <SocketSendFunct+0x54>)
 8013fd6:	6818      	ldr	r0, [r3, #0]
 8013fd8:	2300      	movs	r3, #0
 8013fda:	2208      	movs	r2, #8
 8013fdc:	490c      	ldr	r1, [pc, #48]	; (8014010 <SocketSendFunct+0x5c>)
 8013fde:	f7f4 fc69 	bl	80088b4 <lwip_send>
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	4b09      	ldr	r3, [pc, #36]	; (801400c <SocketSendFunct+0x58>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	4a08      	ldr	r2, [pc, #32]	; (801400c <SocketSendFunct+0x58>)
 8013fec:	6013      	str	r3, [r2, #0]
 8013fee:	e7e5      	b.n	8013fbc <SocketSendFunct+0x8>
	    	else{
	   	   	 ret = send(sock,"BANDONr\n", 8, 0);cpt =0;}
 8013ff0:	4b05      	ldr	r3, [pc, #20]	; (8014008 <SocketSendFunct+0x54>)
 8013ff2:	6818      	ldr	r0, [r3, #0]
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	2208      	movs	r2, #8
 8013ff8:	4906      	ldr	r1, [pc, #24]	; (8014014 <SocketSendFunct+0x60>)
 8013ffa:	f7f4 fc5b 	bl	80088b4 <lwip_send>
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	4b02      	ldr	r3, [pc, #8]	; (801400c <SocketSendFunct+0x58>)
 8014002:	2200      	movs	r2, #0
 8014004:	601a      	str	r2, [r3, #0]
	    osDelay(2000);
 8014006:	e7d9      	b.n	8013fbc <SocketSendFunct+0x8>
 8014008:	2000ace0 	.word	0x2000ace0
 801400c:	20003fd0 	.word	0x20003fd0
 8014010:	08017ecc 	.word	0x08017ecc
 8014014:	08017ed8 	.word	0x08017ed8

08014018 <SocketReceivedFunct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SocketReceivedFunct */
void SocketReceivedFunct(void const * argument)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b09c      	sub	sp, #112	; 0x70
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SocketReceivedFunct */
	 int ret;
	 char RECEIVE[100];

  if(sock >=0)
 8014020:	4b0f      	ldr	r3, [pc, #60]	; (8014060 <SocketReceivedFunct+0x48>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	db17      	blt.n	8014058 <SocketReceivedFunct+0x40>
  {
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8014028:	2001      	movs	r0, #1
 801402a:	f7ef fb1b 	bl	8003664 <osDelay>
	    ret =  recv(sock,RECEIVE,100,0);
 801402e:	4b0c      	ldr	r3, [pc, #48]	; (8014060 <SocketReceivedFunct+0x48>)
 8014030:	6818      	ldr	r0, [r3, #0]
 8014032:	f107 0108 	add.w	r1, r7, #8
 8014036:	2300      	movs	r3, #0
 8014038:	2264      	movs	r2, #100	; 0x64
 801403a:	f7f4 fc25 	bl	8008888 <lwip_recv>
 801403e:	66f8      	str	r0, [r7, #108]	; 0x6c
	    if(ret!=0)
 8014040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014042:	2b00      	cmp	r3, #0
 8014044:	d0f0      	beq.n	8014028 <SocketReceivedFunct+0x10>
	    {
	      ret = send(sock,"receive\n", 8, 0);
 8014046:	4b06      	ldr	r3, [pc, #24]	; (8014060 <SocketReceivedFunct+0x48>)
 8014048:	6818      	ldr	r0, [r3, #0]
 801404a:	2300      	movs	r3, #0
 801404c:	2208      	movs	r2, #8
 801404e:	4905      	ldr	r1, [pc, #20]	; (8014064 <SocketReceivedFunct+0x4c>)
 8014050:	f7f4 fc30 	bl	80088b4 <lwip_send>
 8014054:	66f8      	str	r0, [r7, #108]	; 0x6c
	    osDelay(1);
 8014056:	e7e7      	b.n	8014028 <SocketReceivedFunct+0x10>
	    }
	  }
  }
  /* USER CODE END SocketReceivedFunct */
}
 8014058:	bf00      	nop
 801405a:	3770      	adds	r7, #112	; 0x70
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	2000ace0 	.word	0x2000ace0
 8014064:	08017ee4 	.word	0x08017ee4

08014068 <SocketHandlerFunct>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SocketHandlerFunct */
void SocketHandlerFunct(void const * argument)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b086      	sub	sp, #24
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SocketHandlerFunct */

	struct sockaddr_in address;

	    sock =-1;
 8014070:	4b19      	ldr	r3, [pc, #100]	; (80140d8 <SocketHandlerFunct+0x70>)
 8014072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014076:	601a      	str	r2, [r3, #0]
		osDelay(10);
 8014078:	200a      	movs	r0, #10
 801407a:	f7ef faf3 	bl	8003664 <osDelay>
		/* create a TCP socket */
		if ((sock = socket(AF_INET, SOCK_STREAM, 0)) >= 0)
 801407e:	2200      	movs	r2, #0
 8014080:	2101      	movs	r1, #1
 8014082:	2002      	movs	r0, #2
 8014084:	f7f4 fd2e 	bl	8008ae4 <lwip_socket>
 8014088:	4602      	mov	r2, r0
 801408a:	4b13      	ldr	r3, [pc, #76]	; (80140d8 <SocketHandlerFunct+0x70>)
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	4b12      	ldr	r3, [pc, #72]	; (80140d8 <SocketHandlerFunct+0x70>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	db1b      	blt.n	80140ce <SocketHandlerFunct+0x66>
		    {
			address.sin_family = AF_INET;
 8014096:	2302      	movs	r3, #2
 8014098:	727b      	strb	r3, [r7, #9]
			address.sin_port = htons(65432);
 801409a:	f64f 7098 	movw	r0, #65432	; 0xff98
 801409e:	f7f5 f823 	bl	80090e8 <lwip_htons>
 80140a2:	4603      	mov	r3, r0
 80140a4:	817b      	strh	r3, [r7, #10]
			address.sin_addr.s_addr = inet_addr("192.168.1.4");
 80140a6:	480d      	ldr	r0, [pc, #52]	; (80140dc <SocketHandlerFunct+0x74>)
 80140a8:	f7f6 fbb7 	bl	800a81a <ipaddr_addr>
 80140ac:	4603      	mov	r3, r0
 80140ae:	60fb      	str	r3, [r7, #12]

			if (lwip_connect(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 80140b0:	4b09      	ldr	r3, [pc, #36]	; (80140d8 <SocketHandlerFunct+0x70>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	f107 0108 	add.w	r1, r7, #8
 80140b8:	2210      	movs	r2, #16
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7f4 f9a0 	bl	8008400 <lwip_connect>
 80140c0:	4603      	mov	r3, r0
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	da03      	bge.n	80140ce <SocketHandlerFunct+0x66>
				{
				  sock =-1;
 80140c6:	4b04      	ldr	r3, [pc, #16]	; (80140d8 <SocketHandlerFunct+0x70>)
 80140c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140cc:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80140ce:	2001      	movs	r0, #1
 80140d0:	f7ef fac8 	bl	8003664 <osDelay>
 80140d4:	e7fb      	b.n	80140ce <SocketHandlerFunct+0x66>
 80140d6:	bf00      	nop
 80140d8:	2000ace0 	.word	0x2000ace0
 80140dc:	08017ef0 	.word	0x08017ef0

080140e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	4a04      	ldr	r2, [pc, #16]	; (8014100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80140ee:	4293      	cmp	r3, r2
 80140f0:	d101      	bne.n	80140f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80140f2:	f7ec fa77 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80140f6:	bf00      	nop
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	40010000 	.word	0x40010000

08014104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014104:	b480      	push	{r7}
 8014106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014108:	bf00      	nop
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
	...

08014114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801411a:	2300      	movs	r3, #0
 801411c:	607b      	str	r3, [r7, #4]
 801411e:	4a12      	ldr	r2, [pc, #72]	; (8014168 <HAL_MspInit+0x54>)
 8014120:	4b11      	ldr	r3, [pc, #68]	; (8014168 <HAL_MspInit+0x54>)
 8014122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014128:	6453      	str	r3, [r2, #68]	; 0x44
 801412a:	4b0f      	ldr	r3, [pc, #60]	; (8014168 <HAL_MspInit+0x54>)
 801412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801412e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014132:	607b      	str	r3, [r7, #4]
 8014134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014136:	2300      	movs	r3, #0
 8014138:	603b      	str	r3, [r7, #0]
 801413a:	4a0b      	ldr	r2, [pc, #44]	; (8014168 <HAL_MspInit+0x54>)
 801413c:	4b0a      	ldr	r3, [pc, #40]	; (8014168 <HAL_MspInit+0x54>)
 801413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014144:	6413      	str	r3, [r2, #64]	; 0x40
 8014146:	4b08      	ldr	r3, [pc, #32]	; (8014168 <HAL_MspInit+0x54>)
 8014148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014152:	2200      	movs	r2, #0
 8014154:	210f      	movs	r1, #15
 8014156:	f06f 0001 	mvn.w	r0, #1
 801415a:	f7ec fb3b 	bl	80007d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801415e:	bf00      	nop
 8014160:	3708      	adds	r7, #8
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	40023800 	.word	0x40023800

0801416c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b08a      	sub	sp, #40	; 0x28
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014174:	f107 0314 	add.w	r3, r7, #20
 8014178:	2200      	movs	r2, #0
 801417a:	601a      	str	r2, [r3, #0]
 801417c:	605a      	str	r2, [r3, #4]
 801417e:	609a      	str	r2, [r3, #8]
 8014180:	60da      	str	r2, [r3, #12]
 8014182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	4a19      	ldr	r2, [pc, #100]	; (80141f0 <HAL_UART_MspInit+0x84>)
 801418a:	4293      	cmp	r3, r2
 801418c:	d12c      	bne.n	80141e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801418e:	2300      	movs	r3, #0
 8014190:	613b      	str	r3, [r7, #16]
 8014192:	4a18      	ldr	r2, [pc, #96]	; (80141f4 <HAL_UART_MspInit+0x88>)
 8014194:	4b17      	ldr	r3, [pc, #92]	; (80141f4 <HAL_UART_MspInit+0x88>)
 8014196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801419c:	6413      	str	r3, [r2, #64]	; 0x40
 801419e:	4b15      	ldr	r3, [pc, #84]	; (80141f4 <HAL_UART_MspInit+0x88>)
 80141a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80141a6:	613b      	str	r3, [r7, #16]
 80141a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80141aa:	2300      	movs	r3, #0
 80141ac:	60fb      	str	r3, [r7, #12]
 80141ae:	4a11      	ldr	r2, [pc, #68]	; (80141f4 <HAL_UART_MspInit+0x88>)
 80141b0:	4b10      	ldr	r3, [pc, #64]	; (80141f4 <HAL_UART_MspInit+0x88>)
 80141b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141b4:	f043 0308 	orr.w	r3, r3, #8
 80141b8:	6313      	str	r3, [r2, #48]	; 0x30
 80141ba:	4b0e      	ldr	r3, [pc, #56]	; (80141f4 <HAL_UART_MspInit+0x88>)
 80141bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141be:	f003 0308 	and.w	r3, r3, #8
 80141c2:	60fb      	str	r3, [r7, #12]
 80141c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80141c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80141ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141cc:	2302      	movs	r3, #2
 80141ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80141d0:	2301      	movs	r3, #1
 80141d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141d4:	2303      	movs	r3, #3
 80141d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80141d8:	2307      	movs	r3, #7
 80141da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80141dc:	f107 0314 	add.w	r3, r7, #20
 80141e0:	4619      	mov	r1, r3
 80141e2:	4805      	ldr	r0, [pc, #20]	; (80141f8 <HAL_UART_MspInit+0x8c>)
 80141e4:	f7ed fb30 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80141e8:	bf00      	nop
 80141ea:	3728      	adds	r7, #40	; 0x28
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}
 80141f0:	40004800 	.word	0x40004800
 80141f4:	40023800 	.word	0x40023800
 80141f8:	40020c00 	.word	0x40020c00

080141fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b08a      	sub	sp, #40	; 0x28
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014204:	f107 0314 	add.w	r3, r7, #20
 8014208:	2200      	movs	r2, #0
 801420a:	601a      	str	r2, [r3, #0]
 801420c:	605a      	str	r2, [r3, #4]
 801420e:	609a      	str	r2, [r3, #8]
 8014210:	60da      	str	r2, [r3, #12]
 8014212:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801421c:	d13f      	bne.n	801429e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801421e:	2300      	movs	r3, #0
 8014220:	613b      	str	r3, [r7, #16]
 8014222:	4a21      	ldr	r2, [pc, #132]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014224:	4b20      	ldr	r3, [pc, #128]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014228:	f043 0301 	orr.w	r3, r3, #1
 801422c:	6313      	str	r3, [r2, #48]	; 0x30
 801422e:	4b1e      	ldr	r3, [pc, #120]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014232:	f003 0301 	and.w	r3, r3, #1
 8014236:	613b      	str	r3, [r7, #16]
 8014238:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801423a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801423e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014240:	2302      	movs	r3, #2
 8014242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014244:	2300      	movs	r3, #0
 8014246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014248:	2303      	movs	r3, #3
 801424a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801424c:	230a      	movs	r3, #10
 801424e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	4619      	mov	r1, r3
 8014256:	4815      	ldr	r0, [pc, #84]	; (80142ac <HAL_PCD_MspInit+0xb0>)
 8014258:	f7ed faf6 	bl	8001848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801425c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014262:	2300      	movs	r3, #0
 8014264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014266:	2300      	movs	r3, #0
 8014268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801426a:	f107 0314 	add.w	r3, r7, #20
 801426e:	4619      	mov	r1, r3
 8014270:	480e      	ldr	r0, [pc, #56]	; (80142ac <HAL_PCD_MspInit+0xb0>)
 8014272:	f7ed fae9 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014276:	4a0c      	ldr	r2, [pc, #48]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014278:	4b0b      	ldr	r3, [pc, #44]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 801427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014280:	6353      	str	r3, [r2, #52]	; 0x34
 8014282:	2300      	movs	r3, #0
 8014284:	60fb      	str	r3, [r7, #12]
 8014286:	4a08      	ldr	r2, [pc, #32]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014288:	4b07      	ldr	r3, [pc, #28]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 801428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801428c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014290:	6453      	str	r3, [r2, #68]	; 0x44
 8014292:	4b05      	ldr	r3, [pc, #20]	; (80142a8 <HAL_PCD_MspInit+0xac>)
 8014294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801429a:	60fb      	str	r3, [r7, #12]
 801429c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 801429e:	bf00      	nop
 80142a0:	3728      	adds	r7, #40	; 0x28
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	bf00      	nop
 80142a8:	40023800 	.word	0x40023800
 80142ac:	40020000 	.word	0x40020000

080142b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b08c      	sub	sp, #48	; 0x30
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80142b8:	2300      	movs	r3, #0
 80142ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80142bc:	2300      	movs	r3, #0
 80142be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80142c0:	2200      	movs	r2, #0
 80142c2:	6879      	ldr	r1, [r7, #4]
 80142c4:	2019      	movs	r0, #25
 80142c6:	f7ec fa85 	bl	80007d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80142ca:	2019      	movs	r0, #25
 80142cc:	f7ec fa9e 	bl	800080c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80142d0:	2300      	movs	r3, #0
 80142d2:	60fb      	str	r3, [r7, #12]
 80142d4:	4a1f      	ldr	r2, [pc, #124]	; (8014354 <HAL_InitTick+0xa4>)
 80142d6:	4b1f      	ldr	r3, [pc, #124]	; (8014354 <HAL_InitTick+0xa4>)
 80142d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142da:	f043 0301 	orr.w	r3, r3, #1
 80142de:	6453      	str	r3, [r2, #68]	; 0x44
 80142e0:	4b1c      	ldr	r3, [pc, #112]	; (8014354 <HAL_InitTick+0xa4>)
 80142e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142e4:	f003 0301 	and.w	r3, r3, #1
 80142e8:	60fb      	str	r3, [r7, #12]
 80142ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80142ec:	f107 0210 	add.w	r2, r7, #16
 80142f0:	f107 0314 	add.w	r3, r7, #20
 80142f4:	4611      	mov	r1, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ee f9c6 	bl	8002688 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80142fc:	f7ee f9b0 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8014300:	4603      	mov	r3, r0
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8014306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014308:	4a13      	ldr	r2, [pc, #76]	; (8014358 <HAL_InitTick+0xa8>)
 801430a:	fba2 2303 	umull	r2, r3, r2, r3
 801430e:	0c9b      	lsrs	r3, r3, #18
 8014310:	3b01      	subs	r3, #1
 8014312:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8014314:	4b11      	ldr	r3, [pc, #68]	; (801435c <HAL_InitTick+0xac>)
 8014316:	4a12      	ldr	r2, [pc, #72]	; (8014360 <HAL_InitTick+0xb0>)
 8014318:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801431a:	4b10      	ldr	r3, [pc, #64]	; (801435c <HAL_InitTick+0xac>)
 801431c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8014320:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8014322:	4a0e      	ldr	r2, [pc, #56]	; (801435c <HAL_InitTick+0xac>)
 8014324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014326:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8014328:	4b0c      	ldr	r3, [pc, #48]	; (801435c <HAL_InitTick+0xac>)
 801432a:	2200      	movs	r2, #0
 801432c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801432e:	4b0b      	ldr	r3, [pc, #44]	; (801435c <HAL_InitTick+0xac>)
 8014330:	2200      	movs	r2, #0
 8014332:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8014334:	4809      	ldr	r0, [pc, #36]	; (801435c <HAL_InitTick+0xac>)
 8014336:	f7ee f9d9 	bl	80026ec <HAL_TIM_Base_Init>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d104      	bne.n	801434a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8014340:	4806      	ldr	r0, [pc, #24]	; (801435c <HAL_InitTick+0xac>)
 8014342:	f7ee fa08 	bl	8002756 <HAL_TIM_Base_Start_IT>
 8014346:	4603      	mov	r3, r0
 8014348:	e000      	b.n	801434c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801434a:	2301      	movs	r3, #1
}
 801434c:	4618      	mov	r0, r3
 801434e:	3730      	adds	r7, #48	; 0x30
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	40023800 	.word	0x40023800
 8014358:	431bde83 	.word	0x431bde83
 801435c:	2000acf4 	.word	0x2000acf4
 8014360:	40010000 	.word	0x40010000

08014364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014364:	b480      	push	{r7}
 8014366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014368:	bf00      	nop
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014372:	b480      	push	{r7}
 8014374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014376:	e7fe      	b.n	8014376 <HardFault_Handler+0x4>

08014378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014378:	b480      	push	{r7}
 801437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801437c:	e7fe      	b.n	801437c <MemManage_Handler+0x4>

0801437e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801437e:	b480      	push	{r7}
 8014380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014382:	e7fe      	b.n	8014382 <BusFault_Handler+0x4>

08014384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014384:	b480      	push	{r7}
 8014386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014388:	e7fe      	b.n	8014388 <UsageFault_Handler+0x4>

0801438a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801438a:	b480      	push	{r7}
 801438c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801438e:	bf00      	nop
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801439c:	4802      	ldr	r0, [pc, #8]	; (80143a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801439e:	f7ee f9fe 	bl	800279e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80143a2:	bf00      	nop
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	2000acf4 	.word	0x2000acf4

080143ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80143b0:	4802      	ldr	r0, [pc, #8]	; (80143bc <ETH_IRQHandler+0x10>)
 80143b2:	f7ec fe1f 	bl	8000ff4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80143b6:	bf00      	nop
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	2000902c 	.word	0x2000902c

080143c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80143c0:	b590      	push	{r4, r7, lr}
 80143c2:	b087      	sub	sp, #28
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80143cc:	2300      	movs	r3, #0
 80143ce:	617b      	str	r3, [r7, #20]
 80143d0:	e00a      	b.n	80143e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80143d2:	68bc      	ldr	r4, [r7, #8]
 80143d4:	1c63      	adds	r3, r4, #1
 80143d6:	60bb      	str	r3, [r7, #8]
 80143d8:	f3af 8000 	nop.w
 80143dc:	4603      	mov	r3, r0
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	3301      	adds	r3, #1
 80143e6:	617b      	str	r3, [r7, #20]
 80143e8:	697a      	ldr	r2, [r7, #20]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	dbf0      	blt.n	80143d2 <_read+0x12>
	}

return len;
 80143f0:	687b      	ldr	r3, [r7, #4]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	371c      	adds	r7, #28
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd90      	pop	{r4, r7, pc}

080143fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b086      	sub	sp, #24
 80143fe:	af00      	add	r7, sp, #0
 8014400:	60f8      	str	r0, [r7, #12]
 8014402:	60b9      	str	r1, [r7, #8]
 8014404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014406:	2300      	movs	r3, #0
 8014408:	617b      	str	r3, [r7, #20]
 801440a:	e009      	b.n	8014420 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	1c5a      	adds	r2, r3, #1
 8014410:	60ba      	str	r2, [r7, #8]
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	4618      	mov	r0, r3
 8014416:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	3301      	adds	r3, #1
 801441e:	617b      	str	r3, [r7, #20]
 8014420:	697a      	ldr	r2, [r7, #20]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	429a      	cmp	r2, r3
 8014426:	dbf1      	blt.n	801440c <_write+0x12>
	}
	return len;
 8014428:	687b      	ldr	r3, [r7, #4]
}
 801442a:	4618      	mov	r0, r3
 801442c:	3718      	adds	r7, #24
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
	...

08014434 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8014434:	b480      	push	{r7}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801443c:	4b11      	ldr	r3, [pc, #68]	; (8014484 <_sbrk+0x50>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d102      	bne.n	801444a <_sbrk+0x16>
		heap_end = &end;
 8014444:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <_sbrk+0x50>)
 8014446:	4a10      	ldr	r2, [pc, #64]	; (8014488 <_sbrk+0x54>)
 8014448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801444a:	4b0e      	ldr	r3, [pc, #56]	; (8014484 <_sbrk+0x50>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014450:	4b0c      	ldr	r3, [pc, #48]	; (8014484 <_sbrk+0x50>)
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	4413      	add	r3, r2
 8014458:	466a      	mov	r2, sp
 801445a:	4293      	cmp	r3, r2
 801445c:	d905      	bls.n	801446a <_sbrk+0x36>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801445e:	4b0b      	ldr	r3, [pc, #44]	; (801448c <_sbrk+0x58>)
 8014460:	220c      	movs	r2, #12
 8014462:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014468:	e006      	b.n	8014478 <_sbrk+0x44>
	}

	heap_end += incr;
 801446a:	4b06      	ldr	r3, [pc, #24]	; (8014484 <_sbrk+0x50>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4413      	add	r3, r2
 8014472:	4a04      	ldr	r2, [pc, #16]	; (8014484 <_sbrk+0x50>)
 8014474:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014476:	68fb      	ldr	r3, [r7, #12]
}
 8014478:	4618      	mov	r0, r3
 801447a:	3714      	adds	r7, #20
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr
 8014484:	20003fd4 	.word	0x20003fd4
 8014488:	2000ad34 	.word	0x2000ad34
 801448c:	20007754 	.word	0x20007754

08014490 <_close>:

int _close(int file)
{
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
	return -1;
 8014498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801449c:	4618      	mov	r0, r3
 801449e:	370c      	adds	r7, #12
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b083      	sub	sp, #12
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80144b8:	605a      	str	r2, [r3, #4]
	return 0;
 80144ba:	2300      	movs	r3, #0
}
 80144bc:	4618      	mov	r0, r3
 80144be:	370c      	adds	r7, #12
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr

080144c8 <_isatty>:

int _isatty(int file)
{
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
	return 1;
 80144d0:	2301      	movs	r3, #1
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	370c      	adds	r7, #12
 80144d6:	46bd      	mov	sp, r7
 80144d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144dc:	4770      	bx	lr

080144de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80144de:	b480      	push	{r7}
 80144e0:	b085      	sub	sp, #20
 80144e2:	af00      	add	r7, sp, #0
 80144e4:	60f8      	str	r0, [r7, #12]
 80144e6:	60b9      	str	r1, [r7, #8]
 80144e8:	607a      	str	r2, [r7, #4]
	return 0;
 80144ea:	2300      	movs	r3, #0
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3714      	adds	r7, #20
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr

080144f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80144f8:	b480      	push	{r7}
 80144fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80144fc:	4a16      	ldr	r2, [pc, #88]	; (8014558 <SystemInit+0x60>)
 80144fe:	4b16      	ldr	r3, [pc, #88]	; (8014558 <SystemInit+0x60>)
 8014500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801450c:	4a13      	ldr	r2, [pc, #76]	; (801455c <SystemInit+0x64>)
 801450e:	4b13      	ldr	r3, [pc, #76]	; (801455c <SystemInit+0x64>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	f043 0301 	orr.w	r3, r3, #1
 8014516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014518:	4b10      	ldr	r3, [pc, #64]	; (801455c <SystemInit+0x64>)
 801451a:	2200      	movs	r2, #0
 801451c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801451e:	4a0f      	ldr	r2, [pc, #60]	; (801455c <SystemInit+0x64>)
 8014520:	4b0e      	ldr	r3, [pc, #56]	; (801455c <SystemInit+0x64>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801452c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801452e:	4b0b      	ldr	r3, [pc, #44]	; (801455c <SystemInit+0x64>)
 8014530:	4a0b      	ldr	r2, [pc, #44]	; (8014560 <SystemInit+0x68>)
 8014532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014534:	4a09      	ldr	r2, [pc, #36]	; (801455c <SystemInit+0x64>)
 8014536:	4b09      	ldr	r3, [pc, #36]	; (801455c <SystemInit+0x64>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801453e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014540:	4b06      	ldr	r3, [pc, #24]	; (801455c <SystemInit+0x64>)
 8014542:	2200      	movs	r2, #0
 8014544:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014546:	4b04      	ldr	r3, [pc, #16]	; (8014558 <SystemInit+0x60>)
 8014548:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801454c:	609a      	str	r2, [r3, #8]
#endif
}
 801454e:	bf00      	nop
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr
 8014558:	e000ed00 	.word	0xe000ed00
 801455c:	40023800 	.word	0x40023800
 8014560:	24003010 	.word	0x24003010

08014564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8014564:	f8df d034 	ldr.w	sp, [pc, #52]	; 801459c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801456a:	e003      	b.n	8014574 <LoopCopyDataInit>

0801456c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801456c:	4b0c      	ldr	r3, [pc, #48]	; (80145a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801456e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014572:	3104      	adds	r1, #4

08014574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014574:	480b      	ldr	r0, [pc, #44]	; (80145a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014576:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801457a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801457c:	d3f6      	bcc.n	801456c <CopyDataInit>
  ldr  r2, =_sbss
 801457e:	4a0b      	ldr	r2, [pc, #44]	; (80145ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014580:	e002      	b.n	8014588 <LoopFillZerobss>

08014582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014584:	f842 3b04 	str.w	r3, [r2], #4

08014588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014588:	4b09      	ldr	r3, [pc, #36]	; (80145b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801458a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801458c:	d3f9      	bcc.n	8014582 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801458e:	f7ff ffb3 	bl	80144f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014592:	f000 f811 	bl	80145b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014596:	f7ff fad7 	bl	8013b48 <main>
  bx  lr    
 801459a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 801459c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80145a0:	08018128 	.word	0x08018128
  ldr  r0, =_sdata
 80145a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80145a8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80145ac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80145b0:	2000ad34 	.word	0x2000ad34

080145b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80145b4:	e7fe      	b.n	80145b4 <ADC_IRQHandler>
	...

080145b8 <__libc_init_array>:
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	4e0d      	ldr	r6, [pc, #52]	; (80145f0 <__libc_init_array+0x38>)
 80145bc:	4c0d      	ldr	r4, [pc, #52]	; (80145f4 <__libc_init_array+0x3c>)
 80145be:	1ba4      	subs	r4, r4, r6
 80145c0:	10a4      	asrs	r4, r4, #2
 80145c2:	2500      	movs	r5, #0
 80145c4:	42a5      	cmp	r5, r4
 80145c6:	d109      	bne.n	80145dc <__libc_init_array+0x24>
 80145c8:	4e0b      	ldr	r6, [pc, #44]	; (80145f8 <__libc_init_array+0x40>)
 80145ca:	4c0c      	ldr	r4, [pc, #48]	; (80145fc <__libc_init_array+0x44>)
 80145cc:	f000 ff32 	bl	8015434 <_init>
 80145d0:	1ba4      	subs	r4, r4, r6
 80145d2:	10a4      	asrs	r4, r4, #2
 80145d4:	2500      	movs	r5, #0
 80145d6:	42a5      	cmp	r5, r4
 80145d8:	d105      	bne.n	80145e6 <__libc_init_array+0x2e>
 80145da:	bd70      	pop	{r4, r5, r6, pc}
 80145dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80145e0:	4798      	blx	r3
 80145e2:	3501      	adds	r5, #1
 80145e4:	e7ee      	b.n	80145c4 <__libc_init_array+0xc>
 80145e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80145ea:	4798      	blx	r3
 80145ec:	3501      	adds	r5, #1
 80145ee:	e7f2      	b.n	80145d6 <__libc_init_array+0x1e>
 80145f0:	08018120 	.word	0x08018120
 80145f4:	08018120 	.word	0x08018120
 80145f8:	08018120 	.word	0x08018120
 80145fc:	08018124 	.word	0x08018124

08014600 <memcmp>:
 8014600:	b510      	push	{r4, lr}
 8014602:	3901      	subs	r1, #1
 8014604:	4402      	add	r2, r0
 8014606:	4290      	cmp	r0, r2
 8014608:	d101      	bne.n	801460e <memcmp+0xe>
 801460a:	2000      	movs	r0, #0
 801460c:	bd10      	pop	{r4, pc}
 801460e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014612:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014616:	42a3      	cmp	r3, r4
 8014618:	d0f5      	beq.n	8014606 <memcmp+0x6>
 801461a:	1b18      	subs	r0, r3, r4
 801461c:	bd10      	pop	{r4, pc}

0801461e <memcpy>:
 801461e:	b510      	push	{r4, lr}
 8014620:	1e43      	subs	r3, r0, #1
 8014622:	440a      	add	r2, r1
 8014624:	4291      	cmp	r1, r2
 8014626:	d100      	bne.n	801462a <memcpy+0xc>
 8014628:	bd10      	pop	{r4, pc}
 801462a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801462e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014632:	e7f7      	b.n	8014624 <memcpy+0x6>

08014634 <memset>:
 8014634:	4402      	add	r2, r0
 8014636:	4603      	mov	r3, r0
 8014638:	4293      	cmp	r3, r2
 801463a:	d100      	bne.n	801463e <memset+0xa>
 801463c:	4770      	bx	lr
 801463e:	f803 1b01 	strb.w	r1, [r3], #1
 8014642:	e7f9      	b.n	8014638 <memset+0x4>

08014644 <iprintf>:
 8014644:	b40f      	push	{r0, r1, r2, r3}
 8014646:	4b0a      	ldr	r3, [pc, #40]	; (8014670 <iprintf+0x2c>)
 8014648:	b513      	push	{r0, r1, r4, lr}
 801464a:	681c      	ldr	r4, [r3, #0]
 801464c:	b124      	cbz	r4, 8014658 <iprintf+0x14>
 801464e:	69a3      	ldr	r3, [r4, #24]
 8014650:	b913      	cbnz	r3, 8014658 <iprintf+0x14>
 8014652:	4620      	mov	r0, r4
 8014654:	f000 f84e 	bl	80146f4 <__sinit>
 8014658:	ab05      	add	r3, sp, #20
 801465a:	9a04      	ldr	r2, [sp, #16]
 801465c:	68a1      	ldr	r1, [r4, #8]
 801465e:	9301      	str	r3, [sp, #4]
 8014660:	4620      	mov	r0, r4
 8014662:	f000 f959 	bl	8014918 <_vfiprintf_r>
 8014666:	b002      	add	sp, #8
 8014668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801466c:	b004      	add	sp, #16
 801466e:	4770      	bx	lr
 8014670:	20000018 	.word	0x20000018

08014674 <_cleanup_r>:
 8014674:	4901      	ldr	r1, [pc, #4]	; (801467c <_cleanup_r+0x8>)
 8014676:	f000 b8a9 	b.w	80147cc <_fwalk_reent>
 801467a:	bf00      	nop
 801467c:	080151ed 	.word	0x080151ed

08014680 <std.isra.0>:
 8014680:	2300      	movs	r3, #0
 8014682:	b510      	push	{r4, lr}
 8014684:	4604      	mov	r4, r0
 8014686:	6003      	str	r3, [r0, #0]
 8014688:	6043      	str	r3, [r0, #4]
 801468a:	6083      	str	r3, [r0, #8]
 801468c:	8181      	strh	r1, [r0, #12]
 801468e:	6643      	str	r3, [r0, #100]	; 0x64
 8014690:	81c2      	strh	r2, [r0, #14]
 8014692:	6103      	str	r3, [r0, #16]
 8014694:	6143      	str	r3, [r0, #20]
 8014696:	6183      	str	r3, [r0, #24]
 8014698:	4619      	mov	r1, r3
 801469a:	2208      	movs	r2, #8
 801469c:	305c      	adds	r0, #92	; 0x5c
 801469e:	f7ff ffc9 	bl	8014634 <memset>
 80146a2:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <std.isra.0+0x38>)
 80146a4:	6263      	str	r3, [r4, #36]	; 0x24
 80146a6:	4b05      	ldr	r3, [pc, #20]	; (80146bc <std.isra.0+0x3c>)
 80146a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80146aa:	4b05      	ldr	r3, [pc, #20]	; (80146c0 <std.isra.0+0x40>)
 80146ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146ae:	4b05      	ldr	r3, [pc, #20]	; (80146c4 <std.isra.0+0x44>)
 80146b0:	6224      	str	r4, [r4, #32]
 80146b2:	6323      	str	r3, [r4, #48]	; 0x30
 80146b4:	bd10      	pop	{r4, pc}
 80146b6:	bf00      	nop
 80146b8:	08014e91 	.word	0x08014e91
 80146bc:	08014eb3 	.word	0x08014eb3
 80146c0:	08014eeb 	.word	0x08014eeb
 80146c4:	08014f0f 	.word	0x08014f0f

080146c8 <__sfmoreglue>:
 80146c8:	b570      	push	{r4, r5, r6, lr}
 80146ca:	1e4a      	subs	r2, r1, #1
 80146cc:	2568      	movs	r5, #104	; 0x68
 80146ce:	4355      	muls	r5, r2
 80146d0:	460e      	mov	r6, r1
 80146d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80146d6:	f000 f897 	bl	8014808 <_malloc_r>
 80146da:	4604      	mov	r4, r0
 80146dc:	b140      	cbz	r0, 80146f0 <__sfmoreglue+0x28>
 80146de:	2100      	movs	r1, #0
 80146e0:	e880 0042 	stmia.w	r0, {r1, r6}
 80146e4:	300c      	adds	r0, #12
 80146e6:	60a0      	str	r0, [r4, #8]
 80146e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80146ec:	f7ff ffa2 	bl	8014634 <memset>
 80146f0:	4620      	mov	r0, r4
 80146f2:	bd70      	pop	{r4, r5, r6, pc}

080146f4 <__sinit>:
 80146f4:	6983      	ldr	r3, [r0, #24]
 80146f6:	b510      	push	{r4, lr}
 80146f8:	4604      	mov	r4, r0
 80146fa:	bb33      	cbnz	r3, 801474a <__sinit+0x56>
 80146fc:	6483      	str	r3, [r0, #72]	; 0x48
 80146fe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014700:	6503      	str	r3, [r0, #80]	; 0x50
 8014702:	4b12      	ldr	r3, [pc, #72]	; (801474c <__sinit+0x58>)
 8014704:	4a12      	ldr	r2, [pc, #72]	; (8014750 <__sinit+0x5c>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	6282      	str	r2, [r0, #40]	; 0x28
 801470a:	4298      	cmp	r0, r3
 801470c:	bf04      	itt	eq
 801470e:	2301      	moveq	r3, #1
 8014710:	6183      	streq	r3, [r0, #24]
 8014712:	f000 f81f 	bl	8014754 <__sfp>
 8014716:	6060      	str	r0, [r4, #4]
 8014718:	4620      	mov	r0, r4
 801471a:	f000 f81b 	bl	8014754 <__sfp>
 801471e:	60a0      	str	r0, [r4, #8]
 8014720:	4620      	mov	r0, r4
 8014722:	f000 f817 	bl	8014754 <__sfp>
 8014726:	2200      	movs	r2, #0
 8014728:	60e0      	str	r0, [r4, #12]
 801472a:	2104      	movs	r1, #4
 801472c:	6860      	ldr	r0, [r4, #4]
 801472e:	f7ff ffa7 	bl	8014680 <std.isra.0>
 8014732:	2201      	movs	r2, #1
 8014734:	2109      	movs	r1, #9
 8014736:	68a0      	ldr	r0, [r4, #8]
 8014738:	f7ff ffa2 	bl	8014680 <std.isra.0>
 801473c:	2202      	movs	r2, #2
 801473e:	2112      	movs	r1, #18
 8014740:	68e0      	ldr	r0, [r4, #12]
 8014742:	f7ff ff9d 	bl	8014680 <std.isra.0>
 8014746:	2301      	movs	r3, #1
 8014748:	61a3      	str	r3, [r4, #24]
 801474a:	bd10      	pop	{r4, pc}
 801474c:	080180e0 	.word	0x080180e0
 8014750:	08014675 	.word	0x08014675

08014754 <__sfp>:
 8014754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014756:	4b1c      	ldr	r3, [pc, #112]	; (80147c8 <__sfp+0x74>)
 8014758:	681e      	ldr	r6, [r3, #0]
 801475a:	69b3      	ldr	r3, [r6, #24]
 801475c:	4607      	mov	r7, r0
 801475e:	b913      	cbnz	r3, 8014766 <__sfp+0x12>
 8014760:	4630      	mov	r0, r6
 8014762:	f7ff ffc7 	bl	80146f4 <__sinit>
 8014766:	3648      	adds	r6, #72	; 0x48
 8014768:	68b4      	ldr	r4, [r6, #8]
 801476a:	6873      	ldr	r3, [r6, #4]
 801476c:	3b01      	subs	r3, #1
 801476e:	d503      	bpl.n	8014778 <__sfp+0x24>
 8014770:	6833      	ldr	r3, [r6, #0]
 8014772:	b133      	cbz	r3, 8014782 <__sfp+0x2e>
 8014774:	6836      	ldr	r6, [r6, #0]
 8014776:	e7f7      	b.n	8014768 <__sfp+0x14>
 8014778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801477c:	b16d      	cbz	r5, 801479a <__sfp+0x46>
 801477e:	3468      	adds	r4, #104	; 0x68
 8014780:	e7f4      	b.n	801476c <__sfp+0x18>
 8014782:	2104      	movs	r1, #4
 8014784:	4638      	mov	r0, r7
 8014786:	f7ff ff9f 	bl	80146c8 <__sfmoreglue>
 801478a:	6030      	str	r0, [r6, #0]
 801478c:	2800      	cmp	r0, #0
 801478e:	d1f1      	bne.n	8014774 <__sfp+0x20>
 8014790:	230c      	movs	r3, #12
 8014792:	603b      	str	r3, [r7, #0]
 8014794:	4604      	mov	r4, r0
 8014796:	4620      	mov	r0, r4
 8014798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801479a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801479e:	81e3      	strh	r3, [r4, #14]
 80147a0:	2301      	movs	r3, #1
 80147a2:	81a3      	strh	r3, [r4, #12]
 80147a4:	6665      	str	r5, [r4, #100]	; 0x64
 80147a6:	6025      	str	r5, [r4, #0]
 80147a8:	60a5      	str	r5, [r4, #8]
 80147aa:	6065      	str	r5, [r4, #4]
 80147ac:	6125      	str	r5, [r4, #16]
 80147ae:	6165      	str	r5, [r4, #20]
 80147b0:	61a5      	str	r5, [r4, #24]
 80147b2:	2208      	movs	r2, #8
 80147b4:	4629      	mov	r1, r5
 80147b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147ba:	f7ff ff3b 	bl	8014634 <memset>
 80147be:	6365      	str	r5, [r4, #52]	; 0x34
 80147c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80147c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80147c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80147c6:	e7e6      	b.n	8014796 <__sfp+0x42>
 80147c8:	080180e0 	.word	0x080180e0

080147cc <_fwalk_reent>:
 80147cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147d0:	4680      	mov	r8, r0
 80147d2:	4689      	mov	r9, r1
 80147d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80147d8:	2600      	movs	r6, #0
 80147da:	b914      	cbnz	r4, 80147e2 <_fwalk_reent+0x16>
 80147dc:	4630      	mov	r0, r6
 80147de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147e2:	68a5      	ldr	r5, [r4, #8]
 80147e4:	6867      	ldr	r7, [r4, #4]
 80147e6:	3f01      	subs	r7, #1
 80147e8:	d501      	bpl.n	80147ee <_fwalk_reent+0x22>
 80147ea:	6824      	ldr	r4, [r4, #0]
 80147ec:	e7f5      	b.n	80147da <_fwalk_reent+0xe>
 80147ee:	89ab      	ldrh	r3, [r5, #12]
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d907      	bls.n	8014804 <_fwalk_reent+0x38>
 80147f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147f8:	3301      	adds	r3, #1
 80147fa:	d003      	beq.n	8014804 <_fwalk_reent+0x38>
 80147fc:	4629      	mov	r1, r5
 80147fe:	4640      	mov	r0, r8
 8014800:	47c8      	blx	r9
 8014802:	4306      	orrs	r6, r0
 8014804:	3568      	adds	r5, #104	; 0x68
 8014806:	e7ee      	b.n	80147e6 <_fwalk_reent+0x1a>

08014808 <_malloc_r>:
 8014808:	b570      	push	{r4, r5, r6, lr}
 801480a:	1ccd      	adds	r5, r1, #3
 801480c:	f025 0503 	bic.w	r5, r5, #3
 8014810:	3508      	adds	r5, #8
 8014812:	2d0c      	cmp	r5, #12
 8014814:	bf38      	it	cc
 8014816:	250c      	movcc	r5, #12
 8014818:	2d00      	cmp	r5, #0
 801481a:	4606      	mov	r6, r0
 801481c:	db01      	blt.n	8014822 <_malloc_r+0x1a>
 801481e:	42a9      	cmp	r1, r5
 8014820:	d903      	bls.n	801482a <_malloc_r+0x22>
 8014822:	230c      	movs	r3, #12
 8014824:	6033      	str	r3, [r6, #0]
 8014826:	2000      	movs	r0, #0
 8014828:	bd70      	pop	{r4, r5, r6, pc}
 801482a:	f000 fd7f 	bl	801532c <__malloc_lock>
 801482e:	4a23      	ldr	r2, [pc, #140]	; (80148bc <_malloc_r+0xb4>)
 8014830:	6814      	ldr	r4, [r2, #0]
 8014832:	4621      	mov	r1, r4
 8014834:	b991      	cbnz	r1, 801485c <_malloc_r+0x54>
 8014836:	4c22      	ldr	r4, [pc, #136]	; (80148c0 <_malloc_r+0xb8>)
 8014838:	6823      	ldr	r3, [r4, #0]
 801483a:	b91b      	cbnz	r3, 8014844 <_malloc_r+0x3c>
 801483c:	4630      	mov	r0, r6
 801483e:	f000 fb17 	bl	8014e70 <_sbrk_r>
 8014842:	6020      	str	r0, [r4, #0]
 8014844:	4629      	mov	r1, r5
 8014846:	4630      	mov	r0, r6
 8014848:	f000 fb12 	bl	8014e70 <_sbrk_r>
 801484c:	1c43      	adds	r3, r0, #1
 801484e:	d126      	bne.n	801489e <_malloc_r+0x96>
 8014850:	230c      	movs	r3, #12
 8014852:	6033      	str	r3, [r6, #0]
 8014854:	4630      	mov	r0, r6
 8014856:	f000 fd6a 	bl	801532e <__malloc_unlock>
 801485a:	e7e4      	b.n	8014826 <_malloc_r+0x1e>
 801485c:	680b      	ldr	r3, [r1, #0]
 801485e:	1b5b      	subs	r3, r3, r5
 8014860:	d41a      	bmi.n	8014898 <_malloc_r+0x90>
 8014862:	2b0b      	cmp	r3, #11
 8014864:	d90f      	bls.n	8014886 <_malloc_r+0x7e>
 8014866:	600b      	str	r3, [r1, #0]
 8014868:	50cd      	str	r5, [r1, r3]
 801486a:	18cc      	adds	r4, r1, r3
 801486c:	4630      	mov	r0, r6
 801486e:	f000 fd5e 	bl	801532e <__malloc_unlock>
 8014872:	f104 000b 	add.w	r0, r4, #11
 8014876:	1d23      	adds	r3, r4, #4
 8014878:	f020 0007 	bic.w	r0, r0, #7
 801487c:	1ac3      	subs	r3, r0, r3
 801487e:	d01b      	beq.n	80148b8 <_malloc_r+0xb0>
 8014880:	425a      	negs	r2, r3
 8014882:	50e2      	str	r2, [r4, r3]
 8014884:	bd70      	pop	{r4, r5, r6, pc}
 8014886:	428c      	cmp	r4, r1
 8014888:	bf0d      	iteet	eq
 801488a:	6863      	ldreq	r3, [r4, #4]
 801488c:	684b      	ldrne	r3, [r1, #4]
 801488e:	6063      	strne	r3, [r4, #4]
 8014890:	6013      	streq	r3, [r2, #0]
 8014892:	bf18      	it	ne
 8014894:	460c      	movne	r4, r1
 8014896:	e7e9      	b.n	801486c <_malloc_r+0x64>
 8014898:	460c      	mov	r4, r1
 801489a:	6849      	ldr	r1, [r1, #4]
 801489c:	e7ca      	b.n	8014834 <_malloc_r+0x2c>
 801489e:	1cc4      	adds	r4, r0, #3
 80148a0:	f024 0403 	bic.w	r4, r4, #3
 80148a4:	42a0      	cmp	r0, r4
 80148a6:	d005      	beq.n	80148b4 <_malloc_r+0xac>
 80148a8:	1a21      	subs	r1, r4, r0
 80148aa:	4630      	mov	r0, r6
 80148ac:	f000 fae0 	bl	8014e70 <_sbrk_r>
 80148b0:	3001      	adds	r0, #1
 80148b2:	d0cd      	beq.n	8014850 <_malloc_r+0x48>
 80148b4:	6025      	str	r5, [r4, #0]
 80148b6:	e7d9      	b.n	801486c <_malloc_r+0x64>
 80148b8:	bd70      	pop	{r4, r5, r6, pc}
 80148ba:	bf00      	nop
 80148bc:	20003fd8 	.word	0x20003fd8
 80148c0:	20003fdc 	.word	0x20003fdc

080148c4 <__sfputc_r>:
 80148c4:	6893      	ldr	r3, [r2, #8]
 80148c6:	3b01      	subs	r3, #1
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	b410      	push	{r4}
 80148cc:	6093      	str	r3, [r2, #8]
 80148ce:	da09      	bge.n	80148e4 <__sfputc_r+0x20>
 80148d0:	6994      	ldr	r4, [r2, #24]
 80148d2:	42a3      	cmp	r3, r4
 80148d4:	db02      	blt.n	80148dc <__sfputc_r+0x18>
 80148d6:	b2cb      	uxtb	r3, r1
 80148d8:	2b0a      	cmp	r3, #10
 80148da:	d103      	bne.n	80148e4 <__sfputc_r+0x20>
 80148dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148e0:	f000 bb1a 	b.w	8014f18 <__swbuf_r>
 80148e4:	6813      	ldr	r3, [r2, #0]
 80148e6:	1c58      	adds	r0, r3, #1
 80148e8:	6010      	str	r0, [r2, #0]
 80148ea:	7019      	strb	r1, [r3, #0]
 80148ec:	b2c8      	uxtb	r0, r1
 80148ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148f2:	4770      	bx	lr

080148f4 <__sfputs_r>:
 80148f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148f6:	4606      	mov	r6, r0
 80148f8:	460f      	mov	r7, r1
 80148fa:	4614      	mov	r4, r2
 80148fc:	18d5      	adds	r5, r2, r3
 80148fe:	42ac      	cmp	r4, r5
 8014900:	d101      	bne.n	8014906 <__sfputs_r+0x12>
 8014902:	2000      	movs	r0, #0
 8014904:	e007      	b.n	8014916 <__sfputs_r+0x22>
 8014906:	463a      	mov	r2, r7
 8014908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801490c:	4630      	mov	r0, r6
 801490e:	f7ff ffd9 	bl	80148c4 <__sfputc_r>
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	d1f3      	bne.n	80148fe <__sfputs_r+0xa>
 8014916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014918 <_vfiprintf_r>:
 8014918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801491c:	b09d      	sub	sp, #116	; 0x74
 801491e:	460c      	mov	r4, r1
 8014920:	4617      	mov	r7, r2
 8014922:	9303      	str	r3, [sp, #12]
 8014924:	4606      	mov	r6, r0
 8014926:	b118      	cbz	r0, 8014930 <_vfiprintf_r+0x18>
 8014928:	6983      	ldr	r3, [r0, #24]
 801492a:	b90b      	cbnz	r3, 8014930 <_vfiprintf_r+0x18>
 801492c:	f7ff fee2 	bl	80146f4 <__sinit>
 8014930:	4b7c      	ldr	r3, [pc, #496]	; (8014b24 <_vfiprintf_r+0x20c>)
 8014932:	429c      	cmp	r4, r3
 8014934:	d157      	bne.n	80149e6 <_vfiprintf_r+0xce>
 8014936:	6874      	ldr	r4, [r6, #4]
 8014938:	89a3      	ldrh	r3, [r4, #12]
 801493a:	0718      	lsls	r0, r3, #28
 801493c:	d55d      	bpl.n	80149fa <_vfiprintf_r+0xe2>
 801493e:	6923      	ldr	r3, [r4, #16]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d05a      	beq.n	80149fa <_vfiprintf_r+0xe2>
 8014944:	2300      	movs	r3, #0
 8014946:	9309      	str	r3, [sp, #36]	; 0x24
 8014948:	2320      	movs	r3, #32
 801494a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801494e:	2330      	movs	r3, #48	; 0x30
 8014950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014954:	f04f 0b01 	mov.w	fp, #1
 8014958:	46b8      	mov	r8, r7
 801495a:	4645      	mov	r5, r8
 801495c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014960:	2b00      	cmp	r3, #0
 8014962:	d155      	bne.n	8014a10 <_vfiprintf_r+0xf8>
 8014964:	ebb8 0a07 	subs.w	sl, r8, r7
 8014968:	d00b      	beq.n	8014982 <_vfiprintf_r+0x6a>
 801496a:	4653      	mov	r3, sl
 801496c:	463a      	mov	r2, r7
 801496e:	4621      	mov	r1, r4
 8014970:	4630      	mov	r0, r6
 8014972:	f7ff ffbf 	bl	80148f4 <__sfputs_r>
 8014976:	3001      	adds	r0, #1
 8014978:	f000 80c4 	beq.w	8014b04 <_vfiprintf_r+0x1ec>
 801497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497e:	4453      	add	r3, sl
 8014980:	9309      	str	r3, [sp, #36]	; 0x24
 8014982:	f898 3000 	ldrb.w	r3, [r8]
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 80bc 	beq.w	8014b04 <_vfiprintf_r+0x1ec>
 801498c:	2300      	movs	r3, #0
 801498e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014992:	9304      	str	r3, [sp, #16]
 8014994:	9307      	str	r3, [sp, #28]
 8014996:	9205      	str	r2, [sp, #20]
 8014998:	9306      	str	r3, [sp, #24]
 801499a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801499e:	931a      	str	r3, [sp, #104]	; 0x68
 80149a0:	2205      	movs	r2, #5
 80149a2:	7829      	ldrb	r1, [r5, #0]
 80149a4:	4860      	ldr	r0, [pc, #384]	; (8014b28 <_vfiprintf_r+0x210>)
 80149a6:	f7eb fc23 	bl	80001f0 <memchr>
 80149aa:	f105 0801 	add.w	r8, r5, #1
 80149ae:	9b04      	ldr	r3, [sp, #16]
 80149b0:	2800      	cmp	r0, #0
 80149b2:	d131      	bne.n	8014a18 <_vfiprintf_r+0x100>
 80149b4:	06d9      	lsls	r1, r3, #27
 80149b6:	bf44      	itt	mi
 80149b8:	2220      	movmi	r2, #32
 80149ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149be:	071a      	lsls	r2, r3, #28
 80149c0:	bf44      	itt	mi
 80149c2:	222b      	movmi	r2, #43	; 0x2b
 80149c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149c8:	782a      	ldrb	r2, [r5, #0]
 80149ca:	2a2a      	cmp	r2, #42	; 0x2a
 80149cc:	d02c      	beq.n	8014a28 <_vfiprintf_r+0x110>
 80149ce:	9a07      	ldr	r2, [sp, #28]
 80149d0:	2100      	movs	r1, #0
 80149d2:	200a      	movs	r0, #10
 80149d4:	46a8      	mov	r8, r5
 80149d6:	3501      	adds	r5, #1
 80149d8:	f898 3000 	ldrb.w	r3, [r8]
 80149dc:	3b30      	subs	r3, #48	; 0x30
 80149de:	2b09      	cmp	r3, #9
 80149e0:	d96d      	bls.n	8014abe <_vfiprintf_r+0x1a6>
 80149e2:	b371      	cbz	r1, 8014a42 <_vfiprintf_r+0x12a>
 80149e4:	e026      	b.n	8014a34 <_vfiprintf_r+0x11c>
 80149e6:	4b51      	ldr	r3, [pc, #324]	; (8014b2c <_vfiprintf_r+0x214>)
 80149e8:	429c      	cmp	r4, r3
 80149ea:	d101      	bne.n	80149f0 <_vfiprintf_r+0xd8>
 80149ec:	68b4      	ldr	r4, [r6, #8]
 80149ee:	e7a3      	b.n	8014938 <_vfiprintf_r+0x20>
 80149f0:	4b4f      	ldr	r3, [pc, #316]	; (8014b30 <_vfiprintf_r+0x218>)
 80149f2:	429c      	cmp	r4, r3
 80149f4:	bf08      	it	eq
 80149f6:	68f4      	ldreq	r4, [r6, #12]
 80149f8:	e79e      	b.n	8014938 <_vfiprintf_r+0x20>
 80149fa:	4621      	mov	r1, r4
 80149fc:	4630      	mov	r0, r6
 80149fe:	f000 faef 	bl	8014fe0 <__swsetup_r>
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d09e      	beq.n	8014944 <_vfiprintf_r+0x2c>
 8014a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a0a:	b01d      	add	sp, #116	; 0x74
 8014a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a10:	2b25      	cmp	r3, #37	; 0x25
 8014a12:	d0a7      	beq.n	8014964 <_vfiprintf_r+0x4c>
 8014a14:	46a8      	mov	r8, r5
 8014a16:	e7a0      	b.n	801495a <_vfiprintf_r+0x42>
 8014a18:	4a43      	ldr	r2, [pc, #268]	; (8014b28 <_vfiprintf_r+0x210>)
 8014a1a:	1a80      	subs	r0, r0, r2
 8014a1c:	fa0b f000 	lsl.w	r0, fp, r0
 8014a20:	4318      	orrs	r0, r3
 8014a22:	9004      	str	r0, [sp, #16]
 8014a24:	4645      	mov	r5, r8
 8014a26:	e7bb      	b.n	80149a0 <_vfiprintf_r+0x88>
 8014a28:	9a03      	ldr	r2, [sp, #12]
 8014a2a:	1d11      	adds	r1, r2, #4
 8014a2c:	6812      	ldr	r2, [r2, #0]
 8014a2e:	9103      	str	r1, [sp, #12]
 8014a30:	2a00      	cmp	r2, #0
 8014a32:	db01      	blt.n	8014a38 <_vfiprintf_r+0x120>
 8014a34:	9207      	str	r2, [sp, #28]
 8014a36:	e004      	b.n	8014a42 <_vfiprintf_r+0x12a>
 8014a38:	4252      	negs	r2, r2
 8014a3a:	f043 0302 	orr.w	r3, r3, #2
 8014a3e:	9207      	str	r2, [sp, #28]
 8014a40:	9304      	str	r3, [sp, #16]
 8014a42:	f898 3000 	ldrb.w	r3, [r8]
 8014a46:	2b2e      	cmp	r3, #46	; 0x2e
 8014a48:	d110      	bne.n	8014a6c <_vfiprintf_r+0x154>
 8014a4a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8014a50:	f108 0101 	add.w	r1, r8, #1
 8014a54:	d137      	bne.n	8014ac6 <_vfiprintf_r+0x1ae>
 8014a56:	9b03      	ldr	r3, [sp, #12]
 8014a58:	1d1a      	adds	r2, r3, #4
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	9203      	str	r2, [sp, #12]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	bfb8      	it	lt
 8014a62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014a66:	f108 0802 	add.w	r8, r8, #2
 8014a6a:	9305      	str	r3, [sp, #20]
 8014a6c:	4d31      	ldr	r5, [pc, #196]	; (8014b34 <_vfiprintf_r+0x21c>)
 8014a6e:	f898 1000 	ldrb.w	r1, [r8]
 8014a72:	2203      	movs	r2, #3
 8014a74:	4628      	mov	r0, r5
 8014a76:	f7eb fbbb 	bl	80001f0 <memchr>
 8014a7a:	b140      	cbz	r0, 8014a8e <_vfiprintf_r+0x176>
 8014a7c:	2340      	movs	r3, #64	; 0x40
 8014a7e:	1b40      	subs	r0, r0, r5
 8014a80:	fa03 f000 	lsl.w	r0, r3, r0
 8014a84:	9b04      	ldr	r3, [sp, #16]
 8014a86:	4303      	orrs	r3, r0
 8014a88:	9304      	str	r3, [sp, #16]
 8014a8a:	f108 0801 	add.w	r8, r8, #1
 8014a8e:	f898 1000 	ldrb.w	r1, [r8]
 8014a92:	4829      	ldr	r0, [pc, #164]	; (8014b38 <_vfiprintf_r+0x220>)
 8014a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a98:	2206      	movs	r2, #6
 8014a9a:	f108 0701 	add.w	r7, r8, #1
 8014a9e:	f7eb fba7 	bl	80001f0 <memchr>
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d034      	beq.n	8014b10 <_vfiprintf_r+0x1f8>
 8014aa6:	4b25      	ldr	r3, [pc, #148]	; (8014b3c <_vfiprintf_r+0x224>)
 8014aa8:	bb03      	cbnz	r3, 8014aec <_vfiprintf_r+0x1d4>
 8014aaa:	9b03      	ldr	r3, [sp, #12]
 8014aac:	3307      	adds	r3, #7
 8014aae:	f023 0307 	bic.w	r3, r3, #7
 8014ab2:	3308      	adds	r3, #8
 8014ab4:	9303      	str	r3, [sp, #12]
 8014ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab8:	444b      	add	r3, r9
 8014aba:	9309      	str	r3, [sp, #36]	; 0x24
 8014abc:	e74c      	b.n	8014958 <_vfiprintf_r+0x40>
 8014abe:	fb00 3202 	mla	r2, r0, r2, r3
 8014ac2:	2101      	movs	r1, #1
 8014ac4:	e786      	b.n	80149d4 <_vfiprintf_r+0xbc>
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	9305      	str	r3, [sp, #20]
 8014aca:	4618      	mov	r0, r3
 8014acc:	250a      	movs	r5, #10
 8014ace:	4688      	mov	r8, r1
 8014ad0:	3101      	adds	r1, #1
 8014ad2:	f898 2000 	ldrb.w	r2, [r8]
 8014ad6:	3a30      	subs	r2, #48	; 0x30
 8014ad8:	2a09      	cmp	r2, #9
 8014ada:	d903      	bls.n	8014ae4 <_vfiprintf_r+0x1cc>
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d0c5      	beq.n	8014a6c <_vfiprintf_r+0x154>
 8014ae0:	9005      	str	r0, [sp, #20]
 8014ae2:	e7c3      	b.n	8014a6c <_vfiprintf_r+0x154>
 8014ae4:	fb05 2000 	mla	r0, r5, r0, r2
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e7f0      	b.n	8014ace <_vfiprintf_r+0x1b6>
 8014aec:	ab03      	add	r3, sp, #12
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	4622      	mov	r2, r4
 8014af2:	4b13      	ldr	r3, [pc, #76]	; (8014b40 <_vfiprintf_r+0x228>)
 8014af4:	a904      	add	r1, sp, #16
 8014af6:	4630      	mov	r0, r6
 8014af8:	f3af 8000 	nop.w
 8014afc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014b00:	4681      	mov	r9, r0
 8014b02:	d1d8      	bne.n	8014ab6 <_vfiprintf_r+0x19e>
 8014b04:	89a3      	ldrh	r3, [r4, #12]
 8014b06:	065b      	lsls	r3, r3, #25
 8014b08:	f53f af7d 	bmi.w	8014a06 <_vfiprintf_r+0xee>
 8014b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b0e:	e77c      	b.n	8014a0a <_vfiprintf_r+0xf2>
 8014b10:	ab03      	add	r3, sp, #12
 8014b12:	9300      	str	r3, [sp, #0]
 8014b14:	4622      	mov	r2, r4
 8014b16:	4b0a      	ldr	r3, [pc, #40]	; (8014b40 <_vfiprintf_r+0x228>)
 8014b18:	a904      	add	r1, sp, #16
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f000 f888 	bl	8014c30 <_printf_i>
 8014b20:	e7ec      	b.n	8014afc <_vfiprintf_r+0x1e4>
 8014b22:	bf00      	nop
 8014b24:	080180a0 	.word	0x080180a0
 8014b28:	080180e4 	.word	0x080180e4
 8014b2c:	080180c0 	.word	0x080180c0
 8014b30:	08018080 	.word	0x08018080
 8014b34:	080180ea 	.word	0x080180ea
 8014b38:	080180ee 	.word	0x080180ee
 8014b3c:	00000000 	.word	0x00000000
 8014b40:	080148f5 	.word	0x080148f5

08014b44 <_printf_common>:
 8014b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b48:	4691      	mov	r9, r2
 8014b4a:	461f      	mov	r7, r3
 8014b4c:	688a      	ldr	r2, [r1, #8]
 8014b4e:	690b      	ldr	r3, [r1, #16]
 8014b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014b54:	4293      	cmp	r3, r2
 8014b56:	bfb8      	it	lt
 8014b58:	4613      	movlt	r3, r2
 8014b5a:	f8c9 3000 	str.w	r3, [r9]
 8014b5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014b62:	4606      	mov	r6, r0
 8014b64:	460c      	mov	r4, r1
 8014b66:	b112      	cbz	r2, 8014b6e <_printf_common+0x2a>
 8014b68:	3301      	adds	r3, #1
 8014b6a:	f8c9 3000 	str.w	r3, [r9]
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	0699      	lsls	r1, r3, #26
 8014b72:	bf42      	ittt	mi
 8014b74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014b78:	3302      	addmi	r3, #2
 8014b7a:	f8c9 3000 	strmi.w	r3, [r9]
 8014b7e:	6825      	ldr	r5, [r4, #0]
 8014b80:	f015 0506 	ands.w	r5, r5, #6
 8014b84:	d107      	bne.n	8014b96 <_printf_common+0x52>
 8014b86:	f104 0a19 	add.w	sl, r4, #25
 8014b8a:	68e3      	ldr	r3, [r4, #12]
 8014b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8014b90:	1a9b      	subs	r3, r3, r2
 8014b92:	429d      	cmp	r5, r3
 8014b94:	db29      	blt.n	8014bea <_printf_common+0xa6>
 8014b96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014b9a:	6822      	ldr	r2, [r4, #0]
 8014b9c:	3300      	adds	r3, #0
 8014b9e:	bf18      	it	ne
 8014ba0:	2301      	movne	r3, #1
 8014ba2:	0692      	lsls	r2, r2, #26
 8014ba4:	d42e      	bmi.n	8014c04 <_printf_common+0xc0>
 8014ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014baa:	4639      	mov	r1, r7
 8014bac:	4630      	mov	r0, r6
 8014bae:	47c0      	blx	r8
 8014bb0:	3001      	adds	r0, #1
 8014bb2:	d021      	beq.n	8014bf8 <_printf_common+0xb4>
 8014bb4:	6823      	ldr	r3, [r4, #0]
 8014bb6:	68e5      	ldr	r5, [r4, #12]
 8014bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8014bbc:	f003 0306 	and.w	r3, r3, #6
 8014bc0:	2b04      	cmp	r3, #4
 8014bc2:	bf08      	it	eq
 8014bc4:	1aad      	subeq	r5, r5, r2
 8014bc6:	68a3      	ldr	r3, [r4, #8]
 8014bc8:	6922      	ldr	r2, [r4, #16]
 8014bca:	bf0c      	ite	eq
 8014bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014bd0:	2500      	movne	r5, #0
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	bfc4      	itt	gt
 8014bd6:	1a9b      	subgt	r3, r3, r2
 8014bd8:	18ed      	addgt	r5, r5, r3
 8014bda:	f04f 0900 	mov.w	r9, #0
 8014bde:	341a      	adds	r4, #26
 8014be0:	454d      	cmp	r5, r9
 8014be2:	d11b      	bne.n	8014c1c <_printf_common+0xd8>
 8014be4:	2000      	movs	r0, #0
 8014be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bea:	2301      	movs	r3, #1
 8014bec:	4652      	mov	r2, sl
 8014bee:	4639      	mov	r1, r7
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	47c0      	blx	r8
 8014bf4:	3001      	adds	r0, #1
 8014bf6:	d103      	bne.n	8014c00 <_printf_common+0xbc>
 8014bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c00:	3501      	adds	r5, #1
 8014c02:	e7c2      	b.n	8014b8a <_printf_common+0x46>
 8014c04:	18e1      	adds	r1, r4, r3
 8014c06:	1c5a      	adds	r2, r3, #1
 8014c08:	2030      	movs	r0, #48	; 0x30
 8014c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c0e:	4422      	add	r2, r4
 8014c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c18:	3302      	adds	r3, #2
 8014c1a:	e7c4      	b.n	8014ba6 <_printf_common+0x62>
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	4622      	mov	r2, r4
 8014c20:	4639      	mov	r1, r7
 8014c22:	4630      	mov	r0, r6
 8014c24:	47c0      	blx	r8
 8014c26:	3001      	adds	r0, #1
 8014c28:	d0e6      	beq.n	8014bf8 <_printf_common+0xb4>
 8014c2a:	f109 0901 	add.w	r9, r9, #1
 8014c2e:	e7d7      	b.n	8014be0 <_printf_common+0x9c>

08014c30 <_printf_i>:
 8014c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c34:	4617      	mov	r7, r2
 8014c36:	7e0a      	ldrb	r2, [r1, #24]
 8014c38:	b085      	sub	sp, #20
 8014c3a:	2a6e      	cmp	r2, #110	; 0x6e
 8014c3c:	4698      	mov	r8, r3
 8014c3e:	4606      	mov	r6, r0
 8014c40:	460c      	mov	r4, r1
 8014c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c44:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014c48:	f000 80bc 	beq.w	8014dc4 <_printf_i+0x194>
 8014c4c:	d81a      	bhi.n	8014c84 <_printf_i+0x54>
 8014c4e:	2a63      	cmp	r2, #99	; 0x63
 8014c50:	d02e      	beq.n	8014cb0 <_printf_i+0x80>
 8014c52:	d80a      	bhi.n	8014c6a <_printf_i+0x3a>
 8014c54:	2a00      	cmp	r2, #0
 8014c56:	f000 80c8 	beq.w	8014dea <_printf_i+0x1ba>
 8014c5a:	2a58      	cmp	r2, #88	; 0x58
 8014c5c:	f000 808a 	beq.w	8014d74 <_printf_i+0x144>
 8014c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014c68:	e02a      	b.n	8014cc0 <_printf_i+0x90>
 8014c6a:	2a64      	cmp	r2, #100	; 0x64
 8014c6c:	d001      	beq.n	8014c72 <_printf_i+0x42>
 8014c6e:	2a69      	cmp	r2, #105	; 0x69
 8014c70:	d1f6      	bne.n	8014c60 <_printf_i+0x30>
 8014c72:	6821      	ldr	r1, [r4, #0]
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014c7a:	d023      	beq.n	8014cc4 <_printf_i+0x94>
 8014c7c:	1d11      	adds	r1, r2, #4
 8014c7e:	6019      	str	r1, [r3, #0]
 8014c80:	6813      	ldr	r3, [r2, #0]
 8014c82:	e027      	b.n	8014cd4 <_printf_i+0xa4>
 8014c84:	2a73      	cmp	r2, #115	; 0x73
 8014c86:	f000 80b4 	beq.w	8014df2 <_printf_i+0x1c2>
 8014c8a:	d808      	bhi.n	8014c9e <_printf_i+0x6e>
 8014c8c:	2a6f      	cmp	r2, #111	; 0x6f
 8014c8e:	d02a      	beq.n	8014ce6 <_printf_i+0xb6>
 8014c90:	2a70      	cmp	r2, #112	; 0x70
 8014c92:	d1e5      	bne.n	8014c60 <_printf_i+0x30>
 8014c94:	680a      	ldr	r2, [r1, #0]
 8014c96:	f042 0220 	orr.w	r2, r2, #32
 8014c9a:	600a      	str	r2, [r1, #0]
 8014c9c:	e003      	b.n	8014ca6 <_printf_i+0x76>
 8014c9e:	2a75      	cmp	r2, #117	; 0x75
 8014ca0:	d021      	beq.n	8014ce6 <_printf_i+0xb6>
 8014ca2:	2a78      	cmp	r2, #120	; 0x78
 8014ca4:	d1dc      	bne.n	8014c60 <_printf_i+0x30>
 8014ca6:	2278      	movs	r2, #120	; 0x78
 8014ca8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014cac:	496e      	ldr	r1, [pc, #440]	; (8014e68 <_printf_i+0x238>)
 8014cae:	e064      	b.n	8014d7a <_printf_i+0x14a>
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014cb6:	1d11      	adds	r1, r2, #4
 8014cb8:	6019      	str	r1, [r3, #0]
 8014cba:	6813      	ldr	r3, [r2, #0]
 8014cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	e0a3      	b.n	8014e0c <_printf_i+0x1dc>
 8014cc4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014cc8:	f102 0104 	add.w	r1, r2, #4
 8014ccc:	6019      	str	r1, [r3, #0]
 8014cce:	d0d7      	beq.n	8014c80 <_printf_i+0x50>
 8014cd0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	da03      	bge.n	8014ce0 <_printf_i+0xb0>
 8014cd8:	222d      	movs	r2, #45	; 0x2d
 8014cda:	425b      	negs	r3, r3
 8014cdc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014ce0:	4962      	ldr	r1, [pc, #392]	; (8014e6c <_printf_i+0x23c>)
 8014ce2:	220a      	movs	r2, #10
 8014ce4:	e017      	b.n	8014d16 <_printf_i+0xe6>
 8014ce6:	6820      	ldr	r0, [r4, #0]
 8014ce8:	6819      	ldr	r1, [r3, #0]
 8014cea:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014cee:	d003      	beq.n	8014cf8 <_printf_i+0xc8>
 8014cf0:	1d08      	adds	r0, r1, #4
 8014cf2:	6018      	str	r0, [r3, #0]
 8014cf4:	680b      	ldr	r3, [r1, #0]
 8014cf6:	e006      	b.n	8014d06 <_printf_i+0xd6>
 8014cf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014cfc:	f101 0004 	add.w	r0, r1, #4
 8014d00:	6018      	str	r0, [r3, #0]
 8014d02:	d0f7      	beq.n	8014cf4 <_printf_i+0xc4>
 8014d04:	880b      	ldrh	r3, [r1, #0]
 8014d06:	4959      	ldr	r1, [pc, #356]	; (8014e6c <_printf_i+0x23c>)
 8014d08:	2a6f      	cmp	r2, #111	; 0x6f
 8014d0a:	bf14      	ite	ne
 8014d0c:	220a      	movne	r2, #10
 8014d0e:	2208      	moveq	r2, #8
 8014d10:	2000      	movs	r0, #0
 8014d12:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014d16:	6865      	ldr	r5, [r4, #4]
 8014d18:	60a5      	str	r5, [r4, #8]
 8014d1a:	2d00      	cmp	r5, #0
 8014d1c:	f2c0 809c 	blt.w	8014e58 <_printf_i+0x228>
 8014d20:	6820      	ldr	r0, [r4, #0]
 8014d22:	f020 0004 	bic.w	r0, r0, #4
 8014d26:	6020      	str	r0, [r4, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d13f      	bne.n	8014dac <_printf_i+0x17c>
 8014d2c:	2d00      	cmp	r5, #0
 8014d2e:	f040 8095 	bne.w	8014e5c <_printf_i+0x22c>
 8014d32:	4675      	mov	r5, lr
 8014d34:	2a08      	cmp	r2, #8
 8014d36:	d10b      	bne.n	8014d50 <_printf_i+0x120>
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	07da      	lsls	r2, r3, #31
 8014d3c:	d508      	bpl.n	8014d50 <_printf_i+0x120>
 8014d3e:	6923      	ldr	r3, [r4, #16]
 8014d40:	6862      	ldr	r2, [r4, #4]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	bfde      	ittt	le
 8014d46:	2330      	movle	r3, #48	; 0x30
 8014d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014d50:	ebae 0305 	sub.w	r3, lr, r5
 8014d54:	6123      	str	r3, [r4, #16]
 8014d56:	f8cd 8000 	str.w	r8, [sp]
 8014d5a:	463b      	mov	r3, r7
 8014d5c:	aa03      	add	r2, sp, #12
 8014d5e:	4621      	mov	r1, r4
 8014d60:	4630      	mov	r0, r6
 8014d62:	f7ff feef 	bl	8014b44 <_printf_common>
 8014d66:	3001      	adds	r0, #1
 8014d68:	d155      	bne.n	8014e16 <_printf_i+0x1e6>
 8014d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d6e:	b005      	add	sp, #20
 8014d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d74:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014d78:	493c      	ldr	r1, [pc, #240]	; (8014e6c <_printf_i+0x23c>)
 8014d7a:	6822      	ldr	r2, [r4, #0]
 8014d7c:	6818      	ldr	r0, [r3, #0]
 8014d7e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014d82:	f100 0504 	add.w	r5, r0, #4
 8014d86:	601d      	str	r5, [r3, #0]
 8014d88:	d001      	beq.n	8014d8e <_printf_i+0x15e>
 8014d8a:	6803      	ldr	r3, [r0, #0]
 8014d8c:	e002      	b.n	8014d94 <_printf_i+0x164>
 8014d8e:	0655      	lsls	r5, r2, #25
 8014d90:	d5fb      	bpl.n	8014d8a <_printf_i+0x15a>
 8014d92:	8803      	ldrh	r3, [r0, #0]
 8014d94:	07d0      	lsls	r0, r2, #31
 8014d96:	bf44      	itt	mi
 8014d98:	f042 0220 	orrmi.w	r2, r2, #32
 8014d9c:	6022      	strmi	r2, [r4, #0]
 8014d9e:	b91b      	cbnz	r3, 8014da8 <_printf_i+0x178>
 8014da0:	6822      	ldr	r2, [r4, #0]
 8014da2:	f022 0220 	bic.w	r2, r2, #32
 8014da6:	6022      	str	r2, [r4, #0]
 8014da8:	2210      	movs	r2, #16
 8014daa:	e7b1      	b.n	8014d10 <_printf_i+0xe0>
 8014dac:	4675      	mov	r5, lr
 8014dae:	fbb3 f0f2 	udiv	r0, r3, r2
 8014db2:	fb02 3310 	mls	r3, r2, r0, r3
 8014db6:	5ccb      	ldrb	r3, [r1, r3]
 8014db8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d1f5      	bne.n	8014dae <_printf_i+0x17e>
 8014dc2:	e7b7      	b.n	8014d34 <_printf_i+0x104>
 8014dc4:	6808      	ldr	r0, [r1, #0]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	6949      	ldr	r1, [r1, #20]
 8014dca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014dce:	d004      	beq.n	8014dda <_printf_i+0x1aa>
 8014dd0:	1d10      	adds	r0, r2, #4
 8014dd2:	6018      	str	r0, [r3, #0]
 8014dd4:	6813      	ldr	r3, [r2, #0]
 8014dd6:	6019      	str	r1, [r3, #0]
 8014dd8:	e007      	b.n	8014dea <_printf_i+0x1ba>
 8014dda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014dde:	f102 0004 	add.w	r0, r2, #4
 8014de2:	6018      	str	r0, [r3, #0]
 8014de4:	6813      	ldr	r3, [r2, #0]
 8014de6:	d0f6      	beq.n	8014dd6 <_printf_i+0x1a6>
 8014de8:	8019      	strh	r1, [r3, #0]
 8014dea:	2300      	movs	r3, #0
 8014dec:	6123      	str	r3, [r4, #16]
 8014dee:	4675      	mov	r5, lr
 8014df0:	e7b1      	b.n	8014d56 <_printf_i+0x126>
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	1d11      	adds	r1, r2, #4
 8014df6:	6019      	str	r1, [r3, #0]
 8014df8:	6815      	ldr	r5, [r2, #0]
 8014dfa:	6862      	ldr	r2, [r4, #4]
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f7eb f9f6 	bl	80001f0 <memchr>
 8014e04:	b108      	cbz	r0, 8014e0a <_printf_i+0x1da>
 8014e06:	1b40      	subs	r0, r0, r5
 8014e08:	6060      	str	r0, [r4, #4]
 8014e0a:	6863      	ldr	r3, [r4, #4]
 8014e0c:	6123      	str	r3, [r4, #16]
 8014e0e:	2300      	movs	r3, #0
 8014e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e14:	e79f      	b.n	8014d56 <_printf_i+0x126>
 8014e16:	6923      	ldr	r3, [r4, #16]
 8014e18:	462a      	mov	r2, r5
 8014e1a:	4639      	mov	r1, r7
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	47c0      	blx	r8
 8014e20:	3001      	adds	r0, #1
 8014e22:	d0a2      	beq.n	8014d6a <_printf_i+0x13a>
 8014e24:	6823      	ldr	r3, [r4, #0]
 8014e26:	079b      	lsls	r3, r3, #30
 8014e28:	d507      	bpl.n	8014e3a <_printf_i+0x20a>
 8014e2a:	2500      	movs	r5, #0
 8014e2c:	f104 0919 	add.w	r9, r4, #25
 8014e30:	68e3      	ldr	r3, [r4, #12]
 8014e32:	9a03      	ldr	r2, [sp, #12]
 8014e34:	1a9b      	subs	r3, r3, r2
 8014e36:	429d      	cmp	r5, r3
 8014e38:	db05      	blt.n	8014e46 <_printf_i+0x216>
 8014e3a:	68e0      	ldr	r0, [r4, #12]
 8014e3c:	9b03      	ldr	r3, [sp, #12]
 8014e3e:	4298      	cmp	r0, r3
 8014e40:	bfb8      	it	lt
 8014e42:	4618      	movlt	r0, r3
 8014e44:	e793      	b.n	8014d6e <_printf_i+0x13e>
 8014e46:	2301      	movs	r3, #1
 8014e48:	464a      	mov	r2, r9
 8014e4a:	4639      	mov	r1, r7
 8014e4c:	4630      	mov	r0, r6
 8014e4e:	47c0      	blx	r8
 8014e50:	3001      	adds	r0, #1
 8014e52:	d08a      	beq.n	8014d6a <_printf_i+0x13a>
 8014e54:	3501      	adds	r5, #1
 8014e56:	e7eb      	b.n	8014e30 <_printf_i+0x200>
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d1a7      	bne.n	8014dac <_printf_i+0x17c>
 8014e5c:	780b      	ldrb	r3, [r1, #0]
 8014e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e66:	e765      	b.n	8014d34 <_printf_i+0x104>
 8014e68:	08018106 	.word	0x08018106
 8014e6c:	080180f5 	.word	0x080180f5

08014e70 <_sbrk_r>:
 8014e70:	b538      	push	{r3, r4, r5, lr}
 8014e72:	4c06      	ldr	r4, [pc, #24]	; (8014e8c <_sbrk_r+0x1c>)
 8014e74:	2300      	movs	r3, #0
 8014e76:	4605      	mov	r5, r0
 8014e78:	4608      	mov	r0, r1
 8014e7a:	6023      	str	r3, [r4, #0]
 8014e7c:	f7ff fada 	bl	8014434 <_sbrk>
 8014e80:	1c43      	adds	r3, r0, #1
 8014e82:	d102      	bne.n	8014e8a <_sbrk_r+0x1a>
 8014e84:	6823      	ldr	r3, [r4, #0]
 8014e86:	b103      	cbz	r3, 8014e8a <_sbrk_r+0x1a>
 8014e88:	602b      	str	r3, [r5, #0]
 8014e8a:	bd38      	pop	{r3, r4, r5, pc}
 8014e8c:	20007754 	.word	0x20007754

08014e90 <__sread>:
 8014e90:	b510      	push	{r4, lr}
 8014e92:	460c      	mov	r4, r1
 8014e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e98:	f000 fa98 	bl	80153cc <_read_r>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	bfab      	itete	ge
 8014ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8014ea4:	181b      	addge	r3, r3, r0
 8014ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014eaa:	bfac      	ite	ge
 8014eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8014eae:	81a3      	strhlt	r3, [r4, #12]
 8014eb0:	bd10      	pop	{r4, pc}

08014eb2 <__swrite>:
 8014eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb6:	461f      	mov	r7, r3
 8014eb8:	898b      	ldrh	r3, [r1, #12]
 8014eba:	05db      	lsls	r3, r3, #23
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	460c      	mov	r4, r1
 8014ec0:	4616      	mov	r6, r2
 8014ec2:	d505      	bpl.n	8014ed0 <__swrite+0x1e>
 8014ec4:	2302      	movs	r3, #2
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ecc:	f000 f9b8 	bl	8015240 <_lseek_r>
 8014ed0:	89a3      	ldrh	r3, [r4, #12]
 8014ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014eda:	81a3      	strh	r3, [r4, #12]
 8014edc:	4632      	mov	r2, r6
 8014ede:	463b      	mov	r3, r7
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee6:	f000 b869 	b.w	8014fbc <_write_r>

08014eea <__sseek>:
 8014eea:	b510      	push	{r4, lr}
 8014eec:	460c      	mov	r4, r1
 8014eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ef2:	f000 f9a5 	bl	8015240 <_lseek_r>
 8014ef6:	1c43      	adds	r3, r0, #1
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	bf15      	itete	ne
 8014efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8014efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f06:	81a3      	strheq	r3, [r4, #12]
 8014f08:	bf18      	it	ne
 8014f0a:	81a3      	strhne	r3, [r4, #12]
 8014f0c:	bd10      	pop	{r4, pc}

08014f0e <__sclose>:
 8014f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f12:	f000 b8d3 	b.w	80150bc <_close_r>
	...

08014f18 <__swbuf_r>:
 8014f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1a:	460e      	mov	r6, r1
 8014f1c:	4614      	mov	r4, r2
 8014f1e:	4605      	mov	r5, r0
 8014f20:	b118      	cbz	r0, 8014f2a <__swbuf_r+0x12>
 8014f22:	6983      	ldr	r3, [r0, #24]
 8014f24:	b90b      	cbnz	r3, 8014f2a <__swbuf_r+0x12>
 8014f26:	f7ff fbe5 	bl	80146f4 <__sinit>
 8014f2a:	4b21      	ldr	r3, [pc, #132]	; (8014fb0 <__swbuf_r+0x98>)
 8014f2c:	429c      	cmp	r4, r3
 8014f2e:	d12a      	bne.n	8014f86 <__swbuf_r+0x6e>
 8014f30:	686c      	ldr	r4, [r5, #4]
 8014f32:	69a3      	ldr	r3, [r4, #24]
 8014f34:	60a3      	str	r3, [r4, #8]
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	071a      	lsls	r2, r3, #28
 8014f3a:	d52e      	bpl.n	8014f9a <__swbuf_r+0x82>
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	b363      	cbz	r3, 8014f9a <__swbuf_r+0x82>
 8014f40:	6923      	ldr	r3, [r4, #16]
 8014f42:	6820      	ldr	r0, [r4, #0]
 8014f44:	1ac0      	subs	r0, r0, r3
 8014f46:	6963      	ldr	r3, [r4, #20]
 8014f48:	b2f6      	uxtb	r6, r6
 8014f4a:	4298      	cmp	r0, r3
 8014f4c:	4637      	mov	r7, r6
 8014f4e:	db04      	blt.n	8014f5a <__swbuf_r+0x42>
 8014f50:	4621      	mov	r1, r4
 8014f52:	4628      	mov	r0, r5
 8014f54:	f000 f94a 	bl	80151ec <_fflush_r>
 8014f58:	bb28      	cbnz	r0, 8014fa6 <__swbuf_r+0x8e>
 8014f5a:	68a3      	ldr	r3, [r4, #8]
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	60a3      	str	r3, [r4, #8]
 8014f60:	6823      	ldr	r3, [r4, #0]
 8014f62:	1c5a      	adds	r2, r3, #1
 8014f64:	6022      	str	r2, [r4, #0]
 8014f66:	701e      	strb	r6, [r3, #0]
 8014f68:	6963      	ldr	r3, [r4, #20]
 8014f6a:	3001      	adds	r0, #1
 8014f6c:	4298      	cmp	r0, r3
 8014f6e:	d004      	beq.n	8014f7a <__swbuf_r+0x62>
 8014f70:	89a3      	ldrh	r3, [r4, #12]
 8014f72:	07db      	lsls	r3, r3, #31
 8014f74:	d519      	bpl.n	8014faa <__swbuf_r+0x92>
 8014f76:	2e0a      	cmp	r6, #10
 8014f78:	d117      	bne.n	8014faa <__swbuf_r+0x92>
 8014f7a:	4621      	mov	r1, r4
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	f000 f935 	bl	80151ec <_fflush_r>
 8014f82:	b190      	cbz	r0, 8014faa <__swbuf_r+0x92>
 8014f84:	e00f      	b.n	8014fa6 <__swbuf_r+0x8e>
 8014f86:	4b0b      	ldr	r3, [pc, #44]	; (8014fb4 <__swbuf_r+0x9c>)
 8014f88:	429c      	cmp	r4, r3
 8014f8a:	d101      	bne.n	8014f90 <__swbuf_r+0x78>
 8014f8c:	68ac      	ldr	r4, [r5, #8]
 8014f8e:	e7d0      	b.n	8014f32 <__swbuf_r+0x1a>
 8014f90:	4b09      	ldr	r3, [pc, #36]	; (8014fb8 <__swbuf_r+0xa0>)
 8014f92:	429c      	cmp	r4, r3
 8014f94:	bf08      	it	eq
 8014f96:	68ec      	ldreq	r4, [r5, #12]
 8014f98:	e7cb      	b.n	8014f32 <__swbuf_r+0x1a>
 8014f9a:	4621      	mov	r1, r4
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f000 f81f 	bl	8014fe0 <__swsetup_r>
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	d0cc      	beq.n	8014f40 <__swbuf_r+0x28>
 8014fa6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014faa:	4638      	mov	r0, r7
 8014fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	080180a0 	.word	0x080180a0
 8014fb4:	080180c0 	.word	0x080180c0
 8014fb8:	08018080 	.word	0x08018080

08014fbc <_write_r>:
 8014fbc:	b538      	push	{r3, r4, r5, lr}
 8014fbe:	4c07      	ldr	r4, [pc, #28]	; (8014fdc <_write_r+0x20>)
 8014fc0:	4605      	mov	r5, r0
 8014fc2:	4608      	mov	r0, r1
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	6022      	str	r2, [r4, #0]
 8014fca:	461a      	mov	r2, r3
 8014fcc:	f7ff fa15 	bl	80143fa <_write>
 8014fd0:	1c43      	adds	r3, r0, #1
 8014fd2:	d102      	bne.n	8014fda <_write_r+0x1e>
 8014fd4:	6823      	ldr	r3, [r4, #0]
 8014fd6:	b103      	cbz	r3, 8014fda <_write_r+0x1e>
 8014fd8:	602b      	str	r3, [r5, #0]
 8014fda:	bd38      	pop	{r3, r4, r5, pc}
 8014fdc:	20007754 	.word	0x20007754

08014fe0 <__swsetup_r>:
 8014fe0:	4b32      	ldr	r3, [pc, #200]	; (80150ac <__swsetup_r+0xcc>)
 8014fe2:	b570      	push	{r4, r5, r6, lr}
 8014fe4:	681d      	ldr	r5, [r3, #0]
 8014fe6:	4606      	mov	r6, r0
 8014fe8:	460c      	mov	r4, r1
 8014fea:	b125      	cbz	r5, 8014ff6 <__swsetup_r+0x16>
 8014fec:	69ab      	ldr	r3, [r5, #24]
 8014fee:	b913      	cbnz	r3, 8014ff6 <__swsetup_r+0x16>
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f7ff fb7f 	bl	80146f4 <__sinit>
 8014ff6:	4b2e      	ldr	r3, [pc, #184]	; (80150b0 <__swsetup_r+0xd0>)
 8014ff8:	429c      	cmp	r4, r3
 8014ffa:	d10f      	bne.n	801501c <__swsetup_r+0x3c>
 8014ffc:	686c      	ldr	r4, [r5, #4]
 8014ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015002:	b29a      	uxth	r2, r3
 8015004:	0715      	lsls	r5, r2, #28
 8015006:	d42c      	bmi.n	8015062 <__swsetup_r+0x82>
 8015008:	06d0      	lsls	r0, r2, #27
 801500a:	d411      	bmi.n	8015030 <__swsetup_r+0x50>
 801500c:	2209      	movs	r2, #9
 801500e:	6032      	str	r2, [r6, #0]
 8015010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015014:	81a3      	strh	r3, [r4, #12]
 8015016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801501a:	bd70      	pop	{r4, r5, r6, pc}
 801501c:	4b25      	ldr	r3, [pc, #148]	; (80150b4 <__swsetup_r+0xd4>)
 801501e:	429c      	cmp	r4, r3
 8015020:	d101      	bne.n	8015026 <__swsetup_r+0x46>
 8015022:	68ac      	ldr	r4, [r5, #8]
 8015024:	e7eb      	b.n	8014ffe <__swsetup_r+0x1e>
 8015026:	4b24      	ldr	r3, [pc, #144]	; (80150b8 <__swsetup_r+0xd8>)
 8015028:	429c      	cmp	r4, r3
 801502a:	bf08      	it	eq
 801502c:	68ec      	ldreq	r4, [r5, #12]
 801502e:	e7e6      	b.n	8014ffe <__swsetup_r+0x1e>
 8015030:	0751      	lsls	r1, r2, #29
 8015032:	d512      	bpl.n	801505a <__swsetup_r+0x7a>
 8015034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015036:	b141      	cbz	r1, 801504a <__swsetup_r+0x6a>
 8015038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801503c:	4299      	cmp	r1, r3
 801503e:	d002      	beq.n	8015046 <__swsetup_r+0x66>
 8015040:	4630      	mov	r0, r6
 8015042:	f000 f975 	bl	8015330 <_free_r>
 8015046:	2300      	movs	r3, #0
 8015048:	6363      	str	r3, [r4, #52]	; 0x34
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015050:	81a3      	strh	r3, [r4, #12]
 8015052:	2300      	movs	r3, #0
 8015054:	6063      	str	r3, [r4, #4]
 8015056:	6923      	ldr	r3, [r4, #16]
 8015058:	6023      	str	r3, [r4, #0]
 801505a:	89a3      	ldrh	r3, [r4, #12]
 801505c:	f043 0308 	orr.w	r3, r3, #8
 8015060:	81a3      	strh	r3, [r4, #12]
 8015062:	6923      	ldr	r3, [r4, #16]
 8015064:	b94b      	cbnz	r3, 801507a <__swsetup_r+0x9a>
 8015066:	89a3      	ldrh	r3, [r4, #12]
 8015068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801506c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015070:	d003      	beq.n	801507a <__swsetup_r+0x9a>
 8015072:	4621      	mov	r1, r4
 8015074:	4630      	mov	r0, r6
 8015076:	f000 f919 	bl	80152ac <__smakebuf_r>
 801507a:	89a2      	ldrh	r2, [r4, #12]
 801507c:	f012 0301 	ands.w	r3, r2, #1
 8015080:	d00c      	beq.n	801509c <__swsetup_r+0xbc>
 8015082:	2300      	movs	r3, #0
 8015084:	60a3      	str	r3, [r4, #8]
 8015086:	6963      	ldr	r3, [r4, #20]
 8015088:	425b      	negs	r3, r3
 801508a:	61a3      	str	r3, [r4, #24]
 801508c:	6923      	ldr	r3, [r4, #16]
 801508e:	b953      	cbnz	r3, 80150a6 <__swsetup_r+0xc6>
 8015090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015094:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015098:	d1ba      	bne.n	8015010 <__swsetup_r+0x30>
 801509a:	bd70      	pop	{r4, r5, r6, pc}
 801509c:	0792      	lsls	r2, r2, #30
 801509e:	bf58      	it	pl
 80150a0:	6963      	ldrpl	r3, [r4, #20]
 80150a2:	60a3      	str	r3, [r4, #8]
 80150a4:	e7f2      	b.n	801508c <__swsetup_r+0xac>
 80150a6:	2000      	movs	r0, #0
 80150a8:	e7f7      	b.n	801509a <__swsetup_r+0xba>
 80150aa:	bf00      	nop
 80150ac:	20000018 	.word	0x20000018
 80150b0:	080180a0 	.word	0x080180a0
 80150b4:	080180c0 	.word	0x080180c0
 80150b8:	08018080 	.word	0x08018080

080150bc <_close_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	4c06      	ldr	r4, [pc, #24]	; (80150d8 <_close_r+0x1c>)
 80150c0:	2300      	movs	r3, #0
 80150c2:	4605      	mov	r5, r0
 80150c4:	4608      	mov	r0, r1
 80150c6:	6023      	str	r3, [r4, #0]
 80150c8:	f7ff f9e2 	bl	8014490 <_close>
 80150cc:	1c43      	adds	r3, r0, #1
 80150ce:	d102      	bne.n	80150d6 <_close_r+0x1a>
 80150d0:	6823      	ldr	r3, [r4, #0]
 80150d2:	b103      	cbz	r3, 80150d6 <_close_r+0x1a>
 80150d4:	602b      	str	r3, [r5, #0]
 80150d6:	bd38      	pop	{r3, r4, r5, pc}
 80150d8:	20007754 	.word	0x20007754

080150dc <__sflush_r>:
 80150dc:	898a      	ldrh	r2, [r1, #12]
 80150de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	4605      	mov	r5, r0
 80150e4:	0710      	lsls	r0, r2, #28
 80150e6:	460c      	mov	r4, r1
 80150e8:	d45a      	bmi.n	80151a0 <__sflush_r+0xc4>
 80150ea:	684b      	ldr	r3, [r1, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dc05      	bgt.n	80150fc <__sflush_r+0x20>
 80150f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	dc02      	bgt.n	80150fc <__sflush_r+0x20>
 80150f6:	2000      	movs	r0, #0
 80150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150fe:	2e00      	cmp	r6, #0
 8015100:	d0f9      	beq.n	80150f6 <__sflush_r+0x1a>
 8015102:	2300      	movs	r3, #0
 8015104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015108:	682f      	ldr	r7, [r5, #0]
 801510a:	602b      	str	r3, [r5, #0]
 801510c:	d033      	beq.n	8015176 <__sflush_r+0x9a>
 801510e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015110:	89a3      	ldrh	r3, [r4, #12]
 8015112:	075a      	lsls	r2, r3, #29
 8015114:	d505      	bpl.n	8015122 <__sflush_r+0x46>
 8015116:	6863      	ldr	r3, [r4, #4]
 8015118:	1ac0      	subs	r0, r0, r3
 801511a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801511c:	b10b      	cbz	r3, 8015122 <__sflush_r+0x46>
 801511e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015120:	1ac0      	subs	r0, r0, r3
 8015122:	2300      	movs	r3, #0
 8015124:	4602      	mov	r2, r0
 8015126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015128:	6a21      	ldr	r1, [r4, #32]
 801512a:	4628      	mov	r0, r5
 801512c:	47b0      	blx	r6
 801512e:	1c43      	adds	r3, r0, #1
 8015130:	89a3      	ldrh	r3, [r4, #12]
 8015132:	d106      	bne.n	8015142 <__sflush_r+0x66>
 8015134:	6829      	ldr	r1, [r5, #0]
 8015136:	291d      	cmp	r1, #29
 8015138:	d84b      	bhi.n	80151d2 <__sflush_r+0xf6>
 801513a:	4a2b      	ldr	r2, [pc, #172]	; (80151e8 <__sflush_r+0x10c>)
 801513c:	40ca      	lsrs	r2, r1
 801513e:	07d6      	lsls	r6, r2, #31
 8015140:	d547      	bpl.n	80151d2 <__sflush_r+0xf6>
 8015142:	2200      	movs	r2, #0
 8015144:	6062      	str	r2, [r4, #4]
 8015146:	04d9      	lsls	r1, r3, #19
 8015148:	6922      	ldr	r2, [r4, #16]
 801514a:	6022      	str	r2, [r4, #0]
 801514c:	d504      	bpl.n	8015158 <__sflush_r+0x7c>
 801514e:	1c42      	adds	r2, r0, #1
 8015150:	d101      	bne.n	8015156 <__sflush_r+0x7a>
 8015152:	682b      	ldr	r3, [r5, #0]
 8015154:	b903      	cbnz	r3, 8015158 <__sflush_r+0x7c>
 8015156:	6560      	str	r0, [r4, #84]	; 0x54
 8015158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801515a:	602f      	str	r7, [r5, #0]
 801515c:	2900      	cmp	r1, #0
 801515e:	d0ca      	beq.n	80150f6 <__sflush_r+0x1a>
 8015160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015164:	4299      	cmp	r1, r3
 8015166:	d002      	beq.n	801516e <__sflush_r+0x92>
 8015168:	4628      	mov	r0, r5
 801516a:	f000 f8e1 	bl	8015330 <_free_r>
 801516e:	2000      	movs	r0, #0
 8015170:	6360      	str	r0, [r4, #52]	; 0x34
 8015172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015176:	6a21      	ldr	r1, [r4, #32]
 8015178:	2301      	movs	r3, #1
 801517a:	4628      	mov	r0, r5
 801517c:	47b0      	blx	r6
 801517e:	1c41      	adds	r1, r0, #1
 8015180:	d1c6      	bne.n	8015110 <__sflush_r+0x34>
 8015182:	682b      	ldr	r3, [r5, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d0c3      	beq.n	8015110 <__sflush_r+0x34>
 8015188:	2b1d      	cmp	r3, #29
 801518a:	d001      	beq.n	8015190 <__sflush_r+0xb4>
 801518c:	2b16      	cmp	r3, #22
 801518e:	d101      	bne.n	8015194 <__sflush_r+0xb8>
 8015190:	602f      	str	r7, [r5, #0]
 8015192:	e7b0      	b.n	80150f6 <__sflush_r+0x1a>
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801519a:	81a3      	strh	r3, [r4, #12]
 801519c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a0:	690f      	ldr	r7, [r1, #16]
 80151a2:	2f00      	cmp	r7, #0
 80151a4:	d0a7      	beq.n	80150f6 <__sflush_r+0x1a>
 80151a6:	0793      	lsls	r3, r2, #30
 80151a8:	680e      	ldr	r6, [r1, #0]
 80151aa:	bf08      	it	eq
 80151ac:	694b      	ldreq	r3, [r1, #20]
 80151ae:	600f      	str	r7, [r1, #0]
 80151b0:	bf18      	it	ne
 80151b2:	2300      	movne	r3, #0
 80151b4:	eba6 0807 	sub.w	r8, r6, r7
 80151b8:	608b      	str	r3, [r1, #8]
 80151ba:	f1b8 0f00 	cmp.w	r8, #0
 80151be:	dd9a      	ble.n	80150f6 <__sflush_r+0x1a>
 80151c0:	4643      	mov	r3, r8
 80151c2:	463a      	mov	r2, r7
 80151c4:	6a21      	ldr	r1, [r4, #32]
 80151c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80151c8:	4628      	mov	r0, r5
 80151ca:	47b0      	blx	r6
 80151cc:	2800      	cmp	r0, #0
 80151ce:	dc07      	bgt.n	80151e0 <__sflush_r+0x104>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151d6:	81a3      	strh	r3, [r4, #12]
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e0:	4407      	add	r7, r0
 80151e2:	eba8 0800 	sub.w	r8, r8, r0
 80151e6:	e7e8      	b.n	80151ba <__sflush_r+0xde>
 80151e8:	20400001 	.word	0x20400001

080151ec <_fflush_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	690b      	ldr	r3, [r1, #16]
 80151f0:	4605      	mov	r5, r0
 80151f2:	460c      	mov	r4, r1
 80151f4:	b1db      	cbz	r3, 801522e <_fflush_r+0x42>
 80151f6:	b118      	cbz	r0, 8015200 <_fflush_r+0x14>
 80151f8:	6983      	ldr	r3, [r0, #24]
 80151fa:	b90b      	cbnz	r3, 8015200 <_fflush_r+0x14>
 80151fc:	f7ff fa7a 	bl	80146f4 <__sinit>
 8015200:	4b0c      	ldr	r3, [pc, #48]	; (8015234 <_fflush_r+0x48>)
 8015202:	429c      	cmp	r4, r3
 8015204:	d109      	bne.n	801521a <_fflush_r+0x2e>
 8015206:	686c      	ldr	r4, [r5, #4]
 8015208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801520c:	b17b      	cbz	r3, 801522e <_fflush_r+0x42>
 801520e:	4621      	mov	r1, r4
 8015210:	4628      	mov	r0, r5
 8015212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015216:	f7ff bf61 	b.w	80150dc <__sflush_r>
 801521a:	4b07      	ldr	r3, [pc, #28]	; (8015238 <_fflush_r+0x4c>)
 801521c:	429c      	cmp	r4, r3
 801521e:	d101      	bne.n	8015224 <_fflush_r+0x38>
 8015220:	68ac      	ldr	r4, [r5, #8]
 8015222:	e7f1      	b.n	8015208 <_fflush_r+0x1c>
 8015224:	4b05      	ldr	r3, [pc, #20]	; (801523c <_fflush_r+0x50>)
 8015226:	429c      	cmp	r4, r3
 8015228:	bf08      	it	eq
 801522a:	68ec      	ldreq	r4, [r5, #12]
 801522c:	e7ec      	b.n	8015208 <_fflush_r+0x1c>
 801522e:	2000      	movs	r0, #0
 8015230:	bd38      	pop	{r3, r4, r5, pc}
 8015232:	bf00      	nop
 8015234:	080180a0 	.word	0x080180a0
 8015238:	080180c0 	.word	0x080180c0
 801523c:	08018080 	.word	0x08018080

08015240 <_lseek_r>:
 8015240:	b538      	push	{r3, r4, r5, lr}
 8015242:	4c07      	ldr	r4, [pc, #28]	; (8015260 <_lseek_r+0x20>)
 8015244:	4605      	mov	r5, r0
 8015246:	4608      	mov	r0, r1
 8015248:	4611      	mov	r1, r2
 801524a:	2200      	movs	r2, #0
 801524c:	6022      	str	r2, [r4, #0]
 801524e:	461a      	mov	r2, r3
 8015250:	f7ff f945 	bl	80144de <_lseek>
 8015254:	1c43      	adds	r3, r0, #1
 8015256:	d102      	bne.n	801525e <_lseek_r+0x1e>
 8015258:	6823      	ldr	r3, [r4, #0]
 801525a:	b103      	cbz	r3, 801525e <_lseek_r+0x1e>
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	bd38      	pop	{r3, r4, r5, pc}
 8015260:	20007754 	.word	0x20007754

08015264 <__swhatbuf_r>:
 8015264:	b570      	push	{r4, r5, r6, lr}
 8015266:	460e      	mov	r6, r1
 8015268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801526c:	2900      	cmp	r1, #0
 801526e:	b090      	sub	sp, #64	; 0x40
 8015270:	4614      	mov	r4, r2
 8015272:	461d      	mov	r5, r3
 8015274:	da07      	bge.n	8015286 <__swhatbuf_r+0x22>
 8015276:	2300      	movs	r3, #0
 8015278:	602b      	str	r3, [r5, #0]
 801527a:	89b3      	ldrh	r3, [r6, #12]
 801527c:	061a      	lsls	r2, r3, #24
 801527e:	d410      	bmi.n	80152a2 <__swhatbuf_r+0x3e>
 8015280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015284:	e00e      	b.n	80152a4 <__swhatbuf_r+0x40>
 8015286:	aa01      	add	r2, sp, #4
 8015288:	f000 f8b2 	bl	80153f0 <_fstat_r>
 801528c:	2800      	cmp	r0, #0
 801528e:	dbf2      	blt.n	8015276 <__swhatbuf_r+0x12>
 8015290:	9a02      	ldr	r2, [sp, #8]
 8015292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801529a:	425a      	negs	r2, r3
 801529c:	415a      	adcs	r2, r3
 801529e:	602a      	str	r2, [r5, #0]
 80152a0:	e7ee      	b.n	8015280 <__swhatbuf_r+0x1c>
 80152a2:	2340      	movs	r3, #64	; 0x40
 80152a4:	2000      	movs	r0, #0
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	b010      	add	sp, #64	; 0x40
 80152aa:	bd70      	pop	{r4, r5, r6, pc}

080152ac <__smakebuf_r>:
 80152ac:	898b      	ldrh	r3, [r1, #12]
 80152ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152b0:	079d      	lsls	r5, r3, #30
 80152b2:	4606      	mov	r6, r0
 80152b4:	460c      	mov	r4, r1
 80152b6:	d507      	bpl.n	80152c8 <__smakebuf_r+0x1c>
 80152b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152bc:	6023      	str	r3, [r4, #0]
 80152be:	6123      	str	r3, [r4, #16]
 80152c0:	2301      	movs	r3, #1
 80152c2:	6163      	str	r3, [r4, #20]
 80152c4:	b002      	add	sp, #8
 80152c6:	bd70      	pop	{r4, r5, r6, pc}
 80152c8:	ab01      	add	r3, sp, #4
 80152ca:	466a      	mov	r2, sp
 80152cc:	f7ff ffca 	bl	8015264 <__swhatbuf_r>
 80152d0:	9900      	ldr	r1, [sp, #0]
 80152d2:	4605      	mov	r5, r0
 80152d4:	4630      	mov	r0, r6
 80152d6:	f7ff fa97 	bl	8014808 <_malloc_r>
 80152da:	b948      	cbnz	r0, 80152f0 <__smakebuf_r+0x44>
 80152dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152e0:	059a      	lsls	r2, r3, #22
 80152e2:	d4ef      	bmi.n	80152c4 <__smakebuf_r+0x18>
 80152e4:	f023 0303 	bic.w	r3, r3, #3
 80152e8:	f043 0302 	orr.w	r3, r3, #2
 80152ec:	81a3      	strh	r3, [r4, #12]
 80152ee:	e7e3      	b.n	80152b8 <__smakebuf_r+0xc>
 80152f0:	4b0d      	ldr	r3, [pc, #52]	; (8015328 <__smakebuf_r+0x7c>)
 80152f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80152f4:	89a3      	ldrh	r3, [r4, #12]
 80152f6:	6020      	str	r0, [r4, #0]
 80152f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152fc:	81a3      	strh	r3, [r4, #12]
 80152fe:	9b00      	ldr	r3, [sp, #0]
 8015300:	6163      	str	r3, [r4, #20]
 8015302:	9b01      	ldr	r3, [sp, #4]
 8015304:	6120      	str	r0, [r4, #16]
 8015306:	b15b      	cbz	r3, 8015320 <__smakebuf_r+0x74>
 8015308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801530c:	4630      	mov	r0, r6
 801530e:	f000 f881 	bl	8015414 <_isatty_r>
 8015312:	b128      	cbz	r0, 8015320 <__smakebuf_r+0x74>
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	f023 0303 	bic.w	r3, r3, #3
 801531a:	f043 0301 	orr.w	r3, r3, #1
 801531e:	81a3      	strh	r3, [r4, #12]
 8015320:	89a3      	ldrh	r3, [r4, #12]
 8015322:	431d      	orrs	r5, r3
 8015324:	81a5      	strh	r5, [r4, #12]
 8015326:	e7cd      	b.n	80152c4 <__smakebuf_r+0x18>
 8015328:	08014675 	.word	0x08014675

0801532c <__malloc_lock>:
 801532c:	4770      	bx	lr

0801532e <__malloc_unlock>:
 801532e:	4770      	bx	lr

08015330 <_free_r>:
 8015330:	b538      	push	{r3, r4, r5, lr}
 8015332:	4605      	mov	r5, r0
 8015334:	2900      	cmp	r1, #0
 8015336:	d045      	beq.n	80153c4 <_free_r+0x94>
 8015338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801533c:	1f0c      	subs	r4, r1, #4
 801533e:	2b00      	cmp	r3, #0
 8015340:	bfb8      	it	lt
 8015342:	18e4      	addlt	r4, r4, r3
 8015344:	f7ff fff2 	bl	801532c <__malloc_lock>
 8015348:	4a1f      	ldr	r2, [pc, #124]	; (80153c8 <_free_r+0x98>)
 801534a:	6813      	ldr	r3, [r2, #0]
 801534c:	4610      	mov	r0, r2
 801534e:	b933      	cbnz	r3, 801535e <_free_r+0x2e>
 8015350:	6063      	str	r3, [r4, #4]
 8015352:	6014      	str	r4, [r2, #0]
 8015354:	4628      	mov	r0, r5
 8015356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801535a:	f7ff bfe8 	b.w	801532e <__malloc_unlock>
 801535e:	42a3      	cmp	r3, r4
 8015360:	d90c      	bls.n	801537c <_free_r+0x4c>
 8015362:	6821      	ldr	r1, [r4, #0]
 8015364:	1862      	adds	r2, r4, r1
 8015366:	4293      	cmp	r3, r2
 8015368:	bf04      	itt	eq
 801536a:	681a      	ldreq	r2, [r3, #0]
 801536c:	685b      	ldreq	r3, [r3, #4]
 801536e:	6063      	str	r3, [r4, #4]
 8015370:	bf04      	itt	eq
 8015372:	1852      	addeq	r2, r2, r1
 8015374:	6022      	streq	r2, [r4, #0]
 8015376:	6004      	str	r4, [r0, #0]
 8015378:	e7ec      	b.n	8015354 <_free_r+0x24>
 801537a:	4613      	mov	r3, r2
 801537c:	685a      	ldr	r2, [r3, #4]
 801537e:	b10a      	cbz	r2, 8015384 <_free_r+0x54>
 8015380:	42a2      	cmp	r2, r4
 8015382:	d9fa      	bls.n	801537a <_free_r+0x4a>
 8015384:	6819      	ldr	r1, [r3, #0]
 8015386:	1858      	adds	r0, r3, r1
 8015388:	42a0      	cmp	r0, r4
 801538a:	d10b      	bne.n	80153a4 <_free_r+0x74>
 801538c:	6820      	ldr	r0, [r4, #0]
 801538e:	4401      	add	r1, r0
 8015390:	1858      	adds	r0, r3, r1
 8015392:	4282      	cmp	r2, r0
 8015394:	6019      	str	r1, [r3, #0]
 8015396:	d1dd      	bne.n	8015354 <_free_r+0x24>
 8015398:	6810      	ldr	r0, [r2, #0]
 801539a:	6852      	ldr	r2, [r2, #4]
 801539c:	605a      	str	r2, [r3, #4]
 801539e:	4401      	add	r1, r0
 80153a0:	6019      	str	r1, [r3, #0]
 80153a2:	e7d7      	b.n	8015354 <_free_r+0x24>
 80153a4:	d902      	bls.n	80153ac <_free_r+0x7c>
 80153a6:	230c      	movs	r3, #12
 80153a8:	602b      	str	r3, [r5, #0]
 80153aa:	e7d3      	b.n	8015354 <_free_r+0x24>
 80153ac:	6820      	ldr	r0, [r4, #0]
 80153ae:	1821      	adds	r1, r4, r0
 80153b0:	428a      	cmp	r2, r1
 80153b2:	bf04      	itt	eq
 80153b4:	6811      	ldreq	r1, [r2, #0]
 80153b6:	6852      	ldreq	r2, [r2, #4]
 80153b8:	6062      	str	r2, [r4, #4]
 80153ba:	bf04      	itt	eq
 80153bc:	1809      	addeq	r1, r1, r0
 80153be:	6021      	streq	r1, [r4, #0]
 80153c0:	605c      	str	r4, [r3, #4]
 80153c2:	e7c7      	b.n	8015354 <_free_r+0x24>
 80153c4:	bd38      	pop	{r3, r4, r5, pc}
 80153c6:	bf00      	nop
 80153c8:	20003fd8 	.word	0x20003fd8

080153cc <_read_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	4c07      	ldr	r4, [pc, #28]	; (80153ec <_read_r+0x20>)
 80153d0:	4605      	mov	r5, r0
 80153d2:	4608      	mov	r0, r1
 80153d4:	4611      	mov	r1, r2
 80153d6:	2200      	movs	r2, #0
 80153d8:	6022      	str	r2, [r4, #0]
 80153da:	461a      	mov	r2, r3
 80153dc:	f7fe fff0 	bl	80143c0 <_read>
 80153e0:	1c43      	adds	r3, r0, #1
 80153e2:	d102      	bne.n	80153ea <_read_r+0x1e>
 80153e4:	6823      	ldr	r3, [r4, #0]
 80153e6:	b103      	cbz	r3, 80153ea <_read_r+0x1e>
 80153e8:	602b      	str	r3, [r5, #0]
 80153ea:	bd38      	pop	{r3, r4, r5, pc}
 80153ec:	20007754 	.word	0x20007754

080153f0 <_fstat_r>:
 80153f0:	b538      	push	{r3, r4, r5, lr}
 80153f2:	4c07      	ldr	r4, [pc, #28]	; (8015410 <_fstat_r+0x20>)
 80153f4:	2300      	movs	r3, #0
 80153f6:	4605      	mov	r5, r0
 80153f8:	4608      	mov	r0, r1
 80153fa:	4611      	mov	r1, r2
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	f7ff f853 	bl	80144a8 <_fstat>
 8015402:	1c43      	adds	r3, r0, #1
 8015404:	d102      	bne.n	801540c <_fstat_r+0x1c>
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	b103      	cbz	r3, 801540c <_fstat_r+0x1c>
 801540a:	602b      	str	r3, [r5, #0]
 801540c:	bd38      	pop	{r3, r4, r5, pc}
 801540e:	bf00      	nop
 8015410:	20007754 	.word	0x20007754

08015414 <_isatty_r>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	4c06      	ldr	r4, [pc, #24]	; (8015430 <_isatty_r+0x1c>)
 8015418:	2300      	movs	r3, #0
 801541a:	4605      	mov	r5, r0
 801541c:	4608      	mov	r0, r1
 801541e:	6023      	str	r3, [r4, #0]
 8015420:	f7ff f852 	bl	80144c8 <_isatty>
 8015424:	1c43      	adds	r3, r0, #1
 8015426:	d102      	bne.n	801542e <_isatty_r+0x1a>
 8015428:	6823      	ldr	r3, [r4, #0]
 801542a:	b103      	cbz	r3, 801542e <_isatty_r+0x1a>
 801542c:	602b      	str	r3, [r5, #0]
 801542e:	bd38      	pop	{r3, r4, r5, pc}
 8015430:	20007754 	.word	0x20007754

08015434 <_init>:
 8015434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015436:	bf00      	nop
 8015438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801543a:	bc08      	pop	{r3}
 801543c:	469e      	mov	lr, r3
 801543e:	4770      	bx	lr

08015440 <_fini>:
 8015440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015442:	bf00      	nop
 8015444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015446:	bc08      	pop	{r3}
 8015448:	469e      	mov	lr, r3
 801544a:	4770      	bx	lr
